; ModuleID = 'main_module'
source_filename = "main_module"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx"

%String = type { i32, i32, i32, i8 }
%"Array(String)" = type { i32, i32, i32, %String** }
%"Array(Pointer(Void)).2" = type { i32, i32, i32, i8** }
%Fiber = type { i32, i8*, %"(Event::Event | Nil)", i8*, i8*, %Fiber*, %Fiber*, %String*, %"(Proc(Nil) | Proc(Void))" }
%"(Event::Event | Nil)" = type { i32, [2 x i64] }
%"(Proc(Nil) | Proc(Void))" = type { i32, [2 x i64] }
%Thread = type { i32, i8*, i32*, i1, %"->", %Fiber* }
%"->" = type { i8*, i8* }
%"Set(Thread)" = type { %"Hash(Thread, Nil)"* }
%"Hash(Thread, Nil)" = type { i32, i32, i32, %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"*, %"->", %"Hash::Entry(Thread, Nil)"** }
%"Hash::Entry(Thread, Nil)" = type { i32, %Thread*, %Nil, %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"* }
%Nil = type {}
%"Array(Int32)" = type { i32, i32, i32, i32* }
%"Deque(Fiber)" = type { i32, i32, i32, i32, %Fiber** }
%"Event::Base" = type { i8* }
%"IO::FileDescriptor" = type { i32, %"IO::Encoder"*, %"IO::Decoder"*, %"(IO::EncodingOptions | Nil)", %"Slice(UInt8)", i32, i1, i1, i8*, i8*, %"(Float64 | Nil)", %"(Float64 | Nil)", %"(Event::Event | Nil)", %"(Event::Event | Nil)", i1, i1, i32, i1, i1, %"Deque(Fiber)"*, %"Deque(Fiber)"* }
%"IO::Encoder" = type { i32, %"IO::EncodingOptions", %Iconv, i1 }
%"IO::EncodingOptions" = type { %String*, %"(Symbol | Nil)" }
%"(Symbol | Nil)" = type { i32, [1 x i64] }
%Iconv = type { i1, i8* }
%"IO::Decoder" = type { i32, %"Slice(UInt8)", i8*, %"IO::EncodingOptions", %Iconv, %"Slice(UInt8)", i64, %"Slice(UInt8)", i1 }
%"(IO::EncodingOptions | Nil)" = type { i32, [3 x i64] }
%"Slice(UInt8)" = type { i32, i8* }
%"(Float64 | Nil)" = type { i32, [1 x i64] }
%"(Debug::DWARF::LineNumbers | Nil)" = type { i32, [6 x i64] }
%"(Int64 | Nil)" = type { i32, [1 x i64] }
%"Event::SignalHandler" = type { i32, i32*, i32*, %"Hash(Signal, Proc(Signal, Nil))"* }
%"Hash(Signal, Proc(Signal, Nil))" = type { i32, i32, i32, %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"->", %"Hash::Entry(Signal, Proc(Signal, Nil))"** }
%"Hash::Entry(Signal, Proc(Signal, Nil))" = type { i32, i32, %"->", %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"* }
%"Event::SignalChildHandler" = type { i32, %"Hash(Int32, Process::Status)"*, %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* }
%"Hash(Int32, Process::Status)" = type { i32, i32, i32, %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"*, %"->", %"Hash::Entry(Int32, Process::Status)"** }
%"Hash::Entry(Int32, Process::Status)" = type { i32, i32, %"Process::Status"*, %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"* }
%"Process::Status" = type { i32, i32 }
%"Hash(Int32, Channel::Buffered(Process::Status | Nil))" = type { i32, i32, i32, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"->", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** }
%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))" = type { i32, i32, %"Channel::Buffered(Process::Status | Nil)"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* }
%"Channel::Buffered(Process::Status | Nil)" = type { i32, i1, %"Deque(Fiber)"*, %"Deque(Fiber)"*, i32, %"Deque(Process::Status | Nil)"* }
%"Deque(Process::Status | Nil)" = type { i32, i32, i32, i32, %"Process::Status"** }
%"Array(Proc(Int32, Nil))" = type { i32, i32, i32, %"->"* }
%"struct.LibUnwind::Exception" = type { i64, i64, i64, i64, i64, i32 }
%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader" = type { i8* }
%ArgumentError = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"(CallStack | Nil)" = type { i32, [2 x i64] }
%CallStack.1 = type { %"Array(Pointer(Void)).2"*, %"Array(String)"* }
%Exception = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"(Int32 | Nil)" = type { i32, [1 x i64] }
%"String::Builder" = type { i32, %"IO::Encoder"*, %"IO::Decoder"*, %"(IO::EncodingOptions | Nil)", i32, i32, i8*, i1 }
%Errno = type { i32, %String*, i32*, %"(CallStack | Nil)", i32 }
%"Tuple(Int32, Int32, Int32)" = type { i32, i32, i32 }
%IndexError = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"Tuple(UInt64, Int32)" = type { i64, i32 }
%"(UInt64 | Nil)" = type { i32, [1 x i64] }
%InvalidByteSequenceError = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%DivisionByZero = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"Event::Event.6" = type { i8*, i1 }
%landing_pad = type { i8*, i32 }
%"(Bool | Deque(Fiber) | Nil)" = type { i32, [1 x i64] }
%"IO::Error" = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"struct.LibC::Timeval" = type { i64, i32 }
%"IO::Timeout" = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"(Pointer(Pointer(Void)) | Pointer(Void))" = type { i32, [1 x i64] }
%"Tuple(StaticArray(UInt8, 4), Int32)" = type { [4 x i8], i32 }
%"(IO::FileDescriptor | Int32 | Nil)" = type { i32, [1 x i64] }
%"Tuple(String | Nil, Int32, Int32)" = type { %String*, i32, i32 }
%"(Tuple(Int64, Pointer(UInt8)) | Nil)" = type { i32, [2 x i64] }
%"Tuple(Int64, Pointer(UInt8)).16" = type { i64, i8* }
%"(Debug::DWARF::LineNumbers::Row | Nil)" = type { i32, [4 x i64] }
%"Tuple(String, Int32, Int32)" = type { %String*, i32, i32 }
%"Debug::DWARF::LineNumbers.17" = type { %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"*, %"Array(String)"*, %"Array(String)"*, i64, %"Array(Debug::DWARF::LineNumbers::Row).19"*, i32* }
%"Array(Array(Debug::DWARF::LineNumbers::Row)).18" = type { i32, i32, i32, %"Array(Debug::DWARF::LineNumbers::Row).19"** }
%"Array(Debug::DWARF::LineNumbers::Row).19" = type { i32, i32, i32, %"Debug::DWARF::LineNumbers::Row.20"* }
%"Debug::DWARF::LineNumbers::Row.20" = type { i64, i32, i32, i32, i32, i32, i1 }
%"Debug::MachO" = type { i32, i32, i32, i32, i32, i32, i32, i64, %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::Symtab | Nil)", %"Array(Debug::MachO::StabEntry)"*, %"Array(Debug::MachO::Nlist64)"*, i32*, %"Array(Debug::MachO::Segment64)"*, %"Array(Debug::MachO::Section64)"* }
%"(Debug::MachO::UUID | Nil)" = type { i32, [2 x i64] }
%"(Debug::MachO::Symtab | Nil)" = type { i32, [8 x i64] }
%"Array(Debug::MachO::StabEntry)" = type { i32, i32, i32, %"Debug::MachO::StabEntry"* }
%"Debug::MachO::StabEntry" = type { i8, %String*, i8, i16, i64 }
%"Array(Debug::MachO::Nlist64)" = type { i32, i32, i32, %"Debug::MachO::Nlist64"* }
%"Debug::MachO::Nlist64" = type { %"(UInt32 | Nil).21", %"(Debug::MachO::Nlist64::Type | Nil)", %"(UInt8 | Nil)", %"(UInt16 | Nil)", %"(UInt64 | Nil)", %String* }
%"(UInt32 | Nil).21" = type { i32, [1 x i64] }
%"(Debug::MachO::Nlist64::Type | Nil)" = type { i32, [1 x i64] }
%"(UInt8 | Nil)" = type { i32, [1 x i64] }
%"(UInt16 | Nil)" = type { i32, [1 x i64] }
%"Array(Debug::MachO::Segment64)" = type { i32, i32, i32, %"Debug::MachO::Segment64"* }
%"Debug::MachO::Segment64" = type { %String*, %"(UInt64 | Nil)", %"(UInt64 | Nil)", %"(UInt64 | Nil)", %"(UInt64 | Nil)", %"(UInt32 | Nil).21", %"(UInt32 | Nil).21", %"(UInt32 | Nil).21", %"(UInt32 | Nil).21" }
%"Array(Debug::MachO::Section64)" = type { i32, i32, i32, %"Debug::MachO::Section64"* }
%"Debug::MachO::Section64" = type { %"Debug::MachO::Segment64", %String*, %String*, %"(UInt64 | Nil)", %"(UInt64 | Nil)", %"(UInt32 | Nil).21", %"(UInt32 | Nil).21", %"(UInt32 | Nil).21", %"(UInt32 | Nil).21", %"(UInt32 | Nil).21" }
%"Tuple(String, String)" = type { %String*, %String* }
%File = type { i32, %"IO::Encoder"*, %"IO::Decoder"*, %"(IO::EncodingOptions | Nil)", %"Slice(UInt8)", i32, i1, i1, i8*, i8*, %"(Float64 | Nil)", %"(Float64 | Nil)", %"(Event::Event | Nil)", %"(Event::Event | Nil)", i1, i1, i32, i1, i1, %"Deque(Fiber)"*, %"Deque(Fiber)"*, %String* }
%"Debug::MachO::UUID.22" = type { [16 x i8] }
%"(Debug::MachO::Section64 | Nil)" = type { i32, [33 x i64] }
%"Char::Reader" = type { %String*, i32, i32, i32, i1 }
%"Tuple(Int32, Int32)" = type { i32, i32 }
%"Range(Int32, Int32)" = type { i32, i32, i1 }
%"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" = type { i32, [1 x i64] }
%"Debug::MachO::Error" = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"IO::EOFError" = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"Debug::DWARF::LineNumbers::Sequence" = type { %"(Int64 | Nil)", %"(UInt32 | Nil).21", %"(UInt16 | Nil)", %"(UInt32 | Nil).21", %"(UInt8 | Nil)", i8, %"(Bool | Nil)", %"(Int8 | Nil)", %"(UInt8 | Nil)", %"(UInt8 | Nil)", %"Array(String)"*, %"Array(Tuple(String, Int32, Int32, Int32))"*, %"Array(UInt8)"* }
%"(Bool | Nil)" = type { i32, [1 x i64] }
%"(Int8 | Nil)" = type { i32, [1 x i64] }
%"Array(Tuple(String, Int32, Int32, Int32))" = type { i32, i32, i32, %"Tuple(String, Int32, Int32, Int32)"* }
%"Tuple(String, Int32, Int32, Int32)" = type { %String*, i32, i32, i32 }
%"Array(UInt8)" = type { i32, i32, i32, i8* }
%"(Bool | IO::EncodingOptions | Nil)" = type { i32, [3 x i64] }
%"(Tuple(Char, Int32) | Nil)" = type { i32, [1 x i64] }
%"Tuple(Char, Int32).26" = type { i32, i32 }
%"(Bool | IO::Decoder | Nil)" = type { i32, [1 x i64] }
%"(Bool | IO::EncodingOptions)" = type { i32, [3 x i64] }
%"(UInt32 | UInt8 | Nil)" = type { i32, [1 x i64] }
%"Debug::DWARF::LineNumbers::Register" = type { i64, i32, i32, i32, i32, i1, i1, i1, i1, i1, i32, i32 }
%"(Int32 | UInt8)" = type { i32, [1 x i64] }
%"(Int32 | UInt32 | UInt8)" = type { i32, [1 x i64] }
%"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)" = type { i32, [5 x i64] }
%"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)" = type { i32, [5 x i64] }
%"(Int32 | UInt32)" = type { i32, [1 x i64] }
%"(Bool | UInt32 | UInt64 | Nil)" = type { i32, [1 x i64] }
%"(UInt32 | UInt64)" = type { i32, [1 x i64] }
%"(Bool | UInt32 | Nil)" = type { i32, [1 x i64] }
%"struct.LibC::DlInfo" = type { i8*, i8*, i8*, i8* }
%"Tuple(Pointer(Void), Pointer(Void))" = type { i8*, i8* }
%"Tuple(Signal, Proc(Signal, Nil))" = type { i32, %"->" }
%"Tuple(IO::FileDescriptor, IO::FileDescriptor)" = type { %"IO::FileDescriptor"*, %"IO::FileDescriptor"* }
%closure = type { %"Event::SignalHandler"* }
%"Channel::ClosedError" = type { i32, %String*, i32*, %"(CallStack | Nil)" }
%"Tuple(Char, String)" = type { i32, %String* }
%"(Char | String)" = type { i32, [1 x i64] }
%"CallStack::RepeatedFrame" = type { i8*, i32 }

@"'skip'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"skip\00" }
@":symbol_table" = global [1 x %String*] [%String* bitcast ({ i32, i32, i32, [5 x i8] }* @"'skip'" to %String*)]
@ARGC_UNSAFE = internal global i32 0
@ARGV_UNSAFE = internal global i8** null
@"LibUnwind::Action::SEARCH_PHASE" = internal constant i32 1
@"LibUnwind::Action::CLEANUP_PHASE" = internal constant i32 2
@"LibUnwind::Action::HANDLER_FRAME" = internal constant i32 4
@"LibUnwind::Action::FORCE_UNWIND" = internal constant i32 8
@"LibUnwind::Action::END_OF_STACK" = internal constant i32 16
@"LibUnwind::Action::None" = internal constant i32 0
@"LibUnwind::Action::All" = internal constant i32 31
@"LibUnwind::ReasonCode::NO_REASON" = internal constant i32 0
@"LibUnwind::ReasonCode::FOREIGN_EXCEPTION_CAUGHT" = internal constant i32 1
@"LibUnwind::ReasonCode::FATAL_PHASE2_ERROR" = internal constant i32 2
@"LibUnwind::ReasonCode::FATAL_PHASE1_ERROR" = internal constant i32 3
@"LibUnwind::ReasonCode::NORMAL_STOP" = internal constant i32 4
@"LibUnwind::ReasonCode::END_OF_STACK" = internal constant i32 5
@"LibUnwind::ReasonCode::HANDLER_FOUND" = internal constant i32 6
@"LibUnwind::ReasonCode::INSTALL_CONTEXT" = internal constant i32 7
@"LibUnwind::ReasonCode::CONTINUE_UNWIND" = internal constant i32 8
@"Debug::MachO::CpuType::ANY" = internal constant i32 -1
@"Debug::MachO::CpuType::VAX" = internal constant i32 1
@"Debug::MachO::CpuType::MC680x0" = internal constant i32 6
@"Debug::MachO::CpuType::X86" = internal constant i32 7
@"Debug::MachO::CpuType::X86_64" = internal constant i32 16777223
@"Debug::MachO::CpuType::MC98000" = internal constant i32 10
@"Debug::MachO::CpuType::HPPA" = internal constant i32 11
@"Debug::MachO::CpuType::ARM" = internal constant i32 12
@"Debug::MachO::CpuType::MC88000" = internal constant i32 13
@"Debug::MachO::CpuType::SPARC" = internal constant i32 14
@"Debug::MachO::CpuType::I860" = internal constant i32 15
@"Debug::MachO::CpuType::POWERPC" = internal constant i32 18
@"Debug::MachO::CpuType::POWERPC64" = internal constant i32 16777234
@"Debug::MachO::FileType::OBJECT" = internal constant i32 1
@"Debug::MachO::FileType::EXECUTE" = internal constant i32 2
@"Debug::MachO::FileType::FVMLIB" = internal constant i32 3
@"Debug::MachO::FileType::CORE" = internal constant i32 4
@"Debug::MachO::FileType::PRELOAD" = internal constant i32 5
@"Debug::MachO::FileType::DYLIB" = internal constant i32 6
@"Debug::MachO::FileType::DYLINKER" = internal constant i32 7
@"Debug::MachO::FileType::BUNDLE" = internal constant i32 8
@"Debug::MachO::FileType::DYLIB_STUB" = internal constant i32 9
@"Debug::MachO::FileType::DSYM" = internal constant i32 10
@"Debug::MachO::FileType::KEXT_BUNDLE" = internal constant i32 11
@"Debug::MachO::Flags::NOUNDEFS" = internal constant i32 1
@"Debug::MachO::Flags::INCRLINK" = internal constant i32 2
@"Debug::MachO::Flags::DYLDLINK" = internal constant i32 4
@"Debug::MachO::Flags::BINDATLOAD" = internal constant i32 8
@"Debug::MachO::Flags::PREBOUND" = internal constant i32 16
@"Debug::MachO::Flags::SPLIT_SEGS" = internal constant i32 32
@"Debug::MachO::Flags::LAZY_INIT" = internal constant i32 64
@"Debug::MachO::Flags::TWOLEVEL" = internal constant i32 128
@"Debug::MachO::Flags::FORCE_FLAT" = internal constant i32 256
@"Debug::MachO::Flags::NOMULTIDEFS" = internal constant i32 512
@"Debug::MachO::Flags::NOFIXPREBINDING" = internal constant i32 1024
@"Debug::MachO::Flags::PREBINDABLE" = internal constant i32 2048
@"Debug::MachO::Flags::ALLMODSBOUND" = internal constant i32 4096
@"Debug::MachO::Flags::SUBSECTIONS_VIA_SYMBOLS" = internal constant i32 8192
@"Debug::MachO::Flags::CANONICAL" = internal constant i32 16384
@"Debug::MachO::Flags::WEAK_DEFINES" = internal constant i32 32768
@"Debug::MachO::Flags::BINDS_TO_WEAK" = internal constant i32 65536
@"Debug::MachO::Flags::ALLOW_STACK_EXECUTION" = internal constant i32 131072
@"Debug::MachO::Flags::ROOT_SAFE" = internal constant i32 262144
@"Debug::MachO::Flags::SETUID_SAFE" = internal constant i32 524288
@"Debug::MachO::Flags::NO_REEXPORTED_DYLIBS" = internal constant i32 1048576
@"Debug::MachO::Flags::PIE" = internal constant i32 2097152
@"Debug::MachO::Flags::DEAD_STRIPPABLE_DYLIB" = internal constant i32 4194304
@"Debug::MachO::Flags::HAS_TLV_DESCRIPTORS" = internal constant i32 8388608
@"Debug::MachO::Flags::NO_HEAP_EXECUTION" = internal constant i32 16777216
@"Debug::MachO::Flags::None" = internal constant i32 0
@"Debug::MachO::Flags::All" = internal constant i32 33554431
@"Debug::MachO::LoadCommand::SEGMENT" = internal constant i32 1
@"Debug::MachO::LoadCommand::SYMTAB" = internal constant i32 2
@"Debug::MachO::LoadCommand::SYMSEG" = internal constant i32 3
@"Debug::MachO::LoadCommand::THREAD" = internal constant i32 4
@"Debug::MachO::LoadCommand::UNIXTHREAD" = internal constant i32 5
@"Debug::MachO::LoadCommand::LOADFVMLIB" = internal constant i32 6
@"Debug::MachO::LoadCommand::IDFVMLIB" = internal constant i32 7
@"Debug::MachO::LoadCommand::IDENT" = internal constant i32 8
@"Debug::MachO::LoadCommand::FVMFILE" = internal constant i32 9
@"Debug::MachO::LoadCommand::PREPAGE" = internal constant i32 10
@"Debug::MachO::LoadCommand::DYSYMTAB" = internal constant i32 11
@"Debug::MachO::LoadCommand::LOAD_DYLIB" = internal constant i32 12
@"Debug::MachO::LoadCommand::ID_DYLIB" = internal constant i32 13
@"Debug::MachO::LoadCommand::LOAD_DYLINKER" = internal constant i32 14
@"Debug::MachO::LoadCommand::ID_DYLINKER" = internal constant i32 15
@"Debug::MachO::LoadCommand::PREBOUND_DYLIB" = internal constant i32 16
@"Debug::MachO::LoadCommand::ROUTINES" = internal constant i32 17
@"Debug::MachO::LoadCommand::SUB_FRAMEWORK" = internal constant i32 18
@"Debug::MachO::LoadCommand::SUB_UMBRELLA" = internal constant i32 19
@"Debug::MachO::LoadCommand::SUB_CLIENT" = internal constant i32 20
@"Debug::MachO::LoadCommand::SUB_LIBRARY" = internal constant i32 21
@"Debug::MachO::LoadCommand::TWOLEVEL_HINTS" = internal constant i32 22
@"Debug::MachO::LoadCommand::PREBIND_CKSUM" = internal constant i32 23
@"Debug::MachO::LoadCommand::LOAD_WEAK_DYLIB" = internal constant i32 -2147483624
@"Debug::MachO::LoadCommand::SEGMENT_64" = internal constant i32 25
@"Debug::MachO::LoadCommand::ROUTINES_64" = internal constant i32 26
@"Debug::MachO::LoadCommand::UUID" = internal constant i32 27
@"Debug::MachO::LoadCommand::RPATH" = internal constant i32 -2147483620
@"Debug::MachO::LoadCommand::CODE_SIGNATURE" = internal constant i32 29
@"Debug::MachO::LoadCommand::SEGMENT_SPLIT_INFO" = internal constant i32 30
@"Debug::MachO::LoadCommand::REEXPORT_DYLIB" = internal constant i32 -2147483617
@"Debug::MachO::LoadCommand::LAZY_LOAD_DYLIB" = internal constant i32 32
@"Debug::MachO::LoadCommand::ENCRYPTION_INFO" = internal constant i32 33
@"Debug::MachO::LoadCommand::DYLD_INFO" = internal constant i32 34
@"Debug::MachO::LoadCommand::DYLD_INFO_ONLY" = internal constant i32 -2147483614
@"Debug::MachO::LoadCommand::LOAD_UPWARD_DYLIB" = internal constant i32 -2147483613
@"Debug::MachO::LoadCommand::VERSION_MIN_MACOSX" = internal constant i32 36
@"Debug::MachO::LoadCommand::VERSION_MIN_IPHONEOS" = internal constant i32 37
@"Debug::MachO::LoadCommand::FUNCTION_STARTS" = internal constant i32 38
@"Debug::MachO::LoadCommand::DYLD_ENVIRONMENT" = internal constant i32 39
@"Debug::MachO::LoadCommand::MAIN" = internal constant i32 -2147483608
@"Debug::MachO::LoadCommand::DATA_IN_CODE" = internal constant i32 41
@"Debug::MachO::LoadCommand::SOURCE_VERSION" = internal constant i32 42
@"Debug::MachO::LoadCommand::DYLIB_CODE_SIGN_DRS" = internal constant i32 43
@"Debug::MachO::LoadCommand::ENCRYPTION_INFO_64" = internal constant i32 44
@"Debug::MachO::LoadCommand::LINKER_OPTION" = internal constant i32 45
@"Debug::MachO::Stab::GSYM" = internal constant i8 32
@"Debug::MachO::Stab::FNAME" = internal constant i8 34
@"Debug::MachO::Stab::FUN" = internal constant i8 36
@"Debug::MachO::Stab::STSYM" = internal constant i8 38
@"Debug::MachO::Stab::LCSYM" = internal constant i8 40
@"Debug::MachO::Stab::BNSYM" = internal constant i8 46
@"Debug::MachO::Stab::OPT" = internal constant i8 60
@"Debug::MachO::Stab::RSYM" = internal constant i8 64
@"Debug::MachO::Stab::SLINE" = internal constant i8 68
@"Debug::MachO::Stab::ENSYM" = internal constant i8 78
@"Debug::MachO::Stab::SSYM" = internal constant i8 96
@"Debug::MachO::Stab::SO" = internal constant i8 100
@"Debug::MachO::Stab::OSO" = internal constant i8 102
@"Debug::MachO::Stab::LSYM" = internal constant i8 -128
@"Debug::MachO::Stab::BINCL" = internal constant i8 -126
@"Debug::MachO::Stab::SOL" = internal constant i8 -124
@"Debug::MachO::Stab::PARAMS" = internal constant i8 -122
@"Debug::MachO::Stab::VERSION" = internal constant i8 -120
@"Debug::MachO::Stab::OLEVEL" = internal constant i8 -118
@"Debug::MachO::Stab::PSYM" = internal constant i8 -96
@"Debug::MachO::Stab::EINCL" = internal constant i8 -94
@"Debug::MachO::Stab::ENTRY" = internal constant i8 -92
@"Debug::MachO::Stab::LBRAC" = internal constant i8 -64
@"Debug::MachO::Stab::EXCL" = internal constant i8 -62
@"Debug::MachO::Stab::RBRAC" = internal constant i8 -32
@"Debug::MachO::Stab::BCOMM" = internal constant i8 -30
@"Debug::MachO::Stab::ECOMM" = internal constant i8 -28
@"Debug::MachO::Stab::ECOML" = internal constant i8 -24
@"Debug::MachO::Stab::LENG" = internal constant i8 -2
@"Debug::DWARF::LNS::Copy" = internal constant i8 1
@"Debug::DWARF::LNS::AdvancePc" = internal constant i8 2
@"Debug::DWARF::LNS::AdvanceLine" = internal constant i8 3
@"Debug::DWARF::LNS::SetFile" = internal constant i8 4
@"Debug::DWARF::LNS::SetColumn" = internal constant i8 5
@"Debug::DWARF::LNS::NegateStmt" = internal constant i8 6
@"Debug::DWARF::LNS::SetBasicBlock" = internal constant i8 7
@"Debug::DWARF::LNS::ConstAddPc" = internal constant i8 8
@"Debug::DWARF::LNS::FixedAdvancePc" = internal constant i8 9
@"Debug::DWARF::LNS::SetPrologueEnd" = internal constant i8 10
@"Debug::DWARF::LNS::SetEpiloqueBegin" = internal constant i8 11
@"Debug::DWARF::LNS::SetIsa" = internal constant i8 12
@"Debug::DWARF::LNE::EndSequence" = internal constant i8 1
@"Debug::DWARF::LNE::SetAddress" = internal constant i8 2
@"Debug::DWARF::LNE::DefineFile" = internal constant i8 3
@"Debug::DWARF::LNE::SetDiscriminator" = internal constant i8 4
@"IO::Seek::Set" = internal constant i32 0
@"IO::Seek::Current" = internal constant i32 1
@"IO::Seek::End" = internal constant i32 2
@"Termios::InputMode::BRKINT" = internal constant i32 2
@"Termios::InputMode::ICRNL" = internal constant i32 256
@"Termios::InputMode::IGNBRK" = internal constant i32 1
@"Termios::InputMode::IGNCR" = internal constant i32 128
@"Termios::InputMode::IGNPAR" = internal constant i32 4
@"Termios::InputMode::INLCR" = internal constant i32 64
@"Termios::InputMode::INPCK" = internal constant i32 16
@"Termios::InputMode::ISTRIP" = internal constant i32 32
@"Termios::InputMode::IXANY" = internal constant i32 2048
@"Termios::InputMode::IXOFF" = internal constant i32 1024
@"Termios::InputMode::IXON" = internal constant i32 512
@"Termios::InputMode::PARMRK" = internal constant i32 8
@"Termios::InputMode::None" = internal constant i32 0
@"Termios::InputMode::All" = internal constant i32 4095
@"Termios::OutputMode::OPOST" = internal constant i32 1
@"Termios::OutputMode::ONLCR" = internal constant i32 2
@"Termios::OutputMode::OCRNL" = internal constant i32 16
@"Termios::OutputMode::ONOCR" = internal constant i32 32
@"Termios::OutputMode::ONLRET" = internal constant i32 64
@"Termios::OutputMode::OFDEL" = internal constant i32 131072
@"Termios::OutputMode::OFILL" = internal constant i32 128
@"Termios::OutputMode::CRDLY" = internal constant i32 12288
@"Termios::OutputMode::CR0" = internal constant i32 0
@"Termios::OutputMode::CR1" = internal constant i32 4096
@"Termios::OutputMode::CR2" = internal constant i32 8192
@"Termios::OutputMode::CR3" = internal constant i32 12288
@"Termios::OutputMode::TABDLY" = internal constant i32 3076
@"Termios::OutputMode::TAB0" = internal constant i32 0
@"Termios::OutputMode::TAB1" = internal constant i32 1024
@"Termios::OutputMode::TAB2" = internal constant i32 2048
@"Termios::OutputMode::TAB3" = internal constant i32 4
@"Termios::OutputMode::BSDLY" = internal constant i32 32768
@"Termios::OutputMode::BS0" = internal constant i32 0
@"Termios::OutputMode::BS1" = internal constant i32 32768
@"Termios::OutputMode::VTDLY" = internal constant i32 65536
@"Termios::OutputMode::VT0" = internal constant i32 0
@"Termios::OutputMode::VT1" = internal constant i32 65536
@"Termios::OutputMode::FFDLY" = internal constant i32 16384
@"Termios::OutputMode::FF0" = internal constant i32 0
@"Termios::OutputMode::FF1" = internal constant i32 16384
@"Termios::OutputMode::NLDLY" = internal constant i32 768
@"Termios::OutputMode::NL0" = internal constant i32 0
@"Termios::OutputMode::NL1" = internal constant i32 256
@"Termios::OutputMode::None" = internal constant i32 0
@"Termios::OutputMode::All" = internal constant i32 262135
@"Termios::BaudRate::B0" = internal constant i32 0
@"Termios::BaudRate::B50" = internal constant i32 50
@"Termios::BaudRate::B75" = internal constant i32 75
@"Termios::BaudRate::B110" = internal constant i32 110
@"Termios::BaudRate::B134" = internal constant i32 134
@"Termios::BaudRate::B150" = internal constant i32 150
@"Termios::BaudRate::B200" = internal constant i32 200
@"Termios::BaudRate::B300" = internal constant i32 300
@"Termios::BaudRate::B600" = internal constant i32 600
@"Termios::BaudRate::B1200" = internal constant i32 1200
@"Termios::BaudRate::B1800" = internal constant i32 1800
@"Termios::BaudRate::B2400" = internal constant i32 2400
@"Termios::BaudRate::B4800" = internal constant i32 4800
@"Termios::BaudRate::B9600" = internal constant i32 9600
@"Termios::BaudRate::B19200" = internal constant i32 19200
@"Termios::BaudRate::B38400" = internal constant i32 38400
@"Termios::ControlMode::CSIZE" = internal constant i32 768
@"Termios::ControlMode::CS5" = internal constant i32 0
@"Termios::ControlMode::CS6" = internal constant i32 256
@"Termios::ControlMode::CS7" = internal constant i32 512
@"Termios::ControlMode::CS8" = internal constant i32 768
@"Termios::ControlMode::CSTOPB" = internal constant i32 1024
@"Termios::ControlMode::CREAD" = internal constant i32 2048
@"Termios::ControlMode::PARENB" = internal constant i32 4096
@"Termios::ControlMode::PARODD" = internal constant i32 8192
@"Termios::ControlMode::HUPCL" = internal constant i32 16384
@"Termios::ControlMode::CLOCAL" = internal constant i32 32768
@"Termios::LocalMode::ECHO" = internal constant i64 8
@"Termios::LocalMode::ECHOE" = internal constant i64 2
@"Termios::LocalMode::ECHOK" = internal constant i64 4
@"Termios::LocalMode::ECHONL" = internal constant i64 16
@"Termios::LocalMode::ICANON" = internal constant i64 256
@"Termios::LocalMode::IEXTEN" = internal constant i64 1024
@"Termios::LocalMode::ISIG" = internal constant i64 128
@"Termios::LocalMode::NOFLSH" = internal constant i64 2147483648
@"Termios::LocalMode::TOSTOP" = internal constant i64 4194304
@"Termios::LocalMode::None" = internal constant i64 0
@"Termios::LocalMode::All" = internal constant i64 2151679390
@"Termios::AttributeSelection::TCSANOW" = internal constant i32 0
@"Termios::AttributeSelection::TCSADRAIN" = internal constant i32 1
@"Termios::AttributeSelection::TCSAFLUSH" = internal constant i32 2
@"Termios::AttributeSelection::None" = internal constant i32 0
@"Termios::AttributeSelection::All" = internal constant i32 3
@"Termios::LineControl::TCSANOW" = internal constant i32 0
@"Termios::LineControl::TCSADRAIN" = internal constant i32 1
@"Termios::LineControl::TCSAFLUSH" = internal constant i32 2
@"Termios::LineControl::TCIFLUSH" = internal constant i32 1
@"Termios::LineControl::TCIOFLUSH" = internal constant i32 3
@"Termios::LineControl::TCOFLUSH" = internal constant i32 2
@"Termios::LineControl::TCIOFF" = internal constant i32 3
@"Termios::LineControl::TCION" = internal constant i32 4
@"Termios::LineControl::TCOOFF" = internal constant i32 1
@"Termios::LineControl::TCOON" = internal constant i32 2
@"Concurrent::Future::State::Idle" = internal constant i32 0
@"Concurrent::Future::State::Delayed" = internal constant i32 1
@"Concurrent::Future::State::Running" = internal constant i32 2
@"Concurrent::Future::State::Completed" = internal constant i32 3
@"Concurrent::Future::State::Canceled" = internal constant i32 4
@"LibEvent2::EventLoopFlags::Once" = internal constant i32 1
@"LibEvent2::EventLoopFlags::NonBlock" = internal constant i32 2
@"LibEvent2::EventLoopFlags::None" = internal constant i32 0
@"LibEvent2::EventLoopFlags::All" = internal constant i32 3
@"LibEvent2::EventFlags::Timeout" = internal constant i16 1
@"LibEvent2::EventFlags::Read" = internal constant i16 2
@"LibEvent2::EventFlags::Write" = internal constant i16 4
@"LibEvent2::EventFlags::Signal" = internal constant i16 8
@"LibEvent2::EventFlags::Persist" = internal constant i16 16
@"LibEvent2::EventFlags::ET" = internal constant i16 32
@"LibEvent2::EventFlags::None" = internal constant i16 0
@"LibEvent2::EventFlags::All" = internal constant i16 63
@"LibC::FlockOp::SH" = internal constant i32 1
@"LibC::FlockOp::EX" = internal constant i32 2
@"LibC::FlockOp::NB" = internal constant i32 4
@"LibC::FlockOp::UN" = internal constant i32 8
@"LibC::FlockOp::None" = internal constant i32 0
@"LibC::FlockOp::All" = internal constant i32 15
@"Regex::Options::IGNORE_CASE" = internal constant i32 1
@"Regex::Options::MULTILINE" = internal constant i32 6
@"Regex::Options::EXTENDED" = internal constant i32 8
@"Regex::Options::ANCHORED" = internal constant i32 16
@"Regex::Options::UTF_8" = internal constant i32 2048
@"Regex::Options::NO_UTF8_CHECK" = internal constant i32 8192
@"Regex::Options::None" = internal constant i32 0
@"Regex::Options::All" = internal constant i32 10271
@"Signal::HUP" = internal constant i32 1
@"Signal::INT" = internal constant i32 2
@"Signal::QUIT" = internal constant i32 3
@"Signal::ILL" = internal constant i32 4
@"Signal::TRAP" = internal constant i32 5
@"Signal::IOT" = internal constant i32 6
@"Signal::ABRT" = internal constant i32 6
@"Signal::FPE" = internal constant i32 8
@"Signal::KILL" = internal constant i32 9
@"Signal::BUS" = internal constant i32 10
@"Signal::SEGV" = internal constant i32 11
@"Signal::SYS" = internal constant i32 12
@"Signal::PIPE" = internal constant i32 13
@"Signal::ALRM" = internal constant i32 14
@"Signal::TERM" = internal constant i32 15
@"Signal::URG" = internal constant i32 16
@"Signal::STOP" = internal constant i32 17
@"Signal::TSTP" = internal constant i32 18
@"Signal::CONT" = internal constant i32 19
@"Signal::CHLD" = internal constant i32 20
@"Signal::TTIN" = internal constant i32 21
@"Signal::TTOU" = internal constant i32 22
@"Signal::IO" = internal constant i32 23
@"Signal::XCPU" = internal constant i32 24
@"Signal::XFSZ" = internal constant i32 25
@"Signal::VTALRM" = internal constant i32 26
@"Signal::USR1" = internal constant i32 30
@"Signal::USR2" = internal constant i32 31
@"Signal::WINCH" = internal constant i32 28
@"Time::Kind::Unspecified" = internal constant i64 0
@"Time::Kind::Utc" = internal constant i64 1
@"Time::Kind::Local" = internal constant i64 2
@"Time::DayOfWeek::Sunday" = internal constant i32 0
@"Time::DayOfWeek::Monday" = internal constant i32 1
@"Time::DayOfWeek::Tuesday" = internal constant i32 2
@"Time::DayOfWeek::Wednesday" = internal constant i32 3
@"Time::DayOfWeek::Thursday" = internal constant i32 4
@"Time::DayOfWeek::Friday" = internal constant i32 5
@"Time::DayOfWeek::Saturday" = internal constant i32 6
@"Unicode::CaseOptions::ASCII" = internal constant i32 1
@"Unicode::CaseOptions::Turkic" = internal constant i32 2
@"Unicode::CaseOptions::None" = internal constant i32 0
@"Unicode::CaseOptions::All" = internal constant i32 3
@"AtExitHandlers::running" = internal global i1 false
@"AtExitHandlers::running:init" = internal global i1 false
@"Signal::default_handlers_setup" = internal global i1 false
@"Signal::default_handlers_setup:init" = internal global i1 false
@"UInt32::MAX" = internal constant i32 -1
@"String::HEADER_SIZE" = internal constant i32 12
@"LibC::EINVAL" = internal constant i32 22
@"LibC::EILSEQ" = internal constant i32 92
@"Char::MAX_CODEPOINT" = internal constant i32 1114111
@"Int::DIGITS_BASE62" = internal constant %String* bitcast ({ i32, i32, i32, [63 x i8] }* @"'0123456789abcdefghi...'" to %String*)
@"'0123456789abcdefghi...'" = private constant { i32, i32, i32, [63 x i8] } { i32 1, i32 62, i32 62, [63 x i8] c"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\00" }
@"Int::DIGITS_UPCASE" = internal constant %String* bitcast ({ i32, i32, i32, [37 x i8] }* @"'0123456789ABCDEFGHI...'" to %String*)
@"'0123456789ABCDEFGHI...'" = private constant { i32, i32, i32, [37 x i8] } { i32 1, i32 36, i32 36, [37 x i8] c"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\00" }
@"Int::DIGITS_DOWNCASE" = internal constant %String* bitcast ({ i32, i32, i32, [37 x i8] }* @"'0123456789abcdefghi...'.1" to %String*)
@"'0123456789abcdefghi...'.1" = private constant { i32, i32, i32, [37 x i8] } { i32 1, i32 36, i32 36, [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00" }
@"Int32::MIN" = internal constant i32 -2147483648
@"LibC::WNOHANG" = internal constant i32 1
@"LibC::ECHILD" = internal constant i32 10
@"LibC::PROT_READ" = internal constant i32 1
@"LibC::PROT_WRITE" = internal constant i32 2
@"LibC::MAP_PRIVATE" = internal constant i32 2
@"LibC::MAP_ANON" = internal constant i32 4096
@"LibC::PROT_NONE" = internal constant i32 0
@"LibC::F_GETFL" = internal constant i32 3
@"LibC::O_NONBLOCK" = internal constant i32 4
@"LibC::F_SETFL" = internal constant i32 4
@"IO::Buffered::BUFFER_SIZE" = internal constant i32 8192
@"LibC::EAGAIN" = internal constant i32 35
@"LibC::EBADF" = internal constant i32 9
@"LibC::EINTR" = internal constant i32 4
@"LibC::EINPROGRESS" = internal constant i32 36
@"LibC::PATH_MAX" = internal constant i32 1024
@"File::SEPARATOR_STRING" = internal constant %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'/'" to %String*)
@"'/'" = private constant { i32, i32, i32, [2 x i8] } { i32 1, i32 1, i32 1, [2 x i8] c"/\00" }
@"UInt32::MIN" = internal constant i32 0
@"File::SEPARATOR" = internal constant i32 47
@"LibC::F_OK" = internal constant i32 0
@"LibC::S_IRUSR" = internal constant i32 256
@"LibC::S_IWUSR" = internal constant i32 128
@"LibC::S_IRGRP" = internal constant i32 32
@"LibC::S_IROTH" = internal constant i32 4
@"LibC::O_RDONLY" = internal constant i32 0
@"LibC::O_WRONLY" = internal constant i32 1
@"LibC::O_CREAT" = internal constant i32 512
@"LibC::O_TRUNC" = internal constant i32 1024
@"LibC::O_APPEND" = internal constant i32 8
@"LibC::O_RDWR" = internal constant i32 2
@"LibC::O_CLOEXEC" = internal constant i32 16777216
@"Debug::MachO::MAGIC_64" = internal constant i64 4277009103
@"Debug::MachO::CIGAM_64" = internal constant i64 3489328638
@"Debug::MachO::MAGIC" = internal constant i64 4277009102
@"Debug::MachO::CIGAM" = internal constant i64 3472551422
@"Debug::MachO::ABI64" = internal constant i32 16777216
@"Int32::MAX" = internal constant i32 2147483647
@"UInt8::MIN" = internal constant i8 0
@"UInt64::MIN" = internal constant i64 0
@"LibC::F_SETFD" = internal constant i32 2
@"LibC::FD_CLOEXEC" = internal constant i32 1
@"LibUnwind::EH_REGISTER_0" = internal constant i32 0
@"LibUnwind::EH_REGISTER_1" = internal constant i32 1
@"CallStack::skip" = internal global %"Array(String)"* null
@"CallStack::skip:init" = internal global i1 false
@"'/usr/local/Cellar/c...'" = private constant { i32, i32, i32, [55 x i8] } { i32 1, i32 54, i32 54, [55 x i8] c"/usr/local/Cellar/crystal-lang/0.20.4/src/callstack.cr\00" }
@"'negative Pointer#ma...'" = private constant { i32, i32, i32, [29 x i8] } { i32 1, i32 28, i32 28, [29 x i8] c"negative Pointer#malloc size\00" }
@"'passing a closure t...'" = private constant { i32, i32, i32, [38 x i8] } { i32 1, i32 37, i32 37, [38 x i8] c"passing a closure to C is not allowed\00" }
@"'/usr/local/Cellar/c...'.2" = private constant { i32, i32, i32, [55 x i8] } { i32 1, i32 54, i32 54, [55 x i8] c"/usr/local/Cellar/crystal-lang/0.20.4/src/exception.cr\00" }
@"String::TYPE_ID" = internal constant i32 1
@"String::TYPE_ID:init" = internal global i1 false
@"''" = private constant { i32, i32, i32, [1 x i8] } { i32 1, i32 0, i32 0, [1 x i8] zeroinitializer }
@"IO::Decoder::BUFFER_SIZE" = internal constant i32 4096
@"IO::Decoder::BUFFER_SIZE:init" = internal global i1 false
@"IO::Decoder::OUT_BUFFER_SIZE" = internal constant i32 4096
@"IO::Decoder::OUT_BUFFER_SIZE:init" = internal global i1 false
@"LibC::MAP_FAILED" = internal global i8* null
@"LibC::MAP_FAILED:init" = internal global i1 false
@"Fiber::STACK_SIZE" = internal constant i32 8388608
@"Fiber::STACK_SIZE:init" = internal global i1 false
@"Fiber::stack_pool" = internal global %"Array(Pointer(Void)).2"* null
@"Fiber::stack_pool:init" = internal global i1 false
@"Fiber::root" = internal global %Fiber* null
@"Fiber::root:init" = internal global i1 false
@GC_stackbottom = external global i8*
@"'main'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"main\00" }
@"Fiber::last_fiber" = global %Fiber* null
@"Fiber::first_fiber" = global %Fiber* null
@"Thread::current" = internal thread_local global %Thread* null
@"Thread::current:init" = internal thread_local global i1 false
@"Thread::threads" = internal global %"Set(Thread)" zeroinitializer
@"Thread::threads:init" = internal global i1 false
@"Hash::HASH_PRIMES" = internal global %"Array(Int32)"* null
@"Hash::HASH_PRIMES:init" = internal global i1 false
@"'negative capacity'" = private constant { i32, i32, i32, [18 x i8] } { i32 1, i32 17, i32 17, [18 x i8] c"negative capacity\00" }
@"'capacity too big'" = private constant { i32, i32, i32, [17 x i8] } { i32 1, i32 16, i32 16, [17 x i8] c"capacity too big\00" }
@"'negative array size...'" = private constant { i32, i32, i32, [22 x i8] } { i32 1, i32 21, i32 21, [22 x i8] c"negative array size: \00" }
@"'UTF-8'" = private constant { i32, i32, i32, [6 x i8] } { i32 1, i32 5, i32 5, [6 x i8] c"UTF-8\00" }
@"'//IGNORE'" = private constant { i32, i32, i32, [9 x i8] } { i32 1, i32 8, i32 8, [9 x i8] c"//IGNORE\00" }
@"'can only invoke 'to...'" = private constant { i32, i32, i32, [47 x i8] } { i32 1, i32 46, i32 46, [47 x i8] c"can only invoke 'to_s' once on String::Builder\00" }
@"'Index out of bounds...'" = private constant { i32, i32, i32, [20 x i8] } { i32 1, i32 19, i32 19, [20 x i8] c"Index out of bounds\00" }
@"'negative count'" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c"negative count\00" }
@"Errno::EINVAL" = internal constant i32 22
@"Errno::EINVAL:init" = internal global i1 false
@"'invalid encoding: '" = private constant { i32, i32, i32, [19 x i8] } { i32 1, i32 18, i32 18, [19 x i8] c"invalid encoding: \00" }
@"' -> '" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c" -> \00" }
@"'iconv_open'" = private constant { i32, i32, i32, [11 x i8] } { i32 1, i32 10, i32 10, [11 x i8] c"iconv_open\00" }
@"': '" = private constant { i32, i32, i32, [3 x i8] } { i32 1, i32 2, i32 2, [3 x i8] c": \00" }
@"'bytesize out of cap...'" = private constant { i32, i32, i32, [32 x i8] } { i32 1, i32 31, i32 31, [32 x i8] c"bytesize out of capacity bounds\00" }
@"'iconv_close'" = private constant { i32, i32, i32, [12 x i8] } { i32 1, i32 11, i32 11, [12 x i8] c"iconv_close\00" }
@"'incomplete multibyt...'" = private constant { i32, i32, i32, [30 x i8] } { i32 1, i32 29, i32 29, [30 x i8] c"incomplete multibyte sequence\00" }
@"Errno::EILSEQ" = internal constant i32 92
@"Errno::EILSEQ:init" = internal global i1 false
@"'invalid multibyte s...'" = private constant { i32, i32, i32, [27 x i8] } { i32 1, i32 26, i32 26, [27 x i8] c"invalid multibyte sequence\00" }
@"'Invalid base '" = private constant { i32, i32, i32, [14 x i8] } { i32 1, i32 13, i32 13, [14 x i8] c"Invalid base \00" }
@"'upcase must be fals...'" = private constant { i32, i32, i32, [33 x i8] } { i32 1, i32 32, i32 32, [33 x i8] c"upcase must be false for base 62\00" }
@"'Invalid char value ...'" = private constant { i32, i32, i32, [20 x i8] } { i32 1, i32 19, i32 19, [20 x i8] c"Invalid char value \00" }
@"''\5C'''" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"'\5C''\00" }
@"''\5C\5C''" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"'\5C\5C'\00" }
@"''\5Ce''" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"'\5Ce'\00" }
@"''\5Cf''" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"'\5Cf'\00" }
@"''\5Cn''" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"'\5Cn'\00" }
@"''\5Cr''" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"'\5Cr'\00" }
@"''\5Ct''" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"'\5Ct'\00" }
@"''\5Cv''" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"'\5Cv'\00" }
@"'\5Cu{'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"\5Cu{\00" }
@"'}'" = private constant { i32, i32, i32, [2 x i8] } { i32 1, i32 1, i32 1, [2 x i8] c"}\00" }
@"Int::DIGITS_BASE62:init" = internal global i1 false
@"Int::DIGITS_UPCASE:init" = internal global i1 false
@"Int::DIGITS_DOWNCASE:init" = internal global i1 false
@"'Division by zero'" = private constant { i32, i32, i32, [17 x i8] } { i32 1, i32 16, i32 16, [17 x i8] c"Division by zero\00" }
@"'overflow: Int32::MI...'" = private constant { i32, i32, i32, [26 x i8] } { i32 1, i32 25, i32 25, [26 x i8] c"overflow: Int32::MIN / -1\00" }
@"'Hash table too big'" = private constant { i32, i32, i32, [19 x i8] } { i32 1, i32 18, i32 18, [19 x i8] c"Hash table too big\00" }
@"'Nil assertion faile...'" = private constant { i32, i32, i32, [21 x i8] } { i32 1, i32 20, i32 20, [21 x i8] c"Nil assertion failed\00" }
@"Fiber::prev_push_other_roots" = internal global %"->" zeroinitializer
@"Fiber::prev_push_other_roots:init" = internal global i1 false
@"Scheduler::runnables" = internal global %"Deque(Fiber)"* null
@"Scheduler::runnables:init" = internal global i1 false
@"Scheduler::eb" = internal global %"Event::Base" zeroinitializer
@"Scheduler::eb:init" = internal global i1 false
@"Errno::EINTR" = internal constant i32 4
@"Errno::EINTR:init" = internal global i1 false
@"Errno::EBADF" = internal constant i32 9
@"Errno::EBADF:init" = internal global i1 false
@"Errno::ECHILD" = internal constant i32 10
@"Errno::ECHILD:init" = internal global i1 false
@"Errno::EAGAIN" = internal constant i32 35
@"Errno::EAGAIN:init" = internal global i1 false
@"Errno::EINPROGRESS" = internal constant i32 36
@"Errno::EINPROGRESS:init" = internal global i1 false
@"File::DEFAULT_CREATE_MODE" = internal constant i32 420
@"File::DEFAULT_CREATE_MODE:init" = internal global i1 false
@STDOUT = internal global %"IO::FileDescriptor"* null
@"STDOUT:init" = internal global i1 false
@"'fcntl() failed'" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c"fcntl() failed\00" }
@"'write timed out'" = private constant { i32, i32, i32, [16 x i8] } { i32 1, i32 15, i32 15, [16 x i8] c"write timed out\00" }
@"Scheduler::loop_fiber" = global %Fiber* null
@"'Cannot allocate new...'" = private constant { i32, i32, i32, [32 x i8] } { i32 1, i32 31, i32 31, [32 x i8] c"Cannot allocate new fiber stack\00" }
@STDERR = internal global %"IO::FileDescriptor"* null
@"STDERR:init" = internal global i1 false
@"'Unhandled exception...'" = private constant { i32, i32, i32, [36 x i8] } { i32 1, i32 35, i32 35, [36 x i8] c"Unhandled exception in spawn(name: \00" }
@"'):'" = private constant { i32, i32, i32, [3 x i8] } { i32 1, i32 2, i32 2, [3 x i8] c"):\00" }
@"'closed stream'" = private constant { i32, i32, i32, [14 x i8] } { i32 1, i32 13, i32 13, [14 x i8] c"closed stream\00" }
@"'File not open for w...'" = private constant { i32, i32, i32, [26 x i8] } { i32 1, i32 25, i32 25, [26 x i8] c"File not open for writing\00" }
@"'Error writing file'" = private constant { i32, i32, i32, [19 x i8] } { i32 1, i32 18, i32 18, [19 x i8] c"Error writing file\00" }
@"'Unhandled exception...'.3" = private constant { i32, i32, i32, [30 x i8] } { i32 1, i32 29, i32 29, [30 x i8] c"Unhandled exception in spawn:\00" }
@"' ('" = private constant { i32, i32, i32, [3 x i8] } { i32 1, i32 2, i32 2, [3 x i8] c" (\00" }
@"'Time::Format::Error...'" = private constant { i32, i32, i32, [20 x i8] } { i32 1, i32 19, i32 19, [20 x i8] c"Time::Format::Error\00" }
@"'Errno'" = private constant { i32, i32, i32, [6 x i8] } { i32 1, i32 5, i32 5, [6 x i8] c"Errno\00" }
@"'Concurrent::Cancele...'" = private constant { i32, i32, i32, [26 x i8] } { i32 1, i32 25, i32 25, [26 x i8] c"Concurrent::CanceledError\00" }
@"'Channel::ClosedErro...'" = private constant { i32, i32, i32, [21 x i8] } { i32 1, i32 20, i32 20, [21 x i8] c"Channel::ClosedError\00" }
@"'IO::EOFError'" = private constant { i32, i32, i32, [13 x i8] } { i32 1, i32 12, i32 12, [13 x i8] c"IO::EOFError\00" }
@"'IO::Error'" = private constant { i32, i32, i32, [10 x i8] } { i32 1, i32 9, i32 9, [10 x i8] c"IO::Error\00" }
@"'IO::Timeout'" = private constant { i32, i32, i32, [12 x i8] } { i32 1, i32 11, i32 11, [12 x i8] c"IO::Timeout\00" }
@"'Enumerable::EmptyEr...'" = private constant { i32, i32, i32, [23 x i8] } { i32 1, i32 22, i32 22, [23 x i8] c"Enumerable::EmptyError\00" }
@"'DivisionByZero'" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c"DivisionByZero\00" }
@"'KeyError'" = private constant { i32, i32, i32, [9 x i8] } { i32 1, i32 8, i32 8, [9 x i8] c"KeyError\00" }
@"'InvalidByteSequence...'" = private constant { i32, i32, i32, [25 x i8] } { i32 1, i32 24, i32 24, [25 x i8] c"InvalidByteSequenceError\00" }
@"'TypeCastError'" = private constant { i32, i32, i32, [14 x i8] } { i32 1, i32 13, i32 13, [14 x i8] c"TypeCastError\00" }
@"'ArgumentError'" = private constant { i32, i32, i32, [14 x i8] } { i32 1, i32 13, i32 13, [14 x i8] c"ArgumentError\00" }
@"'IndexError'" = private constant { i32, i32, i32, [11 x i8] } { i32 1, i32 10, i32 10, [11 x i8] c"IndexError\00" }
@"'Debug::MachO::Error...'" = private constant { i32, i32, i32, [20 x i8] } { i32 1, i32 19, i32 19, [20 x i8] c"Debug::MachO::Error\00" }
@"'Exception'" = private constant { i32, i32, i32, [10 x i8] } { i32 1, i32 9, i32 9, [10 x i8] c"Exception\00" }
@"')\0A'" = private constant { i32, i32, i32, [3 x i8] } { i32 1, i32 2, i32 2, [3 x i8] c")\0A\00" }
@"CallStack::dwarf_line_numbers" = global %"(Debug::DWARF::LineNumbers | Nil)" zeroinitializer
@"'Error resolving rea...'" = private constant { i32, i32, i32, [30 x i8] } { i32 1, i32 29, i32 29, [30 x i8] c"Error resolving real path of \00" }
@"'.dSYM/Contents/Reso...'" = private constant { i32, i32, i32, [32 x i8] } { i32 1, i32 31, i32 31, [32 x i8] c".dSYM/Contents/Resources/DWARF/\00" }
@"File::SEPARATOR_STRING:init" = internal global i1 false
@"'string contains nul...'" = private constant { i32, i32, i32, [26 x i8] } { i32 1, i32 25, i32 25, [26 x i8] c"string contains null byte\00" }
@"'Unexpected byte 0x'" = private constant { i32, i32, i32, [19 x i8] } { i32 1, i32 18, i32 18, [19 x i8] c"Unexpected byte 0x\00" }
@"'0'" = private constant { i32, i32, i32, [2 x i8] } { i32 1, i32 1, i32 1, [2 x i8] c"0\00" }
@"'1'" = private constant { i32, i32, i32, [2 x i8] } { i32 1, i32 1, i32 1, [2 x i8] c"1\00" }
@"'overflow: UInt32::M...'" = private constant { i32, i32, i32, [27 x i8] } { i32 1, i32 26, i32 26, [27 x i8] c"overflow: UInt32::MIN / -1\00" }
@"' at position '" = private constant { i32, i32, i32, [14 x i8] } { i32 1, i32 13, i32 13, [14 x i8] c" at position \00" }
@"', malformed UTF-8'" = private constant { i32, i32, i32, [18 x i8] } { i32 1, i32 17, i32 17, [18 x i8] c", malformed UTF-8\00" }
@"'.dwarf'" = private constant { i32, i32, i32, [7 x i8] } { i32 1, i32 6, i32 6, [7 x i8] c".dwarf\00" }
@"'r'" = private constant { i32, i32, i32, [2 x i8] } { i32 1, i32 1, i32 1, [2 x i8] c"r\00" }
@"'invalid access mode...'" = private constant { i32, i32, i32, [21 x i8] } { i32 1, i32 20, i32 20, [21 x i8] c"invalid access mode \00" }
@"'Error opening file ...'" = private constant { i32, i32, i32, [21 x i8] } { i32 1, i32 20, i32 20, [21 x i8] c"Error opening file '\00" }
@"'' with mode ''" = private constant { i32, i32, i32, [14 x i8] } { i32 1, i32 13, i32 13, [14 x i8] c"' with mode '\00" }
@"'''" = private constant { i32, i32, i32, [2 x i8] } { i32 1, i32 1, i32 1, [2 x i8] c"'\00" }
@"'Error closing file'" = private constant { i32, i32, i32, [19 x i8] } { i32 1, i32 18, i32 18, [19 x i8] c"Error closing file\00" }
@"'read timed out'" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c"read timed out\00" }
@"'Error reading file'" = private constant { i32, i32, i32, [19 x i8] } { i32 1, i32 18, i32 18, [19 x i8] c"Error reading file\00" }
@"'end of file reached...'" = private constant { i32, i32, i32, [20 x i8] } { i32 1, i32 19, i32 19, [20 x i8] c"end of file reached\00" }
@"'Invalid magic numbe...'" = private constant { i32, i32, i32, [21 x i8] } { i32 1, i32 20, i32 20, [21 x i8] c"Invalid magic number\00" }
@"'Unable to tell'" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c"Unable to tell\00" }
@"'Unable to seek'" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c"Unable to seek\00" }
@"'__debug_line'" = private constant { i32, i32, i32, [13 x i8] } { i32 1, i32 12, i32 12, [13 x i8] c"__debug_line\00" }
@"'negative limit'" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c"negative limit\00" }
@"'invalid back amount...'" = private constant { i32, i32, i32, [20 x i8] } { i32 1, i32 19, i32 19, [20 x i8] c"invalid back amount\00" }
@"'Incomplete UTF-8 by...'" = private constant { i32, i32, i32, [31 x i8] } { i32 1, i32 30, i32 30, [31 x i8] c"Incomplete UTF-8 byte sequence\00" }
@"' in UTF-8 byte sequ...'" = private constant { i32, i32, i32, [24 x i8] } { i32 1, i32 23, i32 23, [24 x i8] c" in UTF-8 byte sequence\00" }
@"'overflow: UInt8::MI...'" = private constant { i32, i32, i32, [26 x i8] } { i32 1, i32 25, i32 25, [26 x i8] c"overflow: UInt8::MIN / -1\00" }
@"CallStack::image_slide" = global %"(Int64 | Nil)" zeroinitializer
@"'??'" = private constant { i32, i32, i32, [3 x i8] } { i32 1, i32 2, i32 2, [3 x i8] c"??\00" }
@"' '" = private constant { i32, i32, i32, [2 x i8] } { i32 1, i32 1, i32 1, [2 x i8] c" \00" }
@"':'" = private constant { i32, i32, i32, [2 x i8] } { i32 1, i32 1, i32 1, [2 x i8] c":\00" }
@"'???'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"???\00" }
@"'0x'" = private constant { i32, i32, i32, [3 x i8] } { i32 1, i32 2, i32 2, [3 x i8] c"0x\00" }
@"'overflow: UInt64::M...'" = private constant { i32, i32, i32, [27 x i8] } { i32 1, i32 26, i32 26, [27 x i8] c"overflow: UInt64::MIN / -1\00" }
@"' at '" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c" at \00" }
@"Event::SignalHandler::instance" = global %"Event::SignalHandler"* null
@"'Could not create pi...'" = private constant { i32, i32, i32, [22 x i8] } { i32 1, i32 21, i32 21, [22 x i8] c"Could not create pipe\00" }
@"Event::SignalHandler::write_pipe" = global i32* null
@"'missing '" = private constant { i32, i32, i32, [9 x i8] } { i32 1, i32 8, i32 8, [9 x i8] c"missing \00" }
@"'HUP'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"HUP\00" }
@"'INT'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"INT\00" }
@"'QUIT'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"QUIT\00" }
@"'ILL'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"ILL\00" }
@"'TRAP'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"TRAP\00" }
@"'IOT'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"IOT\00" }
@"'ABRT'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"ABRT\00" }
@"'FPE'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"FPE\00" }
@"'KILL'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"KILL\00" }
@"'BUS'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"BUS\00" }
@"'SEGV'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"SEGV\00" }
@"'SYS'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"SYS\00" }
@"'PIPE'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"PIPE\00" }
@"'ALRM'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"ALRM\00" }
@"'TERM'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"TERM\00" }
@"'URG'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"URG\00" }
@"'STOP'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"STOP\00" }
@"'TSTP'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"TSTP\00" }
@"'CONT'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"CONT\00" }
@"'CHLD'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"CHLD\00" }
@"'TTIN'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"TTIN\00" }
@"'TTOU'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"TTOU\00" }
@"'IO'" = private constant { i32, i32, i32, [3 x i8] } { i32 1, i32 2, i32 2, [3 x i8] c"IO\00" }
@"'XCPU'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"XCPU\00" }
@"'XFSZ'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"XFSZ\00" }
@"'VTALRM'" = private constant { i32, i32, i32, [7 x i8] } { i32 1, i32 6, i32 6, [7 x i8] c"VTALRM\00" }
@"'USR1'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"USR1\00" }
@"'USR2'" = private constant { i32, i32, i32, [5 x i8] } { i32 1, i32 4, i32 4, [5 x i8] c"USR2\00" }
@"'WINCH'" = private constant { i32, i32, i32, [6 x i8] } { i32 1, i32 5, i32 5, [6 x i8] c"WINCH\00" }
@"' callback'" = private constant { i32, i32, i32, [10 x i8] } { i32 1, i32 9, i32 9, [10 x i8] c" callback\00" }
@"'FATAL ERROR: uncaug...'" = private constant { i32, i32, i32, [30 x i8] } { i32 1, i32 29, i32 29, [30 x i8] c"FATAL ERROR: uncaught signal \00" }
@"' exception, exiting...'" = private constant { i32, i32, i32, [20 x i8] } { i32 1, i32 19, i32 19, [20 x i8] c" exception, exiting\00" }
@"Event::SignalChildHandler::instance" = global %"Event::SignalChildHandler"* null
@"'waitpid'" = private constant { i32, i32, i32, [8 x i8] } { i32 1, i32 7, i32 7, [8 x i8] c"waitpid\00" }
@"'Channel is closed'" = private constant { i32, i32, i32, [18 x i8] } { i32 1, i32 17, i32 17, [18 x i8] c"Channel is closed\00" }
@"AtExitHandlers::handlers" = global %"Array(Proc(Int32, Nil))"* null
@"'sleep seconds must ...'" = private constant { i32, i32, i32, [31 x i8] } { i32 1, i32 30, i32 30, [31 x i8] c"sleep seconds must be positive\00" }
@"'/usr/local/Cellar/c...'.4" = private constant { i32, i32, i32, [51 x i8] } { i32 1, i32 50, i32 50, [51 x i8] c"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr\00" }
@pcre_malloc = external global i8* (i64)*
@pcre_free = external global %Nil (i8*)*
@"'bar'" = private constant { i32, i32, i32, [4 x i8] } { i32 1, i32 3, i32 3, [4 x i8] c"bar\00" }
@"' called with: '" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c" called with: \00" }
@"'Failed to raise an ...'" = private constant { i32, i32, i32, [34 x i8] } { i32 1, i32 33, i32 33, [34 x i8] c"Failed to raise an exception: %s\0A\00" }
@"'NO_REASON'" = private constant { i32, i32, i32, [10 x i8] } { i32 1, i32 9, i32 9, [10 x i8] c"NO_REASON\00" }
@"'FOREIGN_EXCEPTION_C...'" = private constant { i32, i32, i32, [25 x i8] } { i32 1, i32 24, i32 24, [25 x i8] c"FOREIGN_EXCEPTION_CAUGHT\00" }
@"'FATAL_PHASE2_ERROR'" = private constant { i32, i32, i32, [19 x i8] } { i32 1, i32 18, i32 18, [19 x i8] c"FATAL_PHASE2_ERROR\00" }
@"'FATAL_PHASE1_ERROR'" = private constant { i32, i32, i32, [19 x i8] } { i32 1, i32 18, i32 18, [19 x i8] c"FATAL_PHASE1_ERROR\00" }
@"'NORMAL_STOP'" = private constant { i32, i32, i32, [12 x i8] } { i32 1, i32 11, i32 11, [12 x i8] c"NORMAL_STOP\00" }
@"'END_OF_STACK'" = private constant { i32, i32, i32, [13 x i8] } { i32 1, i32 12, i32 12, [13 x i8] c"END_OF_STACK\00" }
@"'HANDLER_FOUND'" = private constant { i32, i32, i32, [14 x i8] } { i32 1, i32 13, i32 13, [14 x i8] c"HANDLER_FOUND\00" }
@"'INSTALL_CONTEXT'" = private constant { i32, i32, i32, [16 x i8] } { i32 1, i32 15, i32 15, [16 x i8] c"INSTALL_CONTEXT\00" }
@"'CONTINUE_UNWIND'" = private constant { i32, i32, i32, [16 x i8] } { i32 1, i32 15, i32 15, [16 x i8] c"CONTINUE_UNWIND\00" }
@"'[%ld] %s +%ld\0A'" = private constant { i32, i32, i32, [15 x i8] } { i32 1, i32 14, i32 14, [15 x i8] c"[%ld] %s +%ld\0A\00" }
@"'[%ld] %s +%ld (%ld ...'" = private constant { i32, i32, i32, [27 x i8] } { i32 1, i32 26, i32 26, [27 x i8] c"[%ld] %s +%ld (%ld times)\0A\00" }
@"'[%ld] ???\0A'" = private constant { i32, i32, i32, [11 x i8] } { i32 1, i32 10, i32 10, [11 x i8] c"[%ld] ???\0A\00" }
@"'[%ld] ??? (%ld time...'" = private constant { i32, i32, i32, [23 x i8] } { i32 1, i32 22, i32 22, [23 x i8] c"[%ld] ??? (%ld times)\0A\00" }
@"'Error running at_ex...'" = private constant { i32, i32, i32, [32 x i8] } { i32 1, i32 31, i32 31, [32 x i8] c"Error running at_exit handler: \00" }
@"'Invalid memory acce...'" = private constant { i32, i32, i32, [52 x i8] } { i32 1, i32 51, i32 51, [52 x i8] c"Invalid memory access (signal %d) at address 0x%lx\0A\00" }

define internal void @__crystal_main(i32 %argc, i8** %argv) {
alloca:
  %0 = alloca %"->"
  %1 = alloca %"->"
  %2 = alloca %"->"
  %3 = alloca %"->"
  %4 = alloca %"->"
  %5 = alloca %"->"
  %6 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %argc, i32* @ARGC_UNSAFE
  store i8** %argv, i8*** @ARGV_UNSAFE
  %7 = load i1, i1* @"AtExitHandlers::running:init"
  br i1 %7, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  %8 = load i1, i1* @"Signal::default_handlers_setup:init"
  br i1 %8, label %initialized1, label %not_initialized2

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"AtExitHandlers::running:init"
  call void @"~AtExitHandlers::running:init"()
  br label %initialized

initialized1:                                     ; preds = %not_initialized2, %initialized
  %9 = load i1, i1* @"CallStack::skip:init"
  br i1 %9, label %initialized3, label %not_initialized4

not_initialized2:                                 ; preds = %initialized
  store i1 true, i1* @"Signal::default_handlers_setup:init"
  call void @"~Signal::default_handlers_setup:init"()
  br label %initialized1

initialized3:                                     ; preds = %not_initialized4, %initialized1
  %10 = call %"Array(String)"* @"*CallStack::skip<String>:Array(String)"(%String* bitcast ({ i32, i32, i32, [55 x i8] }* @"'/usr/local/Cellar/c...'" to %String*))
  %11 = call %"Array(String)"* @"*CallStack::skip<String>:Array(String)"(%String* bitcast ({ i32, i32, i32, [55 x i8] }* @"'/usr/local/Cellar/c...'.2" to %String*))
  %12 = load i1, i1* @"String::TYPE_ID:init"
  br i1 %12, label %initialized5, label %not_initialized6

not_initialized4:                                 ; preds = %initialized1
  store i1 true, i1* @"CallStack::skip:init"
  call void @"~CallStack::skip:init"()
  br label %initialized3

initialized5:                                     ; preds = %not_initialized6, %initialized3
  %13 = load i1, i1* @"IO::Decoder::BUFFER_SIZE:init"
  br i1 %13, label %initialized7, label %not_initialized8

not_initialized6:                                 ; preds = %initialized3
  store i1 true, i1* @"String::TYPE_ID:init"
  call void @"~String::TYPE_ID:init"()
  br label %initialized5

initialized7:                                     ; preds = %not_initialized8, %initialized5
  %14 = load i1, i1* @"IO::Decoder::OUT_BUFFER_SIZE:init"
  br i1 %14, label %initialized9, label %not_initialized10

not_initialized8:                                 ; preds = %initialized5
  store i1 true, i1* @"IO::Decoder::BUFFER_SIZE:init"
  call void @"~IO::Decoder::BUFFER_SIZE:init"()
  br label %initialized7

initialized9:                                     ; preds = %not_initialized10, %initialized7
  %15 = load i1, i1* @"LibC::MAP_FAILED:init"
  br i1 %15, label %initialized11, label %not_initialized12

not_initialized10:                                ; preds = %initialized7
  store i1 true, i1* @"IO::Decoder::OUT_BUFFER_SIZE:init"
  call void @"~IO::Decoder::OUT_BUFFER_SIZE:init"()
  br label %initialized9

initialized11:                                    ; preds = %not_initialized12, %initialized9
  %16 = load i1, i1* @"Fiber::STACK_SIZE:init"
  br i1 %16, label %initialized13, label %not_initialized14

not_initialized12:                                ; preds = %initialized9
  store i1 true, i1* @"LibC::MAP_FAILED:init"
  call void @"~LibC::MAP_FAILED:init"()
  br label %initialized11

initialized13:                                    ; preds = %not_initialized14, %initialized11
  %17 = load i1, i1* @"Fiber::stack_pool:init"
  br i1 %17, label %initialized15, label %not_initialized16

not_initialized14:                                ; preds = %initialized11
  store i1 true, i1* @"Fiber::STACK_SIZE:init"
  call void @"~Fiber::STACK_SIZE:init"()
  br label %initialized13

initialized15:                                    ; preds = %not_initialized16, %initialized13
  %18 = load i1, i1* @"Fiber::root:init"
  br i1 %18, label %initialized17, label %not_initialized18

not_initialized16:                                ; preds = %initialized13
  store i1 true, i1* @"Fiber::stack_pool:init"
  call void @"~Fiber::stack_pool:init"()
  br label %initialized15

initialized17:                                    ; preds = %not_initialized18, %initialized15
  %19 = call %Thread* @"*Thread::current:Thread"()
  %20 = call %Fiber* @"*Fiber::root:Fiber"()
  %21 = call %Fiber* @"*Thread#current_fiber=<Fiber>:Fiber"(%Thread* %19, %Fiber* %20)
  %22 = load i1, i1* @"Fiber::prev_push_other_roots:init"
  br i1 %22, label %initialized19, label %not_initialized20

not_initialized18:                                ; preds = %initialized15
  store i1 true, i1* @"Fiber::root:init"
  call void @"~Fiber::root:init"()
  br label %initialized17

initialized19:                                    ; preds = %not_initialized20, %initialized17
  %23 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void ()* @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/fiber.cr:318" to i8*), i8** %23
  %24 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %24
  %25 = load %"->", %"->"* %0
  %26 = call i8* @"~check_proc_is_not_closure"(%"->" %25)
  %27 = bitcast i8* %26 to %Nil ()*
  call void @GC_set_push_other_roots(%Nil ()* %27)
  %28 = load i1, i1* @"Scheduler::runnables:init"
  br i1 %28, label %initialized21, label %not_initialized22

not_initialized20:                                ; preds = %initialized17
  store i1 true, i1* @"Fiber::prev_push_other_roots:init"
  call void @"~Fiber::prev_push_other_roots:init"()
  br label %initialized19

initialized21:                                    ; preds = %not_initialized22, %initialized19
  %29 = load i1, i1* @"Scheduler::eb:init"
  br i1 %29, label %initialized23, label %not_initialized24

not_initialized22:                                ; preds = %initialized19
  store i1 true, i1* @"Scheduler::runnables:init"
  call void @"~Scheduler::runnables:init"()
  br label %initialized21

initialized23:                                    ; preds = %not_initialized24, %initialized21
  %30 = load i1, i1* @"Errno::EINTR:init"
  br i1 %30, label %initialized25, label %not_initialized26

not_initialized24:                                ; preds = %initialized21
  store i1 true, i1* @"Scheduler::eb:init"
  call void @"~Scheduler::eb:init"()
  br label %initialized23

initialized25:                                    ; preds = %not_initialized26, %initialized23
  %31 = load i1, i1* @"Errno::EBADF:init"
  br i1 %31, label %initialized27, label %not_initialized28

not_initialized26:                                ; preds = %initialized23
  store i1 true, i1* @"Errno::EINTR:init"
  call void @"~Errno::EINTR:init"()
  br label %initialized25

initialized27:                                    ; preds = %not_initialized28, %initialized25
  %32 = load i1, i1* @"Errno::ECHILD:init"
  br i1 %32, label %initialized29, label %not_initialized30

not_initialized28:                                ; preds = %initialized25
  store i1 true, i1* @"Errno::EBADF:init"
  call void @"~Errno::EBADF:init"()
  br label %initialized27

initialized29:                                    ; preds = %not_initialized30, %initialized27
  %33 = load i1, i1* @"Errno::EAGAIN:init"
  br i1 %33, label %initialized31, label %not_initialized32

not_initialized30:                                ; preds = %initialized27
  store i1 true, i1* @"Errno::ECHILD:init"
  call void @"~Errno::ECHILD:init"()
  br label %initialized29

initialized31:                                    ; preds = %not_initialized32, %initialized29
  %34 = load i1, i1* @"Errno::EINPROGRESS:init"
  br i1 %34, label %initialized33, label %not_initialized34

not_initialized32:                                ; preds = %initialized29
  store i1 true, i1* @"Errno::EAGAIN:init"
  call void @"~Errno::EAGAIN:init"()
  br label %initialized31

initialized33:                                    ; preds = %not_initialized34, %initialized31
  %35 = load i1, i1* @"File::DEFAULT_CREATE_MODE:init"
  br i1 %35, label %initialized35, label %not_initialized36

not_initialized34:                                ; preds = %initialized31
  store i1 true, i1* @"Errno::EINPROGRESS:init"
  call void @"~Errno::EINPROGRESS:init"()
  br label %initialized33

initialized35:                                    ; preds = %not_initialized36, %initialized33
  %36 = load i1, i1* @"Hash::HASH_PRIMES:init"
  br i1 %36, label %initialized37, label %not_initialized38

not_initialized36:                                ; preds = %initialized33
  store i1 true, i1* @"File::DEFAULT_CREATE_MODE:init"
  call void @"~File::DEFAULT_CREATE_MODE:init"()
  br label %initialized35

initialized37:                                    ; preds = %not_initialized38, %initialized35
  %37 = load i1, i1* @"STDOUT:init"
  br i1 %37, label %initialized39, label %not_initialized40

not_initialized38:                                ; preds = %initialized35
  store i1 true, i1* @"Hash::HASH_PRIMES:init"
  call void @"~Hash::HASH_PRIMES:init"()
  br label %initialized37

initialized39:                                    ; preds = %not_initialized40, %initialized37
  %38 = load i1, i1* @"STDERR:init"
  br i1 %38, label %initialized41, label %not_initialized42

not_initialized40:                                ; preds = %initialized37
  store i1 true, i1* @"STDOUT:init"
  call void @"~STDOUT:init"()
  br label %initialized39

initialized41:                                    ; preds = %not_initialized42, %initialized39
  %39 = load i1, i1* @"AtExitHandlers::running:init"
  br i1 %39, label %initialized43, label %not_initialized44

not_initialized42:                                ; preds = %initialized39
  store i1 true, i1* @"STDERR:init"
  call void @"~STDERR:init"()
  br label %initialized41

initialized43:                                    ; preds = %not_initialized44, %initialized41
  %40 = call %"->" @"*Signal::setup_default_handlers:(Proc(Int32, Nil) | Nil)"()
  %41 = getelementptr inbounds %"->", %"->"* %1, i32 0, i32 0
  store i8* bitcast (void (i32)* @"~procProc(Int32, Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/kernel.cr:195" to i8*), i8** %41
  %42 = getelementptr inbounds %"->", %"->"* %1, i32 0, i32 1
  store i8* null, i8** %42
  %43 = load %"->", %"->"* %1
  call void @"*at_exit<&Proc(Int32, Nil)>:Nil"(%"->" %43)
  %44 = getelementptr inbounds %"->", %"->"* %2, i32 0, i32 0
  store i8* bitcast (void ()* @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/kernel.cr:198" to i8*), i8** %44
  %45 = getelementptr inbounds %"->", %"->"* %2, i32 0, i32 1
  store i8* null, i8** %45
  %46 = load %"->", %"->"* %2
  %47 = call %Fiber* @"*spawn<&Proc(Nil)>:Fiber"(%"->" %46)
  %48 = call %"Array(String)"* @"*CallStack::skip<String>:Array(String)"(%String* bitcast ({ i32, i32, i32, [51 x i8] }* @"'/usr/local/Cellar/c...'.4" to %String*))
  %49 = getelementptr inbounds %"->", %"->"* %3, i32 0, i32 0
  store i8* bitcast (i8* (i64)* @"*GC::malloc<UInt64>:Pointer(Void)" to i8*), i8** %49
  %50 = getelementptr inbounds %"->", %"->"* %3, i32 0, i32 1
  store i8* null, i8** %50
  %51 = load %"->", %"->"* %3
  %52 = call i8* @"~check_proc_is_not_closure"(%"->" %51)
  %53 = bitcast i8* %52 to i8* (i64)*
  store i8* (i64)* %53, i8* (i64)** @pcre_malloc
  %54 = bitcast i8* (i64)* %53 to i8*
  %55 = getelementptr inbounds %"->", %"->"* %4, i32 0, i32 0
  store i8* %54, i8** %55
  %56 = getelementptr inbounds %"->", %"->"* %4, i32 0, i32 1
  store i8* null, i8** %56
  %57 = load %"->", %"->"* %4
  %58 = getelementptr inbounds %"->", %"->"* %5, i32 0, i32 0
  store i8* bitcast (void (i8*)* @"*GC::free<Pointer(Void)>:Nil" to i8*), i8** %58
  %59 = getelementptr inbounds %"->", %"->"* %5, i32 0, i32 1
  store i8* null, i8** %59
  %60 = load %"->", %"->"* %5
  %61 = call i8* @"~check_proc_is_not_closure"(%"->" %60)
  %62 = bitcast i8* %61 to %Nil (i8*)*
  store %Nil (i8*)* %62, %Nil (i8*)** @pcre_free
  %63 = bitcast %Nil (i8*)* %62 to i8*
  %64 = getelementptr inbounds %"->", %"->"* %6, i32 0, i32 0
  store i8* %63, i8** %64
  %65 = getelementptr inbounds %"->", %"->"* %6, i32 0, i32 1
  store i8* null, i8** %65
  %66 = load %"->", %"->"* %6
  %67 = load i1, i1* @"Signal::default_handlers_setup:init"
  br i1 %67, label %initialized45, label %not_initialized46

not_initialized44:                                ; preds = %initialized41
  store i1 true, i1* @"AtExitHandlers::running:init"
  call void @"~AtExitHandlers::running:init"()
  br label %initialized43

initialized45:                                    ; preds = %not_initialized46, %initialized43
  call void @setup_sigfault_handler()
  %68 = load i1, i1* @"Thread::threads:init"
  br i1 %68, label %initialized47, label %not_initialized48

not_initialized46:                                ; preds = %initialized43
  store i1 true, i1* @"Signal::default_handlers_setup:init"
  call void @"~Signal::default_handlers_setup:init"()
  br label %initialized45

initialized47:                                    ; preds = %not_initialized48, %initialized45
  %69 = load i1, i1* @"Thread::current:init"
  br i1 %69, label %initialized49, label %not_initialized50

not_initialized48:                                ; preds = %initialized45
  store i1 true, i1* @"Thread::threads:init"
  call void @"~Thread::threads:init"()
  br label %initialized47

initialized49:                                    ; preds = %not_initialized50, %initialized47
  call void @"*bar<Char, Char>:Nil"(i32 97, i32 98)
  ret void

not_initialized50:                                ; preds = %initialized47
  store i1 true, i1* @"Thread::current:init"
  call void @"~Thread::current:init"()
  br label %initialized49
}

declare i32 @printf(i8*, ...)

; Function Attrs: uwtable
define i8* @__crystal_malloc(i32 %size) #0 {
entry:
  %0 = zext i32 %size to i64
  %1 = call i8* @GC_malloc(i64 %0)
  ret i8* %1
}

; Function Attrs: uwtable
define i8* @__crystal_realloc(i8* %ptr, i32 %size) #0 {
entry:
  %0 = zext i32 %size to i64
  %1 = call i8* @GC_realloc(i8* %ptr, i64 %0)
  ret i8* %1
}

; Function Attrs: uwtable
define i32 @__crystal_personality(i32 %version, i32 %actions, i64 %exception_class, %"struct.LibUnwind::Exception"* %exception_object, i8* %context) #0 {
alloca:
  %start = alloca i64
  %ip = alloca i64
  %throw_offset = alloca i64
  %lsd = alloca i8*
  %leb = alloca %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"
  %cs_table_length = alloca i64
  %cs_table_end = alloca i8*
  %cs_offset = alloca i32
  %cs_length = alloca i32
  %cs_addr = alloca i32
  %action = alloca i64
  %__temp_166 = alloca i1
  %0 = alloca %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i64 @_Unwind_GetRegionStart(i8* %context)
  store i64 %1, i64* %start
  %2 = call i64 @_Unwind_GetIP(i8* %context)
  store i64 %2, i64* %ip
  %3 = load i64, i64* %ip
  %4 = sub i64 %3, 1
  %5 = load i64, i64* %start
  %6 = sub i64 %4, %5
  store i64 %6, i64* %throw_offset
  %7 = call i8* @_Unwind_GetLanguageSpecificData(i8* %context)
  store i8* %7, i8** %lsd
  %8 = load i8*, i8** %lsd
  %9 = call %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader" @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader::new<Pointer(UInt8)>:/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"(i8* %8)
  store %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader" %9, %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %0
  %10 = load %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %0
  store %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader" %10, %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb
  %11 = call i8 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint8:UInt8"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  %12 = call i8 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint8:UInt8"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  %13 = icmp ne i8 %12, -1
  br i1 %13, label %then, label %else

then:                                             ; preds = %entry
  %14 = call i64 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uleb128:UInt64"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %15 = call i8 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint8:UInt8"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  %16 = call i64 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uleb128:UInt64"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  store i64 %16, i64* %cs_table_length
  %17 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb, i32 0, i32 0
  %18 = load i8*, i8** %17
  %19 = load i64, i64* %cs_table_length
  %20 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<UInt64>:Pointer(UInt8)"(i8* %18, i64 %19)
  store i8* %20, i8** %cs_table_end
  br label %while

while:                                            ; preds = %exit14, %exit
  %21 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb, i32 0, i32 0
  %22 = load i8*, i8** %21
  %23 = load i8*, i8** %cs_table_end
  %24 = call i1 @"*Pointer(UInt8)@Comparable(T)#<<Pointer(UInt8)>:Bool"(i8* %22, i8* %23)
  br i1 %24, label %body, label %exit1

body:                                             ; preds = %while
  %25 = call i32 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint32:UInt32"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  store i32 %25, i32* %cs_offset
  %26 = call i32 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint32:UInt32"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  store i32 %26, i32* %cs_length
  %27 = call i32 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint32:UInt32"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  store i32 %27, i32* %cs_addr
  %28 = call i64 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uleb128:UInt64"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %leb)
  store i64 %28, i64* %action
  %29 = load i32, i32* %cs_addr
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %then2, label %else3

exit1:                                            ; preds = %while
  ret i32 8

then2:                                            ; preds = %body
  %31 = load i32, i32* %cs_offset
  %32 = load i64, i64* %throw_offset
  %33 = zext i32 %31 to i64
  %34 = icmp ule i64 %33, %32
  store i1 %34, i1* %__temp_166
  br i1 %34, label %then6, label %else7

else3:                                            ; preds = %body
  br label %exit14

then4:                                            ; preds = %exit8
  %35 = call i1 @"*LibUnwind::Action@Enum#includes?<LibUnwind::Action>:Bool"(i32 %actions, i32 1)
  br i1 %35, label %then9, label %else10

else5:                                            ; preds = %exit8
  br label %exit13

then6:                                            ; preds = %then2
  %36 = load i64, i64* %throw_offset
  %37 = load i32, i32* %cs_offset
  %38 = load i32, i32* %cs_length
  %39 = add i32 %37, %38
  %40 = zext i32 %39 to i64
  %41 = icmp ule i64 %36, %40
  br label %exit8

else7:                                            ; preds = %then2
  %42 = load i1, i1* %__temp_166
  br label %exit8

exit8:                                            ; preds = %else7, %then6
  %43 = phi i1 [ %41, %then6 ], [ %42, %else7 ]
  br i1 %43, label %then4, label %else5

then9:                                            ; preds = %then4
  ret i32 6

else10:                                           ; preds = %then4
  %44 = call i1 @"*LibUnwind::Action@Enum#includes?<LibUnwind::Action>:Bool"(i32 %actions, i32 4)
  br i1 %44, label %then11, label %else12

then11:                                           ; preds = %else10
  %45 = ptrtoint %"struct.LibUnwind::Exception"* %exception_object to i64
  call void @_Unwind_SetGR(i8* %context, i32 0, i64 %45)
  %46 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %exception_object, i32 0, i32 5
  %47 = load i32, i32* %46
  %48 = sext i32 %47 to i64
  call void @_Unwind_SetGR(i8* %context, i32 1, i64 %48)
  %49 = load i64, i64* %start
  %50 = load i32, i32* %cs_addr
  %51 = zext i32 %50 to i64
  %52 = add i64 %49, %51
  %53 = call i64 @_Unwind_SetIP(i8* %context, i64 %52)
  ret i32 7

else12:                                           ; preds = %else10
  br label %exit13

exit13:                                           ; preds = %else5, %else12
  br label %exit14

exit14:                                           ; preds = %else3, %exit13
  br label %while
}

; Function Attrs: noreturn uwtable
define void @__crystal_raise(%"struct.LibUnwind::Exception"* %unwind_ex) #1 {
alloca:
  %ret = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @_Unwind_RaiseException(%"struct.LibUnwind::Exception"* %unwind_ex)
  store i32 %0, i32* %ret
  %1 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* bitcast ({ i32, i32, i32, [34 x i8] }* @"'Failed to raise an ...'" to %String*))
  %2 = load i32, i32* %ret
  %3 = call %String* @"*LibUnwind::ReasonCode@Enum#to_s:String"(i32 %2)
  %4 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %3)
  %5 = call i32 (i8*, ...) @printf(i8* %1, i8* %4)
  %6 = call i32 @"*CallStack::print_backtrace:Int32"()
  %7 = load i32, i32* %ret
  %8 = call i32 @"*LibUnwind::ReasonCode@Enum#to_i32:Int32"(i32 %7)
  call void @exit(i32 %8)
  unreachable
}

; Function Attrs: uwtable
define i64 @__crystal_get_exception(%"struct.LibUnwind::Exception"* %unwind_ex) #0 {
entry:
  %0 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %unwind_ex, i32 0, i32 4
  %1 = load i64, i64* %0
  ret i64 %1
}

define internal void @"~AtExitHandlers::running:init"() {
entry:
  ret void
}

define internal void @"~Signal::default_handlers_setup:init"() {
entry:
  ret void
}

define internal void @"~CallStack::skip:init"() {
entry:
  %0 = call %"Array(String)"* @"*Array(String)@Array(T)::new:Array(String)"(i32 438)
  store %"Array(String)"* %0, %"Array(String)"** @"CallStack::skip"
  ret void
}

; Function Attrs: uwtable
define internal %"Array(String)"* @"*Array(String)@Array(T)::new:Array(String)"(i32 %self) #0 {
alloca:
  %_ = alloca %"Array(String)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(String)"* getelementptr (%"Array(String)", %"Array(String)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(String)"*
  %2 = bitcast %"Array(String)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(String)"* getelementptr (%"Array(String)", %"Array(String)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(String)", %"Array(String)"* %1, i32 0, i32 0
  store i32 7, i32* %3
  store %"Array(String)"* %1, %"Array(String)"** %_
  %4 = load %"Array(String)"*, %"Array(String)"** %_
  %5 = call %String** @"*Array(String)@Array(T)#initialize:Pointer(String)"(%"Array(String)"* %4)
  %6 = load %"Array(String)"*, %"Array(String)"** %_
  ret %"Array(String)"* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i32, i1) #2

; Function Attrs: uwtable
define internal %String** @"*Array(String)@Array(T)#initialize:Pointer(String)"(%"Array(String)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  store i32 0, i32* %0
  %1 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 2
  store i32 0, i32* %1
  %2 = call %String** @"*Pointer(String)@Pointer(T)::null:Pointer(String)"(i32 676)
  %3 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  store %String** %2, %String*** %3
  ret %String** %2
}

; Function Attrs: uwtable
define internal %String** @"*Pointer(String)@Pointer(T)::null:Pointer(String)"(i32 %self) #0 {
entry:
  ret %String** null
}

; Function Attrs: uwtable
define internal %"Array(String)"* @"*CallStack::skip<String>:Array(String)"(%String* %filename) #0 {
entry:
  %0 = call %"Array(String)"** @"~CallStack::skip:read"()
  %1 = load %"Array(String)"*, %"Array(String)"** %0
  %2 = call %"Array(String)"* @"*Array(String)@Array(T)#<<<String>:Array(String)"(%"Array(String)"* %1, %String* %filename)
  ret %"Array(String)"* %2
}

define internal %"Array(String)"** @"~CallStack::skip:read"() {
entry:
  %0 = load i1, i1* @"CallStack::skip:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"Array(String)"** @"CallStack::skip"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"CallStack::skip:init"
  call void @"~CallStack::skip:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal %"Array(String)"* @"*Array(String)@Array(T)#<<<String>:Array(String)"(%"Array(String)"* %self, %String* %value) #0 {
entry:
  %0 = call %"Array(String)"* @"*Array(String)@Array(T)#push<String>:Array(String)"(%"Array(String)"* %self, %String* %value)
  ret %"Array(String)"* %0
}

; Function Attrs: uwtable
define internal %"Array(String)"* @"*Array(String)@Array(T)#push<String>:Array(String)"(%"Array(String)"* %self, %String* %value) #0 {
entry:
  %0 = call %String** @"*Array(String)@Array(T)#check_needs_resize:(Pointer(String) | Nil)"(%"Array(String)"* %self)
  %1 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  %2 = load %String**, %String*** %1
  %3 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = call %String* @"*Pointer(String)@Pointer(T)#[]=<Int32, String>:String"(%String** %2, i32 %4, %String* %value)
  %6 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = add i32 %7, 1
  %9 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  store i32 %8, i32* %9
  ret %"Array(String)"* %self
}

; Function Attrs: uwtable
define internal %String** @"*Array(String)@Array(T)#check_needs_resize:(Pointer(String) | Nil)"(%"Array(String)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %String** @"*Array(String)@Array(T)#double_capacity:Pointer(String)"(%"Array(String)"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi %String** [ %5, %then ], [ null, %else ]
  ret %String** %6
}

; Function Attrs: uwtable
define internal %String** @"*Array(String)@Array(T)#double_capacity:Pointer(String)"(%"Array(String)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call %String** @"*Array(String)@Array(T)#resize_to_capacity<Int32>:Pointer(String)"(%"Array(String)"* %self, i32 %6)
  ret %String** %7
}

; Function Attrs: uwtable
define internal %String** @"*Array(String)@Array(T)#resize_to_capacity<Int32>:Pointer(String)"(%"Array(String)"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  %2 = load %String**, %String*** %1
  %3 = icmp ne %String** %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  %5 = load %String**, %String*** %4
  %6 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call %String** @"*Pointer(String)@Pointer(T)#realloc<Int32>:Pointer(String)"(%String** %5, i32 %7)
  %9 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  store %String** %8, %String*** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call %String** @"*Pointer(String)@Pointer(T)::malloc<Int32>:Pointer(String)"(i32 676, i32 %11)
  %13 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  store %String** %12, %String*** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi %String** [ %8, %then ], [ %12, %else ]
  ret %String** %14
}

; Function Attrs: uwtable
define internal %String** @"*Pointer(String)@Pointer(T)#realloc<Int32>:Pointer(String)"(%String** %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %String** %self to i8*
  %2 = mul i64 %0, ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %String**
  ret %String** %5
}

; Function Attrs: uwtable
define internal %String** @"*Pointer(String)@Pointer(T)::malloc<Int32>:Pointer(String)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %String**
  ret %String** %6
}

; Function Attrs: uwtable
define internal %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %message) #0 {
alloca:
  %_ = alloca %ArgumentError*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%ArgumentError* getelementptr (%ArgumentError, %ArgumentError* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %ArgumentError*
  %2 = bitcast %ArgumentError* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%ArgumentError* getelementptr (%ArgumentError, %ArgumentError* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %ArgumentError, %ArgumentError* %1, i32 0, i32 0
  store i32 35, i32* %3
  store %ArgumentError* %1, %ArgumentError** %_
  %4 = load %ArgumentError*, %ArgumentError** %_
  call void @"*ArgumentError#initialize<String>:Nil"(%ArgumentError* %4, %String* %message)
  %5 = load %ArgumentError*, %ArgumentError** %_
  ret %ArgumentError* %5
}

; Function Attrs: uwtable
define internal void @"*ArgumentError#initialize<String>:Nil"(%ArgumentError* %self, %String* %message) #0 {
entry:
  call void @"*ArgumentError@Exception#initialize<String>:Nil"(%ArgumentError* %self, %String* %message)
  ret void
}

; Function Attrs: uwtable
define internal void @"*ArgumentError@Exception#initialize<String>:Nil"(%ArgumentError* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %ArgumentError, %ArgumentError* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %ArgumentError, %ArgumentError* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*ArgumentError@Exception#callstack=<CallStack>:CallStack"(%ArgumentError* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %ArgumentError* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 35, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*CallStack::new:CallStack"() #0 {
alloca:
  %_ = alloca %CallStack.1
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %CallStack.1* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 trunc (i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2) to i32), i32 4, i1 false)
  %2 = load %CallStack.1, %CallStack.1* %0
  store %CallStack.1 %2, %CallStack.1* %_
  %3 = call %"Array(Pointer(Void)).2"* @"*CallStack#initialize:Array(Pointer(Void))"(%CallStack.1* %_)
  %4 = load %CallStack.1, %CallStack.1* %_
  ret %CallStack.1 %4
}

; Function Attrs: uwtable
define internal %"Array(Pointer(Void)).2"* @"*CallStack#initialize:Array(Pointer(Void))"(%CallStack.1* %self) #0 {
entry:
  %0 = call %"Array(Pointer(Void)).2"* @"*CallStack::unwind:Array(Pointer(Void))"()
  %1 = getelementptr inbounds %CallStack.1, %CallStack.1* %self, i32 0, i32 0
  store %"Array(Pointer(Void)).2"* %0, %"Array(Pointer(Void)).2"** %1
  ret %"Array(Pointer(Void)).2"* %0
}

; Function Attrs: uwtable
define internal %"Array(Pointer(Void)).2"* @"*CallStack::unwind:Array(Pointer(Void))"() #0 {
alloca:
  %callstack = alloca %"Array(Pointer(Void)).2"*
  %backtrace_fn = alloca %"->"
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)::new:Array(Pointer(Void))"(i32 439)
  store %"Array(Pointer(Void)).2"* %1, %"Array(Pointer(Void)).2"** %callstack
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (i32 (i8*, i8*)* @"~procProc(Pointer(Void), Pointer(Void), LibUnwind::ReasonCode)@/usr/local/Cellar/crystal-lang/0.20.4/src/callstack.cr:67" to i8*), i8** %2
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %3
  %4 = load %"->", %"->"* %0
  store %"->" %4, %"->"* %backtrace_fn
  %5 = load %"->", %"->"* %backtrace_fn
  %6 = call i8* @"~check_proc_is_not_closure"(%"->" %5)
  %7 = bitcast i8* %6 to i32 (i8*, i8*)*
  %8 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %callstack
  %9 = bitcast %"Array(Pointer(Void)).2"* %8 to i8*
  %10 = call i32 @_Unwind_Backtrace(i32 (i8*, i8*)* %7, i8* %9)
  %11 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %callstack
  ret %"Array(Pointer(Void)).2"* %11
}

; Function Attrs: uwtable
define internal %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)::new:Array(Pointer(Void))"(i32 %self) #0 {
alloca:
  %_ = alloca %"Array(Pointer(Void)).2"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(Pointer(Void)).2"* getelementptr (%"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(Pointer(Void)).2"*
  %2 = bitcast %"Array(Pointer(Void)).2"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(Pointer(Void)).2"* getelementptr (%"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %1, i32 0, i32 0
  store i32 8, i32* %3
  store %"Array(Pointer(Void)).2"* %1, %"Array(Pointer(Void)).2"** %_
  %4 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %_
  %5 = call i8** @"*Array(Pointer(Void))@Array(T)#initialize:Pointer(Pointer(Void))"(%"Array(Pointer(Void)).2"* %4)
  %6 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %_
  ret %"Array(Pointer(Void)).2"* %6
}

; Function Attrs: uwtable
define internal i8** @"*Array(Pointer(Void))@Array(T)#initialize:Pointer(Pointer(Void))"(%"Array(Pointer(Void)).2"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  store i32 0, i32* %0
  %1 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 2
  store i32 0, i32* %1
  %2 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)::null:Pointer(Pointer(Void))"(i32 640)
  %3 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  store i8** %2, i8*** %3
  ret i8** %2
}

; Function Attrs: uwtable
define internal i8** @"*Pointer(Pointer(Void))@Pointer(T)::null:Pointer(Pointer(Void))"(i32 %self) #0 {
entry:
  ret i8** null
}

; Function Attrs: uwtable
define internal i32 @"~procProc(Pointer(Void), Pointer(Void), LibUnwind::ReasonCode)@/usr/local/Cellar/crystal-lang/0.20.4/src/callstack.cr:67"(i8* %context, i8* %data) #0 {
alloca:
  %bt = alloca %"Array(Pointer(Void)).2"*
  %ip = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to %"Array(Pointer(Void)).2"*
  store %"Array(Pointer(Void)).2"* %0, %"Array(Pointer(Void)).2"** %bt
  %1 = call i64 @_Unwind_GetIP(i8* %context)
  %2 = inttoptr i64 %1 to i8*
  store i8* %2, i8** %ip
  %3 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %bt
  %4 = load i8*, i8** %ip
  %5 = call %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)#<<<Pointer(Void)>:Array(Pointer(Void))"(%"Array(Pointer(Void)).2"* %3, i8* %4)
  ret i32 0
}

declare i64 @_Unwind_GetIP(i8*)

; Function Attrs: uwtable
define internal %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)#<<<Pointer(Void)>:Array(Pointer(Void))"(%"Array(Pointer(Void)).2"* %self, i8* %value) #0 {
entry:
  %0 = call %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)#push<Pointer(Void)>:Array(Pointer(Void))"(%"Array(Pointer(Void)).2"* %self, i8* %value)
  ret %"Array(Pointer(Void)).2"* %0
}

; Function Attrs: uwtable
define internal %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)#push<Pointer(Void)>:Array(Pointer(Void))"(%"Array(Pointer(Void)).2"* %self, i8* %value) #0 {
entry:
  %0 = call i8** @"*Array(Pointer(Void))@Array(T)#check_needs_resize:(Pointer(Pointer(Void)) | Nil)"(%"Array(Pointer(Void)).2"* %self)
  %1 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  %2 = load i8**, i8*** %1
  %3 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = call i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]=<Int32, Pointer(Void)>:Pointer(Void)"(i8** %2, i32 %4, i8* %value)
  %6 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = add i32 %7, 1
  %9 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  store i32 %8, i32* %9
  ret %"Array(Pointer(Void)).2"* %self
}

; Function Attrs: uwtable
define internal i8** @"*Array(Pointer(Void))@Array(T)#check_needs_resize:(Pointer(Pointer(Void)) | Nil)"(%"Array(Pointer(Void)).2"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call i8** @"*Array(Pointer(Void))@Array(T)#double_capacity:Pointer(Pointer(Void))"(%"Array(Pointer(Void)).2"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i8** [ %5, %then ], [ null, %else ]
  ret i8** %6
}

; Function Attrs: uwtable
define internal i8** @"*Array(Pointer(Void))@Array(T)#double_capacity:Pointer(Pointer(Void))"(%"Array(Pointer(Void)).2"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call i8** @"*Array(Pointer(Void))@Array(T)#resize_to_capacity<Int32>:Pointer(Pointer(Void))"(%"Array(Pointer(Void)).2"* %self, i32 %6)
  ret i8** %7
}

; Function Attrs: uwtable
define internal i8** @"*Array(Pointer(Void))@Array(T)#resize_to_capacity<Int32>:Pointer(Pointer(Void))"(%"Array(Pointer(Void)).2"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  %2 = load i8**, i8*** %1
  %3 = icmp ne i8** %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  %5 = load i8**, i8*** %4
  %6 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)#realloc<Int32>:Pointer(Pointer(Void))"(i8** %5, i32 %7)
  %9 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  store i8** %8, i8*** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)::malloc<Int32>:Pointer(Pointer(Void))"(i32 640, i32 %11)
  %13 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  store i8** %12, i8*** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi i8** [ %8, %then ], [ %12, %else ]
  ret i8** %14
}

; Function Attrs: uwtable
define internal i8** @"*Pointer(Pointer(Void))@Pointer(T)#realloc<Int32>:Pointer(Pointer(Void))"(i8** %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast i8** %self to i8*
  %2 = mul i64 %0, ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to i8**
  ret i8** %5
}

; Function Attrs: uwtable
define internal i8** @"*Pointer(Pointer(Void))@Pointer(T)::malloc<Int32>:Pointer(Pointer(Void))"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to i8**
  ret i8** %6
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]=<Int32, Pointer(Void)>:Pointer(Void)"(i8** %self, i32 %offset, i8* %value) #0 {
entry:
  %0 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)#+<Int32>:Pointer(Pointer(Void))"(i8** %self, i32 %offset)
  store i8* %value, i8** %0
  ret i8* %value
}

; Function Attrs: uwtable
define internal i8** @"*Pointer(Pointer(Void))@Pointer(T)#+<Int32>:Pointer(Pointer(Void))"(i8** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds i8*, i8** %self, i64 %0
  ret i8** %1
}

define internal i8* @"~check_proc_is_not_closure"(%"->") {
entry:
  %1 = extractvalue %"->" %0, 0
  %2 = extractvalue %"->" %0, 1
  %3 = icmp eq i8* %2, null
  br i1 %3, label %ctx_is_null, label %ctx_is_not_null

ctx_is_null:                                      ; preds = %entry
  ret i8* %1

ctx_is_not_null:                                  ; preds = %entry
  call void @"*raise<String>:NoReturn"(%String* bitcast ({ i32, i32, i32, [38 x i8] }* @"'passing a closure t...'" to %String*))
  unreachable
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<String>:NoReturn"(%String* %message) #1 {
entry:
  %0 = call %Exception* @"*Exception::new<String>:Exception"(%String* %message)
  call void @"*raise<Exception>:NoReturn"(%Exception* %0)
  unreachable
}

; Function Attrs: uwtable
define internal %Exception* @"*Exception::new<String>:Exception"(%String* %__arg0) #0 {
alloca:
  %_ = alloca %Exception*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%Exception* getelementptr (%Exception, %Exception* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %Exception*
  %2 = bitcast %Exception* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%Exception* getelementptr (%Exception, %Exception* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %Exception, %Exception* %1, i32 0, i32 0
  store i32 48, i32* %3
  store %Exception* %1, %Exception** %_
  %4 = load %Exception*, %Exception** %_
  call void @"*Exception#initialize<String>:Nil"(%Exception* %4, %String* %__arg0)
  %5 = load %Exception*, %Exception** %_
  ret %Exception* %5
}

; Function Attrs: uwtable
define internal void @"*Exception#initialize<String>:Nil"(%Exception* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %Exception, %Exception* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %Exception, %Exception* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<Exception>:NoReturn"(%Exception* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*Exception#callstack=<CallStack>:CallStack"(%Exception* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %Exception* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 48, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*Exception#callstack=<CallStack>:CallStack"(%Exception* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %Exception, %Exception* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 %self) #0 {
alloca:
  %size = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1, i32* %size
  %0 = load i32, i32* %size
  %1 = icmp slt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = load i32, i32* %size
  %4 = sext i32 %3 to i64
  %5 = trunc i64 %4 to i32
  %6 = mul i32 ptrtoint (%"struct.LibUnwind::Exception"* getelementptr (%"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* null, i32 1) to i32), %5
  %7 = call i8* @__crystal_malloc(i32 %6)
  call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %6, i32 4, i1 false)
  %8 = bitcast i8* %7 to %"struct.LibUnwind::Exception"*
  ret %"struct.LibUnwind::Exception"* %8
}

; Function Attrs: uwtable
define internal i64 @"*UInt64@Number::zero:UInt64"() #0 {
entry:
  %0 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 0)
  ret i64 %0
}

; Function Attrs: uwtable
define internal i64 @"*UInt64::new<Int32>:UInt64"(i32 %value) #0 {
entry:
  %0 = sext i32 %value to i64
  ret i64 %0
}

declare i32 @_Unwind_Backtrace(i32 (i8*, i8*)*, i8*)

; Function Attrs: uwtable
define internal %CallStack.1 @"*ArgumentError@Exception#callstack=<CallStack>:CallStack"(%ArgumentError* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %ArgumentError, %ArgumentError* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal %String* @"*Pointer(String)@Pointer(T)#[]=<Int32, String>:String"(%String** %self, i32 %offset, %String* %value) #0 {
entry:
  %0 = call %String** @"*Pointer(String)@Pointer(T)#+<Int32>:Pointer(String)"(%String** %self, i32 %offset)
  store %String* %value, %String** %0
  ret %String* %value
}

; Function Attrs: uwtable
define internal %String** @"*Pointer(String)@Pointer(T)#+<Int32>:Pointer(String)"(%String** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %String*, %String** %self, i64 %0
  ret %String** %1
}

define internal void @"~String::TYPE_ID:init"() {
entry:
  ret void
}

define internal void @"~IO::Decoder::BUFFER_SIZE:init"() {
entry:
  ret void
}

define internal void @"~IO::Decoder::OUT_BUFFER_SIZE:init"() {
entry:
  ret void
}

define internal void @"~LibC::MAP_FAILED:init"() {
entry:
  %0 = call i8* @"*Pointer(Void)@Pointer(T)::new<Int32>:Pointer(Void)"(i32 622, i32 -1)
  store i8* %0, i8** @"LibC::MAP_FAILED"
  ret void
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(Void)@Pointer(T)::new<Int32>:Pointer(Void)"(i32 %self, i32 %address) #0 {
entry:
  %0 = sext i32 %address to i64
  %1 = inttoptr i64 %0 to i8*
  ret i8* %1
}

; Function Attrs: noinline uwtable
define i8* @_fiber_get_stack_top() #3 {
alloca:
  %dummy = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %dummy to i8*
  ret i8* %0
}

define internal void @"~Fiber::STACK_SIZE:init"() {
entry:
  ret void
}

define internal void @"~Fiber::stack_pool:init"() {
entry:
  %0 = call %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)::new:Array(Pointer(Void))"(i32 439)
  store %"Array(Pointer(Void)).2"* %0, %"Array(Pointer(Void)).2"** @"Fiber::stack_pool"
  ret void
}

define internal void @"~Fiber::root:init"() {
entry:
  %0 = call %Fiber* @"*Fiber::new:Fiber"()
  store %Fiber* %0, %Fiber** @"Fiber::root"
  ret void
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber::new:Fiber"() #0 {
alloca:
  %_ = alloca %Fiber*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%Fiber* getelementptr (%Fiber, %Fiber* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %Fiber*
  %2 = bitcast %Fiber* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%Fiber* getelementptr (%Fiber, %Fiber* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %Fiber, %Fiber* %1, i32 0, i32 0
  store i32 79, i32* %3
  store %Fiber* %1, %Fiber** %_
  %4 = load %Fiber*, %Fiber** %_
  %5 = call %Fiber* @"*Fiber#initialize:Fiber"(%Fiber* %4)
  %6 = load %Fiber*, %Fiber** %_
  ret %Fiber* %6
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber#initialize:Fiber"(%Fiber* %self) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void ()* @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/fiber.cr:83" to i8*), i8** %1
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %2
  %3 = load %"->", %"->"* %0
  %4 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 8
  %5 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %4, i32 0, i32 0
  store i32 392, i32* %5
  %6 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %4, i32 0, i32 1
  %7 = bitcast [2 x i64]* %6 to %"->"*
  store %"->" %3, %"->"* %7
  %8 = call i8* @"*Pointer(Void)@Pointer(T)::null:Pointer(Void)"(i32 622)
  %9 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  store i8* %8, i8** %9
  %10 = call i8* @_fiber_get_stack_top()
  %11 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 3
  store i8* %10, i8** %11
  %12 = load i8*, i8** @GC_stackbottom
  %13 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 4
  store i8* %12, i8** %13
  %14 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 7
  store %String* bitcast ({ i32, i32, i32, [5 x i8] }* @"'main'" to %String*), %String** %14
  store %Fiber* %self, %Fiber** @"Fiber::last_fiber"
  store %Fiber* %self, %Fiber** @"Fiber::first_fiber"
  ret %Fiber* %self
}

; Function Attrs: uwtable
define internal void @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/fiber.cr:83"() #0 {
entry:
  ret void
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(Void)@Pointer(T)::null:Pointer(Void)"(i32 %self) #0 {
entry:
  ret i8* null
}

; Function Attrs: uwtable
define internal %Thread* @"*Thread::current:Thread"() #0 {
entry:
  %0 = call %Thread** @"~Thread::current:read"()
  %1 = load %Thread*, %Thread** %0
  ret %Thread* %1
}

define internal %Thread** @"~Thread::current:read"() {
entry:
  %0 = load i1, i1* @"Thread::current:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %Thread** @"Thread::current"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Thread::current:init"
  call void @"~Thread::current:init"()
  br label %initialized
}

define internal void @"~Thread::current:init"() {
entry:
  %0 = call %Thread* @"*Thread::new:Thread"()
  store %Thread* %0, %Thread** @"Thread::current"
  ret void
}

; Function Attrs: uwtable
define internal %Thread* @"*Thread::new:Thread"() #0 {
alloca:
  %_ = alloca %Thread*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%Thread* getelementptr (%Thread, %Thread* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %Thread*
  %2 = bitcast %Thread* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%Thread* getelementptr (%Thread, %Thread* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %Thread, %Thread* %1, i32 0, i32 3
  store i1 false, i1* %3
  %4 = getelementptr inbounds %Thread, %Thread* %1, i32 0, i32 0
  store i32 131, i32* %4
  store %Thread* %1, %Thread** %_
  %5 = load %Thread*, %Thread** %_
  %6 = call i8* @"*Thread#initialize:Pointer(Void)"(%Thread* %5)
  %7 = load %Thread*, %Thread** %_
  call void @"*GC::add_finalizer<Thread>:Nil"(%Thread* %7)
  %8 = load %Thread*, %Thread** %_
  ret %Thread* %8
}

; Function Attrs: uwtable
define internal i8* @"*Thread#initialize:Pointer(Void)"(%Thread* %self) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void ()* @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/thread.cr:31" to i8*), i8** %1
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %2
  %3 = load %"->", %"->"* %0
  %4 = getelementptr inbounds %Thread, %Thread* %self, i32 0, i32 4
  store %"->" %3, %"->"* %4
  %5 = call %"Set(Thread)"* @"~Thread::threads:read"()
  %6 = call %"Set(Thread)" @"*Set(Thread)@Set(T)#<<<Thread>:Set(Thread)"(%"Set(Thread)"* %5, %Thread* %self)
  %7 = call i8* @pthread_self()
  %8 = getelementptr inbounds %Thread, %Thread* %self, i32 0, i32 1
  store i8* %7, i8** %8
  ret i8* %7
}

; Function Attrs: uwtable
define internal void @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/thread.cr:31"() #0 {
entry:
  ret void
}

define internal %"Set(Thread)"* @"~Thread::threads:read"() {
entry:
  %0 = load i1, i1* @"Thread::threads:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"Set(Thread)"* @"Thread::threads"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Thread::threads:init"
  call void @"~Thread::threads:init"()
  br label %initialized
}

define internal void @"~Thread::threads:init"() {
alloca:
  %0 = alloca %"Set(Thread)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Set(Thread)" @"*Set(Thread)@Set(T)::new:Set(Thread)"(i32 933)
  store %"Set(Thread)" %1, %"Set(Thread)"* %0
  %2 = load %"Set(Thread)", %"Set(Thread)"* %0
  store %"Set(Thread)" %2, %"Set(Thread)"* @"Thread::threads"
  ret void
}

; Function Attrs: uwtable
define internal %"Set(Thread)" @"*Set(Thread)@Set(T)::new:Set(Thread)"(i32 %self) #0 {
alloca:
  %_ = alloca %"Set(Thread)"
  %0 = alloca %"Set(Thread)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Set(Thread)"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Set(Thread)", %"Set(Thread)"* %0
  store %"Set(Thread)" %2, %"Set(Thread)"* %_
  %3 = call %"Hash(Thread, Nil)"* @"*Set(Thread)@Set(T)#initialize:Hash(Thread, Nil)"(%"Set(Thread)"* %_)
  %4 = load %"Set(Thread)", %"Set(Thread)"* %_
  ret %"Set(Thread)" %4
}

; Function Attrs: uwtable
define internal %"Hash(Thread, Nil)"* @"*Set(Thread)@Set(T)#initialize:Hash(Thread, Nil)"(%"Set(Thread)"* %self) #0 {
alloca:
  %initial_capacity = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = load %Nil, %Nil* %initial_capacity
  %1 = call %"Hash(Thread, Nil)"* @"*Set(Thread)@Set(T)#initialize<Nil>:Hash(Thread, Nil)"(%"Set(Thread)"* %self, %Nil zeroinitializer)
  ret %"Hash(Thread, Nil)"* %1
}

; Function Attrs: uwtable
define internal %"Hash(Thread, Nil)"* @"*Set(Thread)@Set(T)#initialize<Nil>:Hash(Thread, Nil)"(%"Set(Thread)"* %self, %Nil %initial_capacity) #0 {
entry:
  %0 = call %"Hash(Thread, Nil)"* @"*Hash(Thread, Nil)@Hash(K, V)::new:initial_capacity<Nil>:Hash(Thread, Nil)"(i32 479, %Nil zeroinitializer)
  %1 = getelementptr inbounds %"Set(Thread)", %"Set(Thread)"* %self, i32 0, i32 0
  store %"Hash(Thread, Nil)"* %0, %"Hash(Thread, Nil)"** %1
  ret %"Hash(Thread, Nil)"* %0
}

; Function Attrs: uwtable
define internal %"Hash(Thread, Nil)"* @"*Hash(Thread, Nil)@Hash(K, V)::new:initial_capacity<Nil>:Hash(Thread, Nil)"(i32 %self, %Nil %initial_capacity) #0 {
alloca:
  %_ = alloca %"Hash(Thread, Nil)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Hash(Thread, Nil)"* getelementptr (%"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Hash(Thread, Nil)"*
  %2 = bitcast %"Hash(Thread, Nil)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Hash(Thread, Nil)"* getelementptr (%"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %1, i32 0, i32 0
  store i32 30, i32* %3
  store %"Hash(Thread, Nil)"* %1, %"Hash(Thread, Nil)"** %_
  %4 = load %"Hash(Thread, Nil)"*, %"Hash(Thread, Nil)"** %_
  call void @"*Hash(Thread, Nil)@Hash(K, V)#initialize:initial_capacity<Nil>:Nil"(%"Hash(Thread, Nil)"* %4, %Nil zeroinitializer)
  %5 = load %"Hash(Thread, Nil)"*, %"Hash(Thread, Nil)"** %_
  ret %"Hash(Thread, Nil)"* %5
}

; Function Attrs: uwtable
define internal void @"*Hash(Thread, Nil)@Hash(K, V)#initialize:initial_capacity<Nil>:Nil"(%"Hash(Thread, Nil)"* %self, %Nil %initial_capacity) #0 {
alloca:
  %block = alloca %Nil
  %initial_capacity1 = alloca %"(Int32 | Nil)"
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 0
  store i32 0, i32* %1
  %2 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %2
  %3 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 0
  store i32 138, i32* %3
  %4 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i32*
  store i32 11, i32* %5
  %6 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to i32*
  %8 = load i32, i32* %7
  %9 = icmp slt i32 %8, 11
  br i1 %9, label %then, label %else

then:                                             ; preds = %entry
  %10 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 0
  store i32 138, i32* %10
  %11 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 1
  %12 = bitcast [1 x i64]* %11 to i32*
  store i32 11, i32* %12
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %13 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 1
  %14 = bitcast [1 x i64]* %13 to i32*
  %15 = load i32, i32* %14
  %16 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 0
  store i32 138, i32* %16
  %17 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 1
  %18 = bitcast [1 x i64]* %17 to i32*
  store i32 %15, i32* %18
  %19 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 1
  %20 = bitcast [1 x i64]* %19 to i32*
  %21 = load i32, i32* %20
  %22 = call %"Hash::Entry(Thread, Nil)"** @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)::malloc<Int32>:Pointer(Hash::Entry(Thread, Nil) | Nil)"(i32 712, i32 %21)
  %23 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 6
  store %"Hash::Entry(Thread, Nil)"** %22, %"Hash::Entry(Thread, Nil)"*** %23
  %24 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity1, i32 0, i32 1
  %25 = bitcast [1 x i64]* %24 to i32*
  %26 = load i32, i32* %25
  %27 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 2
  store i32 %26, i32* %27
  %28 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 1
  store i32 0, i32* %28
  %29 = load %Nil, %Nil* %block
  %30 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 5
  %31 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %31
  %32 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %32
  %33 = load %"->", %"->"* %0
  store %"->" %33, %"->"* %30
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"** @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)::malloc<Int32>:Pointer(Hash::Entry(Thread, Nil) | Nil)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Hash::Entry(Thread, Nil)"**
  ret %"Hash::Entry(Thread, Nil)"** %6
}

; Function Attrs: uwtable
define internal %"Set(Thread)" @"*Set(Thread)@Set(T)#<<<Thread>:Set(Thread)"(%"Set(Thread)"* %self, %Thread* %object) #0 {
alloca:
  %0 = alloca %"Set(Thread)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Set(Thread)" @"*Set(Thread)@Set(T)#add<Thread>:Set(Thread)"(%"Set(Thread)"* %self, %Thread* %object)
  store %"Set(Thread)" %1, %"Set(Thread)"* %0
  %2 = load %"Set(Thread)", %"Set(Thread)"* %0
  ret %"Set(Thread)" %2
}

; Function Attrs: uwtable
define internal %"Set(Thread)" @"*Set(Thread)@Set(T)#add<Thread>:Set(Thread)"(%"Set(Thread)"* %self, %Thread* %object) #0 {
entry:
  %0 = getelementptr inbounds %"Set(Thread)", %"Set(Thread)"* %self, i32 0, i32 0
  %1 = load %"Hash(Thread, Nil)"*, %"Hash(Thread, Nil)"** %0
  call void @"*Hash(Thread, Nil)@Hash(K, V)#[]=<Thread, Nil>:Nil"(%"Hash(Thread, Nil)"* %1, %Thread* %object, %Nil zeroinitializer)
  %2 = load %"Set(Thread)", %"Set(Thread)"* %self
  ret %"Set(Thread)" %2
}

; Function Attrs: uwtable
define internal void @"*Hash(Thread, Nil)@Hash(K, V)#[]=<Thread, Nil>:Nil"(%"Hash(Thread, Nil)"* %self, %Thread* %key, %Nil %value) #0 {
alloca:
  %index = alloca i32
  %entry1 = alloca %"Hash::Entry(Thread, Nil)"*
  %last = alloca %"Hash::Entry(Thread, Nil)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = mul i32 5, %3
  %5 = icmp sgt i32 %1, %4
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  call void @"*Hash(Thread, Nil)@Hash(K, V)#rehash:Nil"(%"Hash(Thread, Nil)"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i32 @"*Hash(Thread, Nil)@Hash(K, V)#bucket_index<Thread>:Int32"(%"Hash(Thread, Nil)"* %self, %Thread* %key)
  store i32 %6, i32* %index
  %7 = load i32, i32* %index
  %8 = call %"Hash::Entry(Thread, Nil)"* @"*Hash(Thread, Nil)@Hash(K, V)#insert_in_bucket<Int32, Thread, Nil>:(Hash::Entry(Thread, Nil) | Nil)"(%"Hash(Thread, Nil)"* %self, i32 %7, %Thread* %key, %Nil zeroinitializer)
  store %"Hash::Entry(Thread, Nil)"* %8, %"Hash::Entry(Thread, Nil)"** %entry1
  %9 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %10 = icmp ne %"Hash::Entry(Thread, Nil)"* %9, null
  br i1 %10, label %then2, label %else3

then2:                                            ; preds = %exit
  br label %exit4

else3:                                            ; preds = %exit
  ret void

exit4:                                            ; preds = %then2
  %11 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 1
  %12 = load i32, i32* %11
  %13 = add i32 %12, 1
  %14 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 1
  store i32 %13, i32* %14
  %15 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 4
  %16 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %15
  store %"Hash::Entry(Thread, Nil)"* %16, %"Hash::Entry(Thread, Nil)"** %last
  %17 = icmp ne %"Hash::Entry(Thread, Nil)"* %16, null
  br i1 %17, label %then5, label %else6

then5:                                            ; preds = %exit4
  %18 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %last
  %19 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %20 = call %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#fore=<Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"* %18, %"Hash::Entry(Thread, Nil)"* %19)
  %21 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %22 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %last
  %23 = call %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#back=<Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"* %21, %"Hash::Entry(Thread, Nil)"* %22)
  br label %exit7

else6:                                            ; preds = %exit4
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %24 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %25 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 4
  store %"Hash::Entry(Thread, Nil)"* %24, %"Hash::Entry(Thread, Nil)"** %25
  %26 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 3
  %27 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %26
  %28 = icmp ne %"Hash::Entry(Thread, Nil)"* %27, null
  br i1 %28, label %then8, label %else9

then8:                                            ; preds = %exit7
  br label %exit10

else9:                                            ; preds = %exit7
  %29 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %30 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 3
  store %"Hash::Entry(Thread, Nil)"* %29, %"Hash::Entry(Thread, Nil)"** %30
  br label %exit10

exit10:                                           ; preds = %else9, %then8
  ret void
}

; Function Attrs: uwtable
define internal void @"*Hash(Thread, Nil)@Hash(K, V)#rehash:Nil"(%"Hash(Thread, Nil)"* %self) #0 {
alloca:
  %new_size = alloca i32
  %entry1 = alloca %"Hash::Entry(Thread, Nil)"*
  %index = alloca i32
  %i = alloca i32
  %i2 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = call i32 @"*Hash(Thread, Nil)@Hash(K, V)#calculate_new_size<Int32>:Int32"(%"Hash(Thread, Nil)"* %self, i32 %1)
  store i32 %2, i32* %new_size
  %3 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 6
  %4 = load %"Hash::Entry(Thread, Nil)"**, %"Hash::Entry(Thread, Nil)"*** %3
  %5 = load i32, i32* %new_size
  %6 = call %"Hash::Entry(Thread, Nil)"** @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#realloc<Int32>:Pointer(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %4, i32 %5)
  %7 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 6
  store %"Hash::Entry(Thread, Nil)"** %6, %"Hash::Entry(Thread, Nil)"*** %7
  %8 = load i32, i32* %new_size
  %9 = xor i32 %8, %8
  store i32 %9, i32* %i2
  br label %while

while:                                            ; preds = %body, %entry
  %10 = load i32, i32* %i2
  %11 = icmp slt i32 %10, %8
  br i1 %11, label %body, label %exit

body:                                             ; preds = %while
  %12 = load i32, i32* %i2
  store i32 %12, i32* %i
  %13 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 6
  %14 = load %"Hash::Entry(Thread, Nil)"**, %"Hash::Entry(Thread, Nil)"*** %13
  %15 = load i32, i32* %i
  call void @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#[]=<Int32, Nil>:Nil"(%"Hash::Entry(Thread, Nil)"** %14, i32 %15, %Nil zeroinitializer)
  %16 = load i32, i32* %i2
  %17 = add i32 %16, 1
  store i32 %17, i32* %i2
  br label %while

exit:                                             ; preds = %while
  %18 = load i32, i32* %new_size
  %19 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 2
  store i32 %18, i32* %19
  %20 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 4
  %21 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %20
  store %"Hash::Entry(Thread, Nil)"* %21, %"Hash::Entry(Thread, Nil)"** %entry1
  br label %while3

while3:                                           ; preds = %body4, %exit
  %22 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %23 = icmp ne %"Hash::Entry(Thread, Nil)"* %22, null
  br i1 %23, label %body4, label %exit5

body4:                                            ; preds = %while3
  %24 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %25 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %24, i32 0, i32 1
  %26 = load %Thread*, %Thread** %25
  %27 = call i32 @"*Hash(Thread, Nil)@Hash(K, V)#bucket_index<Thread>:Int32"(%"Hash(Thread, Nil)"* %self, %Thread* %26)
  store i32 %27, i32* %index
  %28 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %29 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 6
  %30 = load %"Hash::Entry(Thread, Nil)"**, %"Hash::Entry(Thread, Nil)"*** %29
  %31 = load i32, i32* %index
  %32 = call %"Hash::Entry(Thread, Nil)"* @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %30, i32 %31)
  %33 = call %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#next=<(Hash::Entry(Thread, Nil) | Nil)>:(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"* %28, %"Hash::Entry(Thread, Nil)"* %32)
  %34 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 6
  %35 = load %"Hash::Entry(Thread, Nil)"**, %"Hash::Entry(Thread, Nil)"*** %34
  %36 = load i32, i32* %index
  %37 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %38 = call %"Hash::Entry(Thread, Nil)"* @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"** %35, i32 %36, %"Hash::Entry(Thread, Nil)"* %37)
  %39 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %40 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %39, i32 0, i32 5
  %41 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %40
  store %"Hash::Entry(Thread, Nil)"* %41, %"Hash::Entry(Thread, Nil)"** %entry1
  br label %while3

exit5:                                            ; preds = %while3
  ret void
}

; Function Attrs: uwtable
define internal i32 @"*Hash(Thread, Nil)@Hash(K, V)#calculate_new_size<Int32>:Int32"(%"Hash(Thread, Nil)"* %self, i32 %size) #0 {
alloca:
  %new_size = alloca i32
  %hash_size = alloca i32
  %i = alloca i32
  %i1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 8, i32* %new_size
  %0 = call %"Array(Int32)"** @"~Hash::HASH_PRIMES:read"()
  %1 = load %"Array(Int32)"*, %"Array(Int32)"** %0
  store i32 0, i32* %i1
  br label %while

while:                                            ; preds = %else, %entry
  %2 = load i32, i32* %i1
  %3 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %1, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %body, label %exit

body:                                             ; preds = %while
  %6 = load i32, i32* %i1
  store i32 %6, i32* %i
  %7 = load i32, i32* %i
  %8 = call i32 @"*Array(Int32)@Array(T)#unsafe_at<Int32>:Int32"(%"Array(Int32)"* %1, i32 %7)
  store i32 %8, i32* %hash_size
  %9 = load i32, i32* %new_size
  %10 = icmp sgt i32 %9, %size
  br i1 %10, label %then, label %else

exit:                                             ; preds = %while
  call void @"*raise<String>:NoReturn"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Hash table too big'" to %String*))
  unreachable

then:                                             ; preds = %body
  %11 = load i32, i32* %hash_size
  ret i32 %11

else:                                             ; preds = %body
  %12 = load i32, i32* %new_size
  %13 = call i32 @"*Int32@Int#<<<Int32>:Int32"(i32 %12, i32 1)
  store i32 %13, i32* %new_size
  %14 = load i32, i32* %i1
  %15 = add i32 %14, 1
  store i32 %15, i32* %i1
  br label %while
}

define internal %"Array(Int32)"** @"~Hash::HASH_PRIMES:read"() {
entry:
  %0 = load i1, i1* @"Hash::HASH_PRIMES:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"Array(Int32)"** @"Hash::HASH_PRIMES"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Hash::HASH_PRIMES:init"
  call void @"~Hash::HASH_PRIMES:init"()
  br label %initialized
}

define internal void @"~Hash::HASH_PRIMES:init"() {
alloca:
  %__temp_20 = alloca i32*
  %capacity = alloca i32
  %ary = alloca %"Array(Int32)"*
  br label %entry

entry:                                            ; preds = %alloca
  store i32 29, i32* %capacity
  %0 = load i32, i32* %capacity
  %1 = call %"Array(Int32)"* @"*Array(Int32)@Array(T)::new<Int32>:Array(Int32)"(i32 447, i32 %0)
  store %"Array(Int32)"* %1, %"Array(Int32)"** %ary
  %2 = load %"Array(Int32)"*, %"Array(Int32)"** %ary
  %3 = load %"Array(Int32)"*, %"Array(Int32)"** %ary
  %4 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %3, i32 0, i32 3
  %5 = load i32*, i32** %4
  store i32* %5, i32** %__temp_20
  %6 = load i32*, i32** %__temp_20
  %7 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %6, i32 0, i32 11)
  %8 = load i32*, i32** %__temp_20
  %9 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %8, i32 1, i32 19)
  %10 = load i32*, i32** %__temp_20
  %11 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %10, i32 2, i32 37)
  %12 = load i32*, i32** %__temp_20
  %13 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %12, i32 3, i32 67)
  %14 = load i32*, i32** %__temp_20
  %15 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %14, i32 4, i32 131)
  %16 = load i32*, i32** %__temp_20
  %17 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %16, i32 5, i32 283)
  %18 = load i32*, i32** %__temp_20
  %19 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %18, i32 6, i32 521)
  %20 = load i32*, i32** %__temp_20
  %21 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %20, i32 7, i32 1033)
  %22 = load i32*, i32** %__temp_20
  %23 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %22, i32 8, i32 2053)
  %24 = load i32*, i32** %__temp_20
  %25 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %24, i32 9, i32 4099)
  %26 = load i32*, i32** %__temp_20
  %27 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %26, i32 10, i32 8219)
  %28 = load i32*, i32** %__temp_20
  %29 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %28, i32 11, i32 16427)
  %30 = load i32*, i32** %__temp_20
  %31 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %30, i32 12, i32 32771)
  %32 = load i32*, i32** %__temp_20
  %33 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %32, i32 13, i32 65581)
  %34 = load i32*, i32** %__temp_20
  %35 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %34, i32 14, i32 131101)
  %36 = load i32*, i32** %__temp_20
  %37 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %36, i32 15, i32 262147)
  %38 = load i32*, i32** %__temp_20
  %39 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %38, i32 16, i32 524309)
  %40 = load i32*, i32** %__temp_20
  %41 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %40, i32 17, i32 1048583)
  %42 = load i32*, i32** %__temp_20
  %43 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %42, i32 18, i32 2097169)
  %44 = load i32*, i32** %__temp_20
  %45 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %44, i32 19, i32 4194319)
  %46 = load i32*, i32** %__temp_20
  %47 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %46, i32 20, i32 8388617)
  %48 = load i32*, i32** %__temp_20
  %49 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %48, i32 21, i32 16777259)
  %50 = load i32*, i32** %__temp_20
  %51 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %50, i32 22, i32 33554467)
  %52 = load i32*, i32** %__temp_20
  %53 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %52, i32 23, i32 67108879)
  %54 = load i32*, i32** %__temp_20
  %55 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %54, i32 24, i32 134217757)
  %56 = load i32*, i32** %__temp_20
  %57 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %56, i32 25, i32 268435459)
  %58 = load i32*, i32** %__temp_20
  %59 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %58, i32 26, i32 536870923)
  %60 = load i32*, i32** %__temp_20
  %61 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %60, i32 27, i32 1073741909)
  %62 = load i32*, i32** %__temp_20
  %63 = call i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %62, i32 28, i32 0)
  %64 = call i32 @"*Array(Int32)@Array(T)#size=<Int32>:Int32"(%"Array(Int32)"* %2, i32 29)
  %65 = load %"Array(Int32)"*, %"Array(Int32)"** %ary
  store %"Array(Int32)"* %65, %"Array(Int32)"** @"Hash::HASH_PRIMES"
  ret void
}

; Function Attrs: uwtable
define internal %"Array(Int32)"* @"*Array(Int32)@Array(T)::new<Int32>:Array(Int32)"(i32 %self, i32 %initial_capacity) #0 {
alloca:
  %_ = alloca %"Array(Int32)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(Int32)"* getelementptr (%"Array(Int32)", %"Array(Int32)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(Int32)"*
  %2 = bitcast %"Array(Int32)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(Int32)"* getelementptr (%"Array(Int32)", %"Array(Int32)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %1, i32 0, i32 0
  store i32 10, i32* %3
  store %"Array(Int32)"* %1, %"Array(Int32)"** %_
  %4 = load %"Array(Int32)"*, %"Array(Int32)"** %_
  %5 = call i32* @"*Array(Int32)@Array(T)#initialize<Int32>:Pointer(Int32)"(%"Array(Int32)"* %4, i32 %initial_capacity)
  %6 = load %"Array(Int32)"*, %"Array(Int32)"** %_
  ret %"Array(Int32)"* %6
}

; Function Attrs: uwtable
define internal i32* @"*Array(Int32)@Array(T)#initialize<Int32>:Pointer(Int32)"(%"Array(Int32)"* %self, i32 %initial_capacity) #0 {
entry:
  %0 = icmp slt i32 %initial_capacity, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* bitcast ({ i32, i32, i32, [22 x i8] }* @"'negative array size...'" to %String*))
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %2, i32 %initial_capacity)
  %4 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %3)
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %4)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

else:                                             ; preds = %entry
  %6 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %self, i32 0, i32 1
  store i32 0, i32* %6
  %7 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %self, i32 0, i32 2
  store i32 %initial_capacity, i32* %7
  %8 = icmp eq i32 %initial_capacity, 0
  br i1 %8, label %then1, label %else2

then1:                                            ; preds = %else
  %9 = call i32* @"*Pointer(Int32)@Pointer(T)::null:Pointer(Int32)"(i32 629)
  %10 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %self, i32 0, i32 3
  store i32* %9, i32** %10
  br label %exit

else2:                                            ; preds = %else
  %11 = call i32* @"*Pointer(Int32)@Pointer(T)::malloc<Int32>:Pointer(Int32)"(i32 629, i32 %initial_capacity)
  %12 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %self, i32 0, i32 3
  store i32* %11, i32** %12
  br label %exit

exit:                                             ; preds = %else2, %then1
  %13 = phi i32* [ %9, %then1 ], [ %11, %else2 ]
  ret i32* %13
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*String::Builder::new:String::Builder"() #0 {
alloca:
  %_ = alloca %"String::Builder"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"String::Builder"* getelementptr (%"String::Builder", %"String::Builder"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"String::Builder"*
  %2 = bitcast %"String::Builder"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"String::Builder"* getelementptr (%"String::Builder", %"String::Builder"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"String::Builder", %"String::Builder"* %1, i32 0, i32 0
  store i32 74, i32* %3
  store %"String::Builder"* %1, %"String::Builder"** %_
  %4 = load %"String::Builder"*, %"String::Builder"** %_
  %5 = call i1 @"*String::Builder#initialize:Bool"(%"String::Builder"* %4)
  %6 = load %"String::Builder"*, %"String::Builder"** %_
  ret %"String::Builder"* %6
}

; Function Attrs: uwtable
define internal i1 @"*String::Builder#initialize:Bool"(%"String::Builder"* %self) #0 {
alloca:
  %capacity = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 64, i32* %capacity
  %0 = load i32, i32* %capacity
  call void @"*String::check_capacity_in_bounds<Int32>:Nil"(i32 %0)
  %1 = load i32, i32* %capacity
  %2 = add i32 %1, 13
  store i32 %2, i32* %capacity
  %3 = load i32, i32* %capacity
  call void @"*String::check_capacity_in_bounds<Int32>:Nil"(i32 %3)
  %4 = load i32, i32* %capacity
  %5 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %4)
  %6 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 6
  store i8* %5, i8** %6
  %7 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  store i32 0, i32* %7
  %8 = load i32, i32* %capacity
  %9 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 5
  store i32 %8, i32* %9
  %10 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 7
  store i1 false, i1* %10
  ret i1 false
}

; Function Attrs: uwtable
define internal void @"*String::check_capacity_in_bounds<Int32>:Nil"(i32 %capacity) #0 {
entry:
  %0 = icmp slt i32 %capacity, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [18 x i8] }* @"'negative capacity'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %capacity to i64
  %3 = icmp ugt i64 %2, 4294967282
  br i1 %3, label %then1, label %else2

then1:                                            ; preds = %else
  %4 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [17 x i8] }* @"'capacity too big'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %4)
  unreachable

else2:                                            ; preds = %else
  ret void
}

; Function Attrs: uwtable
define internal i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %size) #0 {
entry:
  %0 = call i8* @__crystal_malloc_atomic(i32 %size)
  ret i8* %0
}

; Function Attrs: uwtable
define i8* @__crystal_malloc_atomic(i32 %size) #0 {
entry:
  %0 = zext i32 %size to i64
  %1 = call i8* @GC_malloc_atomic(i64 %0)
  ret i8* %1
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %self, %String* %obj) #0 {
entry:
  call void @"*String#to_s<String::Builder>:Nil"(%String* %obj, %"String::Builder"* %self)
  ret %"String::Builder"* %self
}

; Function Attrs: uwtable
define internal void @"*String#to_s<String::Builder>:Nil"(%String* %self, %"String::Builder"* %io) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %2 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %3 = load i32, i32* %2
  %4 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %3)
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %0
  %5 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  call void @"*String::Builder@IO#write_utf8<Slice(UInt8)>:Nil"(%"String::Builder"* %io, %"Slice(UInt8)" %5)
  ret void
}

; Function Attrs: uwtable
define internal i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self) #0 {
entry:
  %0 = getelementptr inbounds %String, %String* %self, i32 0, i32 3
  ret i8* %0
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %pointer, i32 %size) #0 {
alloca:
  %_ = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Slice(UInt8)"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Slice(UInt8)"* getelementptr (%"Slice(UInt8)", %"Slice(UInt8)"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %2, %"Slice(UInt8)"* %_
  %3 = call i32 @"*Slice(UInt8)@Slice(T)#initialize<Pointer(UInt8), Int32>:Int32"(%"Slice(UInt8)"* %_, i8* %pointer, i32 %size)
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %_
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i32 @"*Slice(UInt8)@Slice(T)#initialize<Pointer(UInt8), Int32>:Int32"(%"Slice(UInt8)"* %self, i8* %pointer, i32 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  store i8* %pointer, i8** %0
  %1 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  store i32 %size, i32* %1
  ret i32 %size
}

; Function Attrs: uwtable
define internal void @"*String::Builder@IO#write_utf8<Slice(UInt8)>:Nil"(%"String::Builder"* %self, %"Slice(UInt8)" %slice) #0 {
alloca:
  %encoder = alloca %"IO::Encoder"*
  %slice1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  %0 = call %"IO::Encoder"* @"*String::Builder@IO#encoder:(IO::Encoder | Nil)"(%"String::Builder"* %self)
  store %"IO::Encoder"* %0, %"IO::Encoder"** %encoder
  %1 = icmp ne %"IO::Encoder"* %0, null
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load %"IO::Encoder"*, %"IO::Encoder"** %encoder
  %3 = load %"Slice(UInt8)", %"Slice(UInt8)"* %slice1
  call void @"*IO::Encoder#write<String::Builder, Slice(UInt8)>:Nil"(%"IO::Encoder"* %2, %"String::Builder"* %self, %"Slice(UInt8)" %3)
  br label %exit

else:                                             ; preds = %entry
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %slice1
  call void @"*String::Builder#write<Slice(UInt8)>:Nil"(%"String::Builder"* %self, %"Slice(UInt8)" %4)
  br label %exit

exit:                                             ; preds = %else, %then
  ret void
}

; Function Attrs: uwtable
define internal %"IO::Encoder"* @"*String::Builder@IO#encoder:(IO::Encoder | Nil)"(%"String::Builder"* %self) #0 {
alloca:
  %encoding = alloca %"(IO::EncodingOptions | Nil)"
  %__temp_21 = alloca %"IO::Encoder"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 3
  %1 = load %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %0
  store %"(IO::EncodingOptions | Nil)" %1, %"(IO::EncodingOptions | Nil)"* %encoding
  %2 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %0, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %3, 0
  %5 = xor i1 %4, true
  %6 = and i1 true, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  %7 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 1
  %8 = load %"IO::Encoder"*, %"IO::Encoder"** %7
  store %"IO::Encoder"* %8, %"IO::Encoder"** %__temp_21
  %9 = icmp ne %"IO::Encoder"* %8, null
  br i1 %9, label %then1, label %else2

else:                                             ; preds = %entry
  br label %exit3

then1:                                            ; preds = %then
  %10 = load %"IO::Encoder"*, %"IO::Encoder"** %__temp_21
  br label %exit

else2:                                            ; preds = %then
  %11 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %encoding, i32 0, i32 1
  %12 = bitcast [3 x i64]* %11 to %"IO::EncodingOptions"*
  %13 = load %"IO::EncodingOptions", %"IO::EncodingOptions"* %12
  %14 = call %"IO::Encoder"* @"*IO::Encoder::new<IO::EncodingOptions>:IO::Encoder"(%"IO::EncodingOptions" %13)
  %15 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 1
  store %"IO::Encoder"* %14, %"IO::Encoder"** %15
  br label %exit

exit:                                             ; preds = %else2, %then1
  %16 = phi %"IO::Encoder"* [ %10, %then1 ], [ %14, %else2 ]
  br label %exit3

exit3:                                            ; preds = %else, %exit
  %17 = phi %"IO::Encoder"* [ %16, %exit ], [ null, %else ]
  ret %"IO::Encoder"* %17
}

; Function Attrs: uwtable
define internal %"IO::Encoder"* @"*IO::Encoder::new<IO::EncodingOptions>:IO::Encoder"(%"IO::EncodingOptions" %encoding_options) #0 {
alloca:
  %_ = alloca %"IO::Encoder"*
  %encoding_options1 = alloca %"IO::EncodingOptions"
  br label %entry

entry:                                            ; preds = %alloca
  store %"IO::EncodingOptions" %encoding_options, %"IO::EncodingOptions"* %encoding_options1
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"IO::Encoder"* getelementptr (%"IO::Encoder", %"IO::Encoder"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"IO::Encoder"*
  %2 = bitcast %"IO::Encoder"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"IO::Encoder"* getelementptr (%"IO::Encoder", %"IO::Encoder"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %1, i32 0, i32 0
  store i32 68, i32* %3
  store %"IO::Encoder"* %1, %"IO::Encoder"** %_
  %4 = load %"IO::Encoder"*, %"IO::Encoder"** %_
  %5 = load %"IO::EncodingOptions", %"IO::EncodingOptions"* %encoding_options1
  %6 = call i1 @"*IO::Encoder#initialize<IO::EncodingOptions>:Bool"(%"IO::Encoder"* %4, %"IO::EncodingOptions" %5)
  %7 = load %"IO::Encoder"*, %"IO::Encoder"** %_
  call void @"*GC::add_finalizer<IO::Encoder>:Nil"(%"IO::Encoder"* %7)
  %8 = load %"IO::Encoder"*, %"IO::Encoder"** %_
  ret %"IO::Encoder"* %8
}

; Function Attrs: uwtable
define internal i1 @"*IO::Encoder#initialize<IO::EncodingOptions>:Bool"(%"IO::Encoder"* %self, %"IO::EncodingOptions" %encoding_options) #0 {
alloca:
  %encoding_options1 = alloca %"IO::EncodingOptions"
  %0 = alloca %Iconv
  br label %entry

entry:                                            ; preds = %alloca
  store %"IO::EncodingOptions" %encoding_options, %"IO::EncodingOptions"* %encoding_options1
  %1 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 1
  %2 = load %"IO::EncodingOptions", %"IO::EncodingOptions"* %encoding_options1
  store %"IO::EncodingOptions" %2, %"IO::EncodingOptions"* %1
  %3 = getelementptr inbounds %"IO::EncodingOptions", %"IO::EncodingOptions"* %encoding_options1, i32 0, i32 0
  %4 = load %String*, %String** %3
  %5 = getelementptr inbounds %"IO::EncodingOptions", %"IO::EncodingOptions"* %encoding_options1, i32 0, i32 1
  %6 = load %"(Symbol | Nil)", %"(Symbol | Nil)"* %5
  %7 = call %Iconv @"*Iconv::new<String, String, (Symbol | Nil)>:Iconv"(%String* bitcast ({ i32, i32, i32, [6 x i8] }* @"'UTF-8'" to %String*), %String* %4, %"(Symbol | Nil)" %6)
  store %Iconv %7, %Iconv* %0
  %8 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 2
  %9 = load %Iconv, %Iconv* %0
  store %Iconv %9, %Iconv* %8
  %10 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 3
  store i1 false, i1* %10
  ret i1 false
}

; Function Attrs: uwtable
define internal %Iconv @"*Iconv::new<String, String, (Symbol | Nil)>:Iconv"(%String* %from, %String* %to, %"(Symbol | Nil)" %invalid) #0 {
alloca:
  %_ = alloca %Iconv
  %invalid1 = alloca %"(Symbol | Nil)"
  %0 = alloca %Iconv
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Symbol | Nil)" %invalid, %"(Symbol | Nil)"* %invalid1
  %1 = bitcast %Iconv* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%Iconv* getelementptr (%Iconv, %Iconv* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %Iconv, %Iconv* %0
  store %Iconv %2, %Iconv* %_
  %3 = load %"(Symbol | Nil)", %"(Symbol | Nil)"* %invalid1
  call void @"*Iconv#initialize<String, String, (Symbol | Nil)>:Nil"(%Iconv* %_, %String* %from, %String* %to, %"(Symbol | Nil)" %3)
  %4 = load %Iconv, %Iconv* %_
  ret %Iconv %4
}

; Function Attrs: uwtable
define internal void @"*Iconv#initialize<String, String, (Symbol | Nil)>:Nil"(%Iconv* %self, %String* %from, %String* %to, %"(Symbol | Nil)" %invalid) #0 {
alloca:
  %__temp_22 = alloca %String*
  %__temp_23 = alloca %String*
  %original_from = alloca %String*
  %original_to = alloca %String*
  %from1 = alloca %String*
  %to2 = alloca %String*
  %invalid3 = alloca %"(Symbol | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %String* %from, %String** %from1
  store %String* %to, %String** %to2
  store %"(Symbol | Nil)" %invalid, %"(Symbol | Nil)"* %invalid3
  %0 = load %String*, %String** %from1
  store %String* %0, %String** %__temp_22
  %1 = load %String*, %String** %to2
  store %String* %1, %String** %__temp_23
  %2 = load %String*, %String** %__temp_22
  store %String* %2, %String** %original_from
  %3 = load %String*, %String** %__temp_23
  store %String* %3, %String** %original_to
  %4 = getelementptr inbounds %"(Symbol | Nil)", %"(Symbol | Nil)"* %invalid3, i32 0, i32 0
  %5 = load i32, i32* %4
  %6 = icmp eq i32 149, %5
  br i1 %6, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %7 = getelementptr inbounds %"(Symbol | Nil)", %"(Symbol | Nil)"* %invalid3, i32 0, i32 1
  %8 = bitcast [1 x i64]* %7 to i32*
  %9 = load i32, i32* %8
  %10 = icmp eq i32 %9, 0
  br label %exit

next_def:                                         ; preds = %entry
  %11 = icmp eq i32 0, %5
  br i1 %11, label %current_def4, label %next_def5

exit:                                             ; preds = %current_def4, %current_def
  %12 = phi i1 [ %10, %current_def ], [ false, %current_def4 ]
  %13 = getelementptr inbounds %Iconv, %Iconv* %self, i32 0, i32 0
  store i1 %12, i1* %13
  %14 = getelementptr inbounds %Iconv, %Iconv* %self, i32 0, i32 0
  %15 = load i1, i1* %14
  br i1 %15, label %then, label %else

current_def4:                                     ; preds = %next_def
  br label %exit

next_def5:                                        ; preds = %next_def
  unreachable

then:                                             ; preds = %exit
  %16 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %17 = load %String*, %String** %from1
  %18 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %16, %String* %17)
  %19 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %18, %String* bitcast ({ i32, i32, i32, [9 x i8] }* @"'//IGNORE'" to %String*))
  %20 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %19)
  store %String* %20, %String** %from1
  %21 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %22 = load %String*, %String** %to2
  %23 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %21, %String* %22)
  %24 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %23, %String* bitcast ({ i32, i32, i32, [9 x i8] }* @"'//IGNORE'" to %String*))
  %25 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %24)
  store %String* %25, %String** %to2
  br label %exit6

else:                                             ; preds = %exit
  br label %exit6

exit6:                                            ; preds = %else, %then
  %26 = load %String*, %String** %to2
  %27 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %26)
  %28 = load %String*, %String** %from1
  %29 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %28)
  %30 = call i8* @iconv_open(i8* %27, i8* %29)
  %31 = getelementptr inbounds %Iconv, %Iconv* %self, i32 0, i32 1
  store i8* %30, i8** %31
  %32 = getelementptr inbounds %Iconv, %Iconv* %self, i32 0, i32 1
  %33 = load i8*, i8** %32
  %34 = ptrtoint i8* %33 to i64
  %35 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 -1)
  %36 = icmp eq i64 %34, %35
  br i1 %36, label %then7, label %else8

then7:                                            ; preds = %exit6
  %37 = call i32 @"*Errno::value:Int32"()
  %38 = call i32* @"~Errno::EINVAL:read"()
  %39 = load i32, i32* %38
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %then9, label %else10

else8:                                            ; preds = %exit6
  ret void

then9:                                            ; preds = %then7
  %41 = load %String*, %String** %original_from
  %42 = call i1 @"*String#==<String>:Bool"(%String* %41, %String* bitcast ({ i32, i32, i32, [6 x i8] }* @"'UTF-8'" to %String*))
  br i1 %42, label %then11, label %else12

else10:                                           ; preds = %then7
  %43 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [11 x i8] }* @"'iconv_open'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %43)
  unreachable

then11:                                           ; preds = %then9
  %44 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %45 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %44, %String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'invalid encoding: '" to %String*))
  %46 = load %String*, %String** %original_to
  %47 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %45, %String* %46)
  %48 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %47)
  %49 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %48)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %49)
  unreachable

else12:                                           ; preds = %then9
  %50 = load %String*, %String** %original_to
  %51 = call i1 @"*String#==<String>:Bool"(%String* %50, %String* bitcast ({ i32, i32, i32, [6 x i8] }* @"'UTF-8'" to %String*))
  br i1 %51, label %then13, label %else14

then13:                                           ; preds = %else12
  %52 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %53 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %52, %String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'invalid encoding: '" to %String*))
  %54 = load %String*, %String** %original_from
  %55 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %53, %String* %54)
  %56 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %55)
  %57 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %56)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %57)
  unreachable

else14:                                           ; preds = %else12
  %58 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %59 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %58, %String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'invalid encoding: '" to %String*))
  %60 = load %String*, %String** %original_from
  %61 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %59, %String* %60)
  %62 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %61, %String* bitcast ({ i32, i32, i32, [5 x i8] }* @"' -> '" to %String*))
  %63 = load %String*, %String** %original_to
  %64 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %62, %String* %63)
  %65 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %64)
  %66 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %65)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %66)
  unreachable
}

; Function Attrs: uwtable
define internal %String* @"*String::Builder#to_s:String"(%"String::Builder"* %self) #0 {
alloca:
  %real_bytesize = alloca i32
  %header = alloca %"Tuple(Int32, Int32, Int32)"*
  %0 = alloca %"Tuple(Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 7
  %2 = load i1, i1* %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  call void @"*raise<String>:NoReturn"(%String* bitcast ({ i32, i32, i32, [47 x i8] }* @"'can only invoke 'to...'" to %String*))
  unreachable

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 7
  store i1 true, i1* %3
  call void @"*String::Builder@IO#write_byte<UInt8>:Nil"(%"String::Builder"* %self, i8 0)
  %4 = call i32 @"*String::Builder#real_bytesize:Int32"(%"String::Builder"* %self)
  store i32 %4, i32* %real_bytesize
  %5 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 5
  %6 = load i32, i32* %5
  %7 = load i32, i32* %real_bytesize
  %8 = icmp sgt i32 %6, %7
  br i1 %8, label %then1, label %else2

then1:                                            ; preds = %else
  %9 = load i32, i32* %real_bytesize
  %10 = call i8* @"*String::Builder#resize_to_capacity<Int32>:Pointer(UInt8)"(%"String::Builder"* %self, i32 %9)
  br label %exit

else2:                                            ; preds = %else
  br label %exit

exit:                                             ; preds = %else2, %then1
  %11 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 6
  %12 = load i8*, i8** %11
  %13 = bitcast i8* %12 to %"Tuple(Int32, Int32, Int32)"*
  store %"Tuple(Int32, Int32, Int32)"* %13, %"Tuple(Int32, Int32, Int32)"** %header
  %14 = load %"Tuple(Int32, Int32, Int32)"*, %"Tuple(Int32, Int32, Int32)"** %header
  %15 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %0, i32 0, i32 0
  store i32 1, i32* %15
  %16 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %17 = load i32, i32* %16
  %18 = sub i32 %17, 1
  %19 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %0, i32 0, i32 1
  store i32 %18, i32* %19
  %20 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %0, i32 0, i32 2
  store i32 0, i32* %20
  %21 = load %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %0
  store %"Tuple(Int32, Int32, Int32)" %21, %"Tuple(Int32, Int32, Int32)"* %14
  %22 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 6
  %23 = load i8*, i8** %22
  %24 = bitcast i8* %23 to %String*
  ret %String* %24
}

; Function Attrs: uwtable
define internal void @"*String::Builder@IO#write_byte<UInt8>:Nil"(%"String::Builder"* %self, i8 %byte) #0 {
alloca:
  %x = alloca i8
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i8 %byte, i8* %x
  %1 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %x, i32 1)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  call void @"*String::Builder#write<Slice(UInt8)>:Nil"(%"String::Builder"* %self, %"Slice(UInt8)" %2)
  ret void
}

; Function Attrs: uwtable
define internal void @"*String::Builder#write<Slice(UInt8)>:Nil"(%"String::Builder"* %self, %"Slice(UInt8)" %slice) #0 {
alloca:
  %count = alloca i32
  %new_bytesize = alloca i32
  %slice1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  %0 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %1 = load i32, i32* %0
  store i32 %1, i32* %count
  %2 = call i32 @"*String::Builder#real_bytesize:Int32"(%"String::Builder"* %self)
  %3 = load i32, i32* %count
  %4 = add i32 %2, %3
  store i32 %4, i32* %new_bytesize
  %5 = load i32, i32* %new_bytesize
  %6 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 5
  %7 = load i32, i32* %6
  %8 = icmp sgt i32 %5, %7
  br i1 %8, label %then, label %else

then:                                             ; preds = %entry
  %9 = load i32, i32* %new_bytesize
  %10 = call i32 @"*Math@Math::pw2ceil<Int32>:Int32"(i32 %9)
  %11 = call i8* @"*String::Builder#resize_to_capacity<Int32>:Pointer(UInt8)"(%"String::Builder"* %self, i32 %10)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %12 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 6
  %13 = load i8*, i8** %12
  %14 = call i32 @"*String::Builder#real_bytesize:Int32"(%"String::Builder"* %self)
  %15 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %13, i32 %14)
  %16 = load i32, i32* %count
  %17 = call i8* @"*Slice(UInt8)@Slice(T)#copy_to<Pointer(UInt8), Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i8* %15, i32 %16)
  %18 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %19 = load i32, i32* %18
  %20 = load i32, i32* %count
  %21 = add i32 %19, %20
  %22 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  store i32 %21, i32* %22
  ret void
}

; Function Attrs: uwtable
define internal i32 @"*String::Builder#real_bytesize:Int32"(%"String::Builder"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %1 = load i32, i32* %0
  %2 = add i32 %1, 12
  ret i32 %2
}

; Function Attrs: uwtable
define internal i32 @"*Math@Math::pw2ceil<Int32>:Int32"(i32 %v) #0 {
alloca:
  %v1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %v, i32* %v1
  %0 = load i32, i32* %v1
  %1 = sub i32 %0, 1
  store i32 %1, i32* %v1
  %2 = load i32, i32* %v1
  %3 = load i32, i32* %v1
  %4 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %3, i32 1)
  %5 = or i32 %2, %4
  store i32 %5, i32* %v1
  %6 = load i32, i32* %v1
  %7 = load i32, i32* %v1
  %8 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %7, i32 2)
  %9 = or i32 %6, %8
  store i32 %9, i32* %v1
  %10 = load i32, i32* %v1
  %11 = load i32, i32* %v1
  %12 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %11, i32 4)
  %13 = or i32 %10, %12
  store i32 %13, i32* %v1
  %14 = load i32, i32* %v1
  %15 = load i32, i32* %v1
  %16 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %15, i32 8)
  %17 = or i32 %14, %16
  store i32 %17, i32* %v1
  %18 = load i32, i32* %v1
  %19 = load i32, i32* %v1
  %20 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %19, i32 16)
  %21 = or i32 %18, %20
  store i32 %21, i32* %v1
  %22 = load i32, i32* %v1
  %23 = add i32 %22, 1
  store i32 %23, i32* %v1
  ret i32 %23
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#>><Int32>:Int32"(i32 %self, i32 %count) #0 {
entry:
  %0 = icmp slt i32 %count, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call i32 @"*Int32@Int#abs:Int32"(i32 %count)
  %2 = call i32 @"*Int32@Int#<<<Int32>:Int32"(i32 %self, i32 %1)
  br label %exit

else:                                             ; preds = %entry
  %3 = icmp slt i32 %count, 32
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i32 [ %2, %then ], [ %7, %exit3 ]
  ret i32 %4

then1:                                            ; preds = %else
  %5 = ashr i32 %self, %count
  br label %exit3

else2:                                            ; preds = %else
  %6 = call i32 @"*Int32@Number::zero:Int32"()
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %7 = phi i32 [ %5, %then1 ], [ %6, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#abs:Int32"(i32 %self) #0 {
entry:
  %0 = icmp sge i32 %self, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %1 = call i32 @"*Int32#-:Int32"(i32 %self)
  br label %exit

exit:                                             ; preds = %else, %then
  %2 = phi i32 [ %self, %then ], [ %1, %else ]
  ret i32 %2
}

; Function Attrs: uwtable
define internal i32 @"*Int32#-:Int32"(i32 %self) #0 {
entry:
  %0 = sub i32 0, %self
  ret i32 %0
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#<<<Int32>:Int32"(i32 %self, i32 %count) #0 {
entry:
  %0 = icmp slt i32 %count, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call i32 @"*Int32@Int#abs:Int32"(i32 %count)
  %2 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %self, i32 %1)
  br label %exit

else:                                             ; preds = %entry
  %3 = icmp slt i32 %count, 32
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i32 [ %2, %then ], [ %7, %exit3 ]
  ret i32 %4

then1:                                            ; preds = %else
  %5 = shl i32 %self, %count
  br label %exit3

else2:                                            ; preds = %else
  %6 = call i32 @"*Int32@Number::zero:Int32"()
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %7 = phi i32 [ %5, %then1 ], [ %6, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Number::zero:Int32"() #0 {
entry:
  %0 = call i32 @"*Int32::new<Int32>:Int32"(i32 0)
  ret i32 %0
}

; Function Attrs: uwtable
define internal i32 @"*Int32::new<Int32>:Int32"(i32 %value) #0 {
entry:
  ret i32 %value
}

; Function Attrs: uwtable
define internal i8* @"*String::Builder#resize_to_capacity<Int32>:Pointer(UInt8)"(%"String::Builder"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 5
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 6
  %2 = load i8*, i8** %1
  %3 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 5
  %4 = load i32, i32* %3
  %5 = call i8* @"*Pointer(UInt8)@Pointer(T)#realloc<Int32>:Pointer(UInt8)"(i8* %2, i32 %4)
  %6 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 6
  store i8* %5, i8** %6
  ret i8* %5
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#realloc<Int32>:Pointer(UInt8)"(i8* %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = mul i64 %0, ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64)
  %2 = trunc i64 %1 to i32
  %3 = call i8* @__crystal_realloc(i8* %self, i32 %2)
  ret i8* %3
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds i8, i8* %self, i64 %0
  ret i8* %1
}

; Function Attrs: uwtable
define internal i8* @"*Slice(UInt8)@Slice(T)#copy_to<Pointer(UInt8), Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %self, i8* %target, i32 %count) #0 {
entry:
  %0 = call i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %self, i32 %count)
  %1 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_to<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %0, i8* %target, i32 %count)
  ret i8* %1
}

; Function Attrs: uwtable
define internal i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %self, i32 %size) #0 {
alloca:
  %__temp_29 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = icmp sle i32 0, %size
  store i1 %0, i1* %__temp_29
  br i1 %0, label %then1, label %else2

then:                                             ; preds = %exit
  br label %exit3

else:                                             ; preds = %exit
  %1 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %1)
  unreachable

then1:                                            ; preds = %entry
  %2 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = icmp sle i32 %size, %3
  br label %exit

else2:                                            ; preds = %entry
  %5 = load i1, i1* %__temp_29
  br label %exit

exit:                                             ; preds = %else2, %then1
  %6 = phi i1 [ %4, %then1 ], [ %5, %else2 ]
  br i1 %6, label %then, label %else

exit3:                                            ; preds = %then
  %7 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %8 = load i8*, i8** %7
  ret i8* %8
}

; Function Attrs: uwtable
define internal %IndexError* @"*IndexError::new:IndexError"() #0 {
alloca:
  %_ = alloca %IndexError*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%IndexError* getelementptr (%IndexError, %IndexError* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %IndexError*
  %2 = bitcast %IndexError* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%IndexError* getelementptr (%IndexError, %IndexError* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %IndexError, %IndexError* %1, i32 0, i32 0
  store i32 34, i32* %3
  store %IndexError* %1, %IndexError** %_
  %4 = load %IndexError*, %IndexError** %_
  call void @"*IndexError#initialize:Nil"(%IndexError* %4)
  %5 = load %IndexError*, %IndexError** %_
  ret %IndexError* %5
}

; Function Attrs: uwtable
define internal void @"*IndexError#initialize:Nil"(%IndexError* %self) #0 {
alloca:
  %message = alloca %String*
  br label %entry

entry:                                            ; preds = %alloca
  store %String* bitcast ({ i32, i32, i32, [20 x i8] }* @"'Index out of bounds...'" to %String*), %String** %message
  %0 = load %String*, %String** %message
  call void @"*IndexError#initialize<String>:Nil"(%IndexError* %self, %String* %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IndexError#initialize<String>:Nil"(%IndexError* %self, %String* %message) #0 {
entry:
  call void @"*IndexError@Exception#initialize<String>:Nil"(%IndexError* %self, %String* %message)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IndexError@Exception#initialize<String>:Nil"(%IndexError* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %IndexError, %IndexError* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %IndexError, %IndexError* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<IndexError>:NoReturn"(%IndexError* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*IndexError@Exception#callstack=<CallStack>:CallStack"(%IndexError* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %IndexError* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 34, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*IndexError@Exception#callstack=<CallStack>:CallStack"(%IndexError* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %IndexError, %IndexError* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#copy_to<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %self, i8* %target, i32 %count) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_from_impl<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %target, i8* %self, i32 %count)
  ret i8* %0
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#copy_from_impl<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %self, i8* %source, i32 %count) #0 {
alloca:
  %count1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %count, i32* %count1
  %0 = load i32, i32* %count1
  %1 = icmp slt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative count'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = call i1 @"*Pointer(UInt8)@Object::==<Pointer(UInt8):Class>:Bool"(i32 620, i32 620)
  br i1 %3, label %then2, label %else3

then2:                                            ; preds = %else
  %4 = load i32, i32* %count1
  %5 = mul i32 %4, 1
  %6 = zext i32 %5 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %self, i8* %source, i64 %6, i32 0, i1 false)
  br label %exit

else3:                                            ; preds = %else
  br label %while

exit:                                             ; preds = %exit4, %then2
  ret i8* %self

while:                                            ; preds = %body, %else3
  %7 = load i32, i32* %count1
  %8 = sub i32 %7, 1
  store i32 %8, i32* %count1
  %9 = icmp sge i32 %8, 0
  br i1 %9, label %body, label %exit4

body:                                             ; preds = %while
  %10 = load i32, i32* %count1
  %11 = load i32, i32* %count1
  %12 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %source, i32 %11)
  %13 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %self, i32 %10, i8 %12)
  br label %while

exit4:                                            ; preds = %while
  br label %exit
}

; Function Attrs: uwtable
define internal i1 @"*Pointer(UInt8)@Object::==<Pointer(UInt8):Class>:Bool"(i32 %self, i32 %other) #0 {
entry:
  ret i1 true
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: uwtable
define internal i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %self, i32 %offset) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %self, i32 %offset)
  %1 = load i8, i8* %0
  ret i8 %1
}

; Function Attrs: uwtable
define internal i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %self, i32 %offset, i8 %value) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %self, i32 %offset)
  store i8 %value, i8* %0
  ret i8 %value
}

declare i8* @iconv_open(i8*, i8*)

; Function Attrs: uwtable
define internal i32 @"*Errno::value:Int32"() #0 {
entry:
  %0 = call i32* @__error()
  %1 = load i32, i32* %0
  ret i32 %1
}

declare i32* @__error()

define internal i32* @"~Errno::EINVAL:read"() {
entry:
  %0 = load i1, i1* @"Errno::EINVAL:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret i32* @"Errno::EINVAL"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Errno::EINVAL:init"
  call void @"~Errno::EINVAL:init"()
  br label %initialized
}

define internal void @"~Errno::EINVAL:init"() {
entry:
  ret void
}

; Function Attrs: uwtable
define internal i1 @"*String#==<String>:Bool"(%String* %self, %String* %other) #0 {
entry:
  %0 = call i1 @"*String@Reference#same?<String>:Bool"(%String* %self, %String* %other)
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  ret i1 true

else:                                             ; preds = %entry
  %1 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %2 = load i32, i32* %1
  %3 = getelementptr inbounds %String, %String* %other, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = icmp eq i32 %2, %4
  br i1 %5, label %then1, label %else2

then1:                                            ; preds = %else
  br label %exit

else2:                                            ; preds = %else
  ret i1 false

exit:                                             ; preds = %then1
  %6 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %7 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %other)
  %8 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %9 = load i32, i32* %8
  %10 = call i32 @"*Pointer(UInt8)@Pointer(T)#memcmp<Pointer(UInt8), Int32>:Int32"(i8* %6, i8* %7, i32 %9)
  %11 = icmp eq i32 %10, 0
  ret i1 %11
}

; Function Attrs: uwtable
define internal i1 @"*String@Reference#same?<String>:Bool"(%String* %self, %String* %other) #0 {
entry:
  %0 = ptrtoint %String* %self to i64
  %1 = ptrtoint %String* %other to i64
  %2 = icmp eq i64 %0, %1
  ret i1 %2
}

; Function Attrs: uwtable
define internal i32 @"*Pointer(UInt8)@Pointer(T)#memcmp<Pointer(UInt8), Int32>:Int32"(i8* %self, i8* %other, i32 %count) #0 {
entry:
  %0 = mul i32 %count, 1
  %1 = sext i32 %0 to i64
  %2 = call i32 @memcmp(i8* %self, i8* %other, i64 %1)
  ret i32 %2
}

declare i32 @memcmp(i8*, i8*, i64)

; Function Attrs: uwtable
define internal %Errno* @"*Errno::new<String>:Errno"(%String* %__arg0) #0 {
alloca:
  %_ = alloca %Errno*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%Errno* getelementptr (%Errno, %Errno* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %Errno*
  %2 = bitcast %Errno* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%Errno* getelementptr (%Errno, %Errno* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %Errno, %Errno* %1, i32 0, i32 0
  store i32 46, i32* %3
  store %Errno* %1, %Errno** %_
  %4 = load %Errno*, %Errno** %_
  call void @"*Errno#initialize<String>:Nil"(%Errno* %4, %String* %__arg0)
  %5 = load %Errno*, %Errno** %_
  ret %Errno* %5
}

; Function Attrs: uwtable
define internal void @"*Errno#initialize<String>:Nil"(%Errno* %self, %String* %message) #0 {
alloca:
  %errno = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @"*Errno::value:Int32"()
  store i32 %0, i32* %errno
  %1 = load i32, i32* %errno
  call void @"*Errno#initialize<String, Int32>:Nil"(%Errno* %self, %String* %message, i32 %1)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Errno#initialize<String, Int32>:Nil"(%Errno* %self, %String* %message, i32 %errno) #0 {
entry:
  %0 = getelementptr inbounds %Errno, %Errno* %self, i32 0, i32 4
  store i32 %errno, i32* %0
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* %message)
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %2, %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"': '" to %String*))
  %4 = call i8* @strerror(i32 %errno)
  %5 = call %String* @"*String::new<Pointer(UInt8)>:String"(i8* %4)
  %6 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %3, %String* %5)
  %7 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %6)
  call void @"*Errno@Exception#initialize<String>:Nil"(%Errno* %self, %String* %7)
  ret void
}

declare i8* @strerror(i32)

; Function Attrs: uwtable
define internal %String* @"*String::new<Pointer(UInt8)>:String"(i8* %chars) #0 {
entry:
  %0 = call i64 @strlen(i8* %chars)
  %1 = call %String* @"*String::new<Pointer(UInt8), UInt64>:String"(i8* %chars, i64 %0)
  ret %String* %1
}

declare i64 @strlen(i8*)

; Function Attrs: uwtable
define internal %String* @"*String::new<Pointer(UInt8), UInt64>:String"(i8* %chars, i64 %bytesize) #0 {
alloca:
  %size = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %size
  %0 = load i32, i32* %size
  %1 = call %String* @"*String::new<Pointer(UInt8), UInt64, Int32>:String"(i8* %chars, i64 %bytesize, i32 %0)
  ret %String* %1
}

; Function Attrs: uwtable
define internal %String* @"*String::new<Pointer(UInt8), UInt64, Int32>:String"(i8* %chars, i64 %bytesize, i32 %size) #0 {
alloca:
  %buffer = alloca i8*
  %capacity = alloca i64
  %str = alloca i8*
  %buffer1 = alloca i8*
  %__temp_24 = alloca %"Tuple(UInt64, Int32)"
  %bytesize2 = alloca i64
  %size3 = alloca i32
  %__temp_25 = alloca i1
  %str_header = alloca %"Tuple(Int32, Int32, Int32)"*
  %0 = alloca %"Tuple(UInt64, Int32)"
  %1 = alloca %"Tuple(Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = icmp eq i64 %bytesize, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  ret %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*)

else:                                             ; preds = %entry
  store i64 %bytesize, i64* %capacity
  %3 = load i64, i64* %capacity
  call void @"*String::check_capacity_in_bounds<UInt64>:Nil"(i64 %3)
  %4 = load i64, i64* %capacity
  %5 = trunc i64 %4 to i32
  %6 = add i32 %5, 12
  %7 = add i32 %6, 1
  %8 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %7)
  store i8* %8, i8** %str
  %9 = load i8*, i8** %str
  %10 = bitcast i8* %9 to %String*
  %11 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %10)
  store i8* %11, i8** %buffer1
  %12 = load i8*, i8** %buffer1
  store i8* %12, i8** %buffer
  %13 = load i8*, i8** %buffer
  %14 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_from<Pointer(UInt8), UInt64>:Pointer(UInt8)"(i8* %13, i8* %chars, i64 %bytesize)
  %15 = getelementptr inbounds %"Tuple(UInt64, Int32)", %"Tuple(UInt64, Int32)"* %0, i32 0, i32 0
  store i64 %bytesize, i64* %15
  %16 = getelementptr inbounds %"Tuple(UInt64, Int32)", %"Tuple(UInt64, Int32)"* %0, i32 0, i32 1
  store i32 %size, i32* %16
  %17 = load %"Tuple(UInt64, Int32)", %"Tuple(UInt64, Int32)"* %0
  store %"Tuple(UInt64, Int32)" %17, %"Tuple(UInt64, Int32)"* %__temp_24
  %18 = getelementptr inbounds %"Tuple(UInt64, Int32)", %"Tuple(UInt64, Int32)"* %__temp_24, i32 0, i32 0
  %19 = load i64, i64* %18
  store i64 %19, i64* %bytesize2
  %20 = getelementptr inbounds %"Tuple(UInt64, Int32)", %"Tuple(UInt64, Int32)"* %__temp_24, i32 0, i32 1
  %21 = load i32, i32* %20
  store i32 %21, i32* %size3
  %22 = load i64, i64* %bytesize2
  %23 = icmp ule i64 0, %22
  %24 = or i1 true, %23
  store i1 %24, i1* %__temp_25
  br i1 %24, label %then6, label %else7

then4:                                            ; preds = %exit
  br label %exit8

else5:                                            ; preds = %exit
  %25 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [32 x i8] }* @"'bytesize out of cap...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %25)
  unreachable

then6:                                            ; preds = %else
  %26 = load i64, i64* %bytesize2
  %27 = load i64, i64* %capacity
  %28 = icmp ule i64 %26, %27
  br label %exit

else7:                                            ; preds = %else
  %29 = load i1, i1* %__temp_25
  br label %exit

exit:                                             ; preds = %else7, %then6
  %30 = phi i1 [ %28, %then6 ], [ %29, %else7 ]
  br i1 %30, label %then4, label %else5

exit8:                                            ; preds = %then4
  %31 = load i8*, i8** %buffer1
  %32 = load i64, i64* %bytesize2
  %33 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<UInt64, UInt8>:UInt8"(i8* %31, i64 %32, i8 0)
  %34 = load i64, i64* %bytesize2
  %35 = load i64, i64* %capacity
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %then9, label %else10

then9:                                            ; preds = %exit8
  %37 = load i8*, i8** %str
  %38 = load i64, i64* %bytesize2
  %39 = trunc i64 %38 to i32
  %40 = add i32 %39, 12
  %41 = add i32 %40, 1
  %42 = call i8* @"*Pointer(UInt8)@Pointer(T)#realloc<UInt32>:Pointer(UInt8)"(i8* %37, i32 %41)
  store i8* %42, i8** %str
  br label %exit11

else10:                                           ; preds = %exit8
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %43 = load i8*, i8** %str
  %44 = bitcast i8* %43 to %"Tuple(Int32, Int32, Int32)"*
  store %"Tuple(Int32, Int32, Int32)"* %44, %"Tuple(Int32, Int32, Int32)"** %str_header
  %45 = load %"Tuple(Int32, Int32, Int32)"*, %"Tuple(Int32, Int32, Int32)"** %str_header
  %46 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 0
  store i32 1, i32* %46
  %47 = load i64, i64* %bytesize2
  %48 = trunc i64 %47 to i32
  %49 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 1
  store i32 %48, i32* %49
  %50 = load i32, i32* %size3
  %51 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 2
  store i32 %50, i32* %51
  %52 = load %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1
  store %"Tuple(Int32, Int32, Int32)" %52, %"Tuple(Int32, Int32, Int32)"* %45
  %53 = load i8*, i8** %str
  %54 = bitcast i8* %53 to %String*
  ret %String* %54
}

; Function Attrs: uwtable
define internal void @"*String::check_capacity_in_bounds<UInt64>:Nil"(i64 %capacity) #0 {
entry:
  %0 = icmp ult i64 %capacity, 0
  %1 = and i1 true, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [18 x i8] }* @"'negative capacity'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = icmp ugt i64 %capacity, 4294967282
  br i1 %3, label %then1, label %else2

then1:                                            ; preds = %else
  %4 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [17 x i8] }* @"'capacity too big'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %4)
  unreachable

else2:                                            ; preds = %else
  ret void
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#copy_from<Pointer(UInt8), UInt64>:Pointer(UInt8)"(i8* %self, i8* %source, i64 %count) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_to<Pointer(UInt8), UInt64>:Pointer(UInt8)"(i8* %source, i8* %self, i64 %count)
  ret i8* %0
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#copy_to<Pointer(UInt8), UInt64>:Pointer(UInt8)"(i8* %self, i8* %target, i64 %count) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_from_impl<Pointer(UInt8), UInt64>:Pointer(UInt8)"(i8* %target, i8* %self, i64 %count)
  ret i8* %0
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#copy_from_impl<Pointer(UInt8), UInt64>:Pointer(UInt8)"(i8* %self, i8* %source, i64 %count) #0 {
alloca:
  %count1 = alloca i64
  br label %entry

entry:                                            ; preds = %alloca
  store i64 %count, i64* %count1
  %0 = load i64, i64* %count1
  %1 = icmp ult i64 %0, 0
  %2 = and i1 true, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative count'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %3)
  unreachable

else:                                             ; preds = %entry
  %4 = call i1 @"*Pointer(UInt8)@Object::==<Pointer(UInt8):Class>:Bool"(i32 620, i32 620)
  br i1 %4, label %then2, label %else3

then2:                                            ; preds = %else
  %5 = load i64, i64* %count1
  %6 = mul i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = zext i32 %7 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %self, i8* %source, i64 %8, i32 0, i1 false)
  br label %exit

else3:                                            ; preds = %else
  br label %while

exit:                                             ; preds = %exit4, %then2
  ret i8* %self

while:                                            ; preds = %body, %else3
  %9 = load i64, i64* %count1
  %10 = sub i64 %9, 1
  store i64 %10, i64* %count1
  %11 = icmp uge i64 %10, 0
  %12 = or i1 true, %11
  br i1 %12, label %body, label %exit4

body:                                             ; preds = %while
  %13 = load i64, i64* %count1
  %14 = load i64, i64* %count1
  %15 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<UInt64>:UInt8"(i8* %source, i64 %14)
  %16 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<UInt64, UInt8>:UInt8"(i8* %self, i64 %13, i8 %15)
  br label %while

exit4:                                            ; preds = %while
  br label %exit
}

; Function Attrs: uwtable
define internal i8 @"*Pointer(UInt8)@Pointer(T)#[]<UInt64>:UInt8"(i8* %self, i64 %offset) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<UInt64>:Pointer(UInt8)"(i8* %self, i64 %offset)
  %1 = load i8, i8* %0
  ret i8 %1
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#+<UInt64>:Pointer(UInt8)"(i8* %self, i64 %other) #0 {
entry:
  %0 = getelementptr inbounds i8, i8* %self, i64 %other
  ret i8* %0
}

; Function Attrs: uwtable
define internal i8 @"*Pointer(UInt8)@Pointer(T)#[]=<UInt64, UInt8>:UInt8"(i8* %self, i64 %offset, i8 %value) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<UInt64>:Pointer(UInt8)"(i8* %self, i64 %offset)
  store i8 %value, i8* %0
  ret i8 %value
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#realloc<UInt32>:Pointer(UInt8)"(i8* %self, i32 %size) #0 {
entry:
  %0 = zext i32 %size to i64
  %1 = mul i64 %0, ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64)
  %2 = trunc i64 %1 to i32
  %3 = call i8* @__crystal_realloc(i8* %self, i32 %2)
  ret i8* %3
}

; Function Attrs: uwtable
define internal void @"*Errno@Exception#initialize<String>:Nil"(%Errno* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %Errno, %Errno* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %Errno, %Errno* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<Errno>:NoReturn"(%Errno* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*Errno@Exception#callstack=<CallStack>:CallStack"(%Errno* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %Errno* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 46, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*Errno@Exception#callstack=<CallStack>:CallStack"(%Errno* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %Errno, %Errno* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer<IO::Encoder>:Nil"(%"IO::Encoder"* %object) #0 {
entry:
  call void @"*GC::add_finalizer_impl<IO::Encoder>:Nil"(%"IO::Encoder"* %object)
  ret void
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer_impl<IO::Encoder>:Nil"(%"IO::Encoder"* %object) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"IO::Encoder"* %object to i8*
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i8*, i8*)* @"~procProc(Pointer(Void), Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108" to i8*), i8** %2
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %3
  %4 = load %"->", %"->"* %0
  %5 = call i8* @"~check_proc_is_not_closure"(%"->" %4)
  %6 = bitcast i8* %5 to %Nil (i8*, i8*)*
  call void @GC_register_finalizer_ignore_self(i8* %1, %Nil (i8*, i8*)* %6, i8* null, %"->"* null, i8** null)
  ret void
}

; Function Attrs: uwtable
define internal void @"~procProc(Pointer(Void), Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108"(i8* %obj, i8* %data) #0 {
entry:
  %0 = bitcast i8* %obj to %"IO::Encoder"*
  call void @"*IO::Encoder#finalize:Nil"(%"IO::Encoder"* %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::Encoder#finalize:Nil"(%"IO::Encoder"* %self) #0 {
entry:
  call void @"*IO::Encoder#close:Nil"(%"IO::Encoder"* %self)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::Encoder#close:Nil"(%"IO::Encoder"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 3
  %1 = load i1, i1* %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  %2 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 3
  store i1 true, i1* %2
  %3 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 2
  call void @"*Iconv#close:Nil"(%Iconv* %3)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Iconv#close:Nil"(%Iconv* %self) #0 {
entry:
  %0 = getelementptr inbounds %Iconv, %Iconv* %self, i32 0, i32 1
  %1 = load i8*, i8** %0
  %2 = call i32 @iconv_close(i8* %1)
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [12 x i8] }* @"'iconv_close'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %4)
  unreachable

else:                                             ; preds = %entry
  ret void
}

declare i32 @iconv_close(i8*)

declare void @GC_register_finalizer_ignore_self(i8*, %Nil (i8*, i8*)*, i8*, %"->"*, i8**)

; Function Attrs: uwtable
define internal void @"*IO::Encoder#write<String::Builder, Slice(UInt8)>:Nil"(%"IO::Encoder"* %self, %"String::Builder"* %io, %"Slice(UInt8)" %slice) #0 {
alloca:
  %inbuf_ptr = alloca i8*
  %inbytesleft = alloca i64
  %outbuf = alloca [1024 x i8]
  %outbuf_ptr = alloca i8*
  %outbytesleft = alloca i64
  %err = alloca i64
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  %2 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 1
  %3 = load i8*, i8** %2
  store i8* %3, i8** %inbuf_ptr
  %4 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %5 = load i32, i32* %4
  %6 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 %5)
  store i64 %6, i64* %inbytesleft
  br label %while

while:                                            ; preds = %exit2, %entry
  %7 = load i64, i64* %inbytesleft
  %8 = icmp ugt i64 %7, 0
  %9 = or i1 false, %8
  br i1 %9, label %body, label %exit

body:                                             ; preds = %while
  %10 = call i8* @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([1024 x i8]* %outbuf)
  store i8* %10, i8** %outbuf_ptr
  %11 = call i32 @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#size:Int32"([1024 x i8]* %outbuf)
  %12 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 %11)
  store i64 %12, i64* %outbytesleft
  %13 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 2
  %14 = call i64 @"*Iconv#convert<Pointer(Pointer(UInt8)), Pointer(UInt64), Pointer(Pointer(UInt8)), Pointer(UInt64)>:UInt64"(%Iconv* %13, i8** %inbuf_ptr, i64* %inbytesleft, i8** %outbuf_ptr, i64* %outbytesleft)
  store i64 %14, i64* %err
  %15 = load i64, i64* %err
  %16 = icmp eq i64 %15, -1
  br i1 %16, label %then, label %else

exit:                                             ; preds = %while
  ret void

then:                                             ; preds = %body
  %17 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 2
  %18 = call %"(UInt64 | Nil)" @"*Iconv#handle_invalid<Pointer(Pointer(UInt8)), Pointer(UInt64)>:(UInt64 | Nil)"(%Iconv* %17, i8** %inbuf_ptr, i64* %inbytesleft)
  br label %exit2

else:                                             ; preds = %body
  br label %exit2

exit2:                                            ; preds = %else, %then
  %19 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_slice:Slice(UInt8)"([1024 x i8]* %outbuf)
  store %"Slice(UInt8)" %19, %"Slice(UInt8)"* %0
  %20 = call i32 @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#size:Int32"([1024 x i8]* %outbuf)
  %21 = load i64, i64* %outbytesleft
  %22 = sext i32 %20 to i64
  %23 = sub i64 %22, %21
  %24 = trunc i64 %23 to i32
  %25 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %0, i32 0, i32 %24)
  store %"Slice(UInt8)" %25, %"Slice(UInt8)"* %1
  %26 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  call void @"*String::Builder#write<Slice(UInt8)>:Nil"(%"String::Builder"* %io, %"Slice(UInt8)" %26)
  br label %while
}

; Function Attrs: uwtable
define internal i8* @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([1024 x i8]* %self) #0 {
entry:
  %0 = getelementptr inbounds [1024 x i8], [1024 x i8]* %self, i32 0, i32 0
  ret i8* %0
}

; Function Attrs: uwtable
define internal i32 @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#size:Int32"([1024 x i8]* %self) #0 {
entry:
  ret i32 1024
}

; Function Attrs: uwtable
define internal i64 @"*Iconv#convert<Pointer(Pointer(UInt8)), Pointer(UInt64), Pointer(Pointer(UInt8)), Pointer(UInt64)>:UInt64"(%Iconv* %self, i8** %inbuf, i64* %inbytesleft, i8** %outbuf, i64* %outbytesleft) #0 {
entry:
  %0 = getelementptr inbounds %Iconv, %Iconv* %self, i32 0, i32 1
  %1 = load i8*, i8** %0
  %2 = call i64 @iconv(i8* %1, i8** %inbuf, i64* %inbytesleft, i8** %outbuf, i64* %outbytesleft)
  ret i64 %2
}

declare i64 @iconv(i8*, i8**, i64*, i8**, i64*)

; Function Attrs: uwtable
define internal %"(UInt64 | Nil)" @"*Iconv#handle_invalid<Pointer(Pointer(UInt8)), Pointer(UInt64)>:(UInt64 | Nil)"(%Iconv* %self, i8** %inbuf, i64* %inbytesleft) #0 {
alloca:
  %__temp_26 = alloca i32
  %0 = alloca %"(UInt64 | Nil)"
  %1 = alloca %"(UInt64 | Nil)"
  %2 = alloca %"(UInt64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %3 = getelementptr inbounds %Iconv, %Iconv* %self, i32 0, i32 0
  %4 = load i1, i1* %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = load i64, i64* %inbytesleft
  %6 = icmp ugt i64 %5, 0
  %7 = or i1 false, %6
  br i1 %7, label %then1, label %else2

else:                                             ; preds = %entry
  %8 = call i32 @"*Errno::value:Int32"()
  store i32 %8, i32* %__temp_26
  %9 = load i32, i32* %__temp_26
  %10 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 22, i32 %9)
  br i1 %10, label %then4, label %else5

then1:                                            ; preds = %then
  %11 = load i8*, i8** %inbuf
  %12 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %11, i32 1)
  store i8* %12, i8** %inbuf
  %13 = load i64, i64* %inbytesleft
  %14 = sub i64 %13, 1
  store i64 %14, i64* %inbytesleft
  %15 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 0
  store i32 141, i32* %15
  %16 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 1
  %17 = bitcast [1 x i64]* %16 to i64*
  store i64 %14, i64* %17
  br label %exit

else2:                                            ; preds = %then
  %18 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %18
  %19 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %19
  br label %exit

exit:                                             ; preds = %else2, %then1
  %20 = phi %"(UInt64 | Nil)"* [ %0, %then1 ], [ %1, %else2 ]
  br label %exit3

exit3:                                            ; preds = %else7, %exit
  %21 = phi %"(UInt64 | Nil)"* [ %20, %exit ], [ %2, %else7 ]
  %22 = load %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %21
  ret %"(UInt64 | Nil)" %22

then4:                                            ; preds = %else
  %23 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [30 x i8] }* @"'incomplete multibyt...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %23)
  unreachable

else5:                                            ; preds = %else
  %24 = call i32* @"~Errno::EILSEQ:read"()
  %25 = load i32, i32* %24
  %26 = load i32, i32* %__temp_26
  %27 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 %25, i32 %26)
  br i1 %27, label %then6, label %else7

then6:                                            ; preds = %else5
  %28 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [27 x i8] }* @"'invalid multibyte s...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %28)
  unreachable

else7:                                            ; preds = %else5
  %29 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %2, i32 0, i32 0
  store i32 0, i32* %29
  %30 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %2, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %30
  br label %exit3
}

; Function Attrs: uwtable
define internal i1 @"*Int32@Object#===<Int32>:Bool"(i32 %self, i32 %other) #0 {
entry:
  %0 = icmp eq i32 %self, %other
  ret i1 %0
}

define internal i32* @"~Errno::EILSEQ:read"() {
entry:
  %0 = load i1, i1* @"Errno::EILSEQ:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret i32* @"Errno::EILSEQ"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Errno::EILSEQ:init"
  call void @"~Errno::EILSEQ:init"()
  br label %initialized
}

define internal void @"~Errno::EILSEQ:init"() {
entry:
  ret void
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_slice:Slice(UInt8)"([1024 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([1024 x i8]* %self)
  %2 = call i32 @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#size:Int32"([1024 x i8]* %self)
  %3 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %2)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %self, i32 %start, i32 %count) #0 {
alloca:
  %__temp_27 = alloca i1
  %__temp_28 = alloca i1
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = icmp sle i32 0, %start
  store i1 %1, i1* %__temp_27
  br i1 %1, label %then1, label %else2

then:                                             ; preds = %exit
  br label %exit3

else:                                             ; preds = %exit
  %2 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %2)
  unreachable

then1:                                            ; preds = %entry
  %3 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = icmp sle i32 %start, %4
  br label %exit

else2:                                            ; preds = %entry
  %6 = load i1, i1* %__temp_27
  br label %exit

exit:                                             ; preds = %else2, %then1
  %7 = phi i1 [ %5, %then1 ], [ %6, %else2 ]
  br i1 %7, label %then, label %else

exit3:                                            ; preds = %then
  %8 = icmp sle i32 0, %count
  store i1 %8, i1* %__temp_28
  br i1 %8, label %then6, label %else7

then4:                                            ; preds = %exit8
  br label %exit9

else5:                                            ; preds = %exit8
  %9 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %9)
  unreachable

then6:                                            ; preds = %exit3
  %10 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %11 = load i32, i32* %10
  %12 = sub i32 %11, %start
  %13 = icmp sle i32 %count, %12
  br label %exit8

else7:                                            ; preds = %exit3
  %14 = load i1, i1* %__temp_28
  br label %exit8

exit8:                                            ; preds = %else7, %then6
  %15 = phi i1 [ %13, %then6 ], [ %14, %else7 ]
  br i1 %15, label %then4, label %else5

exit9:                                            ; preds = %then4
  %16 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %17 = load i8*, i8** %16
  %18 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %17, i32 %start)
  %19 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %18, i32 %count)
  store %"Slice(UInt8)" %19, %"Slice(UInt8)"* %0
  %20 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %20
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %self, i32 %obj) #0 {
entry:
  call void @"*Int32@Int#to_s<String::Builder>:Nil"(i32 %obj, %"String::Builder"* %self)
  ret %"String::Builder"* %self
}

; Function Attrs: uwtable
define internal void @"*Int32@Int#to_s<String::Builder>:Nil"(i32 %self, %"String::Builder"* %io) #0 {
entry:
  call void @"*Int32@Int#to_s<Int32, String::Builder>:Nil"(i32 %self, i32 10, %"String::Builder"* %io)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Int32@Int#to_s<Int32, String::Builder>:Nil"(i32 %self, i32 %base, %"String::Builder"* %io) #0 {
alloca:
  %upcase = alloca i1
  %__temp_31 = alloca i1
  %__temp_30 = alloca i1
  %ptr = alloca i8*
  %count = alloca i32
  %base16 = alloca i32
  %upcase17 = alloca i1
  %chars = alloca [65 x i8]
  %ptr_end = alloca i8*
  %ptr18 = alloca i8*
  %num = alloca i32
  %neg = alloca i1
  %digits = alloca i8*
  %count19 = alloca i32
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %upcase
  %1 = icmp sle i32 2, %base
  store i1 %1, i1* %__temp_31
  br i1 %1, label %then3, label %else4

then:                                             ; preds = %exit5
  br label %exit6

else:                                             ; preds = %exit5
  %2 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %2, %String* bitcast ({ i32, i32, i32, [14 x i8] }* @"'Invalid base '" to %String*))
  %4 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %3, i32 %base)
  %5 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %4)
  %6 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %5)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %6)
  unreachable

then1:                                            ; preds = %exit
  %7 = load i1, i1* %__temp_30
  br label %exit5

else2:                                            ; preds = %exit
  %8 = icmp eq i32 %base, 62
  br label %exit5

then3:                                            ; preds = %entry
  %9 = icmp sle i32 %base, 36
  br label %exit

else4:                                            ; preds = %entry
  %10 = load i1, i1* %__temp_31
  br label %exit

exit:                                             ; preds = %else4, %then3
  %11 = phi i1 [ %9, %then3 ], [ %10, %else4 ]
  store i1 %11, i1* %__temp_30
  br i1 %11, label %then1, label %else2

exit5:                                            ; preds = %else2, %then1
  %12 = phi i1 [ %7, %then1 ], [ %8, %else2 ]
  br i1 %12, label %then, label %else

exit6:                                            ; preds = %then
  %13 = load i1, i1* %upcase
  br i1 %13, label %then9, label %else10

then7:                                            ; preds = %exit11
  %14 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [33 x i8] }* @"'upcase must be fals...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %14)
  unreachable

else8:                                            ; preds = %exit11
  %15 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 0, i32 %self)
  br i1 %15, label %then12, label %else13

then9:                                            ; preds = %exit6
  %16 = icmp eq i32 %base, 62
  br label %exit11

else10:                                           ; preds = %exit6
  %17 = load i1, i1* %upcase
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %18 = phi i1 [ %16, %then9 ], [ %17, %else10 ]
  br i1 %18, label %then7, label %else8

then12:                                           ; preds = %else8
  %19 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %io, i32 48)
  ret void

else13:                                           ; preds = %else8
  %20 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 1, i32 %self)
  br i1 %20, label %then14, label %else15

then14:                                           ; preds = %else13
  %21 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %io, i32 49)
  ret void

else15:                                           ; preds = %else13
  %22 = load i1, i1* %upcase
  store i32 %base, i32* %base16
  store i1 %22, i1* %upcase17
  %23 = call i8* @"*StaticArray(UInt8, 65)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([65 x i8]* %chars)
  %24 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %23, i32 64)
  store i8* %24, i8** %ptr_end
  %25 = load i8*, i8** %ptr_end
  store i8* %25, i8** %ptr18
  store i32 %self, i32* %num
  %26 = load i32, i32* %num
  %27 = icmp slt i32 %26, 0
  store i1 %27, i1* %neg
  %28 = load i32, i32* %base16
  %29 = icmp eq i32 %28, 62
  br i1 %29, label %then20, label %else21

then20:                                           ; preds = %else15
  %30 = call %String** @"~Int::DIGITS_BASE62:read"()
  %31 = load %String*, %String** %30
  br label %exit22

else21:                                           ; preds = %else15
  %32 = load i1, i1* %upcase17
  br i1 %32, label %then23, label %else24

exit22:                                           ; preds = %exit25, %then20
  %33 = phi %String* [ %31, %then20 ], [ %39, %exit25 ]
  %34 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %33)
  store i8* %34, i8** %digits
  br label %while

then23:                                           ; preds = %else21
  %35 = call %String** @"~Int::DIGITS_UPCASE:read"()
  %36 = load %String*, %String** %35
  br label %exit25

else24:                                           ; preds = %else21
  %37 = call %String** @"~Int::DIGITS_DOWNCASE:read"()
  %38 = load %String*, %String** %37
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %39 = phi %String* [ %36, %then23 ], [ %38, %else24 ]
  br label %exit22

while:                                            ; preds = %body, %exit22
  %40 = load i32, i32* %num
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %body, label %exit26

body:                                             ; preds = %while
  %42 = load i8*, i8** %ptr18
  %43 = call i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %42, i32 1)
  store i8* %43, i8** %ptr18
  %44 = load i8*, i8** %ptr18
  %45 = load i8*, i8** %digits
  %46 = load i32, i32* %num
  %47 = load i32, i32* %base16
  %48 = call i32 @"*Int32@Int#remainder<Int32>:Int32"(i32 %46, i32 %47)
  %49 = call i32 @"*Int32@Int#abs:Int32"(i32 %48)
  %50 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %45, i32 %49)
  store i8 %50, i8* %44
  %51 = load i32, i32* %num
  %52 = load i32, i32* %base16
  %53 = call i32 @"*Int32@Int#tdiv<Int32>:Int32"(i32 %51, i32 %52)
  store i32 %53, i32* %num
  br label %while

exit26:                                           ; preds = %while
  %54 = load i1, i1* %neg
  br i1 %54, label %then27, label %else28

then27:                                           ; preds = %exit26
  %55 = load i8*, i8** %ptr18
  %56 = call i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %55, i32 1)
  store i8* %56, i8** %ptr18
  %57 = load i8*, i8** %ptr18
  store i8 45, i8* %57
  br label %exit29

else28:                                           ; preds = %exit26
  br label %exit29

exit29:                                           ; preds = %else28, %then27
  %58 = load i8*, i8** %ptr_end
  %59 = load i8*, i8** %ptr18
  %60 = ptrtoint i8* %58 to i64
  %61 = ptrtoint i8* %59 to i64
  %62 = sub i64 %60, %61
  %63 = sdiv exact i64 %62, ptrtoint (i8* getelementptr inbounds (i8, i8* null, i32 1) to i64)
  %64 = trunc i64 %63 to i32
  store i32 %64, i32* %count19
  %65 = load i8*, i8** %ptr18
  %66 = load i32, i32* %count19
  store i8* %65, i8** %ptr
  store i32 %66, i32* %count
  %67 = load i8*, i8** %ptr
  %68 = load i32, i32* %count
  %69 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %67, i32 %68)
  store %"Slice(UInt8)" %69, %"Slice(UInt8)"* %0
  %70 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  call void @"*String::Builder@IO#write_utf8<Slice(UInt8)>:Nil"(%"String::Builder"* %io, %"Slice(UInt8)" %70)
  ret void
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %self, i32 %obj) #0 {
entry:
  call void @"*Char#to_s<String::Builder>:Nil"(i32 %obj, %"String::Builder"* %self)
  ret %"String::Builder"* %self
}

; Function Attrs: uwtable
define internal void @"*Char#to_s<String::Builder>:Nil"(i32 %self, %"String::Builder"* %io) #0 {
alloca:
  %byte = alloca i8
  %chars = alloca [4 x i8]
  %i = alloca i32
  %0 = alloca %"Slice(UInt8)"
  %byte4 = alloca i8
  %c = alloca i32
  %1 = alloca %"Slice(UInt8)"
  %2 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %3 = call i1 @"*Char#ascii?:Bool"(i32 %self)
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = trunc i32 %self to i8
  store i8 %4, i8* %byte
  %5 = getelementptr inbounds %"String::Builder", %"String::Builder"* %io, i32 0, i32 3
  %6 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %5, i32 0, i32 0
  %7 = load i32, i32* %6
  %8 = icmp eq i32 %7, 0
  %9 = xor i1 %8, true
  %10 = and i1 true, %9
  br i1 %10, label %then1, label %else2

else:                                             ; preds = %entry
  store i32 0, i32* %i
  store i32 %self, i32* %c
  %11 = load i32, i32* %c
  %12 = icmp slt i32 %11, 128
  br i1 %12, label %then5, label %else6

then1:                                            ; preds = %then
  %13 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %byte, i32 1)
  store %"Slice(UInt8)" %13, %"Slice(UInt8)"* %0
  %14 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  call void @"*String::Builder@IO#write_utf8<Slice(UInt8)>:Nil"(%"String::Builder"* %io, %"Slice(UInt8)" %14)
  br label %exit

else2:                                            ; preds = %then
  %15 = load i8, i8* %byte
  call void @"*String::Builder@IO#write_byte<UInt8>:Nil"(%"String::Builder"* %io, i8 %15)
  br label %exit

exit:                                             ; preds = %else2, %then1
  br label %exit3

exit3:                                            ; preds = %exit7, %exit
  ret void

then5:                                            ; preds = %else
  %16 = load i32, i32* %c
  %17 = trunc i32 %16 to i8
  store i8 %17, i8* %byte4
  %18 = load i32, i32* %i
  %19 = load i8, i8* %byte4
  %20 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %18, i8 %19)
  %21 = load i32, i32* %i
  %22 = add i32 %21, 1
  store i32 %22, i32* %i
  br label %exit7

else6:                                            ; preds = %else
  %23 = load i32, i32* %c
  %24 = icmp sle i32 %23, 2047
  br i1 %24, label %then8, label %else9

exit7:                                            ; preds = %exit10, %then5
  %25 = phi i32 [ %22, %then5 ], [ %50, %exit10 ]
  %26 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %chars)
  store %"Slice(UInt8)" %26, %"Slice(UInt8)"* %1
  %27 = load i32, i32* %i
  %28 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %1, i32 0, i32 %27)
  store %"Slice(UInt8)" %28, %"Slice(UInt8)"* %2
  %29 = load %"Slice(UInt8)", %"Slice(UInt8)"* %2
  call void @"*String::Builder@IO#write_utf8<Slice(UInt8)>:Nil"(%"String::Builder"* %io, %"Slice(UInt8)" %29)
  br label %exit3

then8:                                            ; preds = %else6
  %30 = load i32, i32* %c
  %31 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %30, i32 6)
  %32 = or i32 192, %31
  %33 = trunc i32 %32 to i8
  store i8 %33, i8* %byte4
  %34 = load i32, i32* %i
  %35 = load i8, i8* %byte4
  %36 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %34, i8 %35)
  %37 = load i32, i32* %i
  %38 = add i32 %37, 1
  store i32 %38, i32* %i
  %39 = load i32, i32* %c
  %40 = and i32 %39, 63
  %41 = or i32 128, %40
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %byte4
  %43 = load i32, i32* %i
  %44 = load i8, i8* %byte4
  %45 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %43, i8 %44)
  %46 = load i32, i32* %i
  %47 = add i32 %46, 1
  store i32 %47, i32* %i
  br label %exit10

else9:                                            ; preds = %else6
  %48 = load i32, i32* %c
  %49 = icmp sle i32 %48, 65535
  br i1 %49, label %then11, label %else12

exit10:                                           ; preds = %exit13, %then8
  %50 = phi i32 [ %47, %then8 ], [ %81, %exit13 ]
  br label %exit7

then11:                                           ; preds = %else9
  %51 = load i32, i32* %c
  %52 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %51, i32 12)
  %53 = or i32 224, %52
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %byte4
  %55 = load i32, i32* %i
  %56 = load i8, i8* %byte4
  %57 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %55, i8 %56)
  %58 = load i32, i32* %i
  %59 = add i32 %58, 1
  store i32 %59, i32* %i
  %60 = load i32, i32* %c
  %61 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %60, i32 6)
  %62 = and i32 %61, 63
  %63 = or i32 128, %62
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %byte4
  %65 = load i32, i32* %i
  %66 = load i8, i8* %byte4
  %67 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %65, i8 %66)
  %68 = load i32, i32* %i
  %69 = add i32 %68, 1
  store i32 %69, i32* %i
  %70 = load i32, i32* %c
  %71 = and i32 %70, 63
  %72 = or i32 128, %71
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %byte4
  %74 = load i32, i32* %i
  %75 = load i8, i8* %byte4
  %76 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %74, i8 %75)
  %77 = load i32, i32* %i
  %78 = add i32 %77, 1
  store i32 %78, i32* %i
  br label %exit13

else12:                                           ; preds = %else9
  %79 = load i32, i32* %c
  %80 = icmp sle i32 %79, 1114111
  br i1 %80, label %then14, label %else15

exit13:                                           ; preds = %exit16, %then11
  %81 = phi i32 [ %78, %then11 ], [ %126, %exit16 ]
  br label %exit10

then14:                                           ; preds = %else12
  %82 = load i32, i32* %c
  %83 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %82, i32 18)
  %84 = or i32 240, %83
  %85 = trunc i32 %84 to i8
  store i8 %85, i8* %byte4
  %86 = load i32, i32* %i
  %87 = load i8, i8* %byte4
  %88 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %86, i8 %87)
  %89 = load i32, i32* %i
  %90 = add i32 %89, 1
  store i32 %90, i32* %i
  %91 = load i32, i32* %c
  %92 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %91, i32 12)
  %93 = and i32 %92, 63
  %94 = or i32 128, %93
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %byte4
  %96 = load i32, i32* %i
  %97 = load i8, i8* %byte4
  %98 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %96, i8 %97)
  %99 = load i32, i32* %i
  %100 = add i32 %99, 1
  store i32 %100, i32* %i
  %101 = load i32, i32* %c
  %102 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %101, i32 6)
  %103 = and i32 %102, 63
  %104 = or i32 128, %103
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %byte4
  %106 = load i32, i32* %i
  %107 = load i8, i8* %byte4
  %108 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %106, i8 %107)
  %109 = load i32, i32* %i
  %110 = add i32 %109, 1
  store i32 %110, i32* %i
  %111 = load i32, i32* %c
  %112 = and i32 %111, 63
  %113 = or i32 128, %112
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %byte4
  %115 = load i32, i32* %i
  %116 = load i8, i8* %byte4
  %117 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %115, i8 %116)
  %118 = load i32, i32* %i
  %119 = add i32 %118, 1
  store i32 %119, i32* %i
  br label %exit16

else15:                                           ; preds = %else12
  %120 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %121 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %120, %String* bitcast ({ i32, i32, i32, [20 x i8] }* @"'Invalid char value ...'" to %String*))
  %122 = call %String* @"*Char#dump:String"(i32 %self)
  %123 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %121, %String* %122)
  %124 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %123)
  %125 = call %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* %124)
  call void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %125)
  unreachable

exit16:                                           ; preds = %then14
  %126 = phi i32 [ %119, %then14 ]
  br label %exit13
}

; Function Attrs: uwtable
define internal i1 @"*Char#ascii?:Bool"(i32 %self) #0 {
entry:
  %0 = icmp slt i32 %self, 128
  ret i1 %0
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %self, i32 %index, i8 %value) #4 {
alloca:
  %index1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  %1 = call i32 @"*StaticArray(UInt8, 4)@Indexable(T)#check_index_out_of_bounds<Int32>:Int32"([4 x i8]* %self, i32 %0)
  store i32 %1, i32* %index1
  %2 = call i8* @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([4 x i8]* %self)
  %3 = load i32, i32* %index1
  %4 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %2, i32 %3, i8 %value)
  ret i8 %4
}

; Function Attrs: uwtable
define internal i32 @"*StaticArray(UInt8, 4)@Indexable(T)#check_index_out_of_bounds<Int32>:Int32"([4 x i8]* %self, i32 %index) #0 {
alloca:
  %index1 = alloca i32
  %__temp_32 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  %1 = icmp slt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32, i32* %index1
  %3 = call i32 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#size:Int32"([4 x i8]* %self)
  %4 = add i32 %2, %3
  store i32 %4, i32* %index1
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %5 = load i32, i32* %index1
  %6 = icmp sle i32 0, %5
  store i1 %6, i1* %__temp_32
  br i1 %6, label %then4, label %else5

then2:                                            ; preds = %exit6
  %7 = load i32, i32* %index1
  br label %exit7

else3:                                            ; preds = %exit6
  %8 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %8)
  unreachable

then4:                                            ; preds = %exit
  %9 = load i32, i32* %index1
  %10 = call i32 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#size:Int32"([4 x i8]* %self)
  %11 = icmp slt i32 %9, %10
  br label %exit6

else5:                                            ; preds = %exit
  %12 = load i1, i1* %__temp_32
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  %13 = phi i1 [ %11, %then4 ], [ %12, %else5 ]
  br i1 %13, label %then2, label %else3

exit7:                                            ; preds = %then2
  %14 = phi i32 [ %7, %then2 ]
  ret i32 %14
}

; Function Attrs: uwtable
define internal i32 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#size:Int32"([4 x i8]* %self) #0 {
entry:
  ret i32 4
}

; Function Attrs: uwtable
define internal i8* @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([4 x i8]* %self) #0 {
entry:
  %0 = getelementptr inbounds [4 x i8], [4 x i8]* %self, i32 0, i32 0
  ret i8* %0
}

; Function Attrs: uwtable
define internal %String* @"*Char#dump:String"(i32 %self) #0 {
alloca:
  %io = alloca %"String::Builder"*
  %__temp_33 = alloca i1
  %io22 = alloca %"String::Builder"*
  %capacity = alloca i32
  %builder = alloca %"String::Builder"*
  %capacity23 = alloca i32
  %builder24 = alloca %"String::Builder"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i1 @"*Char@Object#===<Char>:Bool"(i32 39, i32 %self)
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %1 = call i1 @"*Char@Object#===<Char>:Bool"(i32 92, i32 %self)
  br i1 %1, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %2 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"''\5C'''" to %String*), %then ], [ %4, %exit3 ]
  ret %String* %2

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  %3 = call i1 @"*Char@Object#===<Char>:Bool"(i32 27, i32 %self)
  br i1 %3, label %then4, label %else5

exit3:                                            ; preds = %exit6, %then1
  %4 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"''\5C\5C''" to %String*), %then1 ], [ %6, %exit6 ]
  br label %exit

then4:                                            ; preds = %else2
  br label %exit6

else5:                                            ; preds = %else2
  %5 = call i1 @"*Char@Object#===<Char>:Bool"(i32 12, i32 %self)
  br i1 %5, label %then7, label %else8

exit6:                                            ; preds = %exit9, %then4
  %6 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"''\5Ce''" to %String*), %then4 ], [ %8, %exit9 ]
  br label %exit3

then7:                                            ; preds = %else5
  br label %exit9

else8:                                            ; preds = %else5
  %7 = call i1 @"*Char@Object#===<Char>:Bool"(i32 10, i32 %self)
  br i1 %7, label %then10, label %else11

exit9:                                            ; preds = %exit12, %then7
  %8 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"''\5Cf''" to %String*), %then7 ], [ %10, %exit12 ]
  br label %exit6

then10:                                           ; preds = %else8
  br label %exit12

else11:                                           ; preds = %else8
  %9 = call i1 @"*Char@Object#===<Char>:Bool"(i32 13, i32 %self)
  br i1 %9, label %then13, label %else14

exit12:                                           ; preds = %exit15, %then10
  %10 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"''\5Cn''" to %String*), %then10 ], [ %12, %exit15 ]
  br label %exit9

then13:                                           ; preds = %else11
  br label %exit15

else14:                                           ; preds = %else11
  %11 = call i1 @"*Char@Object#===<Char>:Bool"(i32 9, i32 %self)
  br i1 %11, label %then16, label %else17

exit15:                                           ; preds = %exit18, %then13
  %12 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"''\5Cr''" to %String*), %then13 ], [ %14, %exit18 ]
  br label %exit12

then16:                                           ; preds = %else14
  br label %exit18

else17:                                           ; preds = %else14
  %13 = call i1 @"*Char@Object#===<Char>:Bool"(i32 11, i32 %self)
  br i1 %13, label %then19, label %else20

exit18:                                           ; preds = %exit21, %then16
  %14 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"''\5Ct''" to %String*), %then16 ], [ %24, %exit21 ]
  br label %exit15

then19:                                           ; preds = %else17
  br label %exit21

else20:                                           ; preds = %else17
  store i32 64, i32* %capacity
  %15 = load i32, i32* %capacity
  store i32 %15, i32* %capacity23
  %16 = load i32, i32* %capacity23
  %17 = call %"String::Builder"* @"*String::Builder::new<Int32>:String::Builder"(i32 %16)
  store %"String::Builder"* %17, %"String::Builder"** %builder24
  %18 = load %"String::Builder"*, %"String::Builder"** %builder24
  store %"String::Builder"* %18, %"String::Builder"** %builder
  %19 = load %"String::Builder"*, %"String::Builder"** %builder
  store %"String::Builder"* %19, %"String::Builder"** %io22
  %20 = load %"String::Builder"*, %"String::Builder"** %io22
  %21 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %20, i32 39)
  %22 = load %"String::Builder"*, %"String::Builder"** %io22
  store %"String::Builder"* %22, %"String::Builder"** %io
  %23 = call i1 @"*Char#ascii_control?:Bool"(i32 %self)
  store i1 %23, i1* %__temp_33
  br i1 %23, label %then27, label %else28

exit21:                                           ; preds = %exit30, %then19
  %24 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"''\5Cv''" to %String*), %then19 ], [ %38, %exit30 ]
  br label %exit18

then25:                                           ; preds = %exit29
  %25 = load %"String::Builder"*, %"String::Builder"** %io
  %26 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %25, %String* bitcast ({ i32, i32, i32, [4 x i8] }* @"'\5Cu{'" to %String*))
  %27 = load %"String::Builder"*, %"String::Builder"** %io
  call void @"*Int32@Int#to_s<Int32, String::Builder>:Nil"(i32 %self, i32 16, %"String::Builder"* %27)
  %28 = load %"String::Builder"*, %"String::Builder"** %io
  %29 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %28, %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'}'" to %String*))
  br label %exit30

else26:                                           ; preds = %exit29
  %30 = load %"String::Builder"*, %"String::Builder"** %io
  call void @"*Char#to_s<String::Builder>:Nil"(i32 %self, %"String::Builder"* %30)
  br label %exit30

then27:                                           ; preds = %else20
  %31 = load i1, i1* %__temp_33
  br label %exit29

else28:                                           ; preds = %else20
  %32 = icmp sge i32 %self, 128
  br label %exit29

exit29:                                           ; preds = %else28, %then27
  %33 = phi i1 [ %31, %then27 ], [ %32, %else28 ]
  br i1 %33, label %then25, label %else26

exit30:                                           ; preds = %else26, %then25
  %34 = phi %"String::Builder"* [ %29, %then25 ], [ null, %else26 ]
  %35 = load %"String::Builder"*, %"String::Builder"** %io22
  %36 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %35, i32 39)
  %37 = load %"String::Builder"*, %"String::Builder"** %builder24
  %38 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %37)
  br label %exit21
}

; Function Attrs: uwtable
define internal i1 @"*Char@Object#===<Char>:Bool"(i32 %self, i32 %other) #0 {
entry:
  %0 = icmp eq i32 %self, %other
  ret i1 %0
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*String::Builder::new<Int32>:String::Builder"(i32 %capacity) #0 {
alloca:
  %_ = alloca %"String::Builder"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"String::Builder"* getelementptr (%"String::Builder", %"String::Builder"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"String::Builder"*
  %2 = bitcast %"String::Builder"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"String::Builder"* getelementptr (%"String::Builder", %"String::Builder"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"String::Builder", %"String::Builder"* %1, i32 0, i32 0
  store i32 74, i32* %3
  store %"String::Builder"* %1, %"String::Builder"** %_
  %4 = load %"String::Builder"*, %"String::Builder"** %_
  %5 = call i1 @"*String::Builder#initialize<Int32>:Bool"(%"String::Builder"* %4, i32 %capacity)
  %6 = load %"String::Builder"*, %"String::Builder"** %_
  ret %"String::Builder"* %6
}

; Function Attrs: uwtable
define internal i1 @"*String::Builder#initialize<Int32>:Bool"(%"String::Builder"* %self, i32 %capacity) #0 {
alloca:
  %capacity1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %capacity, i32* %capacity1
  %0 = load i32, i32* %capacity1
  call void @"*String::check_capacity_in_bounds<Int32>:Nil"(i32 %0)
  %1 = load i32, i32* %capacity1
  %2 = add i32 %1, 13
  store i32 %2, i32* %capacity1
  %3 = load i32, i32* %capacity1
  call void @"*String::check_capacity_in_bounds<Int32>:Nil"(i32 %3)
  %4 = load i32, i32* %capacity1
  %5 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %4)
  %6 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 6
  store i8* %5, i8** %6
  %7 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  store i32 0, i32* %7
  %8 = load i32, i32* %capacity1
  %9 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 5
  store i32 %8, i32* %9
  %10 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 7
  store i1 false, i1* %10
  ret i1 false
}

; Function Attrs: uwtable
define internal i1 @"*Char#ascii_control?:Bool"(i32 %self) #0 {
alloca:
  %__temp_34 = alloca i1
  %__temp_17 = alloca i32
  %__temp_35 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = icmp slt i32 %self, 32
  store i1 %0, i1* %__temp_34
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = load i1, i1* %__temp_34
  br label %exit

else:                                             ; preds = %entry
  store i32 %self, i32* %__temp_17
  %2 = icmp sle i32 127, %self
  store i1 %2, i1* %__temp_35
  br i1 %2, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %3 = phi i1 [ %1, %then ], [ %7, %exit3 ]
  ret i1 %3

then1:                                            ; preds = %else
  %4 = load i32, i32* %__temp_17
  %5 = icmp sle i32 %4, 159
  br label %exit3

else2:                                            ; preds = %else
  %6 = load i1, i1* %__temp_35
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %7 = phi i1 [ %5, %then1 ], [ %6, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* %message) #0 {
alloca:
  %_ = alloca %InvalidByteSequenceError*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%InvalidByteSequenceError* getelementptr (%InvalidByteSequenceError, %InvalidByteSequenceError* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %InvalidByteSequenceError*
  %2 = bitcast %InvalidByteSequenceError* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%InvalidByteSequenceError* getelementptr (%InvalidByteSequenceError, %InvalidByteSequenceError* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %InvalidByteSequenceError, %InvalidByteSequenceError* %1, i32 0, i32 0
  store i32 37, i32* %3
  store %InvalidByteSequenceError* %1, %InvalidByteSequenceError** %_
  %4 = load %InvalidByteSequenceError*, %InvalidByteSequenceError** %_
  call void @"*InvalidByteSequenceError#initialize<String>:Nil"(%InvalidByteSequenceError* %4, %String* %message)
  %5 = load %InvalidByteSequenceError*, %InvalidByteSequenceError** %_
  ret %InvalidByteSequenceError* %5
}

; Function Attrs: uwtable
define internal void @"*InvalidByteSequenceError#initialize<String>:Nil"(%InvalidByteSequenceError* %self, %String* %message) #0 {
entry:
  call void @"*InvalidByteSequenceError@Exception#initialize<String>:Nil"(%InvalidByteSequenceError* %self, %String* %message)
  ret void
}

; Function Attrs: uwtable
define internal void @"*InvalidByteSequenceError@Exception#initialize<String>:Nil"(%InvalidByteSequenceError* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %InvalidByteSequenceError, %InvalidByteSequenceError* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %InvalidByteSequenceError, %InvalidByteSequenceError* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*InvalidByteSequenceError@Exception#callstack=<CallStack>:CallStack"(%InvalidByteSequenceError* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %InvalidByteSequenceError* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 37, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*InvalidByteSequenceError@Exception#callstack=<CallStack>:CallStack"(%InvalidByteSequenceError* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %InvalidByteSequenceError, %InvalidByteSequenceError* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([4 x i8]* %self)
  %2 = call i32 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#size:Int32"([4 x i8]* %self)
  %3 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %2)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i8* @"*StaticArray(UInt8, 65)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([65 x i8]* %self) #0 {
entry:
  %0 = getelementptr inbounds [65 x i8], [65 x i8]* %self, i32 0, i32 0
  ret i8* %0
}

define internal %String** @"~Int::DIGITS_BASE62:read"() {
entry:
  %0 = load i1, i1* @"Int::DIGITS_BASE62:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %String** @"Int::DIGITS_BASE62"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Int::DIGITS_BASE62:init"
  call void @"~Int::DIGITS_BASE62:init"()
  br label %initialized
}

define internal void @"~Int::DIGITS_BASE62:init"() {
entry:
  ret void
}

define internal %String** @"~Int::DIGITS_UPCASE:read"() {
entry:
  %0 = load i1, i1* @"Int::DIGITS_UPCASE:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %String** @"Int::DIGITS_UPCASE"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Int::DIGITS_UPCASE:init"
  call void @"~Int::DIGITS_UPCASE:init"()
  br label %initialized
}

define internal void @"~Int::DIGITS_UPCASE:init"() {
entry:
  ret void
}

define internal %String** @"~Int::DIGITS_DOWNCASE:read"() {
entry:
  %0 = load i1, i1* @"Int::DIGITS_DOWNCASE:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %String** @"Int::DIGITS_DOWNCASE"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Int::DIGITS_DOWNCASE:init"
  call void @"~Int::DIGITS_DOWNCASE:init"()
  br label %initialized
}

define internal void @"~Int::DIGITS_DOWNCASE:init"() {
entry:
  ret void
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %self, i32 %other) #0 {
entry:
  %0 = call i32 @"*Int32#-:Int32"(i32 %other)
  %1 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %self, i32 %0)
  ret i8* %1
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#remainder<Int32>:Int32"(i32 %self, i32 %other) #0 {
entry:
  %0 = icmp eq i32 %other, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = srem i32 %self, %other
  ret i32 %2
}

; Function Attrs: uwtable
define internal %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"() #0 {
alloca:
  %_ = alloca %DivisionByZero*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%DivisionByZero* getelementptr (%DivisionByZero, %DivisionByZero* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %DivisionByZero*
  %2 = bitcast %DivisionByZero* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%DivisionByZero* getelementptr (%DivisionByZero, %DivisionByZero* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %DivisionByZero, %DivisionByZero* %1, i32 0, i32 0
  store i32 39, i32* %3
  store %DivisionByZero* %1, %DivisionByZero** %_
  %4 = load %DivisionByZero*, %DivisionByZero** %_
  call void @"*DivisionByZero#initialize:Nil"(%DivisionByZero* %4)
  %5 = load %DivisionByZero*, %DivisionByZero** %_
  ret %DivisionByZero* %5
}

; Function Attrs: uwtable
define internal void @"*DivisionByZero#initialize:Nil"(%DivisionByZero* %self) #0 {
alloca:
  %message = alloca %String*
  br label %entry

entry:                                            ; preds = %alloca
  store %String* bitcast ({ i32, i32, i32, [17 x i8] }* @"'Division by zero'" to %String*), %String** %message
  %0 = load %String*, %String** %message
  call void @"*DivisionByZero#initialize<String>:Nil"(%DivisionByZero* %self, %String* %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*DivisionByZero#initialize<String>:Nil"(%DivisionByZero* %self, %String* %message) #0 {
entry:
  call void @"*DivisionByZero@Exception#initialize<String>:Nil"(%DivisionByZero* %self, %String* %message)
  ret void
}

; Function Attrs: uwtable
define internal void @"*DivisionByZero@Exception#initialize<String>:Nil"(%DivisionByZero* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %DivisionByZero, %DivisionByZero* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %DivisionByZero, %DivisionByZero* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*DivisionByZero@Exception#callstack=<CallStack>:CallStack"(%DivisionByZero* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %DivisionByZero* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 39, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*DivisionByZero@Exception#callstack=<CallStack>:CallStack"(%DivisionByZero* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %DivisionByZero, %DivisionByZero* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#tdiv<Int32>:Int32"(i32 %self, i32 %other) #0 {
entry:
  call void @"*Int32@Int#check_div_argument<Int32>:Nil"(i32 %self, i32 %other)
  %0 = sdiv i32 %self, %other
  ret i32 %0
}

; Function Attrs: uwtable
define internal void @"*Int32@Int#check_div_argument<Int32>:Nil"(i32 %self, i32 %other) #0 {
alloca:
  %__temp_37 = alloca i1
  %__temp_36 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = icmp eq i32 %other, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = icmp slt i32 %self, 0
  store i1 %2, i1* %__temp_37
  br i1 %2, label %then5, label %else6

then1:                                            ; preds = %exit7
  %3 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [26 x i8] }* @"'overflow: Int32::MI...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %3)
  unreachable

else2:                                            ; preds = %exit7
  ret void

then3:                                            ; preds = %exit
  %4 = icmp eq i32 %other, -1
  br label %exit7

else4:                                            ; preds = %exit
  %5 = load i1, i1* %__temp_36
  br label %exit7

then5:                                            ; preds = %else
  %6 = icmp eq i32 %self, -2147483648
  br label %exit

else6:                                            ; preds = %else
  %7 = load i1, i1* %__temp_37
  br label %exit

exit:                                             ; preds = %else6, %then5
  %8 = phi i1 [ %6, %then5 ], [ %7, %else6 ]
  store i1 %8, i1* %__temp_36
  br i1 %8, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  %9 = phi i1 [ %4, %then3 ], [ %5, %else4 ]
  br i1 %9, label %then1, label %else2
}

; Function Attrs: uwtable
define internal i32* @"*Pointer(Int32)@Pointer(T)::null:Pointer(Int32)"(i32 %self) #0 {
entry:
  ret i32* null
}

; Function Attrs: uwtable
define internal i32* @"*Pointer(Int32)@Pointer(T)::malloc<Int32>:Pointer(Int32)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to i32*
  ret i32* %6
}

; Function Attrs: uwtable
define internal i32 @"*Pointer(Int32)@Pointer(T)#[]=<Int32, Int32>:Int32"(i32* %self, i32 %offset, i32 %value) #0 {
entry:
  %0 = call i32* @"*Pointer(Int32)@Pointer(T)#+<Int32>:Pointer(Int32)"(i32* %self, i32 %offset)
  store i32 %value, i32* %0
  ret i32 %value
}

; Function Attrs: uwtable
define internal i32* @"*Pointer(Int32)@Pointer(T)#+<Int32>:Pointer(Int32)"(i32* %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds i32, i32* %self, i64 %0
  ret i32* %1
}

; Function Attrs: uwtable
define internal i32 @"*Array(Int32)@Array(T)#size=<Int32>:Int32"(%"Array(Int32)"* %self, i32 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %self, i32 0, i32 1
  store i32 %size, i32* %0
  ret i32 %size
}

; Function Attrs: alwaysinline uwtable
define internal i32 @"*Array(Int32)@Array(T)#unsafe_at<Int32>:Int32"(%"Array(Int32)"* %self, i32 %index) #4 {
entry:
  %0 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %self, i32 0, i32 3
  %1 = load i32*, i32** %0
  %2 = call i32 @"*Pointer(Int32)@Pointer(T)#[]<Int32>:Int32"(i32* %1, i32 %index)
  ret i32 %2
}

; Function Attrs: uwtable
define internal i32 @"*Pointer(Int32)@Pointer(T)#[]<Int32>:Int32"(i32* %self, i32 %offset) #0 {
entry:
  %0 = call i32* @"*Pointer(Int32)@Pointer(T)#+<Int32>:Pointer(Int32)"(i32* %self, i32 %offset)
  %1 = load i32, i32* %0
  ret i32 %1
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"** @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#realloc<Int32>:Pointer(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Hash::Entry(Thread, Nil)"** %self to i8*
  %2 = mul i64 %0, ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Hash::Entry(Thread, Nil)"**
  ret %"Hash::Entry(Thread, Nil)"** %5
}

; Function Attrs: uwtable
define internal void @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#[]=<Int32, Nil>:Nil"(%"Hash::Entry(Thread, Nil)"** %self, i32 %offset, %Nil %value) #0 {
entry:
  %0 = call %"Hash::Entry(Thread, Nil)"** @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %self, i32 %offset)
  store %"Hash::Entry(Thread, Nil)"* null, %"Hash::Entry(Thread, Nil)"** %0
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"** @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %self, i64 %0
  ret %"Hash::Entry(Thread, Nil)"** %1
}

; Function Attrs: uwtable
define internal i32 @"*Hash(Thread, Nil)@Hash(K, V)#bucket_index<Thread>:Int32"(%"Hash(Thread, Nil)"* %self, %Thread* %key) #0 {
entry:
  %0 = call i64 @"*Thread@Reference#hash:UInt64"(%Thread* %key)
  %1 = trunc i64 %0 to i32
  %2 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = call i32 @"*UInt32@Int#remainder<Int32>:UInt32"(i32 %1, i32 %3)
  ret i32 %4
}

; Function Attrs: uwtable
define internal i64 @"*Thread@Reference#hash:UInt64"(%Thread* %self) #0 {
entry:
  %0 = ptrtoint %Thread* %self to i64
  ret i64 %0
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Int#remainder<Int32>:UInt32"(i32 %self, i32 %other) #0 {
entry:
  %0 = icmp eq i32 %other, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = urem i32 %self, %other
  ret i32 %2
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"* @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %self, i32 %offset) #0 {
entry:
  %0 = call %"Hash::Entry(Thread, Nil)"** @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %self, i32 %offset)
  %1 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %0
  ret %"Hash::Entry(Thread, Nil)"* %1
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#next=<(Hash::Entry(Thread, Nil) | Nil)>:(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"* %self, %"Hash::Entry(Thread, Nil)"* %next) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %self, i32 0, i32 3
  store %"Hash::Entry(Thread, Nil)"* %next, %"Hash::Entry(Thread, Nil)"** %0
  ret %"Hash::Entry(Thread, Nil)"* %next
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"* @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"** %self, i32 %offset, %"Hash::Entry(Thread, Nil)"* %value) #0 {
entry:
  %0 = call %"Hash::Entry(Thread, Nil)"** @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %self, i32 %offset)
  store %"Hash::Entry(Thread, Nil)"* %value, %"Hash::Entry(Thread, Nil)"** %0
  ret %"Hash::Entry(Thread, Nil)"* %value
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"* @"*Hash(Thread, Nil)@Hash(K, V)#insert_in_bucket<Int32, Thread, Nil>:(Hash::Entry(Thread, Nil) | Nil)"(%"Hash(Thread, Nil)"* %self, i32 %index, %Thread* %key, %Nil %value) #0 {
alloca:
  %entry1 = alloca %"Hash::Entry(Thread, Nil)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 6
  %1 = load %"Hash::Entry(Thread, Nil)"**, %"Hash::Entry(Thread, Nil)"*** %0
  %2 = call %"Hash::Entry(Thread, Nil)"* @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Thread, Nil) | Nil)"(%"Hash::Entry(Thread, Nil)"** %1, i32 %index)
  store %"Hash::Entry(Thread, Nil)"* %2, %"Hash::Entry(Thread, Nil)"** %entry1
  %3 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %4 = icmp ne %"Hash::Entry(Thread, Nil)"* %3, null
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %while

else:                                             ; preds = %entry
  %5 = getelementptr inbounds %"Hash(Thread, Nil)", %"Hash(Thread, Nil)"* %self, i32 0, i32 6
  %6 = load %"Hash::Entry(Thread, Nil)"**, %"Hash::Entry(Thread, Nil)"*** %5
  %7 = call %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)::new<Thread, Nil>:Hash::Entry(Thread, Nil)"(i32 577, %Thread* %key, %Nil zeroinitializer)
  %8 = call %"Hash::Entry(Thread, Nil)"* @"*Pointer(Hash::Entry(Thread, Nil) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"** %6, i32 %index, %"Hash::Entry(Thread, Nil)"* %7)
  ret %"Hash::Entry(Thread, Nil)"* %8

while:                                            ; preds = %exit6, %then
  %9 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %10 = icmp ne %"Hash::Entry(Thread, Nil)"* %9, null
  br i1 %10, label %body, label %exit

body:                                             ; preds = %while
  %11 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %12 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %11, i32 0, i32 1
  %13 = load %Thread*, %Thread** %12
  %14 = call i1 @"*Thread@Reference#==<Thread>:Bool"(%Thread* %13, %Thread* %key)
  br i1 %14, label %then2, label %else3

exit:                                             ; preds = %while
  br label %exit7

then2:                                            ; preds = %body
  %15 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  call void @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#value=<Nil>:Nil"(%"Hash::Entry(Thread, Nil)"* %15, %Nil zeroinitializer)
  ret %"Hash::Entry(Thread, Nil)"* null

else3:                                            ; preds = %body
  %16 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %17 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %16, i32 0, i32 3
  %18 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %17
  %19 = icmp ne %"Hash::Entry(Thread, Nil)"* %18, null
  br i1 %19, label %then4, label %else5

then4:                                            ; preds = %else3
  %20 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %21 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %20, i32 0, i32 3
  %22 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %21
  store %"Hash::Entry(Thread, Nil)"* %22, %"Hash::Entry(Thread, Nil)"** %entry1
  br label %exit6

else5:                                            ; preds = %else3
  %23 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %entry1
  %24 = call %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)::new<Thread, Nil>:Hash::Entry(Thread, Nil)"(i32 577, %Thread* %key, %Nil zeroinitializer)
  %25 = call %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#next=<Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"* %23, %"Hash::Entry(Thread, Nil)"* %24)
  ret %"Hash::Entry(Thread, Nil)"* %25

exit6:                                            ; preds = %then4
  br label %while

exit7:                                            ; preds = %exit
  ret %"Hash::Entry(Thread, Nil)"* null
}

; Function Attrs: uwtable
define internal i1 @"*Thread@Reference#==<Thread>:Bool"(%Thread* %self, %Thread* %other) #0 {
entry:
  %0 = call i1 @"*Thread@Reference#same?<Thread>:Bool"(%Thread* %self, %Thread* %other)
  ret i1 %0
}

; Function Attrs: uwtable
define internal i1 @"*Thread@Reference#same?<Thread>:Bool"(%Thread* %self, %Thread* %other) #0 {
entry:
  %0 = ptrtoint %Thread* %self to i64
  %1 = ptrtoint %Thread* %other to i64
  %2 = icmp eq i64 %0, %1
  ret i1 %2
}

; Function Attrs: uwtable
define internal void @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#value=<Nil>:Nil"(%"Hash::Entry(Thread, Nil)"* %self, %Nil %value) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %self, i32 0, i32 2
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)::new<Thread, Nil>:Hash::Entry(Thread, Nil)"(i32 %self, %Thread* %key, %Nil %value) #0 {
alloca:
  %_ = alloca %"Hash::Entry(Thread, Nil)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Hash::Entry(Thread, Nil)"* getelementptr (%"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Hash::Entry(Thread, Nil)"*
  %2 = bitcast %"Hash::Entry(Thread, Nil)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Hash::Entry(Thread, Nil)"* getelementptr (%"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %1, i32 0, i32 0
  store i32 108, i32* %3
  store %"Hash::Entry(Thread, Nil)"* %1, %"Hash::Entry(Thread, Nil)"** %_
  %4 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %_
  call void @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#initialize<Thread, Nil>:Nil"(%"Hash::Entry(Thread, Nil)"* %4, %Thread* %key, %Nil zeroinitializer)
  %5 = load %"Hash::Entry(Thread, Nil)"*, %"Hash::Entry(Thread, Nil)"** %_
  ret %"Hash::Entry(Thread, Nil)"* %5
}

; Function Attrs: uwtable
define internal void @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#initialize<Thread, Nil>:Nil"(%"Hash::Entry(Thread, Nil)"* %self, %Thread* %key, %Nil %value) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %self, i32 0, i32 1
  store %Thread* %key, %Thread** %0
  %1 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %self, i32 0, i32 2
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#next=<Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"* %self, %"Hash::Entry(Thread, Nil)"* %next) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %self, i32 0, i32 3
  store %"Hash::Entry(Thread, Nil)"* %next, %"Hash::Entry(Thread, Nil)"** %0
  ret %"Hash::Entry(Thread, Nil)"* %next
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#fore=<Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"* %self, %"Hash::Entry(Thread, Nil)"* %fore) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %self, i32 0, i32 4
  store %"Hash::Entry(Thread, Nil)"* %fore, %"Hash::Entry(Thread, Nil)"** %0
  ret %"Hash::Entry(Thread, Nil)"* %fore
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Thread, Nil)"* @"*Hash::Entry(Thread, Nil)@Hash::Entry(K, V)#back=<Hash::Entry(Thread, Nil)>:Hash::Entry(Thread, Nil)"(%"Hash::Entry(Thread, Nil)"* %self, %"Hash::Entry(Thread, Nil)"* %back) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Thread, Nil)", %"Hash::Entry(Thread, Nil)"* %self, i32 0, i32 5
  store %"Hash::Entry(Thread, Nil)"* %back, %"Hash::Entry(Thread, Nil)"** %0
  ret %"Hash::Entry(Thread, Nil)"* %back
}

declare i8* @pthread_self()

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer<Thread>:Nil"(%Thread* %object) #0 {
entry:
  call void @"*GC::add_finalizer_impl<Thread>:Nil"(%Thread* %object)
  ret void
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer_impl<Thread>:Nil"(%Thread* %object) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %Thread* %object to i8*
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (%"(Int32 | Nil)" (i8*, i8*)* @"~procProc(Pointer(Void), Pointer(Void), (Int32 | Nil))@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108" to i8*), i8** %2
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %3
  %4 = load %"->", %"->"* %0
  %5 = call i8* @"~check_proc_is_not_closure"(%"->" %4)
  %6 = bitcast i8* %5 to %Nil (i8*, i8*)*
  call void @GC_register_finalizer_ignore_self(i8* %1, %Nil (i8*, i8*)* %6, i8* null, %"->"* null, i8** null)
  ret void
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"~procProc(Pointer(Void), Pointer(Void), (Int32 | Nil))@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108"(i8* %obj, i8* %data) #0 {
alloca:
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast i8* %obj to %Thread*
  %2 = call %"(Int32 | Nil)" @"*Thread#finalize:(Int32 | Nil)"(%Thread* %1)
  store %"(Int32 | Nil)" %2, %"(Int32 | Nil)"* %0
  %3 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %3
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Thread#finalize:(Int32 | Nil)"(%Thread* %self) #0 {
alloca:
  %0 = alloca %"(Int32 | Nil)"
  %1 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = getelementptr inbounds %Thread, %Thread* %self, i32 0, i32 3
  %3 = load i1, i1* %2
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %4
  %5 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %5
  br label %exit

else:                                             ; preds = %entry
  %6 = getelementptr inbounds %Thread, %Thread* %self, i32 0, i32 1
  %7 = load i8*, i8** %6
  %8 = icmp eq i8* %7, null
  %9 = select i1 %8, i32 0, i32 152
  %10 = icmp eq i32 0, %9
  br i1 %10, label %current_def, label %next_def

exit:                                             ; preds = %exit3, %then
  %11 = phi %"(Int32 | Nil)"* [ %0, %then ], [ %1, %exit3 ]
  %12 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %11
  ret %"(Int32 | Nil)" %12

current_def:                                      ; preds = %else
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def:                                         ; preds = %else
  %13 = icmp eq i32 152, %9
  br i1 %13, label %current_def1, label %next_def2

current_def1:                                     ; preds = %next_def
  br label %exit3

next_def2:                                        ; preds = %next_def
  unreachable

exit3:                                            ; preds = %current_def1
  %14 = phi i8* [ %7, %current_def1 ]
  %15 = call i32 @GC_pthread_detach(i8* %14)
  %16 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 138, i32* %16
  %17 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  %18 = bitcast [1 x i64]* %17 to i32*
  store i32 %15, i32* %18
  br label %exit
}

; Function Attrs: noreturn uwtable
define internal void @"*Nil#not_nil!:NoReturn"(%Nil %self) #1 {
entry:
  call void @"*raise<String>:NoReturn"(%String* bitcast ({ i32, i32, i32, [21 x i8] }* @"'Nil assertion faile...'" to %String*))
  unreachable
}

declare i32 @GC_pthread_detach(i8*)

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber::root:Fiber"() #0 {
entry:
  %0 = call %Fiber** @"~Fiber::root:read"()
  %1 = load %Fiber*, %Fiber** %0
  ret %Fiber* %1
}

define internal %Fiber** @"~Fiber::root:read"() {
entry:
  %0 = load i1, i1* @"Fiber::root:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %Fiber** @"Fiber::root"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Fiber::root:init"
  call void @"~Fiber::root:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal %Fiber* @"*Thread#current_fiber=<Fiber>:Fiber"(%Thread* %self, %Fiber* %current_fiber) #0 {
entry:
  %0 = getelementptr inbounds %Thread, %Thread* %self, i32 0, i32 5
  store %Fiber* %current_fiber, %Fiber** %0
  ret %Fiber* %current_fiber
}

define internal void @"~Fiber::prev_push_other_roots:init"() {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %Nil ()* @GC_get_push_other_roots()
  %2 = bitcast %Nil ()* %1 to i8*
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* %2, i8** %3
  %4 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %4
  %5 = load %"->", %"->"* %0
  store %"->" %5, %"->"* @"Fiber::prev_push_other_roots"
  ret void
}

declare %Nil ()* @GC_get_push_other_roots()

; Function Attrs: uwtable
define internal void @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/fiber.cr:318"() #0 {
alloca:
  %fiber = alloca %Fiber*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call %"->"* @"~Fiber::prev_push_other_roots:read"()
  %1 = load %"->", %"->"* %0
  %2 = extractvalue %"->" %1, 0
  %3 = extractvalue %"->" %1, 1
  %4 = icmp eq i8* %3, null
  br i1 %4, label %ctx_is_null, label %ctx_is_not_null

ctx_is_null:                                      ; preds = %entry
  %5 = bitcast i8* %2 to %Nil ()*
  %6 = call %Nil %5()
  br label %exit

ctx_is_not_null:                                  ; preds = %entry
  %7 = bitcast i8* %2 to %Nil (i8*)*
  %8 = call %Nil %7(i8* %3)
  br label %exit

exit:                                             ; preds = %ctx_is_not_null, %ctx_is_null
  %9 = load %Fiber*, %Fiber** @"Fiber::first_fiber"
  store %Fiber* %9, %Fiber** %fiber
  br label %while

while:                                            ; preds = %exit2, %exit
  %10 = load %Fiber*, %Fiber** %fiber
  %11 = icmp ne %Fiber* %10, null
  br i1 %11, label %body, label %exit1

body:                                             ; preds = %while
  %12 = load %Fiber*, %Fiber** %fiber
  %13 = call %Thread* @"*Thread::current:Thread"()
  %14 = getelementptr inbounds %Thread, %Thread* %13, i32 0, i32 5
  %15 = load %Fiber*, %Fiber** %14
  %16 = call i1 @"*Fiber@Reference#==<Fiber>:Bool"(%Fiber* %12, %Fiber* %15)
  br i1 %16, label %then, label %else

exit1:                                            ; preds = %while
  ret void

then:                                             ; preds = %body
  br label %exit2

else:                                             ; preds = %body
  %17 = load %Fiber*, %Fiber** %fiber
  call void @"*Fiber#push_gc_roots:Nil"(%Fiber* %17)
  br label %exit2

exit2:                                            ; preds = %else, %then
  %18 = load %Fiber*, %Fiber** %fiber
  %19 = getelementptr inbounds %Fiber, %Fiber* %18, i32 0, i32 5
  %20 = load %Fiber*, %Fiber** %19
  store %Fiber* %20, %Fiber** %fiber
  br label %while
}

define internal %"->"* @"~Fiber::prev_push_other_roots:read"() {
entry:
  %0 = load i1, i1* @"Fiber::prev_push_other_roots:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"->"* @"Fiber::prev_push_other_roots"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Fiber::prev_push_other_roots:init"
  call void @"~Fiber::prev_push_other_roots:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal i1 @"*Fiber@Reference#==<Fiber>:Bool"(%Fiber* %self, %Fiber* %other) #0 {
entry:
  %0 = call i1 @"*Fiber@Reference#same?<Fiber>:Bool"(%Fiber* %self, %Fiber* %other)
  ret i1 %0
}

; Function Attrs: uwtable
define internal i1 @"*Fiber@Reference#same?<Fiber>:Bool"(%Fiber* %self, %Fiber* %other) #0 {
entry:
  %0 = ptrtoint %Fiber* %self to i64
  %1 = ptrtoint %Fiber* %other to i64
  %2 = icmp eq i64 %0, %1
  ret i1 %2
}

; Function Attrs: uwtable
define internal void @"*Fiber#push_gc_roots:Nil"(%Fiber* %self) #0 {
entry:
  %0 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 3
  %1 = load i8*, i8** %0
  %2 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 4
  %3 = load i8*, i8** %2
  call void @GC_push_all_eager(i8* %1, i8* %3)
  ret void
}

declare void @GC_push_all_eager(i8*, i8*)

declare void @GC_set_push_other_roots(%Nil ()*)

define internal void @"~Scheduler::runnables:init"() {
entry:
  %0 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)::new:Deque(Fiber)"(i32 547)
  store %"Deque(Fiber)"* %0, %"Deque(Fiber)"** @"Scheduler::runnables"
  ret void
}

; Function Attrs: uwtable
define internal %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)::new:Deque(Fiber)"(i32 %self) #0 {
alloca:
  %_ = alloca %"Deque(Fiber)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Deque(Fiber)"* getelementptr (%"Deque(Fiber)", %"Deque(Fiber)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Deque(Fiber)"*
  %2 = bitcast %"Deque(Fiber)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Deque(Fiber)"* getelementptr (%"Deque(Fiber)", %"Deque(Fiber)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %1, i32 0, i32 1
  store i32 0, i32* %3
  %4 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %1, i32 0, i32 0
  store i32 94, i32* %4
  store %"Deque(Fiber)"* %1, %"Deque(Fiber)"** %_
  %5 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %_
  %6 = call %Fiber** @"*Deque(Fiber)@Deque(T)#initialize:Pointer(Fiber)"(%"Deque(Fiber)"* %5)
  %7 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %_
  ret %"Deque(Fiber)"* %7
}

; Function Attrs: uwtable
define internal %Fiber** @"*Deque(Fiber)@Deque(T)#initialize:Pointer(Fiber)"(%"Deque(Fiber)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  store i32 0, i32* %0
  %1 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  store i32 0, i32* %1
  %2 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)::null:Pointer(Fiber)"(i32 693)
  %3 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  store %Fiber** %2, %Fiber*** %3
  ret %Fiber** %2
}

; Function Attrs: uwtable
define internal %Fiber** @"*Pointer(Fiber)@Pointer(T)::null:Pointer(Fiber)"(i32 %self) #0 {
entry:
  ret %Fiber** null
}

define internal void @"~Scheduler::eb:init"() {
alloca:
  %0 = alloca %"Event::Base"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Event::Base" @"*Event::Base::new:Event::Base"()
  store %"Event::Base" %1, %"Event::Base"* %0
  %2 = load %"Event::Base", %"Event::Base"* %0
  store %"Event::Base" %2, %"Event::Base"* @"Scheduler::eb"
  ret void
}

; Function Attrs: uwtable
define internal %"Event::Base" @"*Event::Base::new:Event::Base"() #0 {
alloca:
  %_ = alloca %"Event::Base"
  %0 = alloca %"Event::Base"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Event::Base"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Event::Base", %"Event::Base"* %0
  store %"Event::Base" %2, %"Event::Base"* %_
  %3 = call i8* @"*Event::Base#initialize:Pointer(Void)"(%"Event::Base"* %_)
  %4 = load %"Event::Base", %"Event::Base"* %_
  ret %"Event::Base" %4
}

; Function Attrs: uwtable
define internal i8* @"*Event::Base#initialize:Pointer(Void)"(%"Event::Base"* %self) #0 {
entry:
  %0 = call i8* @event_base_new()
  %1 = getelementptr inbounds %"Event::Base", %"Event::Base"* %self, i32 0, i32 0
  store i8* %0, i8** %1
  ret i8* %0
}

declare i8* @event_base_new()

define internal void @"~Errno::EINTR:init"() {
entry:
  ret void
}

define internal void @"~Errno::EBADF:init"() {
entry:
  ret void
}

define internal void @"~Errno::ECHILD:init"() {
entry:
  ret void
}

define internal void @"~Errno::EAGAIN:init"() {
entry:
  ret void
}

define internal void @"~Errno::EINPROGRESS:init"() {
entry:
  ret void
}

define internal void @"~File::DEFAULT_CREATE_MODE:init"() {
entry:
  ret void
}

define internal void @"~STDOUT:init"() {
alloca:
  %f = alloca %"IO::FileDescriptor"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @isatty(i32 1)
  %1 = icmp eq i32 %0, 0
  %2 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor::new:blocking<Int32, Bool>:IO::FileDescriptor"(i32 1, i1 %1)
  store %"IO::FileDescriptor"* %2, %"IO::FileDescriptor"** %f
  %3 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %f
  %4 = call i1 @"*IO::FileDescriptor@IO::Buffered#flush_on_newline=<Bool>:Bool"(%"IO::FileDescriptor"* %3, i1 true)
  store %"IO::FileDescriptor"* %2, %"IO::FileDescriptor"** @STDOUT
  ret void
}

declare i32 @isatty(i32)

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*IO::FileDescriptor::new:blocking<Int32, Bool>:IO::FileDescriptor"(i32 %__arg0, i1 %blocking) #0 {
alloca:
  %_ = alloca %"IO::FileDescriptor"*
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @__crystal_malloc(i32 ptrtoint (%"IO::FileDescriptor"* getelementptr (%"IO::FileDescriptor", %"IO::FileDescriptor"* null, i32 1) to i32))
  %2 = bitcast i8* %1 to %"IO::FileDescriptor"*
  %3 = bitcast %"IO::FileDescriptor"* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* %3, i8 0, i32 ptrtoint (%"IO::FileDescriptor"* getelementptr (%"IO::FileDescriptor", %"IO::FileDescriptor"* null, i32 1) to i32), i32 4, i1 false)
  %4 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::empty:Slice(UInt8)"(i32 935)
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %0
  %5 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 4
  %6 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %5
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 5
  store i32 0, i32* %7
  %8 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 6
  store i1 false, i1* %8
  %9 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 7
  store i1 false, i1* %9
  %10 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 0
  store i32 66, i32* %10
  store %"IO::FileDescriptor"* %2, %"IO::FileDescriptor"** %_
  %11 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %_
  %12 = call %"(Event::Event | Nil)" @"*IO::FileDescriptor#initialize:blocking<Int32, Bool>:(Event::Event | Nil)"(%"IO::FileDescriptor"* %11, i32 %__arg0, i1 %blocking)
  %13 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %_
  call void @"*GC::add_finalizer<IO::FileDescriptor>:Nil"(%"IO::FileDescriptor"* %13)
  %14 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %_
  ret %"IO::FileDescriptor"* %14
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::empty:Slice(UInt8)"(i32 %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*Pointer(UInt8)@Pointer(T)::null:Pointer(UInt8)"(i32 620)
  %2 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i32 %self, i8* %1, i32 0)
  store %"Slice(UInt8)" %2, %"Slice(UInt8)"* %0
  %3 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %3
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)::null:Pointer(UInt8)"(i32 %self) #0 {
entry:
  ret i8* null
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i32 %self, i8* %pointer, i32 %size) #0 {
alloca:
  %_ = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Slice(UInt8)"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Slice(UInt8)"* getelementptr (%"Slice(UInt8)", %"Slice(UInt8)"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %2, %"Slice(UInt8)"* %_
  %3 = call i32 @"*Slice(UInt8)@Slice(T)#initialize<Pointer(UInt8), Int32>:Int32"(%"Slice(UInt8)"* %_, i8* %pointer, i32 %size)
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %_
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal %"(Event::Event | Nil)" @"*IO::FileDescriptor#initialize:blocking<Int32, Bool>:(Event::Event | Nil)"(%"IO::FileDescriptor"* %self, i32 %fd, i1 %blocking) #0 {
alloca:
  %edge_triggerable = alloca i1
  %0 = alloca %"(Event::Event | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %edge_triggerable
  %1 = load i1, i1* %edge_triggerable
  %2 = call %"(Event::Event | Nil)" @"*IO::FileDescriptor#initialize<Int32, Bool, Bool>:(Event::Event | Nil)"(%"IO::FileDescriptor"* %self, i32 %fd, i1 %blocking, i1 %1)
  store %"(Event::Event | Nil)" %2, %"(Event::Event | Nil)"* %0
  %3 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %0
  ret %"(Event::Event | Nil)" %3
}

; Function Attrs: uwtable
define internal %"(Event::Event | Nil)" @"*IO::FileDescriptor#initialize<Int32, Bool, Bool>:(Event::Event | Nil)"(%"IO::FileDescriptor"* %self, i32 %fd, i1 %blocking, i1 %edge_triggerable) #0 {
alloca:
  %0 = alloca %"(Event::Event | Nil)"
  %1 = alloca %"Event::Event.6"
  %2 = alloca %"Event::Event.6"
  %3 = alloca %"(Event::Event | Nil)"
  %4 = alloca %"(Event::Event | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %5 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 16
  store i32 %fd, i32* %5
  %6 = xor i1 %edge_triggerable, true
  %7 = xor i1 %6, true
  %8 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 17
  store i1 %7, i1* %8
  %9 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 18
  store i1 false, i1* %9
  %10 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 14
  store i1 false, i1* %10
  %11 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 15
  store i1 false, i1* %11
  %12 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 16
  store i32 %fd, i32* %12
  br i1 %blocking, label %then, label %else

then:                                             ; preds = %entry
  %13 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %13
  %14 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %0, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %14
  br label %exit

else:                                             ; preds = %entry
  %15 = call i32 @"*IO::FileDescriptor#blocking=<Bool>:Int32"(%"IO::FileDescriptor"* %self, i1 false)
  %16 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 17
  %17 = load i1, i1* %16
  br i1 %17, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %18 = phi %"(Event::Event | Nil)"* [ %0, %then ], [ %42, %exit3 ]
  %19 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %18
  ret %"(Event::Event | Nil)" %19

then1:                                            ; preds = %else
  %20 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 17
  %21 = load i1, i1* %20
  %22 = call %"Event::Event.6" @"*Scheduler::create_fd_read_event<IO::FileDescriptor, Bool>:Event::Event"(%"IO::FileDescriptor"* %self, i1 %21)
  store %"Event::Event.6" %22, %"Event::Event.6"* %1
  %23 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 12
  %24 = load %"Event::Event.6", %"Event::Event.6"* %1
  %25 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %23, i32 0, i32 0
  store i32 359, i32* %25
  %26 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %23, i32 0, i32 1
  %27 = bitcast [2 x i64]* %26 to %"Event::Event.6"*
  store %"Event::Event.6" %24, %"Event::Event.6"* %27
  %28 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 17
  %29 = load i1, i1* %28
  %30 = call %"Event::Event.6" @"*Scheduler::create_fd_write_event<IO::FileDescriptor, Bool>:Event::Event"(%"IO::FileDescriptor"* %self, i1 %29)
  store %"Event::Event.6" %30, %"Event::Event.6"* %2
  %31 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 13
  %32 = load %"Event::Event.6", %"Event::Event.6"* %2
  %33 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %31, i32 0, i32 0
  store i32 359, i32* %33
  %34 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %31, i32 0, i32 1
  %35 = bitcast [2 x i64]* %34 to %"Event::Event.6"*
  store %"Event::Event.6" %32, %"Event::Event.6"* %35
  %36 = load %"Event::Event.6", %"Event::Event.6"* %2
  %37 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %3, i32 0, i32 0
  store i32 359, i32* %37
  %38 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %3, i32 0, i32 1
  %39 = bitcast [2 x i64]* %38 to %"Event::Event.6"*
  store %"Event::Event.6" %36, %"Event::Event.6"* %39
  br label %exit3

else2:                                            ; preds = %else
  %40 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %4, i32 0, i32 0
  store i32 0, i32* %40
  %41 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %4, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %41
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %42 = phi %"(Event::Event | Nil)"* [ %3, %then1 ], [ %4, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor#blocking=<Bool>:Int32"(%"IO::FileDescriptor"* %self, i1 %value) #0 {
alloca:
  %flags = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @"*IO::FileDescriptor#fcntl<Int32>:Int32"(%"IO::FileDescriptor"* %self, i32 3)
  store i32 %0, i32* %flags
  br i1 %value, label %then, label %else

then:                                             ; preds = %entry
  %1 = load i32, i32* %flags
  %2 = call i32 @"*Int32@Int#~:Int32"(i32 4)
  %3 = and i32 %1, %2
  store i32 %3, i32* %flags
  br label %exit

else:                                             ; preds = %entry
  %4 = load i32, i32* %flags
  %5 = or i32 %4, 4
  store i32 %5, i32* %flags
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = load i32, i32* %flags
  %7 = call i32 @"*IO::FileDescriptor#fcntl<Int32, Int32>:Int32"(%"IO::FileDescriptor"* %self, i32 4, i32 %6)
  ret i32 %7
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor#fcntl<Int32>:Int32"(%"IO::FileDescriptor"* %self, i32 %cmd) #0 {
alloca:
  %arg = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %arg
  %0 = load i32, i32* %arg
  %1 = call i32 @"*IO::FileDescriptor#fcntl<Int32, Int32>:Int32"(%"IO::FileDescriptor"* %self, i32 %cmd, i32 %0)
  ret i32 %1
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor#fcntl<Int32, Int32>:Int32"(%"IO::FileDescriptor"* %self, i32 %cmd, i32 %arg) #0 {
entry:
  %0 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 16
  %1 = load i32, i32* %0
  %2 = call i32 @"*IO::FileDescriptor::fcntl<Int32, Int32, Int32>:Int32"(i32 %1, i32 %cmd, i32 %arg)
  ret i32 %2
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor::fcntl<Int32, Int32, Int32>:Int32"(i32 %fd, i32 %cmd, i32 %arg) #0 {
alloca:
  %r = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd, i32 %arg)
  store i32 %0, i32* %r
  %1 = load i32, i32* %r
  %2 = icmp eq i32 %1, -1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'fcntl() failed'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %3)
  unreachable

else:                                             ; preds = %entry
  %4 = load i32, i32* %r
  ret i32 %4
}

declare i32 @fcntl(i32, i32, ...)

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#~:Int32"(i32 %self) #0 {
entry:
  %0 = xor i32 %self, -1
  ret i32 %0
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_fd_read_event<IO::FileDescriptor, Bool>:Event::Event"(%"IO::FileDescriptor"* %io, i1 %edge_triggered) #0 {
alloca:
  %flags = alloca i16
  %event = alloca %"Event::Event.6"
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store i16 2, i16* %flags
  br i1 %edge_triggered, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i16, i16* %flags
  %3 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 16, i16 32)
  %4 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %2, i16 %3)
  store i16 %4, i16* %flags
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %5 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %6 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %io, i32 0, i32 16
  %7 = load i32, i32* %6
  %8 = load i16, i16* %flags
  %9 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~procProc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:49" to i8*), i8** %9
  %10 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %10
  %11 = load %"->", %"->"* %0
  %12 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, IO::FileDescriptor, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %5, i32 %7, i16 %8, %"IO::FileDescriptor"* %io, %"->" %11)
  store %"Event::Event.6" %12, %"Event::Event.6"* %1
  %13 = load %"Event::Event.6", %"Event::Event.6"* %1
  store %"Event::Event.6" %13, %"Event::Event.6"* %event
  %14 = load %"Event::Event.6", %"Event::Event.6"* %event
  ret %"Event::Event.6" %14
}

; Function Attrs: uwtable
define internal i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %self, i16 %other) #0 {
entry:
  %0 = or i16 %self, %other
  ret i16 %0
}

define internal %"Event::Base"* @"~Scheduler::eb:read"() {
entry:
  %0 = load i1, i1* @"Scheduler::eb:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"Event::Base"* @"Scheduler::eb"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Scheduler::eb:init"
  call void @"~Scheduler::eb:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, IO::FileDescriptor, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %self, i32 %s, i16 %flags, %"IO::FileDescriptor"* %data, %"->" %callback) #0 {
alloca:
  %event = alloca i8*
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Event::Base", %"Event::Base"* %self, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = call i8* @"~check_proc_is_not_closure"(%"->" %callback)
  %4 = bitcast i8* %3 to %Nil (i32, i16, i8*)*
  %5 = bitcast %"IO::FileDescriptor"* %data to i8*
  %6 = call i8* @event_new(i8* %2, i32 %s, i16 %flags, %Nil (i32, i16, i8*)* %4, i8* %5)
  store i8* %6, i8** %event
  %7 = load i8*, i8** %event
  %8 = call %"Event::Event.6" @"*Event::Event::new<Pointer(Void)>:Event::Event"(i8* %7)
  store %"Event::Event.6" %8, %"Event::Event.6"* %0
  %9 = load %"Event::Event.6", %"Event::Event.6"* %0
  ret %"Event::Event.6" %9
}

declare i8* @event_new(i8*, i32, i16, %Nil (i32, i16, i8*)*, i8*)

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Event::Event::new<Pointer(Void)>:Event::Event"(i8* %event) #0 {
alloca:
  %_ = alloca %"Event::Event.6"
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Event::Event.6"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Event::Event.6"* getelementptr (%"Event::Event.6", %"Event::Event.6"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Event::Event.6", %"Event::Event.6"* %0
  store %"Event::Event.6" %2, %"Event::Event.6"* %_
  %3 = call i1 @"*Event::Event#initialize<Pointer(Void)>:Bool"(%"Event::Event.6"* %_, i8* %event)
  %4 = load %"Event::Event.6", %"Event::Event.6"* %_
  ret %"Event::Event.6" %4
}

; Function Attrs: uwtable
define internal i1 @"*Event::Event#initialize<Pointer(Void)>:Bool"(%"Event::Event.6"* %self, i8* %event) #0 {
entry:
  %0 = getelementptr inbounds %"Event::Event.6", %"Event::Event.6"* %self, i32 0, i32 0
  store i8* %event, i8** %0
  %1 = getelementptr inbounds %"Event::Event.6", %"Event::Event.6"* %self, i32 0, i32 1
  store i1 false, i1* %1
  ret i1 false
}

; Function Attrs: uwtable
define internal void @"~procProc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:49"(i32 %s, i16 %flags, i8* %data) #0 {
alloca:
  %fd_io = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to i32*
  store i32* %0, i32** %fd_io
  %1 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 2)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_read:Nil"(i32* %2)
  br label %exit

else:                                             ; preds = %entry
  %3 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 1)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret void

then1:                                            ; preds = %else
  %4 = load i32*, i32** %fd_io
  %5 = call i1 @"*IO::FileDescriptor+@IO::FileDescriptor#read_timed_out=<Bool>:Bool"(i32* %4, i1 true)
  %6 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_read:Nil"(i32* %6)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  br label %exit
}

; Function Attrs: uwtable
define internal i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %self, i16 %other) #0 {
entry:
  %0 = and i16 %self, %other
  %1 = sext i16 %0 to i32
  %2 = icmp ne i32 %1, 0
  ret i1 %2
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_read:Nil"(i32* %self) #0 {
alloca:
  %reader = alloca %Fiber*
  %__arg0 = alloca %"Deque(Fiber)"*
  %__arg03 = alloca %"Deque(Fiber)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 19
  %2 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %1
  %3 = icmp eq %"Deque(Fiber)"* %2, null
  %4 = select i1 %3, i32 0, i32 94
  %5 = icmp eq i32 0, %4
  br i1 %5, label %current_def, label %next_def

then:                                             ; preds = %exit
  %6 = load %Fiber*, %Fiber** %reader
  call void @"*Fiber#resume:Nil"(%Fiber* %6)
  br label %exit4

else:                                             ; preds = %exit
  br label %exit4

current_def:                                      ; preds = %entry
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 94, %4
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def1, %current_def
  %8 = phi %Fiber* [ null, %current_def ], [ %11, %current_def1 ]
  store %Fiber* %8, %Fiber** %reader
  %9 = icmp ne %Fiber* %8, null
  br i1 %9, label %then, label %else

current_def1:                                     ; preds = %next_def
  store %"Deque(Fiber)"* %2, %"Deque(Fiber)"** %__arg03
  %10 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %__arg03
  %11 = call %Fiber* @"*Deque(Fiber)@Deque(T)#shift?:(Fiber | Nil)"(%"Deque(Fiber)"* %10)
  br label %exit

next_def2:                                        ; preds = %next_def
  unreachable

exit4:                                            ; preds = %else, %then
  ret void
}

; Function Attrs: uwtable
define internal %Fiber* @"*Deque(Fiber)@Deque(T)#shift?:(Fiber | Nil)"(%"Deque(Fiber)"* %self) #0 {
alloca:
  %value = alloca %Fiber*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %4 = load %Fiber**, %Fiber*** %3
  %5 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %6 = load i32, i32* %5
  %7 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %4, i32 %6)
  store %Fiber* %7, %Fiber** %value
  %8 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %9 = load %Fiber**, %Fiber*** %8
  %10 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %11 = load i32, i32* %10
  %12 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %9, i32 %11)
  call void @"*Pointer(Fiber)@Pointer(T)#clear:Nil"(%Fiber** %12)
  %13 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  %14 = load i32, i32* %13
  %15 = sub i32 %14, 1
  %16 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  store i32 %15, i32* %16
  %17 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %18 = load i32, i32* %17
  %19 = add i32 %18, 1
  %20 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  store i32 %19, i32* %20
  %21 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %22 = load i32, i32* %21
  %23 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %24 = load i32, i32* %23
  %25 = icmp sge i32 %22, %24
  br i1 %25, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %26 = phi %Fiber* [ null, %then ], [ %33, %exit3 ]
  ret %Fiber* %26

then1:                                            ; preds = %else
  %27 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %28 = load i32, i32* %27
  %29 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %30 = load i32, i32* %29
  %31 = sub i32 %28, %30
  %32 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  store i32 %31, i32* %32
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %33 = load %Fiber*, %Fiber** %value
  br label %exit
}

; Function Attrs: uwtable
define internal %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %self, i32 %offset) #0 {
entry:
  %0 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %self, i32 %offset)
  %1 = load %Fiber*, %Fiber** %0
  ret %Fiber* %1
}

; Function Attrs: uwtable
define internal %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %Fiber*, %Fiber** %self, i64 %0
  ret %Fiber** %1
}

; Function Attrs: uwtable
define internal void @"*Pointer(Fiber)@Pointer(T)#clear:Nil"(%Fiber** %self) #0 {
alloca:
  %count = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1, i32* %count
  %0 = load i32, i32* %count
  call void @"*Pointer(Fiber)@Pointer(T)#clear<Int32>:Nil"(%Fiber** %self, i32 %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Pointer(Fiber)@Pointer(T)#clear<Int32>:Nil"(%Fiber** %self, i32 %count) #0 {
alloca:
  %ptr = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast %Fiber** %self to i8*
  store i8* %0, i8** %ptr
  %1 = bitcast %Fiber** %self to i8*
  %2 = mul i32 %count, 8
  %3 = zext i32 %2 to i64
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 %3, i32 0, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: uwtable
define internal void @"*Fiber#resume:Nil"(%Fiber* %self) #0 {
alloca:
  %__temp_40 = alloca %Fiber*
  %__temp_41 = alloca %Fiber*
  %current = alloca %Fiber*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call %Thread* @"*Thread::current:Thread"()
  %1 = getelementptr inbounds %Thread, %Thread* %0, i32 0, i32 5
  %2 = load %Fiber*, %Fiber** %1
  store %Fiber* %2, %Fiber** %__temp_40
  store %Fiber* %self, %Fiber** %__temp_41
  %3 = load %Fiber*, %Fiber** %__temp_40
  store %Fiber* %3, %Fiber** %current
  %4 = call %Thread* @"*Thread::current:Thread"()
  %5 = load %Fiber*, %Fiber** %__temp_41
  %6 = call %Fiber* @"*Thread#current_fiber=<Fiber>:Fiber"(%Thread* %4, %Fiber* %5)
  %7 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 4
  %8 = load i8*, i8** %7
  store i8* %8, i8** @GC_stackbottom
  %9 = load %Fiber*, %Fiber** %current
  %10 = getelementptr inbounds %Fiber, %Fiber* %9, i32 0, i32 3
  %11 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 3
  call void @"*Fiber::switch_stacks<Pointer(Pointer(Void)), Pointer(Pointer(Void))>:Nil"(i8** %10, i8** %11)
  ret void
}

; Function Attrs: naked noinline uwtable
define void @"*Fiber::switch_stacks<Pointer(Pointer(Void)), Pointer(Pointer(Void))>:Nil"(i8** %current, i8** %to) #5 {
entry:
  call void asm "\0A        pushq %rdi\0A        pushq %rbx\0A        pushq %rbp\0A        pushq %r12\0A        pushq %r13\0A        pushq %r14\0A        pushq %r15\0A        movq %rsp, ($0)\0A        movq ($1), %rsp\0A        popq %r15\0A        popq %r14\0A        popq %r13\0A        popq %r12\0A        popq %rbp\0A        popq %rbx\0A        popq %rdi", "r,r"(i8** %current, i8** %to)
  ret void
}

; Function Attrs: uwtable
define internal i1 @"*IO::FileDescriptor+@IO::FileDescriptor#read_timed_out=<Bool>:Bool"(i32* %self, i1 %read_timed_out) #0 {
entry:
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 14
  store i1 %read_timed_out, i1* %1
  ret i1 %read_timed_out
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_fd_write_event<IO::FileDescriptor, Bool>:Event::Event"(%"IO::FileDescriptor"* %io, i1 %edge_triggered) #0 {
alloca:
  %flags = alloca i16
  %event = alloca %"Event::Event.6"
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store i16 4, i16* %flags
  br i1 %edge_triggered, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i16, i16* %flags
  %3 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 16, i16 32)
  %4 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %2, i16 %3)
  store i16 %4, i16* %flags
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %5 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %6 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %io, i32 0, i32 16
  %7 = load i32, i32* %6
  %8 = load i16, i16* %flags
  %9 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~procProc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34" to i8*), i8** %9
  %10 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %10
  %11 = load %"->", %"->"* %0
  %12 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, IO::FileDescriptor, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %5, i32 %7, i16 %8, %"IO::FileDescriptor"* %io, %"->" %11)
  store %"Event::Event.6" %12, %"Event::Event.6"* %1
  %13 = load %"Event::Event.6", %"Event::Event.6"* %1
  store %"Event::Event.6" %13, %"Event::Event.6"* %event
  %14 = load %"Event::Event.6", %"Event::Event.6"* %event
  ret %"Event::Event.6" %14
}

; Function Attrs: uwtable
define internal void @"~procProc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34"(i32 %s, i16 %flags, i8* %data) #0 {
alloca:
  %fd_io = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to i32*
  store i32* %0, i32** %fd_io
  %1 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 4)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %2)
  br label %exit

else:                                             ; preds = %entry
  %3 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 1)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret void

then1:                                            ; preds = %else
  %4 = load i32*, i32** %fd_io
  %5 = call i1 @"*IO::FileDescriptor+@IO::FileDescriptor#write_timed_out=<Bool>:Bool"(i32* %4, i1 true)
  %6 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %6)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  br label %exit
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %self) #0 {
alloca:
  %writer = alloca %Fiber*
  %__arg1 = alloca %"Deque(Fiber)"*
  %__arg13 = alloca %"Deque(Fiber)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 20
  %2 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %1
  %3 = icmp eq %"Deque(Fiber)"* %2, null
  %4 = select i1 %3, i32 0, i32 94
  %5 = icmp eq i32 0, %4
  br i1 %5, label %current_def, label %next_def

then:                                             ; preds = %exit
  %6 = load %Fiber*, %Fiber** %writer
  call void @"*Fiber#resume:Nil"(%Fiber* %6)
  br label %exit4

else:                                             ; preds = %exit
  br label %exit4

current_def:                                      ; preds = %entry
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 94, %4
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def1, %current_def
  %8 = phi %Fiber* [ null, %current_def ], [ %11, %current_def1 ]
  store %Fiber* %8, %Fiber** %writer
  %9 = icmp ne %Fiber* %8, null
  br i1 %9, label %then, label %else

current_def1:                                     ; preds = %next_def
  store %"Deque(Fiber)"* %2, %"Deque(Fiber)"** %__arg13
  %10 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %__arg13
  %11 = call %Fiber* @"*Deque(Fiber)@Deque(T)#shift?:(Fiber | Nil)"(%"Deque(Fiber)"* %10)
  br label %exit

next_def2:                                        ; preds = %next_def
  unreachable

exit4:                                            ; preds = %else, %then
  ret void
}

; Function Attrs: uwtable
define internal i1 @"*IO::FileDescriptor+@IO::FileDescriptor#write_timed_out=<Bool>:Bool"(i32* %self, i1 %write_timed_out) #0 {
entry:
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 15
  store i1 %write_timed_out, i1* %1
  ret i1 %write_timed_out
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer<IO::FileDescriptor>:Nil"(%"IO::FileDescriptor"* %object) #0 {
entry:
  call void @"*GC::add_finalizer_impl<IO::FileDescriptor>:Nil"(%"IO::FileDescriptor"* %object)
  ret void
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer_impl<IO::FileDescriptor>:Nil"(%"IO::FileDescriptor"* %object) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"IO::FileDescriptor"* %object to i8*
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i8*, i8*)* @"~proc2Proc(Pointer(Void), Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108" to i8*), i8** %2
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %3
  %4 = load %"->", %"->"* %0
  %5 = call i8* @"~check_proc_is_not_closure"(%"->" %4)
  %6 = bitcast i8* %5 to %Nil (i8*, i8*)*
  call void @GC_register_finalizer_ignore_self(i8* %1, %Nil (i8*, i8*)* %6, i8* null, %"->"* null, i8** null)
  ret void
}

; Function Attrs: uwtable
define internal void @"~proc2Proc(Pointer(Void), Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108"(i8* %obj, i8* %data) #0 {
entry:
  %0 = bitcast i8* %obj to i32*
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#finalize:Nil"(i32* %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#finalize:Nil"(i32* %self) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
entry:
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 18
  %2 = load i1, i1* %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  invoke void @"*IO::FileDescriptor+@IO::Buffered#close:Nil"(i32* %self)
          to label %invoke_out unwind label %rescue

rescue:                                           ; preds = %else
  %3 = landingpad %landing_pad
          cleanup
  %4 = extractvalue %landing_pad %3, 0
  %5 = extractvalue %landing_pad %3, 1
  br label %this_rescue

invoke_out:                                       ; preds = %else
  br label %exit

exit:                                             ; preds = %this_rescue, %invoke_out
  ret void

this_rescue:                                      ; preds = %rescue
  br label %exit
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::Buffered#close:Nil"(i32* %self) #0 {
entry:
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 5
  %2 = load i32, i32* %1
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = call i32* @"*IO::FileDescriptor+@IO::Buffered#flush:IO::FileDescriptor+"(i32* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_close:Nil"(i32* %self)
  ret void
}

; Function Attrs: uwtable
define internal i32* @"*IO::FileDescriptor+@IO::Buffered#flush:IO::FileDescriptor+"(i32* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast i32* %self to %"IO::FileDescriptor"*
  %2 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %1, i32 0, i32 5
  %3 = load i32, i32* %2
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call i8* @"*IO::FileDescriptor+@IO::Buffered#out_buffer:Pointer(UInt8)"(i32* %self)
  %6 = bitcast i32* %self to %"IO::FileDescriptor"*
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %6, i32 0, i32 5
  %8 = load i32, i32* %7
  %9 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %5, i32 %8)
  store %"Slice(UInt8)" %9, %"Slice(UInt8)"* %0
  %10 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %11 = call i32 @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %10)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %12 = bitcast i32* %self to %"IO::FileDescriptor"*
  %13 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %12, i32 0, i32 5
  store i32 0, i32* %13
  ret i32* %self
}

; Function Attrs: uwtable
define internal i8* @"*IO::FileDescriptor+@IO::Buffered#out_buffer:Pointer(UInt8)"(i32* %self) #0 {
alloca:
  %__temp_44 = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 9
  %2 = load i8*, i8** %1
  store i8* %2, i8** %__temp_44
  %3 = icmp ne i8* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i8*, i8** %__temp_44
  br label %exit

else:                                             ; preds = %entry
  %5 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 8192)
  %6 = bitcast i32* %self to %"IO::FileDescriptor"*
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %6, i32 0, i32 9
  store i8* %5, i8** %7
  br label %exit

exit:                                             ; preds = %else, %then
  %8 = phi i8* [ %4, %then ], [ %5, %else ]
  ret i8* %8
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %slice) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %count = alloca i32
  %total = alloca i32
  %writers = alloca %"Deque(Fiber)"*
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %bytes_written = alloca i64
  %i = alloca i32
  %1 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %2 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %3 = alloca %"Slice(UInt8)"
  %4 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %5 = alloca %"(Bool | Deque(Fiber) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %0
  %6 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %slice1
  %7 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %8 = load i32, i32* %7
  store i32 %8, i32* %count
  %9 = load i32, i32* %count
  store i32 %9, i32* %total
  store i32 0, i32* %i
  br label %while

rescue:                                           ; preds = %invoke_out19, %else17, %then16, %then12, %else3, %body
  %10 = landingpad %landing_pad
          cleanup
  %11 = extractvalue %landing_pad %10, 0
  %12 = extractvalue %landing_pad %10, 1
  %13 = bitcast i32* %self to %"IO::FileDescriptor"*
  %14 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %13, i32 0, i32 20
  %15 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %14
  store %"Deque(Fiber)"* %15, %"Deque(Fiber)"** %writers
  %16 = icmp ne %"Deque(Fiber)"* %15, null
  br i1 %16, label %then23, label %else24

while:                                            ; preds = %exit15, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %17 = load i32, i32* %i
  %18 = bitcast i32* %self to %"IO::FileDescriptor"*
  %19 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %18, i32 0, i32 16
  %20 = load i32, i32* %19
  %21 = load i32, i32* %count
  %22 = invoke i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i32 %21)
          to label %invoke_out unwind label %rescue

exit:                                             ; preds = %while
  unreachable

invoke_out:                                       ; preds = %body
  %23 = load i32, i32* %count
  %24 = sext i32 %23 to i64
  %25 = call i64 @write(i32 %20, i8* %22, i64 %24)
  store i64 %25, i64* %bytes_written
  %26 = load i64, i64* %bytes_written
  %27 = icmp ne i64 %26, -1
  br i1 %27, label %then, label %else

then:                                             ; preds = %invoke_out
  %28 = load i32, i32* %count
  %29 = load i64, i64* %bytes_written
  %30 = sext i32 %28 to i64
  %31 = sub i64 %30, %29
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %count
  %33 = load i32, i32* %count
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %then2, label %else3

else:                                             ; preds = %invoke_out
  %35 = call i32 @"*Errno::value:Int32"()
  %36 = icmp eq i32 %35, 35
  br i1 %36, label %then12, label %else13

then2:                                            ; preds = %then
  %37 = load i32, i32* %total
  %38 = bitcast i32* %self to %"IO::FileDescriptor"*
  %39 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %38, i32 0, i32 20
  %40 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %39
  store %"Deque(Fiber)"* %40, %"Deque(Fiber)"** %writers
  %41 = icmp ne %"Deque(Fiber)"* %40, null
  br i1 %41, label %then6, label %else7

else3:                                            ; preds = %then
  %42 = load i64, i64* %bytes_written
  %43 = invoke %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int64>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i64 %42)
          to label %invoke_out10 unwind label %rescue

then4:                                            ; preds = %exit8
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#add_write_event:Nil"(i32* %self)
  br label %exit9

else5:                                            ; preds = %exit8
  br label %exit9

then6:                                            ; preds = %then2
  %44 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %45 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %44)
  %46 = xor i1 %45, true
  %47 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %1, i32 0, i32 0
  store i32 147, i32* %47
  %48 = zext i1 %46 to i64
  %49 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %1, i32 0, i32 1
  %50 = bitcast [1 x i64]* %49 to i64*
  store i64 %48, i64* %50
  br label %exit8

else7:                                            ; preds = %then2
  %51 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %52 = icmp eq %"Deque(Fiber)"* %51, null
  %53 = select i1 %52, i32 0, i32 94
  %54 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %2, i32 0, i32 0
  store i32 %53, i32* %54
  %55 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %2, i32 0, i32 1
  %56 = bitcast [1 x i64]* %55 to %"Deque(Fiber)"**
  store %"Deque(Fiber)"* %51, %"Deque(Fiber)"** %56
  br label %exit8

exit8:                                            ; preds = %else7, %then6
  %57 = phi %"(Bool | Deque(Fiber) | Nil)"* [ %1, %then6 ], [ %2, %else7 ]
  %58 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %57, i32 0, i32 0
  %59 = load i32, i32* %58
  %60 = icmp eq i32 %59, 0
  %61 = xor i1 %60, true
  %62 = and i1 true, %61
  %63 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %57, i32 0, i32 1
  %64 = bitcast [1 x i64]* %63 to i1*
  %65 = load i1, i1* %64
  %66 = icmp eq i32 %59, 147
  %67 = xor i1 %65, true
  %68 = and i1 %66, %67
  %69 = xor i1 %68, true
  %70 = and i1 %62, %69
  br i1 %70, label %then4, label %else5

exit9:                                            ; preds = %else5, %then4
  ret i32 %37

invoke_out10:                                     ; preds = %else3
  store %"Slice(UInt8)" %43, %"Slice(UInt8)"* %3
  %71 = load %"Slice(UInt8)", %"Slice(UInt8)"* %3
  store %"Slice(UInt8)" %71, %"Slice(UInt8)"* %slice1
  br label %exit11

exit11:                                           ; preds = %invoke_out10
  %72 = phi %"Slice(UInt8)"* [ %3, %invoke_out10 ]
  br label %exit15

then12:                                           ; preds = %else
  invoke void @"*IO::FileDescriptor+@IO::FileDescriptor#wait_writable:Nil"(i32* %self)
          to label %invoke_out14 unwind label %rescue

else13:                                           ; preds = %else
  %73 = call i32 @"*Errno::value:Int32"()
  %74 = icmp eq i32 %73, 9
  br i1 %74, label %then16, label %else17

invoke_out14:                                     ; preds = %then12
  br label %exit15

exit15:                                           ; preds = %exit11, %invoke_out14
  %75 = load i32, i32* %i
  %76 = add i32 %75, 1
  store i32 %76, i32* %i
  br label %while

then16:                                           ; preds = %else13
  %77 = call %"IO::Error"* @"*IO::Error@Exception::new<String>:IO::Error"(%String* bitcast ({ i32, i32, i32, [26 x i8] }* @"'File not open for w...'" to %String*))
  invoke void @"*raise<IO::Error>:NoReturn"(%"IO::Error"* %77)
          to label %invoke_out18 unwind label %rescue

else17:                                           ; preds = %else13
  %78 = invoke %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Error writing file'" to %String*))
          to label %invoke_out19 unwind label %rescue

invoke_out18:                                     ; preds = %then16
  unreachable

invoke_out19:                                     ; preds = %else17
  invoke void @"*raise<Errno>:NoReturn"(%Errno* %78)
          to label %invoke_out20 unwind label %rescue

invoke_out20:                                     ; preds = %invoke_out19
  unreachable

then21:                                           ; preds = %exit25
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#add_write_event:Nil"(i32* %self)
  br label %exit26

else22:                                           ; preds = %exit25
  br label %exit26

then23:                                           ; preds = %rescue
  %79 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %80 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %79)
  %81 = xor i1 %80, true
  %82 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %4, i32 0, i32 0
  store i32 147, i32* %82
  %83 = zext i1 %81 to i64
  %84 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %4, i32 0, i32 1
  %85 = bitcast [1 x i64]* %84 to i64*
  store i64 %83, i64* %85
  br label %exit25

else24:                                           ; preds = %rescue
  %86 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %87 = icmp eq %"Deque(Fiber)"* %86, null
  %88 = select i1 %87, i32 0, i32 94
  %89 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %5, i32 0, i32 0
  store i32 %88, i32* %89
  %90 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %5, i32 0, i32 1
  %91 = bitcast [1 x i64]* %90 to %"Deque(Fiber)"**
  store %"Deque(Fiber)"* %86, %"Deque(Fiber)"** %91
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %92 = phi %"(Bool | Deque(Fiber) | Nil)"* [ %4, %then23 ], [ %5, %else24 ]
  %93 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %92, i32 0, i32 0
  %94 = load i32, i32* %93
  %95 = icmp eq i32 %94, 0
  %96 = xor i1 %95, true
  %97 = and i1 true, %96
  %98 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %92, i32 0, i32 1
  %99 = bitcast [1 x i64]* %98 to i1*
  %100 = load i1, i1* %99
  %101 = icmp eq i32 %94, 147
  %102 = xor i1 %100, true
  %103 = and i1 %101, %102
  %104 = xor i1 %103, true
  %105 = and i1 %97, %104
  br i1 %105, label %then21, label %else22

exit26:                                           ; preds = %else22, %then21
  %106 = bitcast i8* %11 to %"struct.LibUnwind::Exception"*
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %106)
  unreachable
}

declare i64 @write(i32, i8*, i64)

; Function Attrs: uwtable
define internal i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  ret i1 %2
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#add_write_event:Nil"(i32* %self) #0 {
alloca:
  %timeout = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 11
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %1
  store %"(Float64 | Nil)" %2, %"(Float64 | Nil)"* %timeout
  %3 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(i32* %self, %"(Float64 | Nil)" %3)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(i32* %self, %"(Float64 | Nil)" %timeout) #0 {
alloca:
  %__temp_47 = alloca %"(Event::Event | Nil)"
  %event = alloca %"Event::Event.6"
  %timeout1 = alloca %"(Float64 | Nil)"
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Float64 | Nil)" %timeout, %"(Float64 | Nil)"* %timeout1
  %1 = bitcast i32* %self to %"IO::FileDescriptor"*
  %2 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %1, i32 0, i32 17
  %3 = load i1, i1* %2
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  %4 = bitcast i32* %self to %"IO::FileDescriptor"*
  %5 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %4, i32 0, i32 13
  %6 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %5
  store %"(Event::Event | Nil)" %6, %"(Event::Event | Nil)"* %__temp_47
  %7 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %5, i32 0, i32 0
  %8 = load i32, i32* %7
  %9 = icmp eq i32 %8, 0
  %10 = xor i1 %9, true
  %11 = and i1 true, %10
  br i1 %11, label %then2, label %else3

then2:                                            ; preds = %else
  %12 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %__temp_47, i32 0, i32 1
  %13 = bitcast [2 x i64]* %12 to %"Event::Event.6"*
  br label %exit

else3:                                            ; preds = %else
  %14 = call %"Event::Event.6" @"*Scheduler::create_fd_write_event<IO::FileDescriptor+>:Event::Event"(i32* %self)
  store %"Event::Event.6" %14, %"Event::Event.6"* %0
  %15 = bitcast i32* %self to %"IO::FileDescriptor"*
  %16 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %15, i32 0, i32 13
  %17 = load %"Event::Event.6", %"Event::Event.6"* %0
  %18 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %16, i32 0, i32 0
  store i32 359, i32* %18
  %19 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %16, i32 0, i32 1
  %20 = bitcast [2 x i64]* %19 to %"Event::Event.6"*
  store %"Event::Event.6" %17, %"Event::Event.6"* %20
  br label %exit

exit:                                             ; preds = %else3, %then2
  %21 = phi %"Event::Event.6"* [ %13, %then2 ], [ %0, %else3 ]
  %22 = load %"Event::Event.6", %"Event::Event.6"* %21
  store %"Event::Event.6" %22, %"Event::Event.6"* %event
  %23 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout1
  %24 = call i32 @"*Event::Event#add<(Float64 | Nil)>:Int32"(%"Event::Event.6"* %event, %"(Float64 | Nil)" %23)
  ret void
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_fd_write_event<IO::FileDescriptor+>:Event::Event"(i32* %io) #0 {
alloca:
  %edge_triggered = alloca i1
  %flags = alloca i16
  %event = alloca %"Event::Event.6"
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %edge_triggered
  store i16 4, i16* %flags
  %2 = load i1, i1* %edge_triggered
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i16, i16* %flags
  %4 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 16, i16 32)
  %5 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %3, i16 %4)
  store i16 %5, i16* %flags
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %7 = bitcast i32* %io to %"IO::FileDescriptor"*
  %8 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %7, i32 0, i32 16
  %9 = load i32, i32* %8
  %10 = load i16, i16* %flags
  %11 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~proc2Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34" to i8*), i8** %11
  %12 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %12
  %13 = load %"->", %"->"* %0
  %14 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, IO::FileDescriptor+, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %6, i32 %9, i16 %10, i32* %io, %"->" %13)
  store %"Event::Event.6" %14, %"Event::Event.6"* %1
  %15 = load %"Event::Event.6", %"Event::Event.6"* %1
  store %"Event::Event.6" %15, %"Event::Event.6"* %event
  %16 = load %"Event::Event.6", %"Event::Event.6"* %event
  ret %"Event::Event.6" %16
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, IO::FileDescriptor+, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %self, i32 %s, i16 %flags, i32* %data, %"->" %callback) #0 {
alloca:
  %event = alloca i8*
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Event::Base", %"Event::Base"* %self, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = call i8* @"~check_proc_is_not_closure"(%"->" %callback)
  %4 = bitcast i8* %3 to %Nil (i32, i16, i8*)*
  %5 = bitcast i32* %data to i8*
  %6 = call i8* @event_new(i8* %2, i32 %s, i16 %flags, %Nil (i32, i16, i8*)* %4, i8* %5)
  store i8* %6, i8** %event
  %7 = load i8*, i8** %event
  %8 = call %"Event::Event.6" @"*Event::Event::new<Pointer(Void)>:Event::Event"(i8* %7)
  store %"Event::Event.6" %8, %"Event::Event.6"* %0
  %9 = load %"Event::Event.6", %"Event::Event.6"* %0
  ret %"Event::Event.6" %9
}

; Function Attrs: uwtable
define internal void @"~proc2Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34"(i32 %s, i16 %flags, i8* %data) #0 {
alloca:
  %fd_io = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to i32*
  store i32* %0, i32** %fd_io
  %1 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 4)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %2)
  br label %exit

else:                                             ; preds = %entry
  %3 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 1)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret void

then1:                                            ; preds = %else
  %4 = load i32*, i32** %fd_io
  %5 = call i1 @"*IO::FileDescriptor+@IO::FileDescriptor#write_timed_out=<Bool>:Bool"(i32* %4, i1 true)
  %6 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %6)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*Event::Event#add<(Float64 | Nil)>:Int32"(%"Event::Event.6"* %self, %"(Float64 | Nil)" %timeout) #0 {
alloca:
  %t = alloca %"struct.LibC::Timeval"
  %timeout1 = alloca %"(Float64 | Nil)"
  %0 = alloca %"struct.LibC::Timeval"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Float64 | Nil)" %timeout, %"(Float64 | Nil)"* %timeout1
  %1 = getelementptr inbounds %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout1, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 %2, 0
  %4 = xor i1 %3, true
  %5 = and i1 true, %4
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %6 = getelementptr inbounds %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout1, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to double*
  %8 = load double, double* %7
  %9 = call %"struct.LibC::Timeval" @"*Event::Event#to_timeval<Float64>:struct.LibC::Timeval"(%"Event::Event.6"* %self, double %8)
  store %"struct.LibC::Timeval" %9, %"struct.LibC::Timeval"* %0
  %10 = load %"struct.LibC::Timeval", %"struct.LibC::Timeval"* %0
  store %"struct.LibC::Timeval" %10, %"struct.LibC::Timeval"* %t
  %11 = getelementptr inbounds %"Event::Event.6", %"Event::Event.6"* %self, i32 0, i32 0
  %12 = load i8*, i8** %11
  %13 = call i32 @event_add(i8* %12, %"struct.LibC::Timeval"* %t)
  br label %exit

else:                                             ; preds = %entry
  %14 = call i32 @"*Event::Event#add:Int32"(%"Event::Event.6"* %self)
  br label %exit

exit:                                             ; preds = %else, %then
  %15 = phi i32 [ %13, %then ], [ %14, %else ]
  ret i32 %15
}

; Function Attrs: uwtable
define internal %"struct.LibC::Timeval" @"*Event::Event#to_timeval<Float64>:struct.LibC::Timeval"(%"Event::Event.6"* %self, double %time) #0 {
alloca:
  %t = alloca %"struct.LibC::Timeval"
  %seconds = alloca i64
  %useconds = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i64 @"*Int64::new<Float64>:Int64"(double %time)
  store i64 %0, i64* %seconds
  %1 = load i64, i64* %seconds
  %2 = sitofp i64 %1 to double
  %3 = fsub double %time, %2
  %4 = fmul double %3, 1.000000e+06
  %5 = call i32 @"*Int32::new<Float64>:Int32"(double %4)
  store i32 %5, i32* %useconds
  %6 = load i64, i64* %seconds
  %7 = getelementptr inbounds %"struct.LibC::Timeval", %"struct.LibC::Timeval"* %t, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load i32, i32* %useconds
  %9 = getelementptr inbounds %"struct.LibC::Timeval", %"struct.LibC::Timeval"* %t, i32 0, i32 1
  store i32 %8, i32* %9
  %10 = load %"struct.LibC::Timeval", %"struct.LibC::Timeval"* %t
  ret %"struct.LibC::Timeval" %10
}

; Function Attrs: uwtable
define internal i64 @"*Int64::new<Float64>:Int64"(double %value) #0 {
entry:
  %0 = fptosi double %value to i64
  ret i64 %0
}

; Function Attrs: uwtable
define internal i32 @"*Int32::new<Float64>:Int32"(double %value) #0 {
entry:
  %0 = fptosi double %value to i32
  ret i32 %0
}

declare i32 @event_add(i8*, %"struct.LibC::Timeval"*)

; Function Attrs: uwtable
define internal i32 @"*Event::Event#add:Int32"(%"Event::Event.6"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Event::Event.6", %"Event::Event.6"* %self, i32 0, i32 0
  %1 = load i8*, i8** %0
  %2 = call i32 @event_add(i8* %1, %"struct.LibC::Timeval"* null)
  ret i32 %2
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int64>:Slice(UInt8)"(%"Slice(UInt8)"* %self, i64 %offset) #0 {
alloca:
  %__temp_45 = alloca i1
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = icmp sle i64 0, %offset
  store i1 %1, i1* %__temp_45
  br i1 %1, label %then1, label %else2

then:                                             ; preds = %exit
  br label %exit3

else:                                             ; preds = %exit
  %2 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %2)
  unreachable

then1:                                            ; preds = %entry
  %3 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = sext i32 %4 to i64
  %6 = icmp sle i64 %offset, %5
  br label %exit

else2:                                            ; preds = %entry
  %7 = load i1, i1* %__temp_45
  br label %exit

exit:                                             ; preds = %else2, %then1
  %8 = phi i1 [ %6, %then1 ], [ %7, %else2 ]
  br i1 %8, label %then, label %else

exit3:                                            ; preds = %then
  %9 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %10 = load i8*, i8** %9
  %11 = getelementptr inbounds i8, i8* %10, i64 %offset
  %12 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %13 = load i32, i32* %12
  %14 = sext i32 %13 to i64
  %15 = sub i64 %14, %offset
  %16 = trunc i64 %15 to i32
  %17 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %11, i32 %16)
  store %"Slice(UInt8)" %17, %"Slice(UInt8)"* %0
  %18 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %18
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#wait_writable:Nil"(i32* %self) #0 {
alloca:
  %timeout = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 11
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %1
  store %"(Float64 | Nil)" %2, %"(Float64 | Nil)"* %timeout
  %3 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#wait_writable<(Float64 | Nil)>:Nil"(i32* %self, %"(Float64 | Nil)" %3)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#wait_writable<(Float64 | Nil)>:Nil"(i32* %self, %"(Float64 | Nil)" %timeout) #0 {
alloca:
  %timeout1 = alloca %"(Float64 | Nil)"
  %err = alloca %"IO::Timeout"*
  %timeout2 = alloca %"(Float64 | Nil)"
  %msg = alloca %String*
  %__temp_46 = alloca %"Deque(Fiber)"*
  %writers = alloca %"Deque(Fiber)"*
  %0 = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Float64 | Nil)" %timeout, %"(Float64 | Nil)"* %timeout1
  %1 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout1
  store %"(Float64 | Nil)" %1, %"(Float64 | Nil)"* %0
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %0
  store %"(Float64 | Nil)" %2, %"(Float64 | Nil)"* %timeout2
  store %String* bitcast ({ i32, i32, i32, [16 x i8] }* @"'write timed out'" to %String*), %String** %msg
  %3 = bitcast i32* %self to %"IO::FileDescriptor"*
  %4 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %3, i32 0, i32 20
  %5 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %4
  store %"Deque(Fiber)"* %5, %"Deque(Fiber)"** %__temp_46
  %6 = icmp ne %"Deque(Fiber)"* %5, null
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  %7 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %__temp_46
  br label %exit

else:                                             ; preds = %entry
  %8 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)::new:Deque(Fiber)"(i32 547)
  %9 = bitcast i32* %self to %"IO::FileDescriptor"*
  %10 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %9, i32 0, i32 20
  store %"Deque(Fiber)"* %8, %"Deque(Fiber)"** %10
  br label %exit

exit:                                             ; preds = %else, %then
  %11 = phi %"Deque(Fiber)"* [ %7, %then ], [ %8, %else ]
  store %"Deque(Fiber)"* %11, %"Deque(Fiber)"** %writers
  %12 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %13 = call %Fiber* @"*Fiber::current:Fiber"()
  %14 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#<<<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %12, %Fiber* %13)
  %15 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout2
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(i32* %self, %"(Float64 | Nil)" %15)
  call void @"*Scheduler::reschedule:Nil"()
  %16 = bitcast i32* %self to %"IO::FileDescriptor"*
  %17 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %16, i32 0, i32 15
  %18 = load i1, i1* %17
  br i1 %18, label %then3, label %else4

then3:                                            ; preds = %exit
  %19 = bitcast i32* %self to %"IO::FileDescriptor"*
  %20 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %19, i32 0, i32 15
  store i1 false, i1* %20
  %21 = load %String*, %String** %msg
  %22 = call %"IO::Timeout"* @"*IO::Timeout@Exception::new<String>:IO::Timeout"(%String* %21)
  store %"IO::Timeout"* %22, %"IO::Timeout"** %err
  %23 = load %"IO::Timeout"*, %"IO::Timeout"** %err
  call void @"*raise<IO::Timeout>:NoReturn"(%"IO::Timeout"* %23)
  unreachable

else4:                                            ; preds = %exit
  ret void
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber::current:Fiber"() #0 {
entry:
  %0 = call %Thread* @"*Thread::current:Thread"()
  %1 = getelementptr inbounds %Thread, %Thread* %0, i32 0, i32 5
  %2 = load %Fiber*, %Fiber** %1
  ret %Fiber* %2
}

; Function Attrs: uwtable
define internal %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#<<<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %value) #0 {
entry:
  %0 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#push<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %value)
  ret %"Deque(Fiber)"* %0
}

; Function Attrs: uwtable
define internal %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#push<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %value) #0 {
alloca:
  %index = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %3 = load i32, i32* %2
  %4 = icmp sge i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %"(Int32 | Nil)" @"*Deque(Fiber)@Deque(T)#increase_capacity:(Int32 | Nil)"(%"Deque(Fiber)"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  %9 = load i32, i32* %8
  %10 = add i32 %7, %9
  store i32 %10, i32* %index
  %11 = load i32, i32* %index
  %12 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %13 = load i32, i32* %12
  %14 = icmp sge i32 %11, %13
  br i1 %14, label %then1, label %else2

then1:                                            ; preds = %exit
  %15 = load i32, i32* %index
  %16 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %17 = load i32, i32* %16
  %18 = sub i32 %15, %17
  store i32 %18, i32* %index
  br label %exit3

else2:                                            ; preds = %exit
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %19 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %20 = load %Fiber**, %Fiber*** %19
  %21 = load i32, i32* %index
  %22 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]=<Int32, Fiber>:Fiber"(%Fiber** %20, i32 %21, %Fiber* %value)
  %23 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  %24 = load i32, i32* %23
  %25 = add i32 %24, 1
  %26 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  store i32 %25, i32* %26
  ret %"Deque(Fiber)"* %self
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Deque(Fiber)@Deque(T)#increase_capacity:(Int32 | Nil)"(%"Deque(Fiber)"* %self) #0 {
alloca:
  %old_capacity = alloca i32
  %finish = alloca i32
  %to_move = alloca i32
  %new_start = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"(Int32 | Nil)"
  %3 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %4 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %5 = load %Fiber**, %Fiber*** %4
  %6 = icmp ne %Fiber** %5, null
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %7 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  store i32 4, i32* %7
  %8 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %9 = load i32, i32* %8
  %10 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)::malloc<Int32>:Pointer(Fiber)"(i32 693, i32 %9)
  %11 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  store %Fiber** %10, %Fiber*** %11
  %12 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %12
  %13 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %13
  %14 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %14

exit:                                             ; preds = %then
  %15 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %16 = load i32, i32* %15
  store i32 %16, i32* %old_capacity
  %17 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %18 = load i32, i32* %17
  %19 = mul i32 %18, 2
  %20 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  store i32 %19, i32* %20
  %21 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %22 = load %Fiber**, %Fiber*** %21
  %23 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %24 = load i32, i32* %23
  %25 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#realloc<Int32>:Pointer(Fiber)"(%Fiber** %22, i32 %24)
  %26 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  store %Fiber** %25, %Fiber*** %26
  %27 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %28 = load i32, i32* %27
  %29 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  %30 = load i32, i32* %29
  %31 = add i32 %28, %30
  store i32 %31, i32* %finish
  %32 = load i32, i32* %finish
  %33 = load i32, i32* %old_capacity
  %34 = icmp sgt i32 %32, %33
  br i1 %34, label %then1, label %else2

then1:                                            ; preds = %exit
  %35 = load i32, i32* %finish
  %36 = load i32, i32* %old_capacity
  %37 = sub i32 %35, %36
  store i32 %37, i32* %finish
  %38 = load i32, i32* %old_capacity
  %39 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %40 = load i32, i32* %39
  %41 = sub i32 %38, %40
  %42 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %43 = load i32, i32* %42
  %44 = icmp sge i32 %41, %43
  br i1 %44, label %then3, label %else4

else2:                                            ; preds = %exit
  %45 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %3, i32 0, i32 0
  store i32 0, i32* %45
  %46 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %3, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %46
  br label %exit6

then3:                                            ; preds = %then1
  %47 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %48 = load %Fiber**, %Fiber*** %47
  %49 = load i32, i32* %old_capacity
  %50 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %48, i32 %49)
  %51 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %52 = load %Fiber**, %Fiber*** %51
  %53 = load i32, i32* %finish
  %54 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#copy_from<Pointer(Fiber), Int32>:Pointer(Fiber)"(%Fiber** %50, %Fiber** %52, i32 %53)
  %55 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %56 = load %Fiber**, %Fiber*** %55
  %57 = load i32, i32* %finish
  call void @"*Pointer(Fiber)@Pointer(T)#clear<Int32>:Nil"(%Fiber** %56, i32 %57)
  %58 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %58
  %59 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %59
  br label %exit5

else4:                                            ; preds = %then1
  %60 = load i32, i32* %old_capacity
  %61 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %62 = load i32, i32* %61
  %63 = sub i32 %60, %62
  store i32 %63, i32* %to_move
  %64 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %65 = load i32, i32* %64
  %66 = load i32, i32* %to_move
  %67 = sub i32 %65, %66
  store i32 %67, i32* %new_start
  %68 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %69 = load %Fiber**, %Fiber*** %68
  %70 = load i32, i32* %new_start
  %71 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %69, i32 %70)
  %72 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %73 = load %Fiber**, %Fiber*** %72
  %74 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %75 = load i32, i32* %74
  %76 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %73, i32 %75)
  %77 = load i32, i32* %to_move
  %78 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#copy_from<Pointer(Fiber), Int32>:Pointer(Fiber)"(%Fiber** %71, %Fiber** %76, i32 %77)
  %79 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %80 = load %Fiber**, %Fiber*** %79
  %81 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %82 = load i32, i32* %81
  %83 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %80, i32 %82)
  %84 = load i32, i32* %to_move
  call void @"*Pointer(Fiber)@Pointer(T)#clear<Int32>:Nil"(%Fiber** %83, i32 %84)
  %85 = load i32, i32* %new_start
  %86 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  store i32 %85, i32* %86
  %87 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 0
  store i32 138, i32* %87
  %88 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 1
  %89 = bitcast [1 x i64]* %88 to i32*
  store i32 %85, i32* %89
  br label %exit5

exit5:                                            ; preds = %else4, %then3
  %90 = phi %"(Int32 | Nil)"* [ %1, %then3 ], [ %2, %else4 ]
  br label %exit6

exit6:                                            ; preds = %else2, %exit5
  %91 = phi %"(Int32 | Nil)"* [ %90, %exit5 ], [ %3, %else2 ]
  %92 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %91
  ret %"(Int32 | Nil)" %92
}

; Function Attrs: uwtable
define internal %Fiber** @"*Pointer(Fiber)@Pointer(T)::malloc<Int32>:Pointer(Fiber)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %Fiber**
  ret %Fiber** %6
}

; Function Attrs: uwtable
define internal %Fiber** @"*Pointer(Fiber)@Pointer(T)#realloc<Int32>:Pointer(Fiber)"(%Fiber** %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %Fiber** %self to i8*
  %2 = mul i64 %0, ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %Fiber**
  ret %Fiber** %5
}

; Function Attrs: uwtable
define internal %Fiber** @"*Pointer(Fiber)@Pointer(T)#copy_from<Pointer(Fiber), Int32>:Pointer(Fiber)"(%Fiber** %self, %Fiber** %source, i32 %count) #0 {
entry:
  %0 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#copy_to<Pointer(Fiber), Int32>:Pointer(Fiber)"(%Fiber** %source, %Fiber** %self, i32 %count)
  ret %Fiber** %0
}

; Function Attrs: uwtable
define internal %Fiber** @"*Pointer(Fiber)@Pointer(T)#copy_to<Pointer(Fiber), Int32>:Pointer(Fiber)"(%Fiber** %self, %Fiber** %target, i32 %count) #0 {
entry:
  %0 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#copy_from_impl<Pointer(Fiber), Int32>:Pointer(Fiber)"(%Fiber** %target, %Fiber** %self, i32 %count)
  ret %Fiber** %0
}

; Function Attrs: uwtable
define internal %Fiber** @"*Pointer(Fiber)@Pointer(T)#copy_from_impl<Pointer(Fiber), Int32>:Pointer(Fiber)"(%Fiber** %self, %Fiber** %source, i32 %count) #0 {
alloca:
  %count1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %count, i32* %count1
  %0 = load i32, i32* %count1
  %1 = icmp slt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative count'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = call i1 @"*Pointer(Fiber)@Object::==<Pointer(Fiber):Class>:Bool"(i32 693, i32 693)
  br i1 %3, label %then2, label %else3

then2:                                            ; preds = %else
  %4 = bitcast %Fiber** %self to i8*
  %5 = bitcast %Fiber** %source to i8*
  %6 = load i32, i32* %count1
  %7 = mul i32 %6, 8
  %8 = zext i32 %7 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 %8, i32 0, i1 false)
  br label %exit

else3:                                            ; preds = %else
  br label %while

exit:                                             ; preds = %exit4, %then2
  ret %Fiber** %self

while:                                            ; preds = %body, %else3
  %9 = load i32, i32* %count1
  %10 = sub i32 %9, 1
  store i32 %10, i32* %count1
  %11 = icmp sge i32 %10, 0
  br i1 %11, label %body, label %exit4

body:                                             ; preds = %while
  %12 = load i32, i32* %count1
  %13 = load i32, i32* %count1
  %14 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %source, i32 %13)
  %15 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]=<Int32, Fiber>:Fiber"(%Fiber** %self, i32 %12, %Fiber* %14)
  br label %while

exit4:                                            ; preds = %while
  br label %exit
}

; Function Attrs: uwtable
define internal i1 @"*Pointer(Fiber)@Object::==<Pointer(Fiber):Class>:Bool"(i32 %self, i32 %other) #0 {
entry:
  ret i1 true
}

; Function Attrs: uwtable
define internal %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]=<Int32, Fiber>:Fiber"(%Fiber** %self, i32 %offset, %Fiber* %value) #0 {
entry:
  %0 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %self, i32 %offset)
  store %Fiber* %value, %Fiber** %0
  ret %Fiber* %value
}

; Function Attrs: uwtable
define internal void @"*Scheduler::reschedule:Nil"() #0 {
alloca:
  %runnable = alloca %Fiber*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call %"Deque(Fiber)"** @"~Scheduler::runnables:read"()
  %1 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %0
  %2 = call %Fiber* @"*Deque(Fiber)@Deque(T)#shift?:(Fiber | Nil)"(%"Deque(Fiber)"* %1)
  store %Fiber* %2, %Fiber** %runnable
  %3 = icmp ne %Fiber* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load %Fiber*, %Fiber** %runnable
  call void @"*Fiber#resume:Nil"(%Fiber* %4)
  br label %exit

else:                                             ; preds = %entry
  %5 = call %Fiber* @"*Scheduler::loop_fiber:Fiber"()
  call void @"*Fiber#resume:Nil"(%Fiber* %5)
  br label %exit

exit:                                             ; preds = %else, %then
  ret void
}

define internal %"Deque(Fiber)"** @"~Scheduler::runnables:read"() {
entry:
  %0 = load i1, i1* @"Scheduler::runnables:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"Deque(Fiber)"** @"Scheduler::runnables"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Scheduler::runnables:init"
  call void @"~Scheduler::runnables:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal %Fiber* @"*Scheduler::loop_fiber:Fiber"() #0 {
alloca:
  %__temp_42 = alloca %Fiber*
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = load %Fiber*, %Fiber** @"Scheduler::loop_fiber"
  store %Fiber* %1, %Fiber** %__temp_42
  %2 = icmp ne %Fiber* %1, null
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load %Fiber*, %Fiber** %__temp_42
  br label %exit

else:                                             ; preds = %entry
  %4 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void ()* @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:18" to i8*), i8** %4
  %5 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %5
  %6 = load %"->", %"->"* %0
  %7 = call %Fiber* @"*Fiber::new<&Proc(Nil)>:Fiber"(%"->" %6)
  store %Fiber* %7, %Fiber** @"Scheduler::loop_fiber"
  br label %exit

exit:                                             ; preds = %else, %then
  %8 = phi %Fiber* [ %3, %then ], [ %7, %else ]
  ret %Fiber* %8
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber::new<&Proc(Nil)>:Fiber"(%"->" %proc) #0 {
alloca:
  %_ = alloca %Fiber*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%Fiber* getelementptr (%Fiber, %Fiber* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %Fiber*
  %2 = bitcast %Fiber* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%Fiber* getelementptr (%Fiber, %Fiber* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %Fiber, %Fiber* %1, i32 0, i32 0
  store i32 79, i32* %3
  store %Fiber* %1, %Fiber** %_
  %4 = load %Fiber*, %Fiber** %_
  %5 = call %Fiber* @"*Fiber#initialize<&Proc(Nil)>:Fiber"(%Fiber* %4, %"->" %proc)
  %6 = load %Fiber*, %Fiber** %_
  ret %Fiber* %6
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber#initialize<&Proc(Nil)>:Fiber"(%Fiber* %self, %"->" %proc) #0 {
alloca:
  %name = alloca %Nil
  %fiber_main = alloca %"->"
  %stack_ptr = alloca %"(Pointer(Pointer(Void)) | Pointer(Void))"
  %last_fiber = alloca %Fiber*
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = load %Nil, %Nil* %name
  %2 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 7
  store %String* null, %String** %2
  %3 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 8
  %4 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %3, i32 0, i32 0
  store i32 392, i32* %4
  %5 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %3, i32 0, i32 1
  %6 = bitcast [2 x i64]* %5 to %"->"*
  store %"->" %proc, %"->"* %6
  %7 = call i8* @"*Fiber::allocate_stack:Pointer(Void)"()
  %8 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  store i8* %7, i8** %8
  %9 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  %10 = load i8*, i8** %9
  %11 = call i8* @"*Pointer(Void)@Pointer(T)#+<Int32>:Pointer(Void)"(i8* %10, i32 8388608)
  %12 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 4
  store i8* %11, i8** %12
  %13 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (%"IO::FileDescriptor"* (%Fiber*)* @"~procProc(Fiber, (IO::FileDescriptor | Nil))@/usr/local/Cellar/crystal-lang/0.20.4/src/fiber.cr:29" to i8*), i8** %13
  %14 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %14
  %15 = load %"->", %"->"* %0
  store %"->" %15, %"->"* %fiber_main
  %16 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  %17 = load i8*, i8** %16
  %18 = call i8* @"*Pointer(Void)@Pointer(T)#+<Int32>:Pointer(Void)"(i8* %17, i32 8388608)
  %19 = call i8* @"*Pointer(Void)@Pointer(T)#-<Int32>:Pointer(Void)"(i8* %18, i32 8)
  %20 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 0
  store i32 152, i32* %20
  %21 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %22 = bitcast [1 x i64]* %21 to i8**
  store i8* %19, i8** %22
  %23 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %24 = bitcast [1 x i64]* %23 to i8**
  %25 = load i8*, i8** %24
  %26 = ptrtoint i8* %25 to i64
  %27 = call i64 @"*UInt64@Int#~:UInt64"(i64 15)
  %28 = and i64 %26, %27
  %29 = inttoptr i64 %28 to i8**
  %30 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 0
  store i32 168, i32* %30
  %31 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %32 = bitcast [1 x i64]* %31 to i8***
  store i8** %29, i8*** %32
  %33 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %34 = bitcast [1 x i64]* %33 to i8***
  %35 = load i8**, i8*** %34
  %36 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)#-<Int32>:Pointer(Pointer(Void))"(i8** %35, i32 7)
  %37 = bitcast i8** %36 to i8*
  %38 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 3
  store i8* %37, i8** %38
  %39 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %40 = bitcast [1 x i64]* %39 to i8***
  %41 = load i8**, i8*** %40
  %42 = load %"->", %"->"* %fiber_main
  %43 = call i8* @"*Proc(Fiber, (IO::FileDescriptor | Nil))@Proc(T, R)#pointer:Pointer(Void)"(%"->" %42)
  %44 = call i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]=<Int32, Pointer(Void)>:Pointer(Void)"(i8** %41, i32 0, i8* %43)
  %45 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %46 = bitcast [1 x i64]* %45 to i8***
  %47 = load i8**, i8*** %46
  %48 = bitcast %Fiber* %self to i8*
  %49 = call i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]=<Int32, Pointer(Void)>:Pointer(Void)"(i8** %47, i32 -1, i8* %48)
  %50 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  store %Fiber* null, %Fiber** %50
  %51 = load %Fiber*, %Fiber** @"Fiber::last_fiber"
  store %Fiber* %51, %Fiber** %last_fiber
  %52 = icmp ne %Fiber* %51, null
  br i1 %52, label %then, label %else

then:                                             ; preds = %entry
  %53 = load %Fiber*, %Fiber** %last_fiber
  %54 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  store %Fiber* %53, %Fiber** %54
  %55 = load %Fiber*, %Fiber** %last_fiber
  store %Fiber* %self, %Fiber** @"Fiber::last_fiber"
  %56 = call %Fiber* @"*Fiber#next_fiber=<Fiber>:Fiber"(%Fiber* %55, %Fiber* %self)
  br label %exit

else:                                             ; preds = %entry
  store %Fiber* %self, %Fiber** @"Fiber::last_fiber"
  store %Fiber* %self, %Fiber** @"Fiber::first_fiber"
  br label %exit

exit:                                             ; preds = %else, %then
  %57 = phi %Fiber* [ %56, %then ], [ %self, %else ]
  ret %Fiber* %57
}

; Function Attrs: uwtable
define internal i8* @"*Fiber::allocate_stack:Pointer(Void)"() #0 {
alloca:
  %__temp_43 = alloca i8*
  %pointer = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call %"Array(Pointer(Void)).2"** @"~Fiber::stack_pool:read"()
  %1 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %0
  %2 = call i8* @"*Array(Pointer(Void))@Array(T)#pop?:(Pointer(Void) | Nil)"(%"Array(Pointer(Void)).2"* %1)
  store i8* %2, i8** %__temp_43
  %3 = icmp ne i8* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i8*, i8** %__temp_43
  br label %exit

else:                                             ; preds = %entry
  %5 = call i8* @mmap(i8* null, i64 8388608, i32 3, i32 4098, i32 -1, i64 0)
  store i8* %5, i8** %pointer
  %6 = load i8*, i8** %pointer
  %7 = call i8** @"~LibC::MAP_FAILED:read"()
  %8 = load i8*, i8** %7
  %9 = call i1 @"*Pointer(Void)@Comparable(T)#==<Pointer(Void)>:Bool"(i8* %6, i8* %8)
  br i1 %9, label %then1, label %else2

exit:                                             ; preds = %else2, %then
  %10 = phi i8* [ %4, %then ], [ %5, %else2 ]
  ret i8* %10

then1:                                            ; preds = %else
  %11 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [32 x i8] }* @"'Cannot allocate new...'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %11)
  unreachable

else2:                                            ; preds = %else
  %12 = load i8*, i8** %pointer
  %13 = call i32 @mprotect(i8* %12, i64 4096, i32 0)
  br label %exit
}

define internal %"Array(Pointer(Void)).2"** @"~Fiber::stack_pool:read"() {
entry:
  %0 = load i1, i1* @"Fiber::stack_pool:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"Array(Pointer(Void)).2"** @"Fiber::stack_pool"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Fiber::stack_pool:init"
  call void @"~Fiber::stack_pool:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal i8* @"*Array(Pointer(Void))@Array(T)#pop?:(Pointer(Void) | Nil)"(%"Array(Pointer(Void)).2"* %self) #0 {
alloca:
  %value = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = sub i32 %4, 1
  %6 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  store i32 %5, i32* %6
  %7 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  %8 = load i8**, i8*** %7
  %9 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %10 = load i32, i32* %9
  %11 = call i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]<Int32>:Pointer(Void)"(i8** %8, i32 %10)
  store i8* %11, i8** %value
  %12 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  %13 = load i8**, i8*** %12
  %14 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %15 = load i32, i32* %14
  %16 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)#+<Int32>:Pointer(Pointer(Void))"(i8** %13, i32 %15)
  call void @"*Pointer(Pointer(Void))@Pointer(T)#clear:Nil"(i8** %16)
  %17 = load i8*, i8** %value
  br label %exit

exit:                                             ; preds = %else, %then
  %18 = phi i8* [ null, %then ], [ %17, %else ]
  ret i8* %18
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]<Int32>:Pointer(Void)"(i8** %self, i32 %offset) #0 {
entry:
  %0 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)#+<Int32>:Pointer(Pointer(Void))"(i8** %self, i32 %offset)
  %1 = load i8*, i8** %0
  ret i8* %1
}

; Function Attrs: uwtable
define internal void @"*Pointer(Pointer(Void))@Pointer(T)#clear:Nil"(i8** %self) #0 {
alloca:
  %count = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1, i32* %count
  %0 = load i32, i32* %count
  call void @"*Pointer(Pointer(Void))@Pointer(T)#clear<Int32>:Nil"(i8** %self, i32 %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Pointer(Pointer(Void))@Pointer(T)#clear<Int32>:Nil"(i8** %self, i32 %count) #0 {
alloca:
  %ptr = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8** %self to i8*
  store i8* %0, i8** %ptr
  %1 = bitcast i8** %self to i8*
  %2 = mul i32 %count, 8
  %3 = zext i32 %2 to i64
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 %3, i32 0, i1 false)
  ret void
}

declare i8* @mmap(i8*, i64, i32, i32, i32, i64)

define internal i8** @"~LibC::MAP_FAILED:read"() {
entry:
  %0 = load i1, i1* @"LibC::MAP_FAILED:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret i8** @"LibC::MAP_FAILED"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"LibC::MAP_FAILED:init"
  call void @"~LibC::MAP_FAILED:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal i1 @"*Pointer(Void)@Comparable(T)#==<Pointer(Void)>:Bool"(i8* %self, i8* %other) #0 {
entry:
  %0 = call i32 @"*Pointer(Void)@Pointer(T)#<=><Pointer(Void)>:Int32"(i8* %self, i8* %other)
  %1 = icmp eq i32 %0, 0
  ret i1 %1
}

; Function Attrs: uwtable
define internal i32 @"*Pointer(Void)@Pointer(T)#<=><Pointer(Void)>:Int32"(i8* %self, i8* %other) #0 {
entry:
  %0 = ptrtoint i8* %self to i64
  %1 = ptrtoint i8* %other to i64
  %2 = call i32 @"*UInt64@Number#<=><UInt64>:Int32"(i64 %0, i64 %1)
  ret i32 %2
}

; Function Attrs: uwtable
define internal i32 @"*UInt64@Number#<=><UInt64>:Int32"(i64 %self, i64 %other) #0 {
entry:
  %0 = icmp ugt i64 %self, %other
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %1 = icmp ult i64 %self, %other
  br i1 %1, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %2 = phi i32 [ 1, %then ], [ %3, %exit3 ]
  ret i32 %2

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %3 = phi i32 [ -1, %then1 ], [ 0, %else2 ]
  br label %exit
}

declare i32 @mprotect(i8*, i64, i32)

; Function Attrs: uwtable
define internal i8* @"*Pointer(Void)@Pointer(T)#+<Int32>:Pointer(Void)"(i8* %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds i8, i8* %self, i64 %0
  ret i8* %1
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"~procProc(Fiber, (IO::FileDescriptor | Nil))@/usr/local/Cellar/crystal-lang/0.20.4/src/fiber.cr:29"(%Fiber* %f) #0 {
entry:
  %0 = call %"IO::FileDescriptor"* @"*Fiber#run:(IO::FileDescriptor | Nil)"(%Fiber* %f)
  ret %"IO::FileDescriptor"* %0
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*Fiber#run:(IO::FileDescriptor | Nil)"(%Fiber* %self) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %ex = alloca i32*
  %name = alloca %String*
  %prev_fiber = alloca %Fiber*
  %next_fiber = alloca %Fiber*
  %__arg0 = alloca %"Event::Event.6"
  %__arg032 = alloca %"Event::Event.6"
  %__arg041 = alloca %"Event::Event.6"
  %__arg045 = alloca %"Event::Event.6"
  %__arg054 = alloca %"Event::Event.6"
  %__arg058 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 8
  %1 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 392, %2
  br i1 %3, label %current_def, label %next_def

rescue:                                           ; preds = %ctx_is_not_null6, %ctx_is_null5, %ctx_is_not_null, %ctx_is_null
  %4 = landingpad %landing_pad
          cleanup
  %5 = extractvalue %landing_pad %4, 0
  %6 = extractvalue %landing_pad %4, 1
  br label %this_rescue

current_def:                                      ; preds = %entry
  %7 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %0, i32 0, i32 1
  %8 = bitcast [2 x i64]* %7 to %"->"*
  %9 = load %"->", %"->"* %8
  %10 = extractvalue %"->" %9, 0
  %11 = extractvalue %"->" %9, 1
  %12 = icmp eq i8* %11, null
  br i1 %12, label %ctx_is_null, label %ctx_is_not_null

next_def:                                         ; preds = %entry
  %13 = icmp eq i32 396, %2
  br i1 %13, label %current_def3, label %next_def4

ctx_is_null:                                      ; preds = %current_def
  %14 = bitcast i8* %10 to %Nil ()*
  %15 = invoke %Nil %14()
          to label %invoke_out unwind label %rescue

ctx_is_not_null:                                  ; preds = %current_def
  %16 = bitcast i8* %10 to %Nil (i8*)*
  %17 = invoke %Nil %16(i8* %11)
          to label %invoke_out1 unwind label %rescue

invoke_out:                                       ; preds = %ctx_is_null
  br label %exit

exit:                                             ; preds = %invoke_out1, %invoke_out
  br label %exit2

invoke_out1:                                      ; preds = %ctx_is_not_null
  br label %exit

exit2:                                            ; preds = %exit8, %exit
  br label %exit10

current_def3:                                     ; preds = %next_def
  %18 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %0, i32 0, i32 1
  %19 = bitcast [2 x i64]* %18 to %"->"*
  %20 = load %"->", %"->"* %19
  %21 = extractvalue %"->" %20, 0
  %22 = extractvalue %"->" %20, 1
  %23 = icmp eq i8* %22, null
  br i1 %23, label %ctx_is_null5, label %ctx_is_not_null6

next_def4:                                        ; preds = %next_def
  unreachable

ctx_is_null5:                                     ; preds = %current_def3
  %24 = bitcast i8* %21 to void ()*
  invoke void %24()
          to label %invoke_out7 unwind label %rescue

ctx_is_not_null6:                                 ; preds = %current_def3
  %25 = bitcast i8* %21 to void (i8*)*
  invoke void %25(i8* %22)
          to label %invoke_out9 unwind label %rescue

invoke_out7:                                      ; preds = %ctx_is_null5
  br label %exit8

exit8:                                            ; preds = %invoke_out9, %invoke_out7
  br label %exit2

invoke_out9:                                      ; preds = %ctx_is_not_null6
  br label %exit8

exit10:                                           ; preds = %invoke_out20, %exit2
  %26 = phi %"IO::FileDescriptor"* [ null, %exit2 ], [ %67, %invoke_out20 ]
  %27 = call %"Array(Pointer(Void)).2"** @"~Fiber::stack_pool:read"()
  %28 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %27
  %29 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  %30 = load i8*, i8** %29
  %31 = call %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)#<<<Pointer(Void)>:Array(Pointer(Void))"(%"Array(Pointer(Void)).2"* %28, i8* %30)
  %32 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  %33 = load %Fiber*, %Fiber** %32
  store %Fiber* %33, %Fiber** %prev_fiber
  %34 = icmp ne %Fiber* %33, null
  br i1 %34, label %then33, label %else34

rescue_ensure:                                    ; preds = %invoke_out19, %exit17, %else, %invoke_out15, %invoke_out14, %invoke_out13, %invoke_out12, %invoke_out11, %then
  %35 = landingpad %landing_pad
          cleanup
  %36 = extractvalue %landing_pad %35, 0
  %37 = call %"Array(Pointer(Void)).2"** @"~Fiber::stack_pool:read"()
  %38 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %37
  %39 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  %40 = load i8*, i8** %39
  %41 = call %"Array(Pointer(Void)).2"* @"*Array(Pointer(Void))@Array(T)#<<<Pointer(Void)>:Array(Pointer(Void))"(%"Array(Pointer(Void)).2"* %38, i8* %40)
  %42 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  %43 = load %Fiber*, %Fiber** %42
  store %Fiber* %43, %Fiber** %prev_fiber
  %44 = icmp ne %Fiber* %43, null
  br i1 %44, label %then46, label %else47

this_rescue:                                      ; preds = %rescue
  %45 = bitcast i8* %5 to %"struct.LibUnwind::Exception"*
  %46 = call i64 @__crystal_get_exception(%"struct.LibUnwind::Exception"* %45)
  %47 = inttoptr i64 %46 to i32*
  store i32* %47, i32** %ex
  %48 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 7
  %49 = load %String*, %String** %48
  store %String* %49, %String** %name
  %50 = icmp ne %String* %49, null
  br i1 %50, label %then, label %else

then:                                             ; preds = %this_rescue
  %51 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %52 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %51
  %53 = invoke %"String::Builder"* @"*String::Builder::new:String::Builder"()
          to label %invoke_out11 unwind label %rescue_ensure

else:                                             ; preds = %this_rescue
  %54 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %55 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %54
  invoke void @"*IO::FileDescriptor@IO#puts<String>:Nil"(%"IO::FileDescriptor"* %55, %String* bitcast ({ i32, i32, i32, [30 x i8] }* @"'Unhandled exception...'.3" to %String*))
          to label %invoke_out18 unwind label %rescue_ensure

invoke_out11:                                     ; preds = %then
  %56 = invoke %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %53, %String* bitcast ({ i32, i32, i32, [36 x i8] }* @"'Unhandled exception...'" to %String*))
          to label %invoke_out12 unwind label %rescue_ensure

invoke_out12:                                     ; preds = %invoke_out11
  %57 = load %String*, %String** %name
  %58 = invoke %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %56, %String* %57)
          to label %invoke_out13 unwind label %rescue_ensure

invoke_out13:                                     ; preds = %invoke_out12
  %59 = invoke %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %58, %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"'):'" to %String*))
          to label %invoke_out14 unwind label %rescue_ensure

invoke_out14:                                     ; preds = %invoke_out13
  %60 = invoke %String* @"*String::Builder#to_s:String"(%"String::Builder"* %59)
          to label %invoke_out15 unwind label %rescue_ensure

invoke_out15:                                     ; preds = %invoke_out14
  invoke void @"*IO::FileDescriptor@IO#puts<String>:Nil"(%"IO::FileDescriptor"* %52, %String* %60)
          to label %invoke_out16 unwind label %rescue_ensure

invoke_out16:                                     ; preds = %invoke_out15
  br label %exit17

exit17:                                           ; preds = %invoke_out18, %invoke_out16
  %61 = load i32*, i32** %ex
  %62 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %63 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %62
  %64 = invoke %"IO::FileDescriptor"* @"*Exception+@Exception#inspect_with_backtrace<IO::FileDescriptor>:IO::FileDescriptor"(i32* %61, %"IO::FileDescriptor"* %63)
          to label %invoke_out19 unwind label %rescue_ensure

invoke_out18:                                     ; preds = %else
  br label %exit17

invoke_out19:                                     ; preds = %exit17
  %65 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %66 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %65
  %67 = invoke %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %66)
          to label %invoke_out20 unwind label %rescue_ensure

invoke_out20:                                     ; preds = %invoke_out19
  br label %exit10

then33:                                           ; preds = %exit10
  %68 = load %Fiber*, %Fiber** %prev_fiber
  %69 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 5
  %70 = load %Fiber*, %Fiber** %69
  %71 = call %Fiber* @"*Fiber#next_fiber=<(Fiber | Nil)>:(Fiber | Nil)"(%Fiber* %68, %Fiber* %70)
  br label %exit35

else34:                                           ; preds = %exit10
  %72 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 5
  %73 = load %Fiber*, %Fiber** %72
  store %Fiber* %73, %Fiber** @"Fiber::first_fiber"
  br label %exit35

exit35:                                           ; preds = %else34, %then33
  %74 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 5
  %75 = load %Fiber*, %Fiber** %74
  store %Fiber* %75, %Fiber** %next_fiber
  %76 = icmp ne %Fiber* %75, null
  br i1 %76, label %then36, label %else37

then36:                                           ; preds = %exit35
  %77 = load %Fiber*, %Fiber** %next_fiber
  %78 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  %79 = load %Fiber*, %Fiber** %78
  %80 = call %Fiber* @"*Fiber#prev_fiber=<(Fiber | Nil)>:(Fiber | Nil)"(%Fiber* %77, %Fiber* %79)
  br label %exit38

else37:                                           ; preds = %exit35
  %81 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  %82 = load %Fiber*, %Fiber** %81
  store %Fiber* %82, %Fiber** @"Fiber::last_fiber"
  br label %exit38

exit38:                                           ; preds = %else37, %then36
  %83 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 2
  %84 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %83, i32 0, i32 0
  %85 = load i32, i32* %84
  %86 = icmp eq i32 359, %85
  br i1 %86, label %current_def39, label %next_def40

current_def39:                                    ; preds = %exit38
  %87 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %83, i32 0, i32 1
  %88 = bitcast [2 x i64]* %87 to %"Event::Event.6"*
  %89 = load %"Event::Event.6", %"Event::Event.6"* %88
  store %"Event::Event.6" %89, %"Event::Event.6"* %__arg041
  %90 = call i1 @"*Event::Event#free:Bool"(%"Event::Event.6"* %__arg041)
  br label %exit42

next_def40:                                       ; preds = %exit38
  %91 = icmp eq i32 0, %85
  br i1 %91, label %current_def43, label %next_def44

exit42:                                           ; preds = %current_def43, %current_def39
  call void @"*Scheduler::reschedule:Nil"()
  ret %"IO::FileDescriptor"* %26

current_def43:                                    ; preds = %next_def40
  br label %exit42

next_def44:                                       ; preds = %next_def40
  unreachable

then46:                                           ; preds = %rescue_ensure
  %92 = load %Fiber*, %Fiber** %prev_fiber
  %93 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 5
  %94 = load %Fiber*, %Fiber** %93
  %95 = call %Fiber* @"*Fiber#next_fiber=<(Fiber | Nil)>:(Fiber | Nil)"(%Fiber* %92, %Fiber* %94)
  br label %exit48

else47:                                           ; preds = %rescue_ensure
  %96 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 5
  %97 = load %Fiber*, %Fiber** %96
  store %Fiber* %97, %Fiber** @"Fiber::first_fiber"
  br label %exit48

exit48:                                           ; preds = %else47, %then46
  %98 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 5
  %99 = load %Fiber*, %Fiber** %98
  store %Fiber* %99, %Fiber** %next_fiber
  %100 = icmp ne %Fiber* %99, null
  br i1 %100, label %then49, label %else50

then49:                                           ; preds = %exit48
  %101 = load %Fiber*, %Fiber** %next_fiber
  %102 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  %103 = load %Fiber*, %Fiber** %102
  %104 = call %Fiber* @"*Fiber#prev_fiber=<(Fiber | Nil)>:(Fiber | Nil)"(%Fiber* %101, %Fiber* %103)
  br label %exit51

else50:                                           ; preds = %exit48
  %105 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  %106 = load %Fiber*, %Fiber** %105
  store %Fiber* %106, %Fiber** @"Fiber::last_fiber"
  br label %exit51

exit51:                                           ; preds = %else50, %then49
  %107 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 2
  %108 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %107, i32 0, i32 0
  %109 = load i32, i32* %108
  %110 = icmp eq i32 359, %109
  br i1 %110, label %current_def52, label %next_def53

current_def52:                                    ; preds = %exit51
  %111 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %107, i32 0, i32 1
  %112 = bitcast [2 x i64]* %111 to %"Event::Event.6"*
  %113 = load %"Event::Event.6", %"Event::Event.6"* %112
  store %"Event::Event.6" %113, %"Event::Event.6"* %__arg054
  %114 = call i1 @"*Event::Event#free:Bool"(%"Event::Event.6"* %__arg054)
  br label %exit55

next_def53:                                       ; preds = %exit51
  %115 = icmp eq i32 0, %109
  br i1 %115, label %current_def56, label %next_def57

exit55:                                           ; preds = %current_def56, %current_def52
  call void @"*Scheduler::reschedule:Nil"()
  %116 = bitcast i8* %36 to %"struct.LibUnwind::Exception"*
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %116)
  unreachable

current_def56:                                    ; preds = %next_def53
  br label %exit55

next_def57:                                       ; preds = %next_def53
  unreachable
}

define internal %"IO::FileDescriptor"** @"~STDERR:read"() {
entry:
  %0 = load i1, i1* @"STDERR:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"IO::FileDescriptor"** @STDERR

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"STDERR:init"
  call void @"~STDERR:init"()
  br label %initialized
}

define internal void @"~STDERR:init"() {
alloca:
  %f = alloca %"IO::FileDescriptor"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @isatty(i32 2)
  %1 = icmp eq i32 %0, 0
  %2 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor::new:blocking<Int32, Bool>:IO::FileDescriptor"(i32 2, i1 %1)
  store %"IO::FileDescriptor"* %2, %"IO::FileDescriptor"** %f
  %3 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %f
  %4 = call i1 @"*IO::FileDescriptor@IO::Buffered#flush_on_newline=<Bool>:Bool"(%"IO::FileDescriptor"* %3, i1 true)
  store %"IO::FileDescriptor"* %2, %"IO::FileDescriptor"** @STDERR
  ret void
}

; Function Attrs: uwtable
define internal i1 @"*IO::FileDescriptor@IO::Buffered#flush_on_newline=<Bool>:Bool"(%"IO::FileDescriptor"* %self, i1 %flush_on_newline) #0 {
entry:
  %0 = xor i1 %flush_on_newline, true
  %1 = xor i1 %0, true
  %2 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 7
  store i1 %1, i1* %2
  ret i1 %1
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#puts<String>:Nil"(%"IO::FileDescriptor"* %self, %String* %string) #0 {
entry:
  %0 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<String>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, %String* %string)
  %1 = call i1 @"*String#ends_with?<Char>:Bool"(%String* %string, i32 10)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  call void @"*IO::FileDescriptor@IO#puts:Nil"(%"IO::FileDescriptor"* %self)
  br label %exit

exit:                                             ; preds = %else, %then
  ret void
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<String>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, %String* %obj) #0 {
entry:
  call void @"*String#to_s<IO::FileDescriptor>:Nil"(%String* %obj, %"IO::FileDescriptor"* %self)
  ret %"IO::FileDescriptor"* %self
}

; Function Attrs: uwtable
define internal void @"*String#to_s<IO::FileDescriptor>:Nil"(%String* %self, %"IO::FileDescriptor"* %io) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %2 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %3 = load i32, i32* %2
  %4 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %3)
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %0
  %5 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  call void @"*IO::FileDescriptor@IO#write_utf8<Slice(UInt8)>:Nil"(%"IO::FileDescriptor"* %io, %"Slice(UInt8)" %5)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#write_utf8<Slice(UInt8)>:Nil"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %slice) #0 {
alloca:
  %encoder = alloca %"IO::Encoder"*
  %slice1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  %0 = call %"IO::Encoder"* @"*IO::FileDescriptor@IO#encoder:(IO::Encoder | Nil)"(%"IO::FileDescriptor"* %self)
  store %"IO::Encoder"* %0, %"IO::Encoder"** %encoder
  %1 = icmp ne %"IO::Encoder"* %0, null
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load %"IO::Encoder"*, %"IO::Encoder"** %encoder
  %3 = load %"Slice(UInt8)", %"Slice(UInt8)"* %slice1
  call void @"*IO::Encoder#write<IO::FileDescriptor, Slice(UInt8)>:Nil"(%"IO::Encoder"* %2, %"IO::FileDescriptor"* %self, %"Slice(UInt8)" %3)
  br label %exit

else:                                             ; preds = %entry
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %slice1
  %5 = call %"(Int32 | Nil)" @"*IO::FileDescriptor@IO::Buffered#write<Slice(UInt8)>:(Int32 | Nil)"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %4)
  br label %exit

exit:                                             ; preds = %else, %then
  ret void
}

; Function Attrs: uwtable
define internal %"IO::Encoder"* @"*IO::FileDescriptor@IO#encoder:(IO::Encoder | Nil)"(%"IO::FileDescriptor"* %self) #0 {
alloca:
  %encoding = alloca %"(IO::EncodingOptions | Nil)"
  %__temp_50 = alloca %"IO::Encoder"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 3
  %1 = load %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %0
  store %"(IO::EncodingOptions | Nil)" %1, %"(IO::EncodingOptions | Nil)"* %encoding
  %2 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %0, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %3, 0
  %5 = xor i1 %4, true
  %6 = and i1 true, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 1
  %8 = load %"IO::Encoder"*, %"IO::Encoder"** %7
  store %"IO::Encoder"* %8, %"IO::Encoder"** %__temp_50
  %9 = icmp ne %"IO::Encoder"* %8, null
  br i1 %9, label %then1, label %else2

else:                                             ; preds = %entry
  br label %exit3

then1:                                            ; preds = %then
  %10 = load %"IO::Encoder"*, %"IO::Encoder"** %__temp_50
  br label %exit

else2:                                            ; preds = %then
  %11 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %encoding, i32 0, i32 1
  %12 = bitcast [3 x i64]* %11 to %"IO::EncodingOptions"*
  %13 = load %"IO::EncodingOptions", %"IO::EncodingOptions"* %12
  %14 = call %"IO::Encoder"* @"*IO::Encoder::new<IO::EncodingOptions>:IO::Encoder"(%"IO::EncodingOptions" %13)
  %15 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 1
  store %"IO::Encoder"* %14, %"IO::Encoder"** %15
  br label %exit

exit:                                             ; preds = %else2, %then1
  %16 = phi %"IO::Encoder"* [ %10, %then1 ], [ %14, %else2 ]
  br label %exit3

exit3:                                            ; preds = %else, %exit
  %17 = phi %"IO::Encoder"* [ %16, %exit ], [ null, %else ]
  ret %"IO::Encoder"* %17
}

; Function Attrs: uwtable
define internal void @"*IO::Encoder#write<IO::FileDescriptor, Slice(UInt8)>:Nil"(%"IO::Encoder"* %self, %"IO::FileDescriptor"* %io, %"Slice(UInt8)" %slice) #0 {
alloca:
  %inbuf_ptr = alloca i8*
  %inbytesleft = alloca i64
  %outbuf = alloca [1024 x i8]
  %outbuf_ptr = alloca i8*
  %outbytesleft = alloca i64
  %err = alloca i64
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  %2 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 1
  %3 = load i8*, i8** %2
  store i8* %3, i8** %inbuf_ptr
  %4 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %5 = load i32, i32* %4
  %6 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 %5)
  store i64 %6, i64* %inbytesleft
  br label %while

while:                                            ; preds = %exit2, %entry
  %7 = load i64, i64* %inbytesleft
  %8 = icmp ugt i64 %7, 0
  %9 = or i1 false, %8
  br i1 %9, label %body, label %exit

body:                                             ; preds = %while
  %10 = call i8* @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([1024 x i8]* %outbuf)
  store i8* %10, i8** %outbuf_ptr
  %11 = call i32 @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#size:Int32"([1024 x i8]* %outbuf)
  %12 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 %11)
  store i64 %12, i64* %outbytesleft
  %13 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 2
  %14 = call i64 @"*Iconv#convert<Pointer(Pointer(UInt8)), Pointer(UInt64), Pointer(Pointer(UInt8)), Pointer(UInt64)>:UInt64"(%Iconv* %13, i8** %inbuf_ptr, i64* %inbytesleft, i8** %outbuf_ptr, i64* %outbytesleft)
  store i64 %14, i64* %err
  %15 = load i64, i64* %err
  %16 = icmp eq i64 %15, -1
  br i1 %16, label %then, label %else

exit:                                             ; preds = %while
  ret void

then:                                             ; preds = %body
  %17 = getelementptr inbounds %"IO::Encoder", %"IO::Encoder"* %self, i32 0, i32 2
  %18 = call %"(UInt64 | Nil)" @"*Iconv#handle_invalid<Pointer(Pointer(UInt8)), Pointer(UInt64)>:(UInt64 | Nil)"(%Iconv* %17, i8** %inbuf_ptr, i64* %inbytesleft)
  br label %exit2

else:                                             ; preds = %body
  br label %exit2

exit2:                                            ; preds = %else, %then
  %19 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_slice:Slice(UInt8)"([1024 x i8]* %outbuf)
  store %"Slice(UInt8)" %19, %"Slice(UInt8)"* %0
  %20 = call i32 @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#size:Int32"([1024 x i8]* %outbuf)
  %21 = load i64, i64* %outbytesleft
  %22 = sext i32 %20 to i64
  %23 = sub i64 %22, %21
  %24 = trunc i64 %23 to i32
  %25 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %0, i32 0, i32 %24)
  store %"Slice(UInt8)" %25, %"Slice(UInt8)"* %1
  %26 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  %27 = call %"(Int32 | Nil)" @"*IO::FileDescriptor@IO::Buffered#write<Slice(UInt8)>:(Int32 | Nil)"(%"IO::FileDescriptor"* %io, %"Slice(UInt8)" %26)
  br label %while
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*IO::FileDescriptor@IO::Buffered#write<Slice(UInt8)>:(Int32 | Nil)"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %slice) #0 {
alloca:
  %count = alloca i32
  %index = alloca %"(Int32 | Nil)"
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"Slice(UInt8)"
  %3 = alloca %"(Int32 | Nil)"
  %4 = alloca %"Slice(UInt8)"
  %5 = alloca %"Slice(UInt8)"
  %6 = alloca %"Slice(UInt8)"
  %7 = alloca %"(Int32 | Nil)"
  %8 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %0
  %9 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %9, %"Slice(UInt8)"* %slice1
  call void @"*IO::FileDescriptor@IO#check_open:Nil"(%"IO::FileDescriptor"* %self)
  %10 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %11 = load i32, i32* %10
  store i32 %11, i32* %count
  %12 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 6
  %13 = load i1, i1* %12
  br i1 %13, label %then, label %else

then:                                             ; preds = %entry
  %14 = load %"Slice(UInt8)", %"Slice(UInt8)"* %slice1
  %15 = call i32 @"*IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %14)
  %16 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 138, i32* %16
  %17 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  %18 = bitcast [1 x i64]* %17 to i32*
  store i32 %15, i32* %18
  %19 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  ret %"(Int32 | Nil)" %19

else:                                             ; preds = %entry
  %20 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 7
  %21 = load i1, i1* %20
  br i1 %21, label %then2, label %else3

then2:                                            ; preds = %else
  %22 = load i32, i32* %count
  %23 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 0, i32 %22)
  store %"Slice(UInt8)" %23, %"Slice(UInt8)"* %2
  %24 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Indexable(T)#rindex<UInt8>:(Int32 | Nil)"(%"Slice(UInt8)"* %2, i8 10)
  store %"(Int32 | Nil)" %24, %"(Int32 | Nil)"* %3
  %25 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %3
  store %"(Int32 | Nil)" %25, %"(Int32 | Nil)"* %index
  %26 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  %27 = load i32, i32* %26
  %28 = icmp eq i32 %27, 0
  %29 = xor i1 %28, true
  %30 = and i1 true, %29
  br i1 %30, label %then4, label %else5

else3:                                            ; preds = %else
  br label %exit6

then4:                                            ; preds = %then2
  %31 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %self)
  %32 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %33 = bitcast [1 x i64]* %32 to i32*
  %34 = load i32, i32* %33
  %35 = add i32 %34, 1
  %36 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %36
  %37 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %38 = bitcast [1 x i64]* %37 to i32*
  store i32 %35, i32* %38
  %39 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %40 = bitcast [1 x i64]* %39 to i32*
  %41 = load i32, i32* %40
  %42 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 0, i32 %41)
  store %"Slice(UInt8)" %42, %"Slice(UInt8)"* %4
  %43 = load %"Slice(UInt8)", %"Slice(UInt8)"* %4
  %44 = call i32 @"*IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %43)
  %45 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %46 = bitcast [1 x i64]* %45 to i32*
  %47 = load i32, i32* %46
  %48 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 %47)
  store %"Slice(UInt8)" %48, %"Slice(UInt8)"* %5
  %49 = load %"Slice(UInt8)", %"Slice(UInt8)"* %5
  store %"Slice(UInt8)" %49, %"Slice(UInt8)"* %slice1
  %50 = load i32, i32* %count
  %51 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %52 = bitcast [1 x i64]* %51 to i32*
  %53 = load i32, i32* %52
  %54 = sub i32 %50, %53
  store i32 %54, i32* %count
  br label %exit

else5:                                            ; preds = %then2
  br label %exit

exit:                                             ; preds = %else5, %then4
  br label %exit6

exit6:                                            ; preds = %else3, %exit
  %55 = load i32, i32* %count
  %56 = icmp sge i32 %55, 8192
  br i1 %56, label %then7, label %else8

then7:                                            ; preds = %exit6
  %57 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %self)
  %58 = load i32, i32* %count
  %59 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 0, i32 %58)
  store %"Slice(UInt8)" %59, %"Slice(UInt8)"* %6
  %60 = load %"Slice(UInt8)", %"Slice(UInt8)"* %6
  %61 = call i32 @"*IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %60)
  %62 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %7, i32 0, i32 0
  store i32 138, i32* %62
  %63 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %7, i32 0, i32 1
  %64 = bitcast [1 x i64]* %63 to i32*
  store i32 %61, i32* %64
  %65 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %7
  ret %"(Int32 | Nil)" %65

else8:                                            ; preds = %exit6
  %66 = load i32, i32* %count
  %67 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  %68 = load i32, i32* %67
  %69 = sub i32 8192, %68
  %70 = icmp sgt i32 %66, %69
  br i1 %70, label %then9, label %else10

then9:                                            ; preds = %else8
  %71 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %self)
  br label %exit11

else10:                                           ; preds = %else8
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %72 = call i8* @"*IO::FileDescriptor@IO::Buffered#out_buffer:Pointer(UInt8)"(%"IO::FileDescriptor"* %self)
  %73 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  %74 = load i32, i32* %73
  %75 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %72, i32 %74)
  %76 = load i32, i32* %count
  %77 = call i8* @"*Slice(UInt8)@Slice(T)#copy_to<Pointer(UInt8), Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i8* %75, i32 %76)
  %78 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  %79 = load i32, i32* %78
  %80 = load i32, i32* %count
  %81 = add i32 %79, %80
  %82 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  store i32 %81, i32* %82
  %83 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %8, i32 0, i32 0
  store i32 0, i32* %83
  %84 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %8, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %84
  %85 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %8
  ret %"(Int32 | Nil)" %85
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#check_open:Nil"(%"IO::FileDescriptor"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 18
  %1 = load i1, i1* %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %"IO::Error"* @"*IO::Error@Exception::new<String>:IO::Error"(%String* bitcast ({ i32, i32, i32, [14 x i8] }* @"'closed stream'" to %String*))
  call void @"*raise<IO::Error>:NoReturn"(%"IO::Error"* %2)
  unreachable

else:                                             ; preds = %entry
  ret void
}

; Function Attrs: uwtable
define internal %"IO::Error"* @"*IO::Error@Exception::new<String>:IO::Error"(%String* %__arg0) #0 {
alloca:
  %_ = alloca %"IO::Error"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"IO::Error"* getelementptr (%"IO::Error", %"IO::Error"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"IO::Error"*
  %2 = bitcast %"IO::Error"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"IO::Error"* getelementptr (%"IO::Error", %"IO::Error"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"IO::Error", %"IO::Error"* %1, i32 0, i32 0
  store i32 43, i32* %3
  store %"IO::Error"* %1, %"IO::Error"** %_
  %4 = load %"IO::Error"*, %"IO::Error"** %_
  call void @"*IO::Error@Exception#initialize<String>:Nil"(%"IO::Error"* %4, %String* %__arg0)
  %5 = load %"IO::Error"*, %"IO::Error"** %_
  ret %"IO::Error"* %5
}

; Function Attrs: uwtable
define internal void @"*IO::Error@Exception#initialize<String>:Nil"(%"IO::Error"* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"IO::Error", %"IO::Error"* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %"IO::Error", %"IO::Error"* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<IO::Error>:NoReturn"(%"IO::Error"* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*IO::Error@Exception#callstack=<CallStack>:CallStack"(%"IO::Error"* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %"IO::Error"* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 43, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*IO::Error@Exception#callstack=<CallStack>:CallStack"(%"IO::Error"* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %"IO::Error", %"IO::Error"* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %slice) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %count = alloca i32
  %total = alloca i32
  %writers = alloca %"Deque(Fiber)"*
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %bytes_written = alloca i64
  %i = alloca i32
  %1 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %2 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %3 = alloca %"Slice(UInt8)"
  %4 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %5 = alloca %"(Bool | Deque(Fiber) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %0
  %6 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %slice1
  %7 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %8 = load i32, i32* %7
  store i32 %8, i32* %count
  %9 = load i32, i32* %count
  store i32 %9, i32* %total
  store i32 0, i32* %i
  br label %while

rescue:                                           ; preds = %invoke_out19, %else17, %then16, %then12, %else3, %body
  %10 = landingpad %landing_pad
          cleanup
  %11 = extractvalue %landing_pad %10, 0
  %12 = extractvalue %landing_pad %10, 1
  %13 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 20
  %14 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %13
  store %"Deque(Fiber)"* %14, %"Deque(Fiber)"** %writers
  %15 = icmp ne %"Deque(Fiber)"* %14, null
  br i1 %15, label %then23, label %else24

while:                                            ; preds = %exit15, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %16 = load i32, i32* %i
  %17 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 16
  %18 = load i32, i32* %17
  %19 = load i32, i32* %count
  %20 = invoke i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i32 %19)
          to label %invoke_out unwind label %rescue

exit:                                             ; preds = %while
  unreachable

invoke_out:                                       ; preds = %body
  %21 = load i32, i32* %count
  %22 = sext i32 %21 to i64
  %23 = call i64 @write(i32 %18, i8* %20, i64 %22)
  store i64 %23, i64* %bytes_written
  %24 = load i64, i64* %bytes_written
  %25 = icmp ne i64 %24, -1
  br i1 %25, label %then, label %else

then:                                             ; preds = %invoke_out
  %26 = load i32, i32* %count
  %27 = load i64, i64* %bytes_written
  %28 = sext i32 %26 to i64
  %29 = sub i64 %28, %27
  %30 = trunc i64 %29 to i32
  store i32 %30, i32* %count
  %31 = load i32, i32* %count
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %then2, label %else3

else:                                             ; preds = %invoke_out
  %33 = call i32 @"*Errno::value:Int32"()
  %34 = icmp eq i32 %33, 35
  br i1 %34, label %then12, label %else13

then2:                                            ; preds = %then
  %35 = load i32, i32* %total
  %36 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 20
  %37 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %36
  store %"Deque(Fiber)"* %37, %"Deque(Fiber)"** %writers
  %38 = icmp ne %"Deque(Fiber)"* %37, null
  br i1 %38, label %then6, label %else7

else3:                                            ; preds = %then
  %39 = load i64, i64* %bytes_written
  %40 = invoke %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int64>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i64 %39)
          to label %invoke_out10 unwind label %rescue

then4:                                            ; preds = %exit8
  call void @"*IO::FileDescriptor#add_write_event:Nil"(%"IO::FileDescriptor"* %self)
  br label %exit9

else5:                                            ; preds = %exit8
  br label %exit9

then6:                                            ; preds = %then2
  %41 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %42 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %41)
  %43 = xor i1 %42, true
  %44 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %1, i32 0, i32 0
  store i32 147, i32* %44
  %45 = zext i1 %43 to i64
  %46 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %1, i32 0, i32 1
  %47 = bitcast [1 x i64]* %46 to i64*
  store i64 %45, i64* %47
  br label %exit8

else7:                                            ; preds = %then2
  %48 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %49 = icmp eq %"Deque(Fiber)"* %48, null
  %50 = select i1 %49, i32 0, i32 94
  %51 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %2, i32 0, i32 0
  store i32 %50, i32* %51
  %52 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %2, i32 0, i32 1
  %53 = bitcast [1 x i64]* %52 to %"Deque(Fiber)"**
  store %"Deque(Fiber)"* %48, %"Deque(Fiber)"** %53
  br label %exit8

exit8:                                            ; preds = %else7, %then6
  %54 = phi %"(Bool | Deque(Fiber) | Nil)"* [ %1, %then6 ], [ %2, %else7 ]
  %55 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %54, i32 0, i32 0
  %56 = load i32, i32* %55
  %57 = icmp eq i32 %56, 0
  %58 = xor i1 %57, true
  %59 = and i1 true, %58
  %60 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %54, i32 0, i32 1
  %61 = bitcast [1 x i64]* %60 to i1*
  %62 = load i1, i1* %61
  %63 = icmp eq i32 %56, 147
  %64 = xor i1 %62, true
  %65 = and i1 %63, %64
  %66 = xor i1 %65, true
  %67 = and i1 %59, %66
  br i1 %67, label %then4, label %else5

exit9:                                            ; preds = %else5, %then4
  ret i32 %35

invoke_out10:                                     ; preds = %else3
  store %"Slice(UInt8)" %40, %"Slice(UInt8)"* %3
  %68 = load %"Slice(UInt8)", %"Slice(UInt8)"* %3
  store %"Slice(UInt8)" %68, %"Slice(UInt8)"* %slice1
  br label %exit11

exit11:                                           ; preds = %invoke_out10
  %69 = phi %"Slice(UInt8)"* [ %3, %invoke_out10 ]
  br label %exit15

then12:                                           ; preds = %else
  invoke void @"*IO::FileDescriptor#wait_writable:Nil"(%"IO::FileDescriptor"* %self)
          to label %invoke_out14 unwind label %rescue

else13:                                           ; preds = %else
  %70 = call i32 @"*Errno::value:Int32"()
  %71 = icmp eq i32 %70, 9
  br i1 %71, label %then16, label %else17

invoke_out14:                                     ; preds = %then12
  br label %exit15

exit15:                                           ; preds = %exit11, %invoke_out14
  %72 = load i32, i32* %i
  %73 = add i32 %72, 1
  store i32 %73, i32* %i
  br label %while

then16:                                           ; preds = %else13
  %74 = call %"IO::Error"* @"*IO::Error@Exception::new<String>:IO::Error"(%String* bitcast ({ i32, i32, i32, [26 x i8] }* @"'File not open for w...'" to %String*))
  invoke void @"*raise<IO::Error>:NoReturn"(%"IO::Error"* %74)
          to label %invoke_out18 unwind label %rescue

else17:                                           ; preds = %else13
  %75 = invoke %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Error writing file'" to %String*))
          to label %invoke_out19 unwind label %rescue

invoke_out18:                                     ; preds = %then16
  unreachable

invoke_out19:                                     ; preds = %else17
  invoke void @"*raise<Errno>:NoReturn"(%Errno* %75)
          to label %invoke_out20 unwind label %rescue

invoke_out20:                                     ; preds = %invoke_out19
  unreachable

then21:                                           ; preds = %exit25
  call void @"*IO::FileDescriptor#add_write_event:Nil"(%"IO::FileDescriptor"* %self)
  br label %exit26

else22:                                           ; preds = %exit25
  br label %exit26

then23:                                           ; preds = %rescue
  %76 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %77 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %76)
  %78 = xor i1 %77, true
  %79 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %4, i32 0, i32 0
  store i32 147, i32* %79
  %80 = zext i1 %78 to i64
  %81 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %4, i32 0, i32 1
  %82 = bitcast [1 x i64]* %81 to i64*
  store i64 %80, i64* %82
  br label %exit25

else24:                                           ; preds = %rescue
  %83 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %84 = icmp eq %"Deque(Fiber)"* %83, null
  %85 = select i1 %84, i32 0, i32 94
  %86 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %5, i32 0, i32 0
  store i32 %85, i32* %86
  %87 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %5, i32 0, i32 1
  %88 = bitcast [1 x i64]* %87 to %"Deque(Fiber)"**
  store %"Deque(Fiber)"* %83, %"Deque(Fiber)"** %88
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %89 = phi %"(Bool | Deque(Fiber) | Nil)"* [ %4, %then23 ], [ %5, %else24 ]
  %90 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %89, i32 0, i32 0
  %91 = load i32, i32* %90
  %92 = icmp eq i32 %91, 0
  %93 = xor i1 %92, true
  %94 = and i1 true, %93
  %95 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %89, i32 0, i32 1
  %96 = bitcast [1 x i64]* %95 to i1*
  %97 = load i1, i1* %96
  %98 = icmp eq i32 %91, 147
  %99 = xor i1 %97, true
  %100 = and i1 %98, %99
  %101 = xor i1 %100, true
  %102 = and i1 %94, %101
  br i1 %102, label %then21, label %else22

exit26:                                           ; preds = %else22, %then21
  %103 = bitcast i8* %11 to %"struct.LibUnwind::Exception"*
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %103)
  unreachable
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor#add_write_event:Nil"(%"IO::FileDescriptor"* %self) #0 {
alloca:
  %timeout = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 11
  %1 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %0
  store %"(Float64 | Nil)" %1, %"(Float64 | Nil)"* %timeout
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout
  call void @"*IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(%"IO::FileDescriptor"* %self, %"(Float64 | Nil)" %2)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(%"IO::FileDescriptor"* %self, %"(Float64 | Nil)" %timeout) #0 {
alloca:
  %__temp_52 = alloca %"(Event::Event | Nil)"
  %event = alloca %"Event::Event.6"
  %timeout1 = alloca %"(Float64 | Nil)"
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Float64 | Nil)" %timeout, %"(Float64 | Nil)"* %timeout1
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 17
  %2 = load i1, i1* %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 13
  %4 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %3
  store %"(Event::Event | Nil)" %4, %"(Event::Event | Nil)"* %__temp_52
  %5 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %3, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp eq i32 %6, 0
  %8 = xor i1 %7, true
  %9 = and i1 true, %8
  br i1 %9, label %then2, label %else3

then2:                                            ; preds = %else
  %10 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %__temp_52, i32 0, i32 1
  %11 = bitcast [2 x i64]* %10 to %"Event::Event.6"*
  br label %exit

else3:                                            ; preds = %else
  %12 = call %"Event::Event.6" @"*Scheduler::create_fd_write_event<IO::FileDescriptor>:Event::Event"(%"IO::FileDescriptor"* %self)
  store %"Event::Event.6" %12, %"Event::Event.6"* %0
  %13 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 13
  %14 = load %"Event::Event.6", %"Event::Event.6"* %0
  %15 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %13, i32 0, i32 0
  store i32 359, i32* %15
  %16 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %13, i32 0, i32 1
  %17 = bitcast [2 x i64]* %16 to %"Event::Event.6"*
  store %"Event::Event.6" %14, %"Event::Event.6"* %17
  br label %exit

exit:                                             ; preds = %else3, %then2
  %18 = phi %"Event::Event.6"* [ %11, %then2 ], [ %0, %else3 ]
  %19 = load %"Event::Event.6", %"Event::Event.6"* %18
  store %"Event::Event.6" %19, %"Event::Event.6"* %event
  %20 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout1
  %21 = call i32 @"*Event::Event#add<(Float64 | Nil)>:Int32"(%"Event::Event.6"* %event, %"(Float64 | Nil)" %20)
  ret void
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_fd_write_event<IO::FileDescriptor>:Event::Event"(%"IO::FileDescriptor"* %io) #0 {
alloca:
  %edge_triggered = alloca i1
  %flags = alloca i16
  %event = alloca %"Event::Event.6"
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %edge_triggered
  store i16 4, i16* %flags
  %2 = load i1, i1* %edge_triggered
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i16, i16* %flags
  %4 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 16, i16 32)
  %5 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %3, i16 %4)
  store i16 %5, i16* %flags
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %io, i32 0, i32 16
  %8 = load i32, i32* %7
  %9 = load i16, i16* %flags
  %10 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~proc3Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34" to i8*), i8** %10
  %11 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %11
  %12 = load %"->", %"->"* %0
  %13 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, IO::FileDescriptor, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %6, i32 %8, i16 %9, %"IO::FileDescriptor"* %io, %"->" %12)
  store %"Event::Event.6" %13, %"Event::Event.6"* %1
  %14 = load %"Event::Event.6", %"Event::Event.6"* %1
  store %"Event::Event.6" %14, %"Event::Event.6"* %event
  %15 = load %"Event::Event.6", %"Event::Event.6"* %event
  ret %"Event::Event.6" %15
}

; Function Attrs: uwtable
define internal void @"~proc3Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34"(i32 %s, i16 %flags, i8* %data) #0 {
alloca:
  %fd_io = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to i32*
  store i32* %0, i32** %fd_io
  %1 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 4)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %2)
  br label %exit

else:                                             ; preds = %entry
  %3 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 1)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret void

then1:                                            ; preds = %else
  %4 = load i32*, i32** %fd_io
  %5 = call i1 @"*IO::FileDescriptor+@IO::FileDescriptor#write_timed_out=<Bool>:Bool"(i32* %4, i1 true)
  %6 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %6)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  br label %exit
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor#wait_writable:Nil"(%"IO::FileDescriptor"* %self) #0 {
alloca:
  %timeout = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 11
  %1 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %0
  store %"(Float64 | Nil)" %1, %"(Float64 | Nil)"* %timeout
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout
  call void @"*IO::FileDescriptor#wait_writable<(Float64 | Nil)>:Nil"(%"IO::FileDescriptor"* %self, %"(Float64 | Nil)" %2)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor#wait_writable<(Float64 | Nil)>:Nil"(%"IO::FileDescriptor"* %self, %"(Float64 | Nil)" %timeout) #0 {
alloca:
  %timeout1 = alloca %"(Float64 | Nil)"
  %err = alloca %"IO::Timeout"*
  %timeout2 = alloca %"(Float64 | Nil)"
  %msg = alloca %String*
  %__temp_51 = alloca %"Deque(Fiber)"*
  %writers = alloca %"Deque(Fiber)"*
  %0 = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Float64 | Nil)" %timeout, %"(Float64 | Nil)"* %timeout1
  %1 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout1
  store %"(Float64 | Nil)" %1, %"(Float64 | Nil)"* %0
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %0
  store %"(Float64 | Nil)" %2, %"(Float64 | Nil)"* %timeout2
  store %String* bitcast ({ i32, i32, i32, [16 x i8] }* @"'write timed out'" to %String*), %String** %msg
  %3 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 20
  %4 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %3
  store %"Deque(Fiber)"* %4, %"Deque(Fiber)"** %__temp_51
  %5 = icmp ne %"Deque(Fiber)"* %4, null
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %6 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %__temp_51
  br label %exit

else:                                             ; preds = %entry
  %7 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)::new:Deque(Fiber)"(i32 547)
  %8 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 20
  store %"Deque(Fiber)"* %7, %"Deque(Fiber)"** %8
  br label %exit

exit:                                             ; preds = %else, %then
  %9 = phi %"Deque(Fiber)"* [ %6, %then ], [ %7, %else ]
  store %"Deque(Fiber)"* %9, %"Deque(Fiber)"** %writers
  %10 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %11 = call %Fiber* @"*Fiber::current:Fiber"()
  %12 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#<<<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %10, %Fiber* %11)
  %13 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout2
  call void @"*IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(%"IO::FileDescriptor"* %self, %"(Float64 | Nil)" %13)
  call void @"*Scheduler::reschedule:Nil"()
  %14 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 15
  %15 = load i1, i1* %14
  br i1 %15, label %then3, label %else4

then3:                                            ; preds = %exit
  %16 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 15
  store i1 false, i1* %16
  %17 = load %String*, %String** %msg
  %18 = call %"IO::Timeout"* @"*IO::Timeout@Exception::new<String>:IO::Timeout"(%String* %17)
  store %"IO::Timeout"* %18, %"IO::Timeout"** %err
  %19 = load %"IO::Timeout"*, %"IO::Timeout"** %err
  call void @"*raise<IO::Timeout>:NoReturn"(%"IO::Timeout"* %19)
  unreachable

else4:                                            ; preds = %exit
  ret void
}

; Function Attrs: uwtable
define internal %"IO::Timeout"* @"*IO::Timeout@Exception::new<String>:IO::Timeout"(%String* %__arg0) #0 {
alloca:
  %_ = alloca %"IO::Timeout"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"IO::Timeout"* getelementptr (%"IO::Timeout", %"IO::Timeout"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"IO::Timeout"*
  %2 = bitcast %"IO::Timeout"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"IO::Timeout"* getelementptr (%"IO::Timeout", %"IO::Timeout"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"IO::Timeout", %"IO::Timeout"* %1, i32 0, i32 0
  store i32 41, i32* %3
  store %"IO::Timeout"* %1, %"IO::Timeout"** %_
  %4 = load %"IO::Timeout"*, %"IO::Timeout"** %_
  call void @"*IO::Timeout@Exception#initialize<String>:Nil"(%"IO::Timeout"* %4, %String* %__arg0)
  %5 = load %"IO::Timeout"*, %"IO::Timeout"** %_
  ret %"IO::Timeout"* %5
}

; Function Attrs: uwtable
define internal void @"*IO::Timeout@Exception#initialize<String>:Nil"(%"IO::Timeout"* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"IO::Timeout", %"IO::Timeout"* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %"IO::Timeout", %"IO::Timeout"* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<IO::Timeout>:NoReturn"(%"IO::Timeout"* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*IO::Timeout@Exception#callstack=<CallStack>:CallStack"(%"IO::Timeout"* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %"IO::Timeout"* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 41, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*IO::Timeout@Exception#callstack=<CallStack>:CallStack"(%"IO::Timeout"* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %"IO::Timeout", %"IO::Timeout"* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Slice(UInt8)@Indexable(T)#rindex<UInt8>:(Int32 | Nil)"(%"Slice(UInt8)"* %self, i8 %value) #0 {
alloca:
  %offset = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = sub i32 %2, 1
  store i32 %3, i32* %offset
  %4 = load i32, i32* %offset
  %5 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Indexable(T)#rindex<UInt8, Int32>:(Int32 | Nil)"(%"Slice(UInt8)"* %self, i8 %value, i32 %4)
  store %"(Int32 | Nil)" %5, %"(Int32 | Nil)"* %0
  %6 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %6
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Slice(UInt8)@Indexable(T)#rindex<UInt8, Int32>:(Int32 | Nil)"(%"Slice(UInt8)"* %self, i8 %value, i32 %offset) #0 {
alloca:
  %elem = alloca i8
  %offset1 = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  %i = alloca i32
  %to = alloca i32
  %x = alloca i32
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %offset, i32* %offset1
  %3 = load i32, i32* %offset1
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = load i32, i32* %offset1
  %6 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %7 = load i32, i32* %6
  %8 = add i32 %5, %7
  store i32 %8, i32* %offset1
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %9 = load i32, i32* %offset1
  %10 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %11 = load i32, i32* %10
  %12 = icmp sge i32 %9, %11
  br i1 %12, label %then2, label %else3

then2:                                            ; preds = %exit
  %13 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %13
  %14 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %14
  br label %exit4

else3:                                            ; preds = %exit
  %15 = load i32, i32* %offset1
  store i32 0, i32* %to
  store i32 %15, i32* %x
  br label %while

exit4:                                            ; preds = %exit5, %then6, %then2
  %16 = phi %"(Int32 | Nil)"* [ %0, %then2 ], [ %1, %then6 ], [ %2, %exit5 ]
  %17 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %16
  ret %"(Int32 | Nil)" %17

while:                                            ; preds = %else7, %else3
  %18 = load i32, i32* %x
  %19 = load i32, i32* %to
  %20 = icmp sge i32 %18, %19
  br i1 %20, label %body, label %exit5

body:                                             ; preds = %while
  %21 = load i32, i32* %x
  store i32 %21, i32* %i
  %22 = load i32, i32* %i
  %23 = call i8 @"*Slice(UInt8)@Slice(T)#unsafe_at<Int32>:UInt8"(%"Slice(UInt8)"* %self, i32 %22)
  store i8 %23, i8* %elem
  %24 = load i8, i8* %elem
  %25 = icmp eq i8 %24, %value
  br i1 %25, label %then6, label %else7

exit5:                                            ; preds = %while
  %26 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 0
  store i32 0, i32* %26
  %27 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %27
  br label %exit4

then6:                                            ; preds = %body
  %28 = load i32, i32* %i
  %29 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 138, i32* %29
  %30 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  %31 = bitcast [1 x i64]* %30 to i32*
  store i32 %28, i32* %31
  br label %exit4

else7:                                            ; preds = %body
  %32 = load i32, i32* %x
  %33 = sub i32 %32, 1
  store i32 %33, i32* %x
  br label %while
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*Slice(UInt8)@Slice(T)#unsafe_at<Int32>:UInt8"(%"Slice(UInt8)"* %self, i32 %index) #4 {
entry:
  %0 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %1 = load i8*, i8** %0
  %2 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %1, i32 %index)
  ret i8 %2
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  %2 = load i32, i32* %1
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = call i8* @"*IO::FileDescriptor@IO::Buffered#out_buffer:Pointer(UInt8)"(%"IO::FileDescriptor"* %self)
  %5 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  %6 = load i32, i32* %5
  %7 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %4, i32 %6)
  store %"Slice(UInt8)" %7, %"Slice(UInt8)"* %0
  %8 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %9 = call i32 @"*IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %8)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %10 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  store i32 0, i32* %10
  ret %"IO::FileDescriptor"* %self
}

; Function Attrs: uwtable
define internal i8* @"*IO::FileDescriptor@IO::Buffered#out_buffer:Pointer(UInt8)"(%"IO::FileDescriptor"* %self) #0 {
alloca:
  %__temp_53 = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 9
  %1 = load i8*, i8** %0
  store i8* %1, i8** %__temp_53
  %2 = icmp ne i8* %1, null
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i8*, i8** %__temp_53
  br label %exit

else:                                             ; preds = %entry
  %4 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 8192)
  %5 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 9
  store i8* %4, i8** %5
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i8* [ %3, %then ], [ %4, %else ]
  ret i8* %6
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %self, i32 %offset) #0 {
alloca:
  %__temp_54 = alloca i1
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = icmp sle i32 0, %offset
  store i1 %1, i1* %__temp_54
  br i1 %1, label %then1, label %else2

then:                                             ; preds = %exit
  br label %exit3

else:                                             ; preds = %exit
  %2 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %2)
  unreachable

then1:                                            ; preds = %entry
  %3 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = icmp sle i32 %offset, %4
  br label %exit

else2:                                            ; preds = %entry
  %6 = load i1, i1* %__temp_54
  br label %exit

exit:                                             ; preds = %else2, %then1
  %7 = phi i1 [ %5, %then1 ], [ %6, %else2 ]
  br i1 %7, label %then, label %else

exit3:                                            ; preds = %then
  %8 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %9 = load i8*, i8** %8
  %10 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %9, i32 %offset)
  %11 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %12 = load i32, i32* %11
  %13 = sub i32 %12, %offset
  %14 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %10, i32 %13)
  store %"Slice(UInt8)" %14, %"Slice(UInt8)"* %0
  %15 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %15
}

; Function Attrs: uwtable
define internal i1 @"*String#ends_with?<Char>:Bool"(%String* %self, i32 %char) #0 {
alloca:
  %__temp_55 = alloca i1
  %__temp_57 = alloca %"Tuple(StaticArray(UInt8, 4), Int32)"
  %bytes = alloca [4 x i8]
  %count = alloca i32
  %0 = alloca %"Tuple(StaticArray(UInt8, 4), Int32)"
  %i = alloca i32
  %i8 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %2 = load i32, i32* %1
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  ret i1 false

exit:                                             ; preds = %then
  %4 = call i1 @"*Char#ascii?:Bool"(i32 %char)
  store i1 %4, i1* %__temp_55
  br i1 %4, label %then3, label %else4

then1:                                            ; preds = %exit5
  %5 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %6 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = sub i32 %7, 1
  %9 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %5, i32 %8)
  %10 = zext i8 %9 to i32
  %11 = icmp eq i32 %10, %char
  ret i1 %11

else2:                                            ; preds = %exit5
  %12 = call %"Tuple(StaticArray(UInt8, 4), Int32)" @"*String::char_bytes_and_bytesize<Char>:Tuple(StaticArray(UInt8, 4), Int32)"(i32 %char)
  store %"Tuple(StaticArray(UInt8, 4), Int32)" %12, %"Tuple(StaticArray(UInt8, 4), Int32)"* %0
  %13 = load %"Tuple(StaticArray(UInt8, 4), Int32)", %"Tuple(StaticArray(UInt8, 4), Int32)"* %0
  store %"Tuple(StaticArray(UInt8, 4), Int32)" %13, %"Tuple(StaticArray(UInt8, 4), Int32)"* %__temp_57
  %14 = getelementptr inbounds %"Tuple(StaticArray(UInt8, 4), Int32)", %"Tuple(StaticArray(UInt8, 4), Int32)"* %__temp_57, i32 0, i32 0
  %15 = load [4 x i8], [4 x i8]* %14
  store [4 x i8] %15, [4 x i8]* %bytes
  %16 = getelementptr inbounds %"Tuple(StaticArray(UInt8, 4), Int32)", %"Tuple(StaticArray(UInt8, 4), Int32)"* %__temp_57, i32 0, i32 1
  %17 = load i32, i32* %16
  store i32 %17, i32* %count
  %18 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %19 = load i32, i32* %18
  %20 = load i32, i32* %count
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %then6, label %else7

then3:                                            ; preds = %exit
  %22 = load i1, i1* %__temp_55
  br label %exit5

else4:                                            ; preds = %exit
  %23 = call i1 @"*String#ascii_only?:Bool"(%String* %self)
  br label %exit5

exit5:                                            ; preds = %else4, %then3
  %24 = phi i1 [ %22, %then3 ], [ %23, %else4 ]
  br i1 %24, label %then1, label %else2

then6:                                            ; preds = %else2
  ret i1 false

else7:                                            ; preds = %else2
  %25 = load i32, i32* %count
  %26 = xor i32 %25, %25
  store i32 %26, i32* %i8
  br label %while

while:                                            ; preds = %exit12, %else7
  %27 = load i32, i32* %i8
  %28 = icmp slt i32 %27, %25
  br i1 %28, label %body, label %exit9

body:                                             ; preds = %while
  %29 = load i32, i32* %i8
  store i32 %29, i32* %i
  %30 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %31 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %32 = load i32, i32* %31
  %33 = load i32, i32* %count
  %34 = sub i32 %32, %33
  %35 = load i32, i32* %i
  %36 = add i32 %34, %35
  %37 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %30, i32 %36)
  %38 = load i32, i32* %i
  %39 = call i8 @"*StaticArray(UInt8, 4)@Indexable(T)#[]<Int32>:UInt8"([4 x i8]* %bytes, i32 %38)
  %40 = icmp eq i8 %37, %39
  br i1 %40, label %then10, label %else11

exit9:                                            ; preds = %while
  ret i1 true

then10:                                           ; preds = %body
  br label %exit12

else11:                                           ; preds = %body
  ret i1 false

exit12:                                           ; preds = %then10
  %41 = load i32, i32* %i8
  %42 = add i32 %41, 1
  store i32 %42, i32* %i8
  br label %while
}

; Function Attrs: uwtable
define internal i1 @"*String#ascii_only?:Bool"(%String* %self) #0 {
entry:
  %0 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = call i32 @"*String#size:Int32"(%String* %self)
  %3 = icmp eq i32 %1, %2
  ret i1 %3
}

; Function Attrs: uwtable
define internal i32 @"*String#size:Int32"(%String* %self) #0 {
alloca:
  %__temp_56 = alloca i1
  %byte_index = alloca i32
  %char_index = alloca i32
  %c = alloca i8
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %String, %String* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp sgt i32 %1, 0
  store i1 %2, i1* %__temp_56
  br i1 %2, label %then1, label %else2

then:                                             ; preds = %exit
  %3 = getelementptr inbounds %String, %String* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  ret i32 %4

else:                                             ; preds = %exit
  store i32 0, i32* %byte_index
  store i32 0, i32* %char_index
  br label %while

then1:                                            ; preds = %entry
  %5 = load i1, i1* %__temp_56
  br label %exit

else2:                                            ; preds = %entry
  %6 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = icmp eq i32 %7, 0
  br label %exit

exit:                                             ; preds = %else2, %then1
  %9 = phi i1 [ %5, %then1 ], [ %8, %else2 ]
  br i1 %9, label %then, label %else

while:                                            ; preds = %exit6, %else
  %10 = load i32, i32* %byte_index
  %11 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %12 = load i32, i32* %11
  %13 = icmp slt i32 %10, %12
  br i1 %13, label %body, label %exit3

body:                                             ; preds = %while
  %14 = load i32, i32* %byte_index
  %15 = load i32, i32* %char_index
  %16 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %17 = load i32, i32* %byte_index
  %18 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %16, i32 %17)
  store i8 %18, i8* %c
  %19 = load i8, i8* %c
  %20 = zext i8 %19 to i32
  %21 = icmp slt i32 %20, 128
  %22 = and i1 true, %21
  br i1 %22, label %then4, label %else5

exit3:                                            ; preds = %while
  %23 = load i32, i32* %char_index
  %24 = getelementptr inbounds %String, %String* %self, i32 0, i32 2
  store i32 %23, i32* %24
  ret i32 %23

then4:                                            ; preds = %body
  %25 = load i32, i32* %byte_index
  %26 = add i32 %25, 1
  store i32 %26, i32* %byte_index
  br label %exit6

else5:                                            ; preds = %body
  %27 = load i8, i8* %c
  %28 = zext i8 %27 to i32
  %29 = icmp slt i32 %28, 224
  %30 = and i1 true, %29
  br i1 %30, label %then7, label %else8

exit6:                                            ; preds = %exit9, %then4
  %31 = phi i32 [ %26, %then4 ], [ %40, %exit9 ]
  %32 = load i32, i32* %char_index
  %33 = add i32 %32, 1
  store i32 %33, i32* %char_index
  br label %while

then7:                                            ; preds = %else5
  %34 = load i32, i32* %byte_index
  %35 = add i32 %34, 2
  store i32 %35, i32* %byte_index
  br label %exit9

else8:                                            ; preds = %else5
  %36 = load i8, i8* %c
  %37 = zext i8 %36 to i32
  %38 = icmp slt i32 %37, 240
  %39 = and i1 true, %38
  br i1 %39, label %then10, label %else11

exit9:                                            ; preds = %exit12, %then7
  %40 = phi i32 [ %35, %then7 ], [ %45, %exit12 ]
  br label %exit6

then10:                                           ; preds = %else8
  %41 = load i32, i32* %byte_index
  %42 = add i32 %41, 3
  store i32 %42, i32* %byte_index
  br label %exit12

else11:                                           ; preds = %else8
  %43 = load i32, i32* %byte_index
  %44 = add i32 %43, 4
  store i32 %44, i32* %byte_index
  br label %exit12

exit12:                                           ; preds = %else11, %then10
  %45 = phi i32 [ %42, %then10 ], [ %44, %else11 ]
  br label %exit9
}

; Function Attrs: uwtable
define internal %"Tuple(StaticArray(UInt8, 4), Int32)" @"*String::char_bytes_and_bytesize<Char>:Tuple(StaticArray(UInt8, 4), Int32)"(i32 %char) #0 {
alloca:
  %bytes = alloca [4 x i8]
  %bytesize = alloca i32
  %byte = alloca i8
  %c = alloca i32
  %0 = alloca %"Tuple(StaticArray(UInt8, 4), Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %bytesize
  store i32 %char, i32* %c
  %1 = load i32, i32* %c
  %2 = icmp slt i32 %1, 128
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i32, i32* %c
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %byte
  %5 = load i32, i32* %bytesize
  %6 = load i8, i8* %byte
  %7 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %5, i8 %6)
  %8 = load i32, i32* %bytesize
  %9 = add i32 %8, 1
  store i32 %9, i32* %bytesize
  br label %exit

else:                                             ; preds = %entry
  %10 = load i32, i32* %c
  %11 = icmp sle i32 %10, 2047
  br i1 %11, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %12 = phi i32 [ %9, %then ], [ %38, %exit3 ]
  %13 = getelementptr inbounds %"Tuple(StaticArray(UInt8, 4), Int32)", %"Tuple(StaticArray(UInt8, 4), Int32)"* %0, i32 0, i32 0
  %14 = load [4 x i8], [4 x i8]* %bytes
  store [4 x i8] %14, [4 x i8]* %13
  %15 = load i32, i32* %bytesize
  %16 = getelementptr inbounds %"Tuple(StaticArray(UInt8, 4), Int32)", %"Tuple(StaticArray(UInt8, 4), Int32)"* %0, i32 0, i32 1
  store i32 %15, i32* %16
  %17 = load %"Tuple(StaticArray(UInt8, 4), Int32)", %"Tuple(StaticArray(UInt8, 4), Int32)"* %0
  ret %"Tuple(StaticArray(UInt8, 4), Int32)" %17

then1:                                            ; preds = %else
  %18 = load i32, i32* %c
  %19 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %18, i32 6)
  %20 = or i32 192, %19
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %byte
  %22 = load i32, i32* %bytesize
  %23 = load i8, i8* %byte
  %24 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %22, i8 %23)
  %25 = load i32, i32* %bytesize
  %26 = add i32 %25, 1
  store i32 %26, i32* %bytesize
  %27 = load i32, i32* %c
  %28 = and i32 %27, 63
  %29 = or i32 128, %28
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %byte
  %31 = load i32, i32* %bytesize
  %32 = load i8, i8* %byte
  %33 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %31, i8 %32)
  %34 = load i32, i32* %bytesize
  %35 = add i32 %34, 1
  store i32 %35, i32* %bytesize
  br label %exit3

else2:                                            ; preds = %else
  %36 = load i32, i32* %c
  %37 = icmp sle i32 %36, 65535
  br i1 %37, label %then4, label %else5

exit3:                                            ; preds = %exit6, %then1
  %38 = phi i32 [ %35, %then1 ], [ %69, %exit6 ]
  br label %exit

then4:                                            ; preds = %else2
  %39 = load i32, i32* %c
  %40 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %39, i32 12)
  %41 = or i32 224, %40
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %byte
  %43 = load i32, i32* %bytesize
  %44 = load i8, i8* %byte
  %45 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %43, i8 %44)
  %46 = load i32, i32* %bytesize
  %47 = add i32 %46, 1
  store i32 %47, i32* %bytesize
  %48 = load i32, i32* %c
  %49 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %48, i32 6)
  %50 = and i32 %49, 63
  %51 = or i32 128, %50
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %byte
  %53 = load i32, i32* %bytesize
  %54 = load i8, i8* %byte
  %55 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %53, i8 %54)
  %56 = load i32, i32* %bytesize
  %57 = add i32 %56, 1
  store i32 %57, i32* %bytesize
  %58 = load i32, i32* %c
  %59 = and i32 %58, 63
  %60 = or i32 128, %59
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %byte
  %62 = load i32, i32* %bytesize
  %63 = load i8, i8* %byte
  %64 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %62, i8 %63)
  %65 = load i32, i32* %bytesize
  %66 = add i32 %65, 1
  store i32 %66, i32* %bytesize
  br label %exit6

else5:                                            ; preds = %else2
  %67 = load i32, i32* %c
  %68 = icmp sle i32 %67, 1114111
  br i1 %68, label %then7, label %else8

exit6:                                            ; preds = %exit9, %then4
  %69 = phi i32 [ %66, %then4 ], [ %114, %exit9 ]
  br label %exit3

then7:                                            ; preds = %else5
  %70 = load i32, i32* %c
  %71 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %70, i32 18)
  %72 = or i32 240, %71
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %byte
  %74 = load i32, i32* %bytesize
  %75 = load i8, i8* %byte
  %76 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %74, i8 %75)
  %77 = load i32, i32* %bytesize
  %78 = add i32 %77, 1
  store i32 %78, i32* %bytesize
  %79 = load i32, i32* %c
  %80 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %79, i32 12)
  %81 = and i32 %80, 63
  %82 = or i32 128, %81
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %byte
  %84 = load i32, i32* %bytesize
  %85 = load i8, i8* %byte
  %86 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %84, i8 %85)
  %87 = load i32, i32* %bytesize
  %88 = add i32 %87, 1
  store i32 %88, i32* %bytesize
  %89 = load i32, i32* %c
  %90 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %89, i32 6)
  %91 = and i32 %90, 63
  %92 = or i32 128, %91
  %93 = trunc i32 %92 to i8
  store i8 %93, i8* %byte
  %94 = load i32, i32* %bytesize
  %95 = load i8, i8* %byte
  %96 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %94, i8 %95)
  %97 = load i32, i32* %bytesize
  %98 = add i32 %97, 1
  store i32 %98, i32* %bytesize
  %99 = load i32, i32* %c
  %100 = and i32 %99, 63
  %101 = or i32 128, %100
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %byte
  %103 = load i32, i32* %bytesize
  %104 = load i8, i8* %byte
  %105 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %bytes, i32 %103, i8 %104)
  %106 = load i32, i32* %bytesize
  %107 = add i32 %106, 1
  store i32 %107, i32* %bytesize
  br label %exit9

else8:                                            ; preds = %else5
  %108 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %109 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %108, %String* bitcast ({ i32, i32, i32, [20 x i8] }* @"'Invalid char value ...'" to %String*))
  %110 = call %String* @"*Char#dump:String"(i32 %char)
  %111 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %109, %String* %110)
  %112 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %111)
  %113 = call %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* %112)
  call void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %113)
  unreachable

exit9:                                            ; preds = %then7
  %114 = phi i32 [ %107, %then7 ]
  br label %exit6
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*StaticArray(UInt8, 4)@Indexable(T)#[]<Int32>:UInt8"([4 x i8]* %self, i32 %index) #4 {
entry:
  %0 = call i8 @"*StaticArray(UInt8, 4)@Indexable(T)#at<Int32>:UInt8"([4 x i8]* %self, i32 %index)
  ret i8 %0
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*StaticArray(UInt8, 4)@Indexable(T)#at<Int32>:UInt8"([4 x i8]* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_58 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  store i32 %0, i32* %index2
  %1 = load i32, i32* %index2
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i32, i32* %index2
  %4 = call i32 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#size:Int32"([4 x i8]* %self)
  %5 = add i32 %3, %4
  store i32 %5, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = load i32, i32* %index2
  %7 = icmp sle i32 0, %6
  store i1 %7, i1* %__temp_58
  br i1 %7, label %then5, label %else6

then3:                                            ; preds = %exit7
  %8 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  %9 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %9)
  unreachable

then5:                                            ; preds = %exit
  %10 = load i32, i32* %index2
  %11 = call i32 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#size:Int32"([4 x i8]* %self)
  %12 = icmp slt i32 %10, %11
  br label %exit7

else6:                                            ; preds = %exit
  %13 = load i1, i1* %__temp_58
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %14 = phi i1 [ %12, %then5 ], [ %13, %else6 ]
  br i1 %14, label %then3, label %else4

exit8:                                            ; preds = %then3
  %15 = phi i32 [ %8, %then3 ]
  store i32 %15, i32* %index1
  %16 = load i32, i32* %index1
  %17 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#unsafe_at<Int32>:UInt8"([4 x i8]* %self, i32 %16)
  ret i8 %17
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#unsafe_at<Int32>:UInt8"([4 x i8]* %self, i32 %index) #4 {
entry:
  %0 = call i8* @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([4 x i8]* %self)
  %1 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %0, i32 %index)
  ret i8 %1
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#puts:Nil"(%"IO::FileDescriptor"* %self) #0 {
entry:
  call void @"*IO::FileDescriptor@IO#print<Char>:Nil"(%"IO::FileDescriptor"* %self, i32 10)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#print<Char>:Nil"(%"IO::FileDescriptor"* %self, i32 %obj) #0 {
entry:
  %0 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<Char>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, i32 %obj)
  ret void
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<Char>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, i32 %obj) #0 {
entry:
  %0 = call %"(IO::FileDescriptor | Int32 | Nil)" @"*Char#to_s<IO::FileDescriptor>:(IO::FileDescriptor | Int32 | Nil)"(i32 %obj, %"IO::FileDescriptor"* %self)
  ret %"IO::FileDescriptor"* %self
}

; Function Attrs: uwtable
define internal %"(IO::FileDescriptor | Int32 | Nil)" @"*Char#to_s<IO::FileDescriptor>:(IO::FileDescriptor | Int32 | Nil)"(i32 %self, %"IO::FileDescriptor"* %io) #0 {
alloca:
  %byte = alloca i8
  %chars = alloca [4 x i8]
  %i = alloca i32
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"(IO::FileDescriptor | Int32 | Nil)"
  %2 = alloca %"(IO::FileDescriptor | Int32 | Nil)"
  %byte4 = alloca i8
  %c = alloca i32
  %3 = alloca %"Slice(UInt8)"
  %4 = alloca %"Slice(UInt8)"
  %5 = alloca %"(IO::FileDescriptor | Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %6 = call i1 @"*Char#ascii?:Bool"(i32 %self)
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  %7 = trunc i32 %self to i8
  store i8 %7, i8* %byte
  %8 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %io, i32 0, i32 3
  %9 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %8, i32 0, i32 0
  %10 = load i32, i32* %9
  %11 = icmp eq i32 %10, 0
  %12 = xor i1 %11, true
  %13 = and i1 true, %12
  br i1 %13, label %then1, label %else2

else:                                             ; preds = %entry
  store i32 0, i32* %i
  store i32 %self, i32* %c
  %14 = load i32, i32* %c
  %15 = icmp slt i32 %14, 128
  br i1 %15, label %then5, label %else6

then1:                                            ; preds = %then
  %16 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %byte, i32 1)
  store %"Slice(UInt8)" %16, %"Slice(UInt8)"* %0
  %17 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  call void @"*IO::FileDescriptor@IO#write_utf8<Slice(UInt8)>:Nil"(%"IO::FileDescriptor"* %io, %"Slice(UInt8)" %17)
  %18 = getelementptr inbounds %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %18
  %19 = getelementptr inbounds %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %19
  br label %exit

else2:                                            ; preds = %then
  %20 = load i8, i8* %byte
  %21 = call %"(IO::FileDescriptor | Int32 | Nil)" @"*IO::FileDescriptor@IO::Buffered#write_byte<UInt8>:(IO::FileDescriptor | Int32 | Nil)"(%"IO::FileDescriptor"* %io, i8 %20)
  store %"(IO::FileDescriptor | Int32 | Nil)" %21, %"(IO::FileDescriptor | Int32 | Nil)"* %2
  br label %exit

exit:                                             ; preds = %else2, %then1
  %22 = phi %"(IO::FileDescriptor | Int32 | Nil)"* [ %1, %then1 ], [ %2, %else2 ]
  br label %exit3

exit3:                                            ; preds = %exit7, %exit
  %23 = phi %"(IO::FileDescriptor | Int32 | Nil)"* [ %22, %exit ], [ %5, %exit7 ]
  %24 = load %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %23
  ret %"(IO::FileDescriptor | Int32 | Nil)" %24

then5:                                            ; preds = %else
  %25 = load i32, i32* %c
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %byte4
  %27 = load i32, i32* %i
  %28 = load i8, i8* %byte4
  %29 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %27, i8 %28)
  %30 = load i32, i32* %i
  %31 = add i32 %30, 1
  store i32 %31, i32* %i
  br label %exit7

else6:                                            ; preds = %else
  %32 = load i32, i32* %c
  %33 = icmp sle i32 %32, 2047
  br i1 %33, label %then8, label %else9

exit7:                                            ; preds = %exit10, %then5
  %34 = phi i32 [ %31, %then5 ], [ %61, %exit10 ]
  %35 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %chars)
  store %"Slice(UInt8)" %35, %"Slice(UInt8)"* %3
  %36 = load i32, i32* %i
  %37 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %3, i32 0, i32 %36)
  store %"Slice(UInt8)" %37, %"Slice(UInt8)"* %4
  %38 = load %"Slice(UInt8)", %"Slice(UInt8)"* %4
  call void @"*IO::FileDescriptor@IO#write_utf8<Slice(UInt8)>:Nil"(%"IO::FileDescriptor"* %io, %"Slice(UInt8)" %38)
  %39 = getelementptr inbounds %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %5, i32 0, i32 0
  store i32 0, i32* %39
  %40 = getelementptr inbounds %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %5, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %40
  br label %exit3

then8:                                            ; preds = %else6
  %41 = load i32, i32* %c
  %42 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %41, i32 6)
  %43 = or i32 192, %42
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %byte4
  %45 = load i32, i32* %i
  %46 = load i8, i8* %byte4
  %47 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %45, i8 %46)
  %48 = load i32, i32* %i
  %49 = add i32 %48, 1
  store i32 %49, i32* %i
  %50 = load i32, i32* %c
  %51 = and i32 %50, 63
  %52 = or i32 128, %51
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %byte4
  %54 = load i32, i32* %i
  %55 = load i8, i8* %byte4
  %56 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %54, i8 %55)
  %57 = load i32, i32* %i
  %58 = add i32 %57, 1
  store i32 %58, i32* %i
  br label %exit10

else9:                                            ; preds = %else6
  %59 = load i32, i32* %c
  %60 = icmp sle i32 %59, 65535
  br i1 %60, label %then11, label %else12

exit10:                                           ; preds = %exit13, %then8
  %61 = phi i32 [ %58, %then8 ], [ %92, %exit13 ]
  br label %exit7

then11:                                           ; preds = %else9
  %62 = load i32, i32* %c
  %63 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %62, i32 12)
  %64 = or i32 224, %63
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %byte4
  %66 = load i32, i32* %i
  %67 = load i8, i8* %byte4
  %68 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %66, i8 %67)
  %69 = load i32, i32* %i
  %70 = add i32 %69, 1
  store i32 %70, i32* %i
  %71 = load i32, i32* %c
  %72 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %71, i32 6)
  %73 = and i32 %72, 63
  %74 = or i32 128, %73
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %byte4
  %76 = load i32, i32* %i
  %77 = load i8, i8* %byte4
  %78 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %76, i8 %77)
  %79 = load i32, i32* %i
  %80 = add i32 %79, 1
  store i32 %80, i32* %i
  %81 = load i32, i32* %c
  %82 = and i32 %81, 63
  %83 = or i32 128, %82
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %byte4
  %85 = load i32, i32* %i
  %86 = load i8, i8* %byte4
  %87 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %85, i8 %86)
  %88 = load i32, i32* %i
  %89 = add i32 %88, 1
  store i32 %89, i32* %i
  br label %exit13

else12:                                           ; preds = %else9
  %90 = load i32, i32* %c
  %91 = icmp sle i32 %90, 1114111
  br i1 %91, label %then14, label %else15

exit13:                                           ; preds = %exit16, %then11
  %92 = phi i32 [ %89, %then11 ], [ %137, %exit16 ]
  br label %exit10

then14:                                           ; preds = %else12
  %93 = load i32, i32* %c
  %94 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %93, i32 18)
  %95 = or i32 240, %94
  %96 = trunc i32 %95 to i8
  store i8 %96, i8* %byte4
  %97 = load i32, i32* %i
  %98 = load i8, i8* %byte4
  %99 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %97, i8 %98)
  %100 = load i32, i32* %i
  %101 = add i32 %100, 1
  store i32 %101, i32* %i
  %102 = load i32, i32* %c
  %103 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %102, i32 12)
  %104 = and i32 %103, 63
  %105 = or i32 128, %104
  %106 = trunc i32 %105 to i8
  store i8 %106, i8* %byte4
  %107 = load i32, i32* %i
  %108 = load i8, i8* %byte4
  %109 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %107, i8 %108)
  %110 = load i32, i32* %i
  %111 = add i32 %110, 1
  store i32 %111, i32* %i
  %112 = load i32, i32* %c
  %113 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %112, i32 6)
  %114 = and i32 %113, 63
  %115 = or i32 128, %114
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %byte4
  %117 = load i32, i32* %i
  %118 = load i8, i8* %byte4
  %119 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %117, i8 %118)
  %120 = load i32, i32* %i
  %121 = add i32 %120, 1
  store i32 %121, i32* %i
  %122 = load i32, i32* %c
  %123 = and i32 %122, 63
  %124 = or i32 128, %123
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %byte4
  %126 = load i32, i32* %i
  %127 = load i8, i8* %byte4
  %128 = call i8 @"*StaticArray(UInt8, 4)@StaticArray(T, N)#[]=<Int32, UInt8>:UInt8"([4 x i8]* %chars, i32 %126, i8 %127)
  %129 = load i32, i32* %i
  %130 = add i32 %129, 1
  store i32 %130, i32* %i
  br label %exit16

else15:                                           ; preds = %else12
  %131 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %132 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %131, %String* bitcast ({ i32, i32, i32, [20 x i8] }* @"'Invalid char value ...'" to %String*))
  %133 = call %String* @"*Char#dump:String"(i32 %self)
  %134 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %132, %String* %133)
  %135 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %134)
  %136 = call %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* %135)
  call void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %136)
  unreachable

exit16:                                           ; preds = %then14
  %137 = phi i32 [ %130, %then14 ]
  br label %exit13
}

; Function Attrs: uwtable
define internal %"(IO::FileDescriptor | Int32 | Nil)" @"*IO::FileDescriptor@IO::Buffered#write_byte<UInt8>:(IO::FileDescriptor | Int32 | Nil)"(%"IO::FileDescriptor"* %self, i8 %byte) #0 {
alloca:
  %__temp_59 = alloca i1
  %0 = alloca %"(Int32 | Nil)"
  %1 = alloca %"(IO::FileDescriptor | Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  call void @"*IO::FileDescriptor@IO#check_open:Nil"(%"IO::FileDescriptor"* %self)
  %2 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 6
  %3 = load i1, i1* %2
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = call %"(Int32 | Nil)" @"*IO::FileDescriptor@IO#write_byte<UInt8>:(Int32 | Nil)"(%"IO::FileDescriptor"* %self, i8 %byte)
  store %"(Int32 | Nil)" %4, %"(Int32 | Nil)"* %0
  %5 = bitcast %"(Int32 | Nil)"* %0 to %"(IO::FileDescriptor | Int32 | Nil)"*
  %6 = load %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %5
  ret %"(IO::FileDescriptor | Int32 | Nil)" %6

else:                                             ; preds = %entry
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  %8 = load i32, i32* %7
  %9 = icmp sge i32 %8, 8192
  br i1 %9, label %then1, label %else2

then1:                                            ; preds = %else
  %10 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %self)
  br label %exit

else2:                                            ; preds = %else
  br label %exit

exit:                                             ; preds = %else2, %then1
  %11 = call i8* @"*IO::FileDescriptor@IO::Buffered#out_buffer:Pointer(UInt8)"(%"IO::FileDescriptor"* %self)
  %12 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  %13 = load i32, i32* %12
  %14 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %11, i32 %13, i8 %byte)
  %15 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  %16 = load i32, i32* %15
  %17 = add i32 %16, 1
  %18 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 5
  store i32 %17, i32* %18
  %19 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 7
  %20 = load i1, i1* %19
  store i1 %20, i1* %__temp_59
  br i1 %20, label %then5, label %else6

then3:                                            ; preds = %exit7
  %21 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %self)
  br label %exit8

else4:                                            ; preds = %exit7
  br label %exit8

then5:                                            ; preds = %exit
  %22 = call i1 @"*UInt8@Int#===<Char>:Bool"(i8 %byte, i32 10)
  br label %exit7

else6:                                            ; preds = %exit
  %23 = load i1, i1* %__temp_59
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %24 = phi i1 [ %22, %then5 ], [ %23, %else6 ]
  br i1 %24, label %then3, label %else4

exit8:                                            ; preds = %else4, %then3
  %25 = phi %"IO::FileDescriptor"* [ %21, %then3 ], [ null, %else4 ]
  %26 = icmp eq %"IO::FileDescriptor"* %25, null
  %27 = select i1 %26, i32 0, i32 66
  %28 = getelementptr inbounds %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %1, i32 0, i32 0
  store i32 %27, i32* %28
  %29 = getelementptr inbounds %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %1, i32 0, i32 1
  %30 = bitcast [1 x i64]* %29 to %"IO::FileDescriptor"**
  store %"IO::FileDescriptor"* %25, %"IO::FileDescriptor"** %30
  %31 = load %"(IO::FileDescriptor | Int32 | Nil)", %"(IO::FileDescriptor | Int32 | Nil)"* %1
  ret %"(IO::FileDescriptor | Int32 | Nil)" %31
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*IO::FileDescriptor@IO#write_byte<UInt8>:(Int32 | Nil)"(%"IO::FileDescriptor"* %self, i8 %byte) #0 {
alloca:
  %x = alloca i8
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i8 %byte, i8* %x
  %2 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %x, i32 1)
  store %"Slice(UInt8)" %2, %"Slice(UInt8)"* %0
  %3 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %4 = call %"(Int32 | Nil)" @"*IO::FileDescriptor@IO::Buffered#write<Slice(UInt8)>:(Int32 | Nil)"(%"IO::FileDescriptor"* %self, %"Slice(UInt8)" %3)
  store %"(Int32 | Nil)" %4, %"(Int32 | Nil)"* %1
  %5 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  ret %"(Int32 | Nil)" %5
}

; Function Attrs: uwtable
define internal i1 @"*UInt8@Int#===<Char>:Bool"(i8 %self, i32 %char) #0 {
entry:
  %0 = call i1 @"*UInt8@Object#===<Int32>:Bool"(i8 %self, i32 %char)
  ret i1 %0
}

; Function Attrs: uwtable
define internal i1 @"*UInt8@Object#===<Int32>:Bool"(i8 %self, i32 %other) #0 {
entry:
  %0 = zext i8 %self to i32
  %1 = icmp eq i32 %0, %other
  ret i1 %1
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*Exception+@Exception#inspect_with_backtrace<IO::FileDescriptor>:IO::FileDescriptor"(i32* %self, %"IO::FileDescriptor"* %io) #0 {
alloca:
  %__arg1 = alloca %"Array(String)"*
  %__arg13 = alloca %"Array(String)"*
  %frame = alloca %String*
  %i = alloca i32
  %i4 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %Exception*
  %1 = getelementptr inbounds %Exception, %Exception* %0, i32 0, i32 1
  %2 = load %String*, %String** %1
  %3 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<(String | Nil)>:IO::FileDescriptor"(%"IO::FileDescriptor"* %io, %String* %2)
  %4 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<String>:IO::FileDescriptor"(%"IO::FileDescriptor"* %3, %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"' ('" to %String*))
  %5 = load i32, i32* %self
  %6 = call i32 @"~metaclass"(i32 %5)
  %7 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<Exception+:Class>:IO::FileDescriptor"(%"IO::FileDescriptor"* %4, i32 %6)
  %8 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<String>:IO::FileDescriptor"(%"IO::FileDescriptor"* %7, %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"')\0A'" to %String*))
  %9 = call %"Array(String)"* @"*Exception+@Exception#backtrace?:(Array(String) | Nil)"(i32* %self)
  %10 = icmp eq %"Array(String)"* %9, null
  %11 = select i1 %10, i32 0, i32 7
  %12 = icmp eq i32 0, %11
  br i1 %12, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  br label %exit

next_def:                                         ; preds = %entry
  %13 = icmp eq i32 7, %11
  br i1 %13, label %current_def1, label %next_def2

exit:                                             ; preds = %exit5, %current_def
  %14 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %io)
  ret %"IO::FileDescriptor"* %14

current_def1:                                     ; preds = %next_def
  store %"Array(String)"* %9, %"Array(String)"** %__arg13
  %15 = load %"Array(String)"*, %"Array(String)"** %__arg13
  store i32 0, i32* %i4
  br label %while

next_def2:                                        ; preds = %next_def
  unreachable

while:                                            ; preds = %body, %current_def1
  %16 = load i32, i32* %i4
  %17 = getelementptr inbounds %"Array(String)", %"Array(String)"* %15, i32 0, i32 1
  %18 = load i32, i32* %17
  %19 = icmp slt i32 %16, %18
  br i1 %19, label %body, label %exit5

body:                                             ; preds = %while
  %20 = load i32, i32* %i4
  store i32 %20, i32* %i
  %21 = load i32, i32* %i
  %22 = call %String* @"*Array(String)@Array(T)#unsafe_at<Int32>:String"(%"Array(String)"* %15, i32 %21)
  store %String* %22, %String** %frame
  %23 = load %String*, %String** %frame
  call void @"*IO::FileDescriptor@IO#puts<String>:Nil"(%"IO::FileDescriptor"* %io, %String* %23)
  %24 = load i32, i32* %i4
  %25 = add i32 %24, 1
  store i32 %25, i32* %i4
  br label %while

exit5:                                            ; preds = %while
  br label %exit
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<(String | Nil)>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, %String* %obj) #0 {
entry:
  %0 = icmp eq %String* %obj, null
  %1 = select i1 %0, i32 0, i32 1
  %2 = icmp eq i32 0, %1
  br i1 %2, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  br label %exit

next_def:                                         ; preds = %entry
  %3 = icmp eq i32 1, %1
  br i1 %3, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def1, %current_def
  ret %"IO::FileDescriptor"* %self

current_def1:                                     ; preds = %next_def
  call void @"*String#to_s<IO::FileDescriptor>:Nil"(%String* %obj, %"IO::FileDescriptor"* %self)
  br label %exit

next_def2:                                        ; preds = %next_def
  unreachable
}

define internal i32 @"~metaclass"(i32) {
entry:
  switch i32 %0, label %otherwise [
    i32 0, label %type_0
    i32 1, label %type_1
    i32 2, label %type_2
    i32 3, label %type_3
    i32 4, label %type_4
    i32 5, label %type_5
    i32 6, label %type_6
    i32 7, label %type_7
    i32 8, label %type_8
    i32 9, label %type_9
    i32 10, label %type_10
    i32 11, label %type_11
    i32 12, label %type_12
    i32 13, label %type_13
    i32 14, label %type_14
    i32 15, label %type_15
    i32 16, label %type_16
    i32 17, label %type_17
    i32 18, label %type_18
    i32 19, label %type_19
    i32 20, label %type_20
    i32 21, label %type_21
    i32 22, label %type_22
    i32 23, label %type_23
    i32 24, label %type_24
    i32 25, label %type_25
    i32 26, label %type_26
    i32 27, label %type_27
    i32 28, label %type_28
    i32 29, label %type_29
    i32 30, label %type_30
    i32 31, label %type_31
    i32 32, label %type_32
    i32 33, label %type_33
    i32 34, label %type_34
    i32 35, label %type_35
    i32 36, label %type_36
    i32 37, label %type_37
    i32 38, label %type_38
    i32 39, label %type_39
    i32 40, label %type_40
    i32 41, label %type_41
    i32 42, label %type_42
    i32 43, label %type_43
    i32 44, label %type_44
    i32 45, label %type_45
    i32 46, label %type_46
    i32 47, label %type_47
    i32 48, label %type_48
    i32 49, label %type_49
    i32 50, label %type_50
    i32 51, label %type_51
    i32 52, label %type_52
    i32 53, label %type_53
    i32 54, label %type_54
    i32 55, label %type_55
    i32 56, label %type_56
    i32 57, label %type_57
    i32 58, label %type_58
    i32 59, label %type_59
    i32 60, label %type_60
    i32 61, label %type_61
    i32 62, label %type_62
    i32 63, label %type_63
    i32 64, label %type_64
    i32 65, label %type_65
    i32 66, label %type_66
    i32 67, label %type_67
    i32 68, label %type_68
    i32 69, label %type_69
    i32 70, label %type_70
    i32 71, label %type_71
    i32 72, label %type_72
    i32 73, label %type_73
    i32 74, label %type_74
    i32 75, label %type_75
    i32 76, label %type_76
    i32 77, label %type_77
    i32 78, label %type_78
    i32 79, label %type_79
    i32 80, label %type_80
    i32 81, label %type_81
    i32 82, label %type_82
    i32 83, label %type_83
    i32 84, label %type_84
    i32 85, label %type_85
    i32 86, label %type_86
    i32 87, label %type_87
    i32 88, label %type_88
    i32 89, label %type_89
    i32 90, label %type_90
    i32 91, label %type_91
    i32 92, label %type_92
    i32 93, label %type_93
    i32 94, label %type_94
    i32 95, label %type_95
    i32 96, label %type_96
    i32 97, label %type_97
    i32 98, label %type_98
    i32 99, label %type_99
    i32 100, label %type_100
    i32 101, label %type_101
    i32 102, label %type_102
    i32 103, label %type_103
    i32 104, label %type_104
    i32 105, label %type_105
    i32 106, label %type_106
    i32 107, label %type_107
    i32 108, label %type_108
    i32 109, label %type_109
    i32 110, label %type_110
    i32 111, label %type_111
    i32 112, label %type_112
    i32 113, label %type_113
    i32 114, label %type_114
    i32 115, label %type_115
    i32 116, label %type_116
    i32 117, label %type_117
    i32 118, label %type_118
    i32 119, label %type_119
    i32 120, label %type_120
    i32 121, label %type_121
    i32 122, label %type_122
    i32 123, label %type_123
    i32 124, label %type_124
    i32 125, label %type_125
    i32 126, label %type_126
    i32 127, label %type_127
    i32 128, label %type_128
    i32 129, label %type_129
    i32 130, label %type_130
    i32 131, label %type_131
    i32 132, label %type_132
    i32 133, label %type_133
    i32 134, label %type_134
    i32 135, label %type_135
    i32 136, label %type_136
    i32 137, label %type_137
    i32 138, label %type_138
    i32 139, label %type_139
    i32 140, label %type_140
    i32 141, label %type_141
    i32 142, label %type_142
    i32 143, label %type_143
    i32 144, label %type_144
    i32 145, label %type_145
    i32 146, label %type_146
    i32 147, label %type_147
    i32 148, label %type_148
    i32 149, label %type_149
    i32 150, label %type_150
    i32 151, label %type_151
    i32 152, label %type_152
    i32 153, label %type_153
    i32 154, label %type_154
    i32 155, label %type_155
    i32 156, label %type_156
    i32 157, label %type_157
    i32 158, label %type_158
    i32 159, label %type_159
    i32 160, label %type_160
    i32 161, label %type_161
    i32 162, label %type_162
    i32 163, label %type_163
    i32 164, label %type_164
    i32 165, label %type_165
    i32 166, label %type_166
    i32 167, label %type_167
    i32 168, label %type_168
    i32 169, label %type_169
    i32 170, label %type_170
    i32 171, label %type_171
    i32 172, label %type_172
    i32 173, label %type_173
    i32 174, label %type_174
    i32 175, label %type_175
    i32 176, label %type_176
    i32 177, label %type_177
    i32 178, label %type_178
    i32 179, label %type_179
    i32 180, label %type_180
    i32 181, label %type_181
    i32 182, label %type_182
    i32 183, label %type_183
    i32 184, label %type_184
    i32 185, label %type_185
    i32 186, label %type_186
    i32 187, label %type_187
    i32 188, label %type_188
    i32 189, label %type_189
    i32 190, label %type_190
    i32 191, label %type_191
    i32 192, label %type_192
    i32 193, label %type_193
    i32 194, label %type_194
    i32 195, label %type_195
    i32 196, label %type_196
    i32 197, label %type_197
    i32 198, label %type_198
    i32 199, label %type_199
    i32 200, label %type_200
    i32 201, label %type_201
    i32 202, label %type_202
    i32 203, label %type_203
    i32 204, label %type_204
    i32 205, label %type_205
    i32 206, label %type_206
    i32 207, label %type_207
    i32 208, label %type_208
    i32 209, label %type_209
    i32 210, label %type_210
    i32 211, label %type_211
    i32 212, label %type_212
    i32 213, label %type_213
    i32 214, label %type_214
    i32 215, label %type_215
    i32 216, label %type_216
    i32 217, label %type_217
    i32 218, label %type_218
    i32 219, label %type_219
    i32 220, label %type_220
    i32 221, label %type_221
    i32 222, label %type_222
    i32 223, label %type_223
    i32 224, label %type_224
    i32 225, label %type_225
    i32 226, label %type_226
    i32 227, label %type_227
    i32 228, label %type_228
    i32 229, label %type_229
    i32 230, label %type_230
    i32 231, label %type_231
    i32 232, label %type_232
    i32 233, label %type_233
    i32 234, label %type_234
    i32 235, label %type_235
    i32 236, label %type_236
    i32 237, label %type_237
    i32 238, label %type_238
    i32 239, label %type_239
    i32 240, label %type_240
    i32 241, label %type_241
    i32 242, label %type_242
    i32 243, label %type_243
    i32 244, label %type_244
    i32 245, label %type_245
    i32 246, label %type_246
    i32 247, label %type_247
    i32 248, label %type_248
    i32 249, label %type_249
    i32 250, label %type_250
    i32 251, label %type_251
    i32 252, label %type_252
    i32 253, label %type_253
    i32 254, label %type_254
    i32 255, label %type_255
    i32 256, label %type_256
    i32 257, label %type_257
    i32 258, label %type_258
    i32 259, label %type_259
    i32 260, label %type_260
    i32 261, label %type_261
    i32 262, label %type_262
    i32 263, label %type_263
    i32 264, label %type_264
    i32 265, label %type_265
    i32 266, label %type_266
    i32 267, label %type_267
    i32 268, label %type_268
    i32 269, label %type_269
    i32 270, label %type_270
    i32 271, label %type_271
    i32 272, label %type_272
    i32 273, label %type_273
    i32 274, label %type_274
    i32 275, label %type_275
    i32 276, label %type_276
    i32 277, label %type_277
    i32 278, label %type_278
    i32 279, label %type_279
    i32 280, label %type_280
    i32 281, label %type_281
    i32 282, label %type_282
    i32 283, label %type_283
    i32 284, label %type_284
    i32 285, label %type_285
    i32 286, label %type_286
    i32 287, label %type_287
    i32 288, label %type_288
    i32 289, label %type_289
    i32 290, label %type_290
    i32 291, label %type_291
    i32 292, label %type_292
    i32 293, label %type_293
    i32 294, label %type_294
    i32 295, label %type_295
    i32 296, label %type_296
    i32 297, label %type_297
    i32 298, label %type_298
    i32 299, label %type_299
    i32 300, label %type_300
    i32 301, label %type_301
    i32 302, label %type_302
    i32 303, label %type_303
    i32 304, label %type_304
    i32 305, label %type_305
    i32 306, label %type_306
    i32 307, label %type_307
    i32 308, label %type_308
    i32 309, label %type_309
    i32 310, label %type_310
    i32 311, label %type_311
    i32 312, label %type_312
    i32 313, label %type_313
    i32 314, label %type_314
    i32 315, label %type_315
    i32 316, label %type_316
    i32 317, label %type_317
    i32 318, label %type_318
    i32 319, label %type_319
    i32 320, label %type_320
    i32 321, label %type_321
    i32 322, label %type_322
    i32 323, label %type_323
    i32 324, label %type_324
    i32 325, label %type_325
    i32 326, label %type_326
    i32 327, label %type_327
    i32 328, label %type_328
    i32 329, label %type_329
    i32 330, label %type_330
    i32 331, label %type_331
    i32 332, label %type_332
    i32 333, label %type_333
    i32 334, label %type_334
    i32 335, label %type_335
    i32 336, label %type_336
    i32 337, label %type_337
    i32 338, label %type_338
    i32 339, label %type_339
    i32 340, label %type_340
    i32 341, label %type_341
    i32 342, label %type_342
    i32 343, label %type_343
    i32 344, label %type_344
    i32 345, label %type_345
    i32 346, label %type_346
    i32 347, label %type_347
    i32 348, label %type_348
    i32 349, label %type_349
    i32 350, label %type_350
    i32 351, label %type_351
    i32 352, label %type_352
    i32 353, label %type_353
    i32 354, label %type_354
    i32 355, label %type_355
    i32 356, label %type_356
    i32 357, label %type_357
    i32 358, label %type_358
    i32 359, label %type_359
    i32 360, label %type_360
    i32 361, label %type_361
    i32 362, label %type_362
    i32 363, label %type_363
    i32 364, label %type_364
    i32 365, label %type_365
    i32 366, label %type_366
    i32 367, label %type_367
    i32 368, label %type_368
    i32 369, label %type_369
    i32 370, label %type_370
    i32 371, label %type_371
    i32 372, label %type_372
    i32 373, label %type_373
    i32 374, label %type_374
    i32 375, label %type_375
    i32 376, label %type_376
    i32 377, label %type_377
    i32 378, label %type_378
    i32 379, label %type_379
    i32 380, label %type_380
    i32 381, label %type_381
    i32 382, label %type_382
    i32 383, label %type_383
    i32 384, label %type_384
    i32 385, label %type_385
    i32 386, label %type_386
    i32 387, label %type_387
    i32 388, label %type_388
    i32 389, label %type_389
    i32 390, label %type_390
    i32 391, label %type_391
    i32 392, label %type_392
    i32 393, label %type_393
    i32 394, label %type_394
    i32 395, label %type_395
    i32 396, label %type_396
    i32 397, label %type_397
    i32 398, label %type_398
    i32 399, label %type_399
    i32 400, label %type_400
    i32 401, label %type_401
    i32 402, label %type_402
    i32 403, label %type_403
    i32 404, label %type_404
    i32 405, label %type_405
    i32 406, label %type_406
    i32 407, label %type_407
    i32 408, label %type_408
    i32 409, label %type_409
    i32 410, label %type_410
    i32 411, label %type_411
    i32 412, label %type_412
    i32 413, label %type_413
    i32 414, label %type_414
    i32 419, label %type_419
    i32 422, label %type_422
    i32 424, label %type_424
    i32 426, label %type_426
    i32 428, label %type_428
    i32 430, label %type_430
    i32 432, label %type_432
    i32 440, label %type_440
    i32 442, label %type_442
    i32 444, label %type_444
    i32 459, label %type_459
    i32 461, label %type_461
    i32 463, label %type_463
    i32 465, label %type_465
    i32 471, label %type_471
    i32 477, label %type_477
    i32 529, label %type_529
    i32 533, label %type_533
    i32 548, label %type_548
    i32 555, label %type_555
    i32 557, label %type_557
    i32 559, label %type_559
    i32 561, label %type_561
    i32 563, label %type_563
    i32 569, label %type_569
    i32 575, label %type_575
    i32 623, label %type_623
    i32 650, label %type_650
    i32 652, label %type_652
    i32 655, label %type_655
    i32 657, label %type_657
    i32 659, label %type_659
    i32 662, label %type_662
    i32 664, label %type_664
    i32 666, label %type_666
    i32 668, label %type_668
    i32 670, label %type_670
    i32 677, label %type_677
    i32 679, label %type_679
    i32 681, label %type_681
    i32 694, label %type_694
    i32 721, label %type_721
    i32 723, label %type_723
    i32 725, label %type_725
    i32 727, label %type_727
    i32 731, label %type_731
    i32 733, label %type_733
    i32 735, label %type_735
    i32 743, label %type_743
    i32 745, label %type_745
    i32 747, label %type_747
    i32 756, label %type_756
    i32 758, label %type_758
    i32 760, label %type_760
    i32 762, label %type_762
    i32 764, label %type_764
    i32 766, label %type_766
    i32 768, label %type_768
    i32 770, label %type_770
    i32 772, label %type_772
    i32 774, label %type_774
    i32 782, label %type_782
    i32 784, label %type_784
    i32 786, label %type_786
    i32 788, label %type_788
    i32 794, label %type_794
    i32 800, label %type_800
    i32 839, label %type_839
    i32 841, label %type_841
    i32 868, label %type_868
    i32 969, label %type_969
    i32 971, label %type_971
    i32 973, label %type_973
    i32 975, label %type_975
    i32 977, label %type_977
    i32 979, label %type_979
    i32 981, label %type_981
    i32 983, label %type_983
    i32 985, label %type_985
    i32 987, label %type_987
    i32 989, label %type_989
    i32 991, label %type_991
    i32 993, label %type_993
    i32 995, label %type_995
    i32 997, label %type_997
    i32 999, label %type_999
    i32 1001, label %type_1001
  ]

type_0:                                           ; preds = %entry
  ret i32 615

type_1:                                           ; preds = %entry
  ret i32 417

type_2:                                           ; preds = %entry
  ret i32 421

type_3:                                           ; preds = %entry
  ret i32 434

type_4:                                           ; preds = %entry
  ret i32 435

type_5:                                           ; preds = %entry
  ret i32 436

type_6:                                           ; preds = %entry
  ret i32 437

type_7:                                           ; preds = %entry
  ret i32 438

type_8:                                           ; preds = %entry
  ret i32 439

type_9:                                           ; preds = %entry
  ret i32 446

type_10:                                          ; preds = %entry
  ret i32 447

type_11:                                          ; preds = %entry
  ret i32 448

type_12:                                          ; preds = %entry
  ret i32 449

type_13:                                          ; preds = %entry
  ret i32 450

type_14:                                          ; preds = %entry
  ret i32 451

type_15:                                          ; preds = %entry
  ret i32 452

type_16:                                          ; preds = %entry
  ret i32 453

type_17:                                          ; preds = %entry
  ret i32 454

type_18:                                          ; preds = %entry
  ret i32 455

type_19:                                          ; preds = %entry
  ret i32 456

type_20:                                          ; preds = %entry
  ret i32 457

type_21:                                          ; preds = %entry
  ret i32 418

type_22:                                          ; preds = %entry
  ret i32 467

type_23:                                          ; preds = %entry
  ret i32 468

type_24:                                          ; preds = %entry
  ret i32 469

type_25:                                          ; preds = %entry
  ret i32 470

type_26:                                          ; preds = %entry
  ret i32 473

type_27:                                          ; preds = %entry
  ret i32 474

type_28:                                          ; preds = %entry
  ret i32 475

type_29:                                          ; preds = %entry
  ret i32 476

type_30:                                          ; preds = %entry
  ret i32 479

type_31:                                          ; preds = %entry
  ret i32 458

type_32:                                          ; preds = %entry
  ret i32 480

type_33:                                          ; preds = %entry
  ret i32 482

type_34:                                          ; preds = %entry
  ret i32 483

type_35:                                          ; preds = %entry
  ret i32 484

type_36:                                          ; preds = %entry
  ret i32 485

type_37:                                          ; preds = %entry
  ret i32 486

type_38:                                          ; preds = %entry
  ret i32 487

type_39:                                          ; preds = %entry
  ret i32 488

type_40:                                          ; preds = %entry
  ret i32 489

type_41:                                          ; preds = %entry
  ret i32 490

type_42:                                          ; preds = %entry
  ret i32 492

type_43:                                          ; preds = %entry
  ret i32 491

type_44:                                          ; preds = %entry
  ret i32 493

type_45:                                          ; preds = %entry
  ret i32 494

type_46:                                          ; preds = %entry
  ret i32 495

type_47:                                          ; preds = %entry
  ret i32 496

type_48:                                          ; preds = %entry
  ret i32 481

type_49:                                          ; preds = %entry
  ret i32 497

type_50:                                          ; preds = %entry
  ret i32 498

type_51:                                          ; preds = %entry
  ret i32 499

type_52:                                          ; preds = %entry
  ret i32 500

type_53:                                          ; preds = %entry
  ret i32 501

type_54:                                          ; preds = %entry
  ret i32 502

type_55:                                          ; preds = %entry
  ret i32 503

type_56:                                          ; preds = %entry
  ret i32 504

type_57:                                          ; preds = %entry
  ret i32 505

type_58:                                          ; preds = %entry
  ret i32 506

type_59:                                          ; preds = %entry
  ret i32 507

type_60:                                          ; preds = %entry
  ret i32 508

type_61:                                          ; preds = %entry
  ret i32 509

type_62:                                          ; preds = %entry
  ret i32 510

type_63:                                          ; preds = %entry
  ret i32 511

type_64:                                          ; preds = %entry
  ret i32 512

type_65:                                          ; preds = %entry
  ret i32 514

type_66:                                          ; preds = %entry
  ret i32 513

type_67:                                          ; preds = %entry
  ret i32 515

type_68:                                          ; preds = %entry
  ret i32 516

type_69:                                          ; preds = %entry
  ret i32 517

type_70:                                          ; preds = %entry
  ret i32 518

type_71:                                          ; preds = %entry
  ret i32 519

type_72:                                          ; preds = %entry
  ret i32 520

type_73:                                          ; preds = %entry
  ret i32 521

type_74:                                          ; preds = %entry
  ret i32 522

type_75:                                          ; preds = %entry
  ret i32 523

type_76:                                          ; preds = %entry
  ret i32 524

type_77:                                          ; preds = %entry
  ret i32 525

type_78:                                          ; preds = %entry
  ret i32 526

type_79:                                          ; preds = %entry
  ret i32 527

type_80:                                          ; preds = %entry
  ret i32 532

type_81:                                          ; preds = %entry
  ret i32 538

type_82:                                          ; preds = %entry
  ret i32 536

type_83:                                          ; preds = %entry
  ret i32 539

type_84:                                          ; preds = %entry
  ret i32 537

type_85:                                          ; preds = %entry
  ret i32 540

type_86:                                          ; preds = %entry
  ret i32 531

type_87:                                          ; preds = %entry
  ret i32 535

type_88:                                          ; preds = %entry
  ret i32 528

type_89:                                          ; preds = %entry
  ret i32 542

type_90:                                          ; preds = %entry
  ret i32 541

type_91:                                          ; preds = %entry
  ret i32 543

type_92:                                          ; preds = %entry
  ret i32 544

type_93:                                          ; preds = %entry
  ret i32 545

type_94:                                          ; preds = %entry
  ret i32 547

type_95:                                          ; preds = %entry
  ret i32 550

type_96:                                          ; preds = %entry
  ret i32 551

type_97:                                          ; preds = %entry
  ret i32 552

type_98:                                          ; preds = %entry
  ret i32 546

type_99:                                          ; preds = %entry
  ret i32 553

type_100:                                         ; preds = %entry
  ret i32 565

type_101:                                         ; preds = %entry
  ret i32 566

type_102:                                         ; preds = %entry
  ret i32 567

type_103:                                         ; preds = %entry
  ret i32 568

type_104:                                         ; preds = %entry
  ret i32 571

type_105:                                         ; preds = %entry
  ret i32 572

type_106:                                         ; preds = %entry
  ret i32 573

type_107:                                         ; preds = %entry
  ret i32 574

type_108:                                         ; preds = %entry
  ret i32 577

type_109:                                         ; preds = %entry
  ret i32 554

type_110:                                         ; preds = %entry
  ret i32 578

type_111:                                         ; preds = %entry
  ret i32 579

type_112:                                         ; preds = %entry
  ret i32 580

type_113:                                         ; preds = %entry
  ret i32 581

type_114:                                         ; preds = %entry
  ret i32 582

type_115:                                         ; preds = %entry
  ret i32 583

type_116:                                         ; preds = %entry
  ret i32 584

type_117:                                         ; preds = %entry
  ret i32 585

type_118:                                         ; preds = %entry
  ret i32 586

type_119:                                         ; preds = %entry
  ret i32 587

type_120:                                         ; preds = %entry
  ret i32 588

type_121:                                         ; preds = %entry
  ret i32 589

type_122:                                         ; preds = %entry
  ret i32 590

type_123:                                         ; preds = %entry
  ret i32 591

type_124:                                         ; preds = %entry
  ret i32 592

type_125:                                         ; preds = %entry
  ret i32 593

type_126:                                         ; preds = %entry
  ret i32 594

type_127:                                         ; preds = %entry
  ret i32 595

type_128:                                         ; preds = %entry
  ret i32 596

type_129:                                         ; preds = %entry
  ret i32 597

type_130:                                         ; preds = %entry
  ret i32 598

type_131:                                         ; preds = %entry
  ret i32 599

type_132:                                         ; preds = %entry
  ret i32 600

type_133:                                         ; preds = %entry
  ret i32 416

type_134:                                         ; preds = %entry
  ret i32 604

type_135:                                         ; preds = %entry
  ret i32 605

type_136:                                         ; preds = %entry
  ret i32 606

type_137:                                         ; preds = %entry
  ret i32 607

type_138:                                         ; preds = %entry
  ret i32 608

type_139:                                         ; preds = %entry
  ret i32 609

type_140:                                         ; preds = %entry
  ret i32 610

type_141:                                         ; preds = %entry
  ret i32 611

type_142:                                         ; preds = %entry
  ret i32 603

type_143:                                         ; preds = %entry
  ret i32 613

type_144:                                         ; preds = %entry
  ret i32 614

type_145:                                         ; preds = %entry
  ret i32 612

type_146:                                         ; preds = %entry
  ret i32 602

type_147:                                         ; preds = %entry
  ret i32 616

type_148:                                         ; preds = %entry
  ret i32 617

type_149:                                         ; preds = %entry
  ret i32 618

type_150:                                         ; preds = %entry
  ret i32 620

type_151:                                         ; preds = %entry
  ret i32 621

type_152:                                         ; preds = %entry
  ret i32 622

type_153:                                         ; preds = %entry
  ret i32 625

type_154:                                         ; preds = %entry
  ret i32 626

type_155:                                         ; preds = %entry
  ret i32 627

type_156:                                         ; preds = %entry
  ret i32 628

type_157:                                         ; preds = %entry
  ret i32 629

type_158:                                         ; preds = %entry
  ret i32 630

type_159:                                         ; preds = %entry
  ret i32 631

type_160:                                         ; preds = %entry
  ret i32 632

type_161:                                         ; preds = %entry
  ret i32 633

type_162:                                         ; preds = %entry
  ret i32 634

type_163:                                         ; preds = %entry
  ret i32 635

type_164:                                         ; preds = %entry
  ret i32 636

type_165:                                         ; preds = %entry
  ret i32 637

type_166:                                         ; preds = %entry
  ret i32 638

type_167:                                         ; preds = %entry
  ret i32 639

type_168:                                         ; preds = %entry
  ret i32 640

type_169:                                         ; preds = %entry
  ret i32 641

type_170:                                         ; preds = %entry
  ret i32 642

type_171:                                         ; preds = %entry
  ret i32 643

type_172:                                         ; preds = %entry
  ret i32 644

type_173:                                         ; preds = %entry
  ret i32 645

type_174:                                         ; preds = %entry
  ret i32 646

type_175:                                         ; preds = %entry
  ret i32 647

type_176:                                         ; preds = %entry
  ret i32 648

type_177:                                         ; preds = %entry
  ret i32 649

type_178:                                         ; preds = %entry
  ret i32 654

type_179:                                         ; preds = %entry
  ret i32 661

type_180:                                         ; preds = %entry
  ret i32 672

type_181:                                         ; preds = %entry
  ret i32 673

type_182:                                         ; preds = %entry
  ret i32 674

type_183:                                         ; preds = %entry
  ret i32 675

type_184:                                         ; preds = %entry
  ret i32 676

type_185:                                         ; preds = %entry
  ret i32 683

type_186:                                         ; preds = %entry
  ret i32 684

type_187:                                         ; preds = %entry
  ret i32 685

type_188:                                         ; preds = %entry
  ret i32 686

type_189:                                         ; preds = %entry
  ret i32 687

type_190:                                         ; preds = %entry
  ret i32 688

type_191:                                         ; preds = %entry
  ret i32 689

type_192:                                         ; preds = %entry
  ret i32 690

type_193:                                         ; preds = %entry
  ret i32 691

type_194:                                         ; preds = %entry
  ret i32 692

type_195:                                         ; preds = %entry
  ret i32 693

type_196:                                         ; preds = %entry
  ret i32 696

type_197:                                         ; preds = %entry
  ret i32 697

type_198:                                         ; preds = %entry
  ret i32 698

type_199:                                         ; preds = %entry
  ret i32 699

type_200:                                         ; preds = %entry
  ret i32 700

type_201:                                         ; preds = %entry
  ret i32 701

type_202:                                         ; preds = %entry
  ret i32 702

type_203:                                         ; preds = %entry
  ret i32 703

type_204:                                         ; preds = %entry
  ret i32 704

type_205:                                         ; preds = %entry
  ret i32 705

type_206:                                         ; preds = %entry
  ret i32 706

type_207:                                         ; preds = %entry
  ret i32 707

type_208:                                         ; preds = %entry
  ret i32 708

type_209:                                         ; preds = %entry
  ret i32 709

type_210:                                         ; preds = %entry
  ret i32 710

type_211:                                         ; preds = %entry
  ret i32 711

type_212:                                         ; preds = %entry
  ret i32 712

type_213:                                         ; preds = %entry
  ret i32 713

type_214:                                         ; preds = %entry
  ret i32 714

type_215:                                         ; preds = %entry
  ret i32 715

type_216:                                         ; preds = %entry
  ret i32 716

type_217:                                         ; preds = %entry
  ret i32 717

type_218:                                         ; preds = %entry
  ret i32 718

type_219:                                         ; preds = %entry
  ret i32 719

type_220:                                         ; preds = %entry
  ret i32 619

type_221:                                         ; preds = %entry
  ret i32 729

type_222:                                         ; preds = %entry
  ret i32 730

type_223:                                         ; preds = %entry
  ret i32 737

type_224:                                         ; preds = %entry
  ret i32 738

type_225:                                         ; preds = %entry
  ret i32 739

type_226:                                         ; preds = %entry
  ret i32 740

type_227:                                         ; preds = %entry
  ret i32 741

type_228:                                         ; preds = %entry
  ret i32 742

type_229:                                         ; preds = %entry
  ret i32 749

type_230:                                         ; preds = %entry
  ret i32 750

type_231:                                         ; preds = %entry
  ret i32 751

type_232:                                         ; preds = %entry
  ret i32 752

type_233:                                         ; preds = %entry
  ret i32 753

type_234:                                         ; preds = %entry
  ret i32 754

type_235:                                         ; preds = %entry
  ret i32 755

type_236:                                         ; preds = %entry
  ret i32 776

type_237:                                         ; preds = %entry
  ret i32 777

type_238:                                         ; preds = %entry
  ret i32 778

type_239:                                         ; preds = %entry
  ret i32 779

type_240:                                         ; preds = %entry
  ret i32 780

type_241:                                         ; preds = %entry
  ret i32 781

type_242:                                         ; preds = %entry
  ret i32 790

type_243:                                         ; preds = %entry
  ret i32 791

type_244:                                         ; preds = %entry
  ret i32 792

type_245:                                         ; preds = %entry
  ret i32 793

type_246:                                         ; preds = %entry
  ret i32 796

type_247:                                         ; preds = %entry
  ret i32 797

type_248:                                         ; preds = %entry
  ret i32 798

type_249:                                         ; preds = %entry
  ret i32 799

type_250:                                         ; preds = %entry
  ret i32 802

type_251:                                         ; preds = %entry
  ret i32 803

type_252:                                         ; preds = %entry
  ret i32 804

type_253:                                         ; preds = %entry
  ret i32 805

type_254:                                         ; preds = %entry
  ret i32 806

type_255:                                         ; preds = %entry
  ret i32 807

type_256:                                         ; preds = %entry
  ret i32 808

type_257:                                         ; preds = %entry
  ret i32 809

type_258:                                         ; preds = %entry
  ret i32 810

type_259:                                         ; preds = %entry
  ret i32 811

type_260:                                         ; preds = %entry
  ret i32 812

type_261:                                         ; preds = %entry
  ret i32 720

type_262:                                         ; preds = %entry
  ret i32 813

type_263:                                         ; preds = %entry
  ret i32 815

type_264:                                         ; preds = %entry
  ret i32 816

type_265:                                         ; preds = %entry
  ret i32 817

type_266:                                         ; preds = %entry
  ret i32 818

type_267:                                         ; preds = %entry
  ret i32 819

type_268:                                         ; preds = %entry
  ret i32 820

type_269:                                         ; preds = %entry
  ret i32 821

type_270:                                         ; preds = %entry
  ret i32 822

type_271:                                         ; preds = %entry
  ret i32 823

type_272:                                         ; preds = %entry
  ret i32 824

type_273:                                         ; preds = %entry
  ret i32 825

type_274:                                         ; preds = %entry
  ret i32 826

type_275:                                         ; preds = %entry
  ret i32 827

type_276:                                         ; preds = %entry
  ret i32 828

type_277:                                         ; preds = %entry
  ret i32 829

type_278:                                         ; preds = %entry
  ret i32 830

type_279:                                         ; preds = %entry
  ret i32 831

type_280:                                         ; preds = %entry
  ret i32 832

type_281:                                         ; preds = %entry
  ret i32 833

type_282:                                         ; preds = %entry
  ret i32 834

type_283:                                         ; preds = %entry
  ret i32 814

type_284:                                         ; preds = %entry
  ret i32 837

type_285:                                         ; preds = %entry
  ret i32 838

type_286:                                         ; preds = %entry
  ret i32 843

type_287:                                         ; preds = %entry
  ret i32 836

type_288:                                         ; preds = %entry
  ret i32 844

type_289:                                         ; preds = %entry
  ret i32 845

type_290:                                         ; preds = %entry
  ret i32 846

type_291:                                         ; preds = %entry
  ret i32 847

type_292:                                         ; preds = %entry
  ret i32 848

type_293:                                         ; preds = %entry
  ret i32 849

type_294:                                         ; preds = %entry
  ret i32 850

type_295:                                         ; preds = %entry
  ret i32 851

type_296:                                         ; preds = %entry
  ret i32 852

type_297:                                         ; preds = %entry
  ret i32 853

type_298:                                         ; preds = %entry
  ret i32 854

type_299:                                         ; preds = %entry
  ret i32 855

type_300:                                         ; preds = %entry
  ret i32 856

type_301:                                         ; preds = %entry
  ret i32 857

type_302:                                         ; preds = %entry
  ret i32 858

type_303:                                         ; preds = %entry
  ret i32 859

type_304:                                         ; preds = %entry
  ret i32 860

type_305:                                         ; preds = %entry
  ret i32 861

type_306:                                         ; preds = %entry
  ret i32 862

type_307:                                         ; preds = %entry
  ret i32 863

type_308:                                         ; preds = %entry
  ret i32 864

type_309:                                         ; preds = %entry
  ret i32 865

type_310:                                         ; preds = %entry
  ret i32 866

type_311:                                         ; preds = %entry
  ret i32 867

type_312:                                         ; preds = %entry
  ret i32 870

type_313:                                         ; preds = %entry
  ret i32 871

type_314:                                         ; preds = %entry
  ret i32 872

type_315:                                         ; preds = %entry
  ret i32 873

type_316:                                         ; preds = %entry
  ret i32 874

type_317:                                         ; preds = %entry
  ret i32 875

type_318:                                         ; preds = %entry
  ret i32 876

type_319:                                         ; preds = %entry
  ret i32 877

type_320:                                         ; preds = %entry
  ret i32 878

type_321:                                         ; preds = %entry
  ret i32 879

type_322:                                         ; preds = %entry
  ret i32 880

type_323:                                         ; preds = %entry
  ret i32 881

type_324:                                         ; preds = %entry
  ret i32 882

type_325:                                         ; preds = %entry
  ret i32 883

type_326:                                         ; preds = %entry
  ret i32 884

type_327:                                         ; preds = %entry
  ret i32 885

type_328:                                         ; preds = %entry
  ret i32 886

type_329:                                         ; preds = %entry
  ret i32 887

type_330:                                         ; preds = %entry
  ret i32 888

type_331:                                         ; preds = %entry
  ret i32 889

type_332:                                         ; preds = %entry
  ret i32 890

type_333:                                         ; preds = %entry
  ret i32 891

type_334:                                         ; preds = %entry
  ret i32 892

type_335:                                         ; preds = %entry
  ret i32 893

type_336:                                         ; preds = %entry
  ret i32 894

type_337:                                         ; preds = %entry
  ret i32 895

type_338:                                         ; preds = %entry
  ret i32 896

type_339:                                         ; preds = %entry
  ret i32 897

type_340:                                         ; preds = %entry
  ret i32 898

type_341:                                         ; preds = %entry
  ret i32 899

type_342:                                         ; preds = %entry
  ret i32 900

type_343:                                         ; preds = %entry
  ret i32 901

type_344:                                         ; preds = %entry
  ret i32 902

type_345:                                         ; preds = %entry
  ret i32 903

type_346:                                         ; preds = %entry
  ret i32 904

type_347:                                         ; preds = %entry
  ret i32 905

type_348:                                         ; preds = %entry
  ret i32 906

type_349:                                         ; preds = %entry
  ret i32 907

type_350:                                         ; preds = %entry
  ret i32 908

type_351:                                         ; preds = %entry
  ret i32 909

type_352:                                         ; preds = %entry
  ret i32 910

type_353:                                         ; preds = %entry
  ret i32 911

type_354:                                         ; preds = %entry
  ret i32 912

type_355:                                         ; preds = %entry
  ret i32 913

type_356:                                         ; preds = %entry
  ret i32 914

type_357:                                         ; preds = %entry
  ret i32 915

type_358:                                         ; preds = %entry
  ret i32 916

type_359:                                         ; preds = %entry
  ret i32 917

type_360:                                         ; preds = %entry
  ret i32 918

type_361:                                         ; preds = %entry
  ret i32 919

type_362:                                         ; preds = %entry
  ret i32 920

type_363:                                         ; preds = %entry
  ret i32 921

type_364:                                         ; preds = %entry
  ret i32 922

type_365:                                         ; preds = %entry
  ret i32 923

type_366:                                         ; preds = %entry
  ret i32 925

type_367:                                         ; preds = %entry
  ret i32 926

type_368:                                         ; preds = %entry
  ret i32 927

type_369:                                         ; preds = %entry
  ret i32 928

type_370:                                         ; preds = %entry
  ret i32 929

type_371:                                         ; preds = %entry
  ret i32 930

type_372:                                         ; preds = %entry
  ret i32 931

type_373:                                         ; preds = %entry
  ret i32 933

type_374:                                         ; preds = %entry
  ret i32 932

type_375:                                         ; preds = %entry
  ret i32 935

type_376:                                         ; preds = %entry
  ret i32 936

type_377:                                         ; preds = %entry
  ret i32 934

type_378:                                         ; preds = %entry
  ret i32 937

type_379:                                         ; preds = %entry
  ret i32 938

type_380:                                         ; preds = %entry
  ret i32 939

type_381:                                         ; preds = %entry
  ret i32 940

type_382:                                         ; preds = %entry
  ret i32 941

type_383:                                         ; preds = %entry
  ret i32 942

type_384:                                         ; preds = %entry
  ret i32 835

type_385:                                         ; preds = %entry
  ret i32 967

type_386:                                         ; preds = %entry
  ret i32 924

type_387:                                         ; preds = %entry
  ret i32 943

type_388:                                         ; preds = %entry
  ret i32 944

type_389:                                         ; preds = %entry
  ret i32 945

type_390:                                         ; preds = %entry
  ret i32 946

type_391:                                         ; preds = %entry
  ret i32 947

type_392:                                         ; preds = %entry
  ret i32 948

type_393:                                         ; preds = %entry
  ret i32 949

type_394:                                         ; preds = %entry
  ret i32 950

type_395:                                         ; preds = %entry
  ret i32 951

type_396:                                         ; preds = %entry
  ret i32 952

type_397:                                         ; preds = %entry
  ret i32 953

type_398:                                         ; preds = %entry
  ret i32 954

type_399:                                         ; preds = %entry
  ret i32 955

type_400:                                         ; preds = %entry
  ret i32 956

type_401:                                         ; preds = %entry
  ret i32 957

type_402:                                         ; preds = %entry
  ret i32 958

type_403:                                         ; preds = %entry
  ret i32 959

type_404:                                         ; preds = %entry
  ret i32 960

type_405:                                         ; preds = %entry
  ret i32 961

type_406:                                         ; preds = %entry
  ret i32 962

type_407:                                         ; preds = %entry
  ret i32 963

type_408:                                         ; preds = %entry
  ret i32 964

type_409:                                         ; preds = %entry
  ret i32 965

type_410:                                         ; preds = %entry
  ret i32 966

type_411:                                         ; preds = %entry
  ret i32 968

type_412:                                         ; preds = %entry
  ret i32 1003

type_413:                                         ; preds = %entry
  ret i32 601

type_414:                                         ; preds = %entry
  ret i32 415

type_419:                                         ; preds = %entry
  ret i32 420

type_422:                                         ; preds = %entry
  ret i32 423

type_424:                                         ; preds = %entry
  ret i32 425

type_426:                                         ; preds = %entry
  ret i32 427

type_428:                                         ; preds = %entry
  ret i32 429

type_430:                                         ; preds = %entry
  ret i32 431

type_432:                                         ; preds = %entry
  ret i32 433

type_440:                                         ; preds = %entry
  ret i32 441

type_442:                                         ; preds = %entry
  ret i32 443

type_444:                                         ; preds = %entry
  ret i32 445

type_459:                                         ; preds = %entry
  ret i32 460

type_461:                                         ; preds = %entry
  ret i32 462

type_463:                                         ; preds = %entry
  ret i32 464

type_465:                                         ; preds = %entry
  ret i32 466

type_471:                                         ; preds = %entry
  ret i32 472

type_477:                                         ; preds = %entry
  ret i32 478

type_529:                                         ; preds = %entry
  ret i32 530

type_533:                                         ; preds = %entry
  ret i32 534

type_548:                                         ; preds = %entry
  ret i32 549

type_555:                                         ; preds = %entry
  ret i32 556

type_557:                                         ; preds = %entry
  ret i32 558

type_559:                                         ; preds = %entry
  ret i32 560

type_561:                                         ; preds = %entry
  ret i32 562

type_563:                                         ; preds = %entry
  ret i32 564

type_569:                                         ; preds = %entry
  ret i32 570

type_575:                                         ; preds = %entry
  ret i32 576

type_623:                                         ; preds = %entry
  ret i32 624

type_650:                                         ; preds = %entry
  ret i32 651

type_652:                                         ; preds = %entry
  ret i32 653

type_655:                                         ; preds = %entry
  ret i32 656

type_657:                                         ; preds = %entry
  ret i32 658

type_659:                                         ; preds = %entry
  ret i32 660

type_662:                                         ; preds = %entry
  ret i32 663

type_664:                                         ; preds = %entry
  ret i32 665

type_666:                                         ; preds = %entry
  ret i32 667

type_668:                                         ; preds = %entry
  ret i32 669

type_670:                                         ; preds = %entry
  ret i32 671

type_677:                                         ; preds = %entry
  ret i32 678

type_679:                                         ; preds = %entry
  ret i32 680

type_681:                                         ; preds = %entry
  ret i32 682

type_694:                                         ; preds = %entry
  ret i32 695

type_721:                                         ; preds = %entry
  ret i32 722

type_723:                                         ; preds = %entry
  ret i32 724

type_725:                                         ; preds = %entry
  ret i32 726

type_727:                                         ; preds = %entry
  ret i32 728

type_731:                                         ; preds = %entry
  ret i32 732

type_733:                                         ; preds = %entry
  ret i32 734

type_735:                                         ; preds = %entry
  ret i32 736

type_743:                                         ; preds = %entry
  ret i32 744

type_745:                                         ; preds = %entry
  ret i32 746

type_747:                                         ; preds = %entry
  ret i32 748

type_756:                                         ; preds = %entry
  ret i32 757

type_758:                                         ; preds = %entry
  ret i32 759

type_760:                                         ; preds = %entry
  ret i32 761

type_762:                                         ; preds = %entry
  ret i32 763

type_764:                                         ; preds = %entry
  ret i32 765

type_766:                                         ; preds = %entry
  ret i32 767

type_768:                                         ; preds = %entry
  ret i32 769

type_770:                                         ; preds = %entry
  ret i32 771

type_772:                                         ; preds = %entry
  ret i32 773

type_774:                                         ; preds = %entry
  ret i32 775

type_782:                                         ; preds = %entry
  ret i32 783

type_784:                                         ; preds = %entry
  ret i32 785

type_786:                                         ; preds = %entry
  ret i32 787

type_788:                                         ; preds = %entry
  ret i32 789

type_794:                                         ; preds = %entry
  ret i32 795

type_800:                                         ; preds = %entry
  ret i32 801

type_839:                                         ; preds = %entry
  ret i32 840

type_841:                                         ; preds = %entry
  ret i32 842

type_868:                                         ; preds = %entry
  ret i32 869

type_969:                                         ; preds = %entry
  ret i32 970

type_971:                                         ; preds = %entry
  ret i32 972

type_973:                                         ; preds = %entry
  ret i32 974

type_975:                                         ; preds = %entry
  ret i32 976

type_977:                                         ; preds = %entry
  ret i32 978

type_979:                                         ; preds = %entry
  ret i32 980

type_981:                                         ; preds = %entry
  ret i32 982

type_983:                                         ; preds = %entry
  ret i32 984

type_985:                                         ; preds = %entry
  ret i32 986

type_987:                                         ; preds = %entry
  ret i32 988

type_989:                                         ; preds = %entry
  ret i32 990

type_991:                                         ; preds = %entry
  ret i32 992

type_993:                                         ; preds = %entry
  ret i32 994

type_995:                                         ; preds = %entry
  ret i32 996

type_997:                                         ; preds = %entry
  ret i32 998

type_999:                                         ; preds = %entry
  ret i32 1000

type_1001:                                        ; preds = %entry
  ret i32 1002

otherwise:                                        ; preds = %entry
  unreachable
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<Exception+:Class>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, i32 %obj) #0 {
entry:
  %0 = call %"IO::FileDescriptor"* @"*Exception+@Object::to_s<IO::FileDescriptor>:IO::FileDescriptor"(i32 %obj, %"IO::FileDescriptor"* %self)
  ret %"IO::FileDescriptor"* %self
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*Exception+@Object::to_s<IO::FileDescriptor>:IO::FileDescriptor"(i32 %self, %"IO::FileDescriptor"* %io) #0 {
entry:
  %0 = icmp eq i32 496, %self
  br i1 %0, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  br label %exit

next_def:                                         ; preds = %entry
  %1 = icmp eq i32 495, %self
  br i1 %1, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def29, %current_def27, %current_def25, %current_def23, %current_def21, %current_def19, %current_def17, %current_def15, %current_def13, %current_def11, %current_def9, %current_def7, %current_def5, %current_def3, %current_def1, %current_def
  %2 = phi %String* [ bitcast ({ i32, i32, i32, [20 x i8] }* @"'Time::Format::Error...'" to %String*), %current_def ], [ bitcast ({ i32, i32, i32, [6 x i8] }* @"'Errno'" to %String*), %current_def1 ], [ bitcast ({ i32, i32, i32, [26 x i8] }* @"'Concurrent::Cancele...'" to %String*), %current_def3 ], [ bitcast ({ i32, i32, i32, [21 x i8] }* @"'Channel::ClosedErro...'" to %String*), %current_def5 ], [ bitcast ({ i32, i32, i32, [13 x i8] }* @"'IO::EOFError'" to %String*), %current_def7 ], [ bitcast ({ i32, i32, i32, [10 x i8] }* @"'IO::Error'" to %String*), %current_def9 ], [ bitcast ({ i32, i32, i32, [12 x i8] }* @"'IO::Timeout'" to %String*), %current_def11 ], [ bitcast ({ i32, i32, i32, [23 x i8] }* @"'Enumerable::EmptyEr...'" to %String*), %current_def13 ], [ bitcast ({ i32, i32, i32, [15 x i8] }* @"'DivisionByZero'" to %String*), %current_def15 ], [ bitcast ({ i32, i32, i32, [9 x i8] }* @"'KeyError'" to %String*), %current_def17 ], [ bitcast ({ i32, i32, i32, [25 x i8] }* @"'InvalidByteSequence...'" to %String*), %current_def19 ], [ bitcast ({ i32, i32, i32, [14 x i8] }* @"'TypeCastError'" to %String*), %current_def21 ], [ bitcast ({ i32, i32, i32, [14 x i8] }* @"'ArgumentError'" to %String*), %current_def23 ], [ bitcast ({ i32, i32, i32, [11 x i8] }* @"'IndexError'" to %String*), %current_def25 ], [ bitcast ({ i32, i32, i32, [20 x i8] }* @"'Debug::MachO::Error...'" to %String*), %current_def27 ], [ bitcast ({ i32, i32, i32, [10 x i8] }* @"'Exception'" to %String*), %current_def29 ]
  %3 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<String>:IO::FileDescriptor"(%"IO::FileDescriptor"* %io, %String* %2)
  ret %"IO::FileDescriptor"* %3

current_def1:                                     ; preds = %next_def
  br label %exit

next_def2:                                        ; preds = %next_def
  %4 = icmp eq i32 494, %self
  br i1 %4, label %current_def3, label %next_def4

current_def3:                                     ; preds = %next_def2
  br label %exit

next_def4:                                        ; preds = %next_def2
  %5 = icmp eq i32 493, %self
  br i1 %5, label %current_def5, label %next_def6

current_def5:                                     ; preds = %next_def4
  br label %exit

next_def6:                                        ; preds = %next_def4
  %6 = icmp eq i32 492, %self
  br i1 %6, label %current_def7, label %next_def8

current_def7:                                     ; preds = %next_def6
  br label %exit

next_def8:                                        ; preds = %next_def6
  %7 = icmp eq i32 491, %self
  br i1 %7, label %current_def9, label %next_def10

current_def9:                                     ; preds = %next_def8
  br label %exit

next_def10:                                       ; preds = %next_def8
  %8 = icmp eq i32 490, %self
  br i1 %8, label %current_def11, label %next_def12

current_def11:                                    ; preds = %next_def10
  br label %exit

next_def12:                                       ; preds = %next_def10
  %9 = icmp eq i32 489, %self
  br i1 %9, label %current_def13, label %next_def14

current_def13:                                    ; preds = %next_def12
  br label %exit

next_def14:                                       ; preds = %next_def12
  %10 = icmp eq i32 488, %self
  br i1 %10, label %current_def15, label %next_def16

current_def15:                                    ; preds = %next_def14
  br label %exit

next_def16:                                       ; preds = %next_def14
  %11 = icmp eq i32 487, %self
  br i1 %11, label %current_def17, label %next_def18

current_def17:                                    ; preds = %next_def16
  br label %exit

next_def18:                                       ; preds = %next_def16
  %12 = icmp eq i32 486, %self
  br i1 %12, label %current_def19, label %next_def20

current_def19:                                    ; preds = %next_def18
  br label %exit

next_def20:                                       ; preds = %next_def18
  %13 = icmp eq i32 485, %self
  br i1 %13, label %current_def21, label %next_def22

current_def21:                                    ; preds = %next_def20
  br label %exit

next_def22:                                       ; preds = %next_def20
  %14 = icmp eq i32 484, %self
  br i1 %14, label %current_def23, label %next_def24

current_def23:                                    ; preds = %next_def22
  br label %exit

next_def24:                                       ; preds = %next_def22
  %15 = icmp eq i32 483, %self
  br i1 %15, label %current_def25, label %next_def26

current_def25:                                    ; preds = %next_def24
  br label %exit

next_def26:                                       ; preds = %next_def24
  %16 = icmp eq i32 482, %self
  br i1 %16, label %current_def27, label %next_def28

current_def27:                                    ; preds = %next_def26
  br label %exit

next_def28:                                       ; preds = %next_def26
  %17 = call i1 @"~match<Exception+:Class>"(i32 %self)
  br i1 %17, label %current_def29, label %next_def30

current_def29:                                    ; preds = %next_def28
  br label %exit

next_def30:                                       ; preds = %next_def28
  unreachable
}

define internal i1 @"~match<Exception+:Class>"(i32) {
entry:
  %1 = icmp eq i32 1008, %0
  %2 = icmp eq i32 481, %0
  %3 = or i1 %1, %2
  %4 = icmp eq i32 482, %0
  %5 = or i1 %3, %4
  %6 = icmp eq i32 483, %0
  %7 = or i1 %5, %6
  %8 = icmp eq i32 484, %0
  %9 = or i1 %7, %8
  %10 = icmp eq i32 485, %0
  %11 = or i1 %9, %10
  %12 = icmp eq i32 486, %0
  %13 = or i1 %11, %12
  %14 = icmp eq i32 487, %0
  %15 = or i1 %13, %14
  %16 = icmp eq i32 488, %0
  %17 = or i1 %15, %16
  %18 = icmp eq i32 489, %0
  %19 = or i1 %17, %18
  %20 = icmp eq i32 490, %0
  %21 = or i1 %19, %20
  %22 = icmp eq i32 491, %0
  %23 = or i1 %21, %22
  %24 = icmp eq i32 492, %0
  %25 = or i1 %23, %24
  %26 = icmp eq i32 493, %0
  %27 = or i1 %25, %26
  %28 = icmp eq i32 494, %0
  %29 = or i1 %27, %28
  %30 = icmp eq i32 495, %0
  %31 = or i1 %29, %30
  %32 = icmp eq i32 496, %0
  %33 = or i1 %31, %32
  ret i1 %33
}

; Function Attrs: uwtable
define internal %"Array(String)"* @"*Exception+@Exception#backtrace?:(Array(String) | Nil)"(i32* %self) #0 {
alloca:
  %__arg0 = alloca %CallStack.1
  %__arg03 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %Exception*
  %1 = getelementptr inbounds %Exception, %Exception* %0, i32 0, i32 3
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %1, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = icmp eq i32 308, %3
  br i1 %4, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %5 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %1, i32 0, i32 1
  %6 = bitcast [2 x i64]* %5 to %CallStack.1*
  %7 = load %CallStack.1, %CallStack.1* %6
  store %CallStack.1 %7, %CallStack.1* %__arg0
  %8 = call %"Array(String)"* @"*CallStack#printable_backtrace:Array(String)"(%CallStack.1* %__arg0)
  br label %exit

next_def:                                         ; preds = %entry
  %9 = icmp eq i32 0, %3
  br i1 %9, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def1, %current_def
  %10 = phi %"Array(String)"* [ %8, %current_def ], [ null, %current_def1 ]
  ret %"Array(String)"* %10

current_def1:                                     ; preds = %next_def
  br label %exit

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal %"Array(String)"* @"*CallStack#printable_backtrace:Array(String)"(%CallStack.1* %self) #0 {
alloca:
  %__temp_60 = alloca %"Array(String)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %CallStack.1, %CallStack.1* %self, i32 0, i32 1
  %1 = load %"Array(String)"*, %"Array(String)"** %0
  store %"Array(String)"* %1, %"Array(String)"** %__temp_60
  %2 = icmp ne %"Array(String)"* %1, null
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load %"Array(String)"*, %"Array(String)"** %__temp_60
  br label %exit

else:                                             ; preds = %entry
  %4 = call %"Array(String)"* @"*CallStack#decode_backtrace:Array(String)"(%CallStack.1* %self)
  %5 = getelementptr inbounds %CallStack.1, %CallStack.1* %self, i32 0, i32 1
  store %"Array(String)"* %4, %"Array(String)"** %5
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi %"Array(String)"* [ %3, %then ], [ %4, %else ]
  ret %"Array(String)"* %6
}

; Function Attrs: uwtable
define internal %"Array(String)"* @"*CallStack#decode_backtrace:Array(String)"(%CallStack.1* %self) #0 {
alloca:
  %ip = alloca i8*
  %__temp_61 = alloca %"Tuple(String | Nil, Int32, Int32)"
  %file = alloca %String*
  %line = alloca i32
  %column = alloca i32
  %file_line_column = alloca %String*
  %frame = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  %__temp_148 = alloca %"Tuple(Int64, Pointer(UInt8)).16"
  %sname = alloca i8*
  %function = alloca %String*
  %ary = alloca %"Array(String)"*
  %e = alloca i8*
  %v = alloca %String*
  %i = alloca i32
  %i1 = alloca i32
  %0 = alloca %"Tuple(String | Nil, Int32, Int32)"
  %1 = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = getelementptr inbounds %CallStack.1, %CallStack.1* %self, i32 0, i32 0
  %3 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %2
  %4 = call %"Array(String)"* @"*Array(String)@Array(T)::new:Array(String)"(i32 438)
  store %"Array(String)"* %4, %"Array(String)"** %ary
  store i32 0, i32* %i1
  br label %while

while:                                            ; preds = %exit14, %entry
  %5 = load i32, i32* %i1
  %6 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %3, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %body, label %exit

body:                                             ; preds = %while
  %9 = load i32, i32* %i1
  store i32 %9, i32* %i
  %10 = load i32, i32* %i
  %11 = call i8* @"*Array(Pointer(Void))@Array(T)#unsafe_at<Int32>:Pointer(Void)"(%"Array(Pointer(Void)).2"* %3, i32 %10)
  store i8* %11, i8** %e
  %12 = load i8*, i8** %e
  store i8* %12, i8** %ip
  %13 = load i8*, i8** %ip
  %14 = call %"Tuple(String | Nil, Int32, Int32)" @"*CallStack::decode_line_number<Pointer(Void)>:Tuple(String | Nil, Int32, Int32)"(i8* %13)
  store %"Tuple(String | Nil, Int32, Int32)" %14, %"Tuple(String | Nil, Int32, Int32)"* %0
  %15 = load %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %0
  store %"Tuple(String | Nil, Int32, Int32)" %15, %"Tuple(String | Nil, Int32, Int32)"* %__temp_61
  %16 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %__temp_61, i32 0, i32 0
  %17 = load %String*, %String** %16
  store %String* %17, %String** %file
  %18 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %__temp_61, i32 0, i32 1
  %19 = load i32, i32* %18
  store i32 %19, i32* %line
  %20 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %__temp_61, i32 0, i32 2
  %21 = load i32, i32* %20
  store i32 %21, i32* %column
  %22 = load %String*, %String** %file
  %23 = icmp eq %String* %22, null
  %24 = select i1 %23, i32 0, i32 1
  %25 = icmp eq i32 0, %24
  br i1 %25, label %current_def, label %next_def

exit:                                             ; preds = %while
  %26 = load %"Array(String)"*, %"Array(String)"** %ary
  ret %"Array(String)"* %26

then:                                             ; preds = %exit2
  store %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"'??'" to %String*), %String** %file_line_column
  br label %exit5

else:                                             ; preds = %exit2
  %27 = call %"Array(String)"** @"~CallStack::skip:read"()
  %28 = load %"Array(String)"*, %"Array(String)"** %27
  %29 = load %String*, %String** %file
  %30 = call i1 @"*Array(String)@Enumerable(T)#includes?<(String | Nil)>:Bool"(%"Array(String)"* %28, %String* %29)
  br i1 %30, label %then6, label %else7

current_def:                                      ; preds = %body
  br label %exit2

next_def:                                         ; preds = %body
  %31 = icmp eq i32 1, %24
  br i1 %31, label %current_def3, label %next_def4

exit2:                                            ; preds = %current_def3, %current_def
  %32 = phi i1 [ false, %current_def ], [ %33, %current_def3 ]
  br i1 %32, label %then, label %else

current_def3:                                     ; preds = %next_def
  %33 = call i1 @"*String#==<String>:Bool"(%String* %22, %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"'??'" to %String*))
  br label %exit2

next_def4:                                        ; preds = %next_def
  unreachable

exit5:                                            ; preds = %else7, %then
  %34 = load i8*, i8** %ip
  %35 = call %"(Tuple(Int64, Pointer(UInt8)) | Nil)" @"*CallStack::decode_frame<Pointer(Void)>:(Tuple(Int64, Pointer(UInt8)) | Nil)"(i8* %34)
  store %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %35, %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %1
  %36 = load %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %1
  store %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %36, %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %frame
  %37 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %1, i32 0, i32 0
  %38 = load i32, i32* %37
  %39 = icmp eq i32 %38, 0
  %40 = xor i1 %39, true
  %41 = and i1 true, %40
  br i1 %41, label %then9, label %else10

then6:                                            ; preds = %else
  br label %exit8

else7:                                            ; preds = %else
  %42 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %43 = load %String*, %String** %file
  %44 = call %"String::Builder"* @"*String::Builder@IO#<<<(String | Nil)>:String::Builder"(%"String::Builder"* %42, %String* %43)
  %45 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %44, %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"' '" to %String*))
  %46 = load i32, i32* %line
  %47 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %45, i32 %46)
  %48 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %47, %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"':'" to %String*))
  %49 = load i32, i32* %column
  %50 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %48, i32 %49)
  %51 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %50)
  store %String* %51, %String** %file_line_column
  br label %exit5

exit8:                                            ; preds = %exit11, %then6
  %52 = phi %String* [ null, %then6 ], [ %78, %exit11 ]
  store %String* %52, %String** %v
  %53 = load %String*, %String** %v
  %54 = icmp eq %String* %53, null
  %55 = select i1 %54, i32 0, i32 1
  %56 = icmp eq i32 0, %55
  br i1 %56, label %then12, label %else13

then9:                                            ; preds = %exit5
  %57 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %frame, i32 0, i32 1
  %58 = bitcast [2 x i64]* %57 to %"Tuple(Int64, Pointer(UInt8)).16"*
  %59 = load %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %58
  store %"Tuple(Int64, Pointer(UInt8)).16" %59, %"Tuple(Int64, Pointer(UInt8)).16"* %__temp_148
  %60 = getelementptr inbounds %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %__temp_148, i32 0, i32 0
  %61 = load i64, i64* %60
  %62 = getelementptr inbounds %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %__temp_148, i32 0, i32 1
  %63 = load i8*, i8** %62
  store i8* %63, i8** %sname
  %64 = load i8*, i8** %sname
  %65 = call %String* @"*String::new<Pointer(UInt8)>:String"(i8* %64)
  store %String* %65, %String** %function
  br label %exit11

else10:                                           ; preds = %exit5
  store %String* bitcast ({ i32, i32, i32, [4 x i8] }* @"'???'" to %String*), %String** %function
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %66 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %67 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %66, %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"'0x'" to %String*))
  %68 = load i8*, i8** %ip
  %69 = ptrtoint i8* %68 to i64
  %70 = call %String* @"*UInt64@Int#to_s<Int32>:String"(i64 %69, i32 16)
  %71 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %67, %String* %70)
  %72 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %71, %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"': '" to %String*))
  %73 = load %String*, %String** %function
  %74 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %72, %String* %73)
  %75 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %74, %String* bitcast ({ i32, i32, i32, [5 x i8] }* @"' at '" to %String*))
  %76 = load %String*, %String** %file_line_column
  %77 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %75, %String* %76)
  %78 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %77)
  br label %exit8

then12:                                           ; preds = %exit8
  br label %exit14

else13:                                           ; preds = %exit8
  %79 = load %"Array(String)"*, %"Array(String)"** %ary
  %80 = load %String*, %String** %v
  %81 = call %"Array(String)"* @"*Array(String)@Array(T)#<<<String>:Array(String)"(%"Array(String)"* %79, %String* %80)
  br label %exit14

exit14:                                           ; preds = %else13, %then12
  %82 = phi %"Array(String)"* [ null, %then12 ], [ %81, %else13 ]
  %83 = load i32, i32* %i1
  %84 = add i32 %83, 1
  store i32 %84, i32* %i1
  br label %while
}

; Function Attrs: alwaysinline uwtable
define internal i8* @"*Array(Pointer(Void))@Array(T)#unsafe_at<Int32>:Pointer(Void)"(%"Array(Pointer(Void)).2"* %self, i32 %index) #4 {
entry:
  %0 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  %1 = load i8**, i8*** %0
  %2 = call i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]<Int32>:Pointer(Void)"(i8** %1, i32 %index)
  ret i8* %2
}

; Function Attrs: uwtable
define internal %"Tuple(String | Nil, Int32, Int32)" @"*CallStack::decode_line_number<Pointer(Void)>:Tuple(String | Nil, Int32, Int32)"(i8* %ip) #0 {
alloca:
  %ln = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %row = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %path = alloca %String*
  %dirname = alloca %String*
  %0 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %1 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %2 = alloca %"Tuple(String | Nil, Int32, Int32)"
  %3 = alloca %"Tuple(String, Int32, Int32)"
  %4 = alloca %"Tuple(String | Nil, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  %5 = call %"(Debug::DWARF::LineNumbers | Nil)" @"*CallStack::dwarf_line_numbers:(Debug::DWARF::LineNumbers | Nil)"()
  store %"(Debug::DWARF::LineNumbers | Nil)" %5, %"(Debug::DWARF::LineNumbers | Nil)"* %0
  %6 = load %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %0
  store %"(Debug::DWARF::LineNumbers | Nil)" %6, %"(Debug::DWARF::LineNumbers | Nil)"* %ln
  %7 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %0, i32 0, i32 0
  %8 = load i32, i32* %7
  %9 = icmp eq i32 %8, 0
  %10 = xor i1 %9, true
  %11 = and i1 true, %10
  br i1 %11, label %then, label %else

then:                                             ; preds = %entry
  %12 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %ln, i32 0, i32 1
  %13 = bitcast [6 x i64]* %12 to %"Debug::DWARF::LineNumbers.17"*
  %14 = call i64 @"*CallStack::decode_address<Pointer(Void)>:UInt64"(i8* %ip)
  %15 = call %"(Debug::DWARF::LineNumbers::Row | Nil)" @"*Debug::DWARF::LineNumbers#find<UInt64>:(Debug::DWARF::LineNumbers::Row | Nil)"(%"Debug::DWARF::LineNumbers.17"* %13, i64 %14)
  store %"(Debug::DWARF::LineNumbers::Row | Nil)" %15, %"(Debug::DWARF::LineNumbers::Row | Nil)"* %1
  %16 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %1
  store %"(Debug::DWARF::LineNumbers::Row | Nil)" %16, %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row
  %17 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %1, i32 0, i32 0
  %18 = load i32, i32* %17
  %19 = icmp eq i32 %18, 0
  %20 = xor i1 %19, true
  %21 = and i1 true, %20
  br i1 %21, label %then1, label %else2

else:                                             ; preds = %entry
  br label %exit5

then1:                                            ; preds = %then
  %22 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %ln, i32 0, i32 1
  %23 = bitcast [6 x i64]* %22 to %"Debug::DWARF::LineNumbers.17"*
  %24 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %23, i32 0, i32 2
  %25 = load %"Array(String)"*, %"Array(String)"** %24
  %26 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row, i32 0, i32 1
  %27 = bitcast [4 x i64]* %26 to %"Debug::DWARF::LineNumbers::Row.20"*
  %28 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %27, i32 0, i32 3
  %29 = load i32, i32* %28
  %30 = call %String* @"*Array(String)@Indexable(T)#[]?<Int32>:(String | Nil)"(%"Array(String)"* %25, i32 %29)
  store %String* %30, %String** %path
  %31 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %ln, i32 0, i32 1
  %32 = bitcast [6 x i64]* %31 to %"Debug::DWARF::LineNumbers.17"*
  %33 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %32, i32 0, i32 1
  %34 = load %"Array(String)"*, %"Array(String)"** %33
  %35 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row, i32 0, i32 1
  %36 = bitcast [4 x i64]* %35 to %"Debug::DWARF::LineNumbers::Row.20"*
  %37 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %36, i32 0, i32 2
  %38 = load i32, i32* %37
  %39 = call %String* @"*Array(String)@Indexable(T)#[]?<Int32>:(String | Nil)"(%"Array(String)"* %34, i32 %38)
  store %String* %39, %String** %dirname
  %40 = icmp ne %String* %39, null
  br i1 %40, label %then3, label %else4

else2:                                            ; preds = %then
  br label %exit5

then3:                                            ; preds = %then1
  %41 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %42 = load %String*, %String** %dirname
  %43 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %41, %String* %42)
  %44 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %43, %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'/'" to %String*))
  %45 = load %String*, %String** %path
  %46 = call %"String::Builder"* @"*String::Builder@IO#<<<(String | Nil)>:String::Builder"(%"String::Builder"* %44, %String* %45)
  %47 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %46)
  store %String* %47, %String** %path
  br label %exit

else4:                                            ; preds = %then1
  br label %exit

exit:                                             ; preds = %else4, %then3
  %48 = load %String*, %String** %path
  %49 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %2, i32 0, i32 0
  store %String* %48, %String** %49
  %50 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row, i32 0, i32 1
  %51 = bitcast [4 x i64]* %50 to %"Debug::DWARF::LineNumbers::Row.20"*
  %52 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %51, i32 0, i32 4
  %53 = load i32, i32* %52
  %54 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %2, i32 0, i32 1
  store i32 %53, i32* %54
  %55 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row, i32 0, i32 1
  %56 = bitcast [4 x i64]* %55 to %"Debug::DWARF::LineNumbers::Row.20"*
  %57 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %56, i32 0, i32 5
  %58 = load i32, i32* %57
  %59 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %2, i32 0, i32 2
  store i32 %58, i32* %59
  %60 = load %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %2
  ret %"Tuple(String | Nil, Int32, Int32)" %60

exit5:                                            ; preds = %else, %else2
  %61 = getelementptr inbounds %"Tuple(String, Int32, Int32)", %"Tuple(String, Int32, Int32)"* %3, i32 0, i32 0
  store %String* bitcast ({ i32, i32, i32, [3 x i8] }* @"'??'" to %String*), %String** %61
  %62 = getelementptr inbounds %"Tuple(String, Int32, Int32)", %"Tuple(String, Int32, Int32)"* %3, i32 0, i32 1
  store i32 0, i32* %62
  %63 = getelementptr inbounds %"Tuple(String, Int32, Int32)", %"Tuple(String, Int32, Int32)"* %3, i32 0, i32 2
  store i32 0, i32* %63
  %64 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %4, i32 0, i32 0
  %65 = getelementptr inbounds %"Tuple(String, Int32, Int32)", %"Tuple(String, Int32, Int32)"* %3, i32 0, i32 0
  %66 = load %String*, %String** %65
  store %String* %66, %String** %64
  %67 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %4, i32 0, i32 1
  %68 = getelementptr inbounds %"Tuple(String, Int32, Int32)", %"Tuple(String, Int32, Int32)"* %3, i32 0, i32 1
  %69 = load i32, i32* %68
  store i32 %69, i32* %67
  %70 = getelementptr inbounds %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %4, i32 0, i32 2
  %71 = getelementptr inbounds %"Tuple(String, Int32, Int32)", %"Tuple(String, Int32, Int32)"* %3, i32 0, i32 2
  %72 = load i32, i32* %71
  store i32 %72, i32* %70
  %73 = load %"Tuple(String | Nil, Int32, Int32)", %"Tuple(String | Nil, Int32, Int32)"* %4
  ret %"Tuple(String | Nil, Int32, Int32)" %73
}

; Function Attrs: uwtable
define internal %"(Debug::DWARF::LineNumbers | Nil)" @"*CallStack::dwarf_line_numbers:(Debug::DWARF::LineNumbers | Nil)"() #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %__temp_62 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %0 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %mach_o = alloca %"Debug::MachO"
  %program = alloca %String*
  %files = alloca %"Tuple(String, String)"
  %1 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %2 = alloca %"Tuple(String, String)"
  %dwarf = alloca %String*
  %mach_o9 = alloca %"Debug::MachO"
  %path = alloca %String*
  %file = alloca %File*
  %filename = alloca %String*
  %mode = alloca %String*
  %perm = alloca i32
  %encoding = alloca %Nil
  %invalid = alloca %Nil
  %file10 = alloca %File*
  %3 = alloca %"Debug::MachO"
  %dsym = alloca %"Debug::MachO"
  %path11 = alloca %String*
  %file12 = alloca %File*
  %filename13 = alloca %String*
  %mode14 = alloca %String*
  %perm15 = alloca i32
  %encoding16 = alloca %Nil
  %invalid17 = alloca %Nil
  %file18 = alloca %File*
  %4 = alloca %"Debug::MachO"
  %5 = alloca %"Debug::MachO::UUID.22"
  %6 = alloca %"Debug::MachO::UUID.22"
  %sh = alloca %"Debug::MachO::Section64"
  %io = alloca i32*
  %name = alloca %String*
  %sh27 = alloca %"(Debug::MachO::Section64 | Nil)"
  %s = alloca %"Debug::MachO::Section64"
  %if_none = alloca %Nil
  %elem = alloca %"Debug::MachO::Section64"
  %i = alloca i32
  %i31 = alloca i32
  %7 = alloca %"Debug::MachO::Section64"
  %8 = alloca %"(Debug::MachO::Section64 | Nil)"
  %9 = alloca %"(Debug::MachO::Section64 | Nil)"
  %10 = alloca %"Debug::DWARF::LineNumbers.17"
  %11 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %12 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %mach_o53 = alloca %"Debug::MachO"
  %path54 = alloca %String*
  %file55 = alloca %File*
  %filename56 = alloca %String*
  %mode57 = alloca %String*
  %perm58 = alloca i32
  %encoding59 = alloca %Nil
  %invalid60 = alloca %Nil
  %file61 = alloca %File*
  %13 = alloca %"Debug::MachO"
  %dsym64 = alloca %"Debug::MachO"
  %path65 = alloca %String*
  %file66 = alloca %File*
  %filename67 = alloca %String*
  %mode68 = alloca %String*
  %perm69 = alloca i32
  %encoding70 = alloca %Nil
  %invalid71 = alloca %Nil
  %file72 = alloca %File*
  %14 = alloca %"Debug::MachO"
  %15 = alloca %"Debug::MachO::UUID.22"
  %16 = alloca %"Debug::MachO::UUID.22"
  %sh81 = alloca %"Debug::MachO::Section64"
  %io82 = alloca i32*
  %name83 = alloca %String*
  %sh84 = alloca %"(Debug::MachO::Section64 | Nil)"
  %s88 = alloca %"Debug::MachO::Section64"
  %if_none89 = alloca %Nil
  %elem90 = alloca %"Debug::MachO::Section64"
  %i91 = alloca i32
  %i92 = alloca i32
  %17 = alloca %"Debug::MachO::Section64"
  %18 = alloca %"(Debug::MachO::Section64 | Nil)"
  %19 = alloca %"(Debug::MachO::Section64 | Nil)"
  %20 = alloca %"Debug::DWARF::LineNumbers.17"
  %21 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %22 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  %23 = alloca %"(Debug::DWARF::LineNumbers | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %24 = load %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* @"CallStack::dwarf_line_numbers"
  store %"(Debug::DWARF::LineNumbers | Nil)" %24, %"(Debug::DWARF::LineNumbers | Nil)"* %__temp_62
  %25 = load i32, i32* getelementptr inbounds (%"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* @"CallStack::dwarf_line_numbers", i32 0, i32 0)
  %26 = icmp eq i32 %25, 0
  %27 = xor i1 %26, true
  %28 = and i1 true, %27
  br i1 %28, label %then, label %else

then:                                             ; preds = %entry
  %29 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %__temp_62, i32 0, i32 1
  %30 = bitcast [6 x i64]* %29 to %"Debug::DWARF::LineNumbers.17"*
  %31 = load %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %30
  %32 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %0, i32 0, i32 0
  store i32 306, i32* %32
  %33 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %0, i32 0, i32 1
  %34 = bitcast [6 x i64]* %33 to %"Debug::DWARF::LineNumbers.17"*
  store %"Debug::DWARF::LineNumbers.17" %31, %"Debug::DWARF::LineNumbers.17"* %34
  br label %exit

else:                                             ; preds = %entry
  %35 = call %String* @"*Process::executable_path:(String | Nil)"()
  store %String* %35, %String** %program
  %36 = load %String*, %String** %program
  %37 = icmp ne %String* %36, null
  br i1 %37, label %then1, label %else2

exit:                                             ; preds = %exit4, %then
  %38 = phi %"(Debug::DWARF::LineNumbers | Nil)"* [ %0, %then ], [ %62, %exit4 ]
  %39 = load %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %38
  ret %"(Debug::DWARF::LineNumbers | Nil)" %39

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  %40 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %40
  %41 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %1, i32 0, i32 1
  store [6 x i64] zeroinitializer, [6 x i64]* %41
  br label %exit4

exit3:                                            ; preds = %then1
  %42 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %43 = load %String*, %String** %program
  %44 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %42, %String* %43)
  %45 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %44, %String* bitcast ({ i32, i32, i32, [32 x i8] }* @"'.dSYM/Contents/Reso...'" to %String*))
  %46 = load %String*, %String** %program
  %47 = call %String* @"*File::basename<String>:String"(%String* %46)
  %48 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %45, %String* %47)
  %49 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %48)
  %50 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %2, i32 0, i32 0
  store %String* %49, %String** %50
  %51 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %52 = load %String*, %String** %program
  %53 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %51, %String* %52)
  %54 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %53, %String* bitcast ({ i32, i32, i32, [7 x i8] }* @"'.dwarf'" to %String*))
  %55 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %54)
  %56 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %2, i32 0, i32 1
  store %String* %55, %String** %56
  %57 = load %"Tuple(String, String)", %"Tuple(String, String)"* %2
  store %"Tuple(String, String)" %57, %"Tuple(String, String)"* %files
  %58 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %files, i32 0, i32 0
  %59 = load %String*, %String** %58
  store %String* %59, %String** %dwarf
  %60 = load %String*, %String** %dwarf
  %61 = call i1 @"*File::exists?<String>:Bool"(%String* %60)
  br i1 %61, label %then5, label %else6

exit4:                                            ; preds = %exit52, %invoke_out106, %invoke_out43, %else2
  %62 = phi %"(Debug::DWARF::LineNumbers | Nil)"* [ %1, %else2 ], [ %155, %invoke_out43 ], [ %250, %invoke_out106 ], [ %23, %exit52 ]
  %63 = load %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %62
  store %"(Debug::DWARF::LineNumbers | Nil)" %63, %"(Debug::DWARF::LineNumbers | Nil)"* @"CallStack::dwarf_line_numbers"
  br label %exit

then5:                                            ; preds = %exit3
  br label %exit7

else6:                                            ; preds = %exit3
  br label %exit8

exit7:                                            ; preds = %then5
  %64 = load %String*, %String** %program
  store %String* %64, %String** %path
  %65 = load %String*, %String** %path
  store %String* %65, %String** %filename
  store %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'r'" to %String*), %String** %mode
  store i32 420, i32* %perm
  %66 = load %String*, %String** %filename
  %67 = load %String*, %String** %mode
  %68 = load i32, i32* %perm
  %69 = load %Nil, %Nil* %encoding
  %70 = load %Nil, %Nil* %invalid
  %71 = call %File* @"*File::new<String, String, Int32, Nil, Nil>:File"(%String* %66, %String* %67, i32 %68, %Nil zeroinitializer, %Nil zeroinitializer)
  store %File* %71, %File** %file10
  %72 = load %File*, %File** %file10
  store %File* %72, %File** %file
  %73 = load %File*, %File** %file
  %74 = invoke %"Debug::MachO" @"*Debug::MachO::new<File>:Debug::MachO"(%File* %73)
          to label %invoke_out unwind label %rescue

exit8:                                            ; preds = %exit48, %else6
  %75 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %files, i32 0, i32 1
  %76 = load %String*, %String** %75
  store %String* %76, %String** %dwarf
  %77 = load %String*, %String** %dwarf
  %78 = call i1 @"*File::exists?<String>:Bool"(%String* %77)
  br i1 %78, label %then49, label %else50

rescue:                                           ; preds = %exit44, %invoke_out45, %rescue20, %invoke_out, %exit7
  %79 = landingpad %landing_pad
          cleanup
  %80 = extractvalue %landing_pad %79, 0
  %81 = extractvalue %landing_pad %79, 1
  %82 = load %File*, %File** %file10
  call void @"*File@IO::Buffered#close:Nil"(%File* %82)
  %83 = bitcast i8* %80 to %"struct.LibUnwind::Exception"*
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %83)
  unreachable

invoke_out:                                       ; preds = %exit7
  store %"Debug::MachO" %74, %"Debug::MachO"* %3
  %84 = load %"Debug::MachO", %"Debug::MachO"* %3
  store %"Debug::MachO" %84, %"Debug::MachO"* %mach_o9
  %85 = load %String*, %String** %dwarf
  store %String* %85, %String** %path11
  %86 = load %String*, %String** %path11
  store %String* %86, %String** %filename13
  store %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'r'" to %String*), %String** %mode14
  store i32 420, i32* %perm15
  %87 = load %String*, %String** %filename13
  %88 = load %String*, %String** %mode14
  %89 = load i32, i32* %perm15
  %90 = load %Nil, %Nil* %encoding16
  %91 = load %Nil, %Nil* %invalid17
  %92 = invoke %File* @"*File::new<String, String, Int32, Nil, Nil>:File"(%String* %87, %String* %88, i32 %89, %Nil zeroinitializer, %Nil zeroinitializer)
          to label %invoke_out19 unwind label %rescue

invoke_out19:                                     ; preds = %invoke_out
  store %File* %92, %File** %file18
  %93 = load %File*, %File** %file18
  store %File* %93, %File** %file12
  %94 = load %File*, %File** %file12
  %95 = invoke %"Debug::MachO" @"*Debug::MachO::new<File>:Debug::MachO"(%File* %94)
          to label %invoke_out21 unwind label %rescue20

rescue20:                                         ; preds = %invoke_out42, %exit41, %invoke_out39, %invoke_out38, %invoke_out37, %then28, %body, %then22, %invoke_out25, %invoke_out24, %invoke_out21, %invoke_out19
  %96 = landingpad %landing_pad
          cleanup
  %97 = extractvalue %landing_pad %96, 0
  %98 = extractvalue %landing_pad %96, 1
  %99 = load %File*, %File** %file18
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %99)
          to label %invoke_out45 unwind label %rescue

invoke_out21:                                     ; preds = %invoke_out19
  store %"Debug::MachO" %95, %"Debug::MachO"* %4
  %100 = load %"Debug::MachO", %"Debug::MachO"* %4
  store %"Debug::MachO" %100, %"Debug::MachO"* %dsym
  %101 = invoke %"Debug::MachO::UUID.22" @"*Debug::MachO#uuid:Debug::MachO::UUID"(%"Debug::MachO"* %dsym)
          to label %invoke_out24 unwind label %rescue20

then22:                                           ; preds = %invoke_out26
  %102 = load %"Debug::MachO", %"Debug::MachO"* %dsym
  store %"Debug::MachO" %102, %"Debug::MachO"* %mach_o
  store %String* bitcast ({ i32, i32, i32, [13 x i8] }* @"'__debug_line'" to %String*), %String** %name
  %103 = invoke %"Array(Debug::MachO::Section64)"* @"*Debug::MachO#sections:Array(Debug::MachO::Section64)"(%"Debug::MachO"* %mach_o)
          to label %invoke_out30 unwind label %rescue20

else23:                                           ; preds = %invoke_out26
  br label %exit44

invoke_out24:                                     ; preds = %invoke_out21
  store %"Debug::MachO::UUID.22" %101, %"Debug::MachO::UUID.22"* %5
  %104 = invoke %"Debug::MachO::UUID.22" @"*Debug::MachO#uuid:Debug::MachO::UUID"(%"Debug::MachO"* %mach_o9)
          to label %invoke_out25 unwind label %rescue20

invoke_out25:                                     ; preds = %invoke_out24
  store %"Debug::MachO::UUID.22" %104, %"Debug::MachO::UUID.22"* %6
  %105 = load %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %6
  %106 = invoke i1 @"*Debug::MachO::UUID#==<Debug::MachO::UUID>:Bool"(%"Debug::MachO::UUID.22"* %5, %"Debug::MachO::UUID.22" %105)
          to label %invoke_out26 unwind label %rescue20

invoke_out26:                                     ; preds = %invoke_out25
  br i1 %106, label %then22, label %else23

then28:                                           ; preds = %exit36
  %107 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %mach_o, i32 0, i32 12
  %108 = load i32*, i32** %107
  %109 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %sh27, i32 0, i32 1
  %110 = bitcast [33 x i64]* %109 to %"Debug::MachO::Section64"*
  %111 = invoke i32 @"*Debug::MachO::Section64#offset:UInt32"(%"Debug::MachO::Section64"* %110)
          to label %invoke_out37 unwind label %rescue20

else29:                                           ; preds = %exit36
  %112 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %12, i32 0, i32 0
  store i32 0, i32* %112
  %113 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %12, i32 0, i32 1
  store [6 x i64] zeroinitializer, [6 x i64]* %113
  br label %exit41

invoke_out30:                                     ; preds = %then22
  store i32 0, i32* %i31
  br label %while

while:                                            ; preds = %else34, %invoke_out30
  %114 = load i32, i32* %i31
  %115 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %103, i32 0, i32 1
  %116 = load i32, i32* %115
  %117 = icmp slt i32 %114, %116
  br i1 %117, label %body, label %exit32

body:                                             ; preds = %while
  %118 = load i32, i32* %i31
  store i32 %118, i32* %i
  %119 = load i32, i32* %i
  %120 = call %"Debug::MachO::Section64" @"*Array(Debug::MachO::Section64)@Array(T)#unsafe_at<Int32>:Debug::MachO::Section64"(%"Array(Debug::MachO::Section64)"* %103, i32 %119)
  store %"Debug::MachO::Section64" %120, %"Debug::MachO::Section64"* %7
  %121 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %7
  store %"Debug::MachO::Section64" %121, %"Debug::MachO::Section64"* %elem
  %122 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %elem
  store %"Debug::MachO::Section64" %122, %"Debug::MachO::Section64"* %s
  %123 = invoke %String* @"*Debug::MachO::Section64#sectname:String"(%"Debug::MachO::Section64"* %s)
          to label %invoke_out35 unwind label %rescue20

exit32:                                           ; preds = %while
  %124 = load %Nil, %Nil* %if_none
  %125 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %9, i32 0, i32 0
  store i32 0, i32* %125
  %126 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %9, i32 0, i32 1
  store [33 x i64] zeroinitializer, [33 x i64]* %126
  br label %exit36

then33:                                           ; preds = %invoke_out35
  %127 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %elem
  %128 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %8, i32 0, i32 0
  store i32 297, i32* %128
  %129 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %8, i32 0, i32 1
  %130 = bitcast [33 x i64]* %129 to %"Debug::MachO::Section64"*
  store %"Debug::MachO::Section64" %127, %"Debug::MachO::Section64"* %130
  br label %exit36

else34:                                           ; preds = %invoke_out35
  %131 = load i32, i32* %i31
  %132 = add i32 %131, 1
  store i32 %132, i32* %i31
  br label %while

invoke_out35:                                     ; preds = %body
  %133 = load %String*, %String** %name
  %134 = call i1 @"*String#==<String>:Bool"(%String* %123, %String* %133)
  br i1 %134, label %then33, label %else34

exit36:                                           ; preds = %exit32, %then33
  %135 = phi %"(Debug::MachO::Section64 | Nil)"* [ %8, %then33 ], [ %9, %exit32 ]
  %136 = load %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %135
  store %"(Debug::MachO::Section64 | Nil)" %136, %"(Debug::MachO::Section64 | Nil)"* %sh27
  %137 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %135, i32 0, i32 0
  %138 = load i32, i32* %137
  %139 = icmp eq i32 %138, 0
  %140 = xor i1 %139, true
  %141 = and i1 true, %140
  br i1 %141, label %then28, label %else29

invoke_out37:                                     ; preds = %then28
  %142 = invoke i32* @"*IO::FileDescriptor+@IO::FileDescriptor#seek<UInt32>:IO::FileDescriptor+"(i32* %108, i32 %111)
          to label %invoke_out38 unwind label %rescue20

invoke_out38:                                     ; preds = %invoke_out37
  %143 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %sh27, i32 0, i32 1
  %144 = bitcast [33 x i64]* %143 to %"Debug::MachO::Section64"*
  %145 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %mach_o, i32 0, i32 12
  %146 = load i32*, i32** %145
  %147 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %144
  store %"Debug::MachO::Section64" %147, %"Debug::MachO::Section64"* %sh
  store i32* %146, i32** %io
  %148 = load i32*, i32** %io
  %149 = invoke i64 @"*Debug::MachO::Section64#size:UInt64"(%"Debug::MachO::Section64"* %sh)
          to label %invoke_out39 unwind label %rescue20

invoke_out39:                                     ; preds = %invoke_out38
  %150 = invoke %"Debug::DWARF::LineNumbers.17" @"*Debug::DWARF::LineNumbers::new<IO::FileDescriptor+, UInt64>:Debug::DWARF::LineNumbers"(i32* %148, i64 %149)
          to label %invoke_out40 unwind label %rescue20

invoke_out40:                                     ; preds = %invoke_out39
  store %"Debug::DWARF::LineNumbers.17" %150, %"Debug::DWARF::LineNumbers.17"* %10
  %151 = load %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %10
  %152 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %11, i32 0, i32 0
  store i32 306, i32* %152
  %153 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %11, i32 0, i32 1
  %154 = bitcast [6 x i64]* %153 to %"Debug::DWARF::LineNumbers.17"*
  store %"Debug::DWARF::LineNumbers.17" %151, %"Debug::DWARF::LineNumbers.17"* %154
  br label %exit41

exit41:                                           ; preds = %else29, %invoke_out40
  %155 = phi %"(Debug::DWARF::LineNumbers | Nil)"* [ %11, %invoke_out40 ], [ %12, %else29 ]
  %156 = load %File*, %File** %file18
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %156)
          to label %invoke_out42 unwind label %rescue20

invoke_out42:                                     ; preds = %exit41
  %157 = load %File*, %File** %file10
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %157)
          to label %invoke_out43 unwind label %rescue20

invoke_out43:                                     ; preds = %invoke_out42
  br label %exit4

exit44:                                           ; preds = %else23
  %158 = load %File*, %File** %file18
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %158)
          to label %invoke_out47 unwind label %rescue

invoke_out45:                                     ; preds = %rescue20
  %159 = bitcast i8* %97 to %"struct.LibUnwind::Exception"*
  invoke void @__crystal_raise(%"struct.LibUnwind::Exception"* %159)
          to label %invoke_out46 unwind label %rescue

invoke_out46:                                     ; preds = %invoke_out45
  unreachable

invoke_out47:                                     ; preds = %exit44
  br label %exit48

exit48:                                           ; preds = %invoke_out47
  %160 = load %File*, %File** %file10
  call void @"*File@IO::Buffered#close:Nil"(%File* %160)
  br label %exit8

then49:                                           ; preds = %exit8
  br label %exit51

else50:                                           ; preds = %exit8
  br label %exit52

exit51:                                           ; preds = %then49
  %161 = load %String*, %String** %program
  store %String* %161, %String** %path54
  %162 = load %String*, %String** %path54
  store %String* %162, %String** %filename56
  store %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'r'" to %String*), %String** %mode57
  store i32 420, i32* %perm58
  %163 = load %String*, %String** %filename56
  %164 = load %String*, %String** %mode57
  %165 = load i32, i32* %perm58
  %166 = load %Nil, %Nil* %encoding59
  %167 = load %Nil, %Nil* %invalid60
  %168 = call %File* @"*File::new<String, String, Int32, Nil, Nil>:File"(%String* %163, %String* %164, i32 %165, %Nil zeroinitializer, %Nil zeroinitializer)
  store %File* %168, %File** %file61
  %169 = load %File*, %File** %file61
  store %File* %169, %File** %file55
  %170 = load %File*, %File** %file55
  %171 = invoke %"Debug::MachO" @"*Debug::MachO::new<File>:Debug::MachO"(%File* %170)
          to label %invoke_out63 unwind label %rescue62

exit52:                                           ; preds = %exit111, %else50
  %172 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %23, i32 0, i32 0
  store i32 0, i32* %172
  %173 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %23, i32 0, i32 1
  store [6 x i64] zeroinitializer, [6 x i64]* %173
  br label %exit4

rescue62:                                         ; preds = %exit107, %invoke_out108, %rescue74, %invoke_out63, %exit51
  %174 = landingpad %landing_pad
          cleanup
  %175 = extractvalue %landing_pad %174, 0
  %176 = extractvalue %landing_pad %174, 1
  %177 = load %File*, %File** %file61
  call void @"*File@IO::Buffered#close:Nil"(%File* %177)
  %178 = bitcast i8* %175 to %"struct.LibUnwind::Exception"*
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %178)
  unreachable

invoke_out63:                                     ; preds = %exit51
  store %"Debug::MachO" %171, %"Debug::MachO"* %13
  %179 = load %"Debug::MachO", %"Debug::MachO"* %13
  store %"Debug::MachO" %179, %"Debug::MachO"* %mach_o53
  %180 = load %String*, %String** %dwarf
  store %String* %180, %String** %path65
  %181 = load %String*, %String** %path65
  store %String* %181, %String** %filename67
  store %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'r'" to %String*), %String** %mode68
  store i32 420, i32* %perm69
  %182 = load %String*, %String** %filename67
  %183 = load %String*, %String** %mode68
  %184 = load i32, i32* %perm69
  %185 = load %Nil, %Nil* %encoding70
  %186 = load %Nil, %Nil* %invalid71
  %187 = invoke %File* @"*File::new<String, String, Int32, Nil, Nil>:File"(%String* %182, %String* %183, i32 %184, %Nil zeroinitializer, %Nil zeroinitializer)
          to label %invoke_out73 unwind label %rescue62

invoke_out73:                                     ; preds = %invoke_out63
  store %File* %187, %File** %file72
  %188 = load %File*, %File** %file72
  store %File* %188, %File** %file66
  %189 = load %File*, %File** %file66
  %190 = invoke %"Debug::MachO" @"*Debug::MachO::new<File>:Debug::MachO"(%File* %189)
          to label %invoke_out75 unwind label %rescue74

rescue74:                                         ; preds = %invoke_out105, %exit104, %invoke_out102, %invoke_out101, %invoke_out100, %then85, %body94, %then76, %invoke_out79, %invoke_out78, %invoke_out75, %invoke_out73
  %191 = landingpad %landing_pad
          cleanup
  %192 = extractvalue %landing_pad %191, 0
  %193 = extractvalue %landing_pad %191, 1
  %194 = load %File*, %File** %file72
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %194)
          to label %invoke_out108 unwind label %rescue62

invoke_out75:                                     ; preds = %invoke_out73
  store %"Debug::MachO" %190, %"Debug::MachO"* %14
  %195 = load %"Debug::MachO", %"Debug::MachO"* %14
  store %"Debug::MachO" %195, %"Debug::MachO"* %dsym64
  %196 = invoke %"Debug::MachO::UUID.22" @"*Debug::MachO#uuid:Debug::MachO::UUID"(%"Debug::MachO"* %dsym64)
          to label %invoke_out78 unwind label %rescue74

then76:                                           ; preds = %invoke_out80
  %197 = load %"Debug::MachO", %"Debug::MachO"* %dsym64
  store %"Debug::MachO" %197, %"Debug::MachO"* %mach_o
  store %String* bitcast ({ i32, i32, i32, [13 x i8] }* @"'__debug_line'" to %String*), %String** %name83
  %198 = invoke %"Array(Debug::MachO::Section64)"* @"*Debug::MachO#sections:Array(Debug::MachO::Section64)"(%"Debug::MachO"* %mach_o)
          to label %invoke_out87 unwind label %rescue74

else77:                                           ; preds = %invoke_out80
  br label %exit107

invoke_out78:                                     ; preds = %invoke_out75
  store %"Debug::MachO::UUID.22" %196, %"Debug::MachO::UUID.22"* %15
  %199 = invoke %"Debug::MachO::UUID.22" @"*Debug::MachO#uuid:Debug::MachO::UUID"(%"Debug::MachO"* %mach_o53)
          to label %invoke_out79 unwind label %rescue74

invoke_out79:                                     ; preds = %invoke_out78
  store %"Debug::MachO::UUID.22" %199, %"Debug::MachO::UUID.22"* %16
  %200 = load %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %16
  %201 = invoke i1 @"*Debug::MachO::UUID#==<Debug::MachO::UUID>:Bool"(%"Debug::MachO::UUID.22"* %15, %"Debug::MachO::UUID.22" %200)
          to label %invoke_out80 unwind label %rescue74

invoke_out80:                                     ; preds = %invoke_out79
  br i1 %201, label %then76, label %else77

then85:                                           ; preds = %exit99
  %202 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %mach_o, i32 0, i32 12
  %203 = load i32*, i32** %202
  %204 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %sh84, i32 0, i32 1
  %205 = bitcast [33 x i64]* %204 to %"Debug::MachO::Section64"*
  %206 = invoke i32 @"*Debug::MachO::Section64#offset:UInt32"(%"Debug::MachO::Section64"* %205)
          to label %invoke_out100 unwind label %rescue74

else86:                                           ; preds = %exit99
  %207 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %22, i32 0, i32 0
  store i32 0, i32* %207
  %208 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %22, i32 0, i32 1
  store [6 x i64] zeroinitializer, [6 x i64]* %208
  br label %exit104

invoke_out87:                                     ; preds = %then76
  store i32 0, i32* %i92
  br label %while93

while93:                                          ; preds = %else97, %invoke_out87
  %209 = load i32, i32* %i92
  %210 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %198, i32 0, i32 1
  %211 = load i32, i32* %210
  %212 = icmp slt i32 %209, %211
  br i1 %212, label %body94, label %exit95

body94:                                           ; preds = %while93
  %213 = load i32, i32* %i92
  store i32 %213, i32* %i91
  %214 = load i32, i32* %i91
  %215 = call %"Debug::MachO::Section64" @"*Array(Debug::MachO::Section64)@Array(T)#unsafe_at<Int32>:Debug::MachO::Section64"(%"Array(Debug::MachO::Section64)"* %198, i32 %214)
  store %"Debug::MachO::Section64" %215, %"Debug::MachO::Section64"* %17
  %216 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %17
  store %"Debug::MachO::Section64" %216, %"Debug::MachO::Section64"* %elem90
  %217 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %elem90
  store %"Debug::MachO::Section64" %217, %"Debug::MachO::Section64"* %s88
  %218 = invoke %String* @"*Debug::MachO::Section64#sectname:String"(%"Debug::MachO::Section64"* %s88)
          to label %invoke_out98 unwind label %rescue74

exit95:                                           ; preds = %while93
  %219 = load %Nil, %Nil* %if_none89
  %220 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %19, i32 0, i32 0
  store i32 0, i32* %220
  %221 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %19, i32 0, i32 1
  store [33 x i64] zeroinitializer, [33 x i64]* %221
  br label %exit99

then96:                                           ; preds = %invoke_out98
  %222 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %elem90
  %223 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %18, i32 0, i32 0
  store i32 297, i32* %223
  %224 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %18, i32 0, i32 1
  %225 = bitcast [33 x i64]* %224 to %"Debug::MachO::Section64"*
  store %"Debug::MachO::Section64" %222, %"Debug::MachO::Section64"* %225
  br label %exit99

else97:                                           ; preds = %invoke_out98
  %226 = load i32, i32* %i92
  %227 = add i32 %226, 1
  store i32 %227, i32* %i92
  br label %while93

invoke_out98:                                     ; preds = %body94
  %228 = load %String*, %String** %name83
  %229 = call i1 @"*String#==<String>:Bool"(%String* %218, %String* %228)
  br i1 %229, label %then96, label %else97

exit99:                                           ; preds = %exit95, %then96
  %230 = phi %"(Debug::MachO::Section64 | Nil)"* [ %18, %then96 ], [ %19, %exit95 ]
  %231 = load %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %230
  store %"(Debug::MachO::Section64 | Nil)" %231, %"(Debug::MachO::Section64 | Nil)"* %sh84
  %232 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %230, i32 0, i32 0
  %233 = load i32, i32* %232
  %234 = icmp eq i32 %233, 0
  %235 = xor i1 %234, true
  %236 = and i1 true, %235
  br i1 %236, label %then85, label %else86

invoke_out100:                                    ; preds = %then85
  %237 = invoke i32* @"*IO::FileDescriptor+@IO::FileDescriptor#seek<UInt32>:IO::FileDescriptor+"(i32* %203, i32 %206)
          to label %invoke_out101 unwind label %rescue74

invoke_out101:                                    ; preds = %invoke_out100
  %238 = getelementptr inbounds %"(Debug::MachO::Section64 | Nil)", %"(Debug::MachO::Section64 | Nil)"* %sh84, i32 0, i32 1
  %239 = bitcast [33 x i64]* %238 to %"Debug::MachO::Section64"*
  %240 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %mach_o, i32 0, i32 12
  %241 = load i32*, i32** %240
  %242 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %239
  store %"Debug::MachO::Section64" %242, %"Debug::MachO::Section64"* %sh81
  store i32* %241, i32** %io82
  %243 = load i32*, i32** %io82
  %244 = invoke i64 @"*Debug::MachO::Section64#size:UInt64"(%"Debug::MachO::Section64"* %sh81)
          to label %invoke_out102 unwind label %rescue74

invoke_out102:                                    ; preds = %invoke_out101
  %245 = invoke %"Debug::DWARF::LineNumbers.17" @"*Debug::DWARF::LineNumbers::new<IO::FileDescriptor+, UInt64>:Debug::DWARF::LineNumbers"(i32* %243, i64 %244)
          to label %invoke_out103 unwind label %rescue74

invoke_out103:                                    ; preds = %invoke_out102
  store %"Debug::DWARF::LineNumbers.17" %245, %"Debug::DWARF::LineNumbers.17"* %20
  %246 = load %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %20
  %247 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %21, i32 0, i32 0
  store i32 306, i32* %247
  %248 = getelementptr inbounds %"(Debug::DWARF::LineNumbers | Nil)", %"(Debug::DWARF::LineNumbers | Nil)"* %21, i32 0, i32 1
  %249 = bitcast [6 x i64]* %248 to %"Debug::DWARF::LineNumbers.17"*
  store %"Debug::DWARF::LineNumbers.17" %246, %"Debug::DWARF::LineNumbers.17"* %249
  br label %exit104

exit104:                                          ; preds = %else86, %invoke_out103
  %250 = phi %"(Debug::DWARF::LineNumbers | Nil)"* [ %21, %invoke_out103 ], [ %22, %else86 ]
  %251 = load %File*, %File** %file72
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %251)
          to label %invoke_out105 unwind label %rescue74

invoke_out105:                                    ; preds = %exit104
  %252 = load %File*, %File** %file61
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %252)
          to label %invoke_out106 unwind label %rescue74

invoke_out106:                                    ; preds = %invoke_out105
  br label %exit4

exit107:                                          ; preds = %else77
  %253 = load %File*, %File** %file72
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %253)
          to label %invoke_out110 unwind label %rescue62

invoke_out108:                                    ; preds = %rescue74
  %254 = bitcast i8* %192 to %"struct.LibUnwind::Exception"*
  invoke void @__crystal_raise(%"struct.LibUnwind::Exception"* %254)
          to label %invoke_out109 unwind label %rescue62

invoke_out109:                                    ; preds = %invoke_out108
  unreachable

invoke_out110:                                    ; preds = %exit107
  br label %exit111

exit111:                                          ; preds = %invoke_out110
  %255 = load %File*, %File** %file61
  call void @"*File@IO::Buffered#close:Nil"(%File* %255)
  br label %exit52
}

; Function Attrs: uwtable
define internal %String* @"*Process::executable_path:(String | Nil)"() #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %executable = alloca %String*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call %String* @"*Process::executable_path_impl:(String | Nil)"()
  store %String* %0, %String** %executable
  %1 = icmp ne %String* %0, null
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load %String*, %String** %executable
  %3 = invoke %String* @"*File::real_path<String>:String"(%String* %2)
          to label %invoke_out unwind label %rescue

else:                                             ; preds = %entry
  br label %exit1

rescue:                                           ; preds = %then
  %4 = landingpad %landing_pad
          cleanup
  %5 = extractvalue %landing_pad %4, 0
  %6 = extractvalue %landing_pad %4, 1
  %7 = icmp eq i32 46, %6
  br i1 %7, label %this_rescue, label %next_rescue

invoke_out:                                       ; preds = %then
  br label %exit

exit:                                             ; preds = %this_rescue, %invoke_out
  %8 = phi %String* [ %3, %invoke_out ], [ null, %this_rescue ]
  br label %exit1

this_rescue:                                      ; preds = %rescue
  br label %exit

next_rescue:                                      ; preds = %rescue
  %9 = bitcast i8* %5 to %"struct.LibUnwind::Exception"*
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %9)
  unreachable

exit1:                                            ; preds = %else, %exit
  %10 = phi %String* [ %8, %exit ], [ null, %else ]
  ret %String* %10
}

; Function Attrs: uwtable
define internal %String* @"*Process::executable_path_impl:(String | Nil)"() #0 {
alloca:
  %buf = alloca i8*
  %size = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @"*GC::malloc_atomic<Int32>:Pointer(Void)"(i32 1024)
  store i8* %0, i8** %buf
  store i32 1024, i32* %size
  %1 = load i8*, i8** %buf
  %2 = call i32 @_NSGetExecutablePath(i8* %1, i32* %size)
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i32, i32* %size
  %5 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %4)
  store i8* %5, i8** %buf
  %6 = load i8*, i8** %buf
  %7 = call i32 @_NSGetExecutablePath(i8* %6, i32* %size)
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %then1, label %else2

else:                                             ; preds = %entry
  br label %exit

then1:                                            ; preds = %then
  ret %String* null

else2:                                            ; preds = %then
  br label %exit

exit:                                             ; preds = %else, %else2
  %9 = load i8*, i8** %buf
  %10 = call %String* @"*String::new<Pointer(UInt8)>:String"(i8* %9)
  ret %String* %10
}

; Function Attrs: uwtable
define internal i8* @"*GC::malloc_atomic<Int32>:Pointer(Void)"(i32 %size) #0 {
entry:
  %0 = call i8* @__crystal_malloc_atomic(i32 %size)
  ret i8* %0
}

declare i32 @_NSGetExecutablePath(i8*, i32*)

; Function Attrs: uwtable
define internal %String* @"*File::real_path<String>:String"(%String* %path) #0 {
alloca:
  %real_path_ptr = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %path)
  %1 = call i8* @realpath(i8* %0, i8* null)
  store i8* %1, i8** %real_path_ptr
  %2 = load i8*, i8** %real_path_ptr
  %3 = icmp ne i8* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %4 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %5 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %4, %String* bitcast ({ i32, i32, i32, [30 x i8] }* @"'Error resolving rea...'" to %String*))
  %6 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %5, %String* %path)
  %7 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %6)
  %8 = call %Errno* @"*Errno::new<String>:Errno"(%String* %7)
  call void @"*raise<Errno>:NoReturn"(%Errno* %8)
  unreachable

exit:                                             ; preds = %then
  %9 = load i8*, i8** %real_path_ptr
  %10 = call %String* @"*String::new<Pointer(UInt8)>:String"(i8* %9)
  %11 = load i8*, i8** %real_path_ptr
  call void @free(i8* %11)
  ret %String* %10
}

declare i8* @realpath(i8*, i8*)

declare void @free(i8*)

; Function Attrs: uwtable
define internal %String* @"*File::basename<String>:String"(%String* %path) #0 {
alloca:
  %last = alloca i32
  %index = alloca %"(Int32 | Nil)"
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %String, %String* %path, i32 0, i32 1
  %2 = load i32, i32* %1
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  ret %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*)

else:                                             ; preds = %entry
  %4 = call %String** @"~File::SEPARATOR_STRING:read"()
  %5 = load %String*, %String** %4
  %6 = call i1 @"*String#==<String>:Bool"(%String* %path, %String* %5)
  br i1 %6, label %then1, label %else2

then1:                                            ; preds = %else
  %7 = call %String** @"~File::SEPARATOR_STRING:read"()
  %8 = load %String*, %String** %7
  ret %String* %8

else2:                                            ; preds = %else
  %9 = call %String* @"*String#check_no_null_byte:String"(%String* %path)
  %10 = call i32 @"*String#size:Int32"(%String* %path)
  %11 = sub i32 %10, 1
  store i32 %11, i32* %last
  %12 = load i32, i32* %last
  %13 = call i32 @"*String#[]<Int32>:Char"(%String* %path, i32 %12)
  %14 = icmp eq i32 %13, 47
  br i1 %14, label %then3, label %else4

then3:                                            ; preds = %else2
  %15 = load i32, i32* %last
  %16 = sub i32 %15, 1
  store i32 %16, i32* %last
  br label %exit

else4:                                            ; preds = %else2
  br label %exit

exit:                                             ; preds = %else4, %then3
  %17 = load i32, i32* %last
  %18 = call %"(Int32 | Nil)" @"*String#rindex<Char, Int32>:(Int32 | Nil)"(%String* %path, i32 47, i32 %17)
  store %"(Int32 | Nil)" %18, %"(Int32 | Nil)"* %0
  %19 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  store %"(Int32 | Nil)" %19, %"(Int32 | Nil)"* %index
  %20 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  %21 = load i32, i32* %20
  %22 = icmp eq i32 %21, 0
  %23 = xor i1 %22, true
  %24 = and i1 true, %23
  br i1 %24, label %then5, label %else6

then5:                                            ; preds = %exit
  %25 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %26 = bitcast [1 x i64]* %25 to i32*
  %27 = load i32, i32* %26
  %28 = add i32 %27, 1
  %29 = load i32, i32* %last
  %30 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %31 = bitcast [1 x i64]* %30 to i32*
  %32 = load i32, i32* %31
  %33 = sub i32 %29, %32
  %34 = call %String* @"*String#[]<Int32, Int32>:String"(%String* %path, i32 %28, i32 %33)
  br label %exit7

else6:                                            ; preds = %exit
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %35 = phi %String* [ %34, %then5 ], [ %path, %else6 ]
  ret %String* %35
}

define internal %String** @"~File::SEPARATOR_STRING:read"() {
entry:
  %0 = load i1, i1* @"File::SEPARATOR_STRING:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %String** @"File::SEPARATOR_STRING"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"File::SEPARATOR_STRING:init"
  call void @"~File::SEPARATOR_STRING:init"()
  br label %initialized
}

define internal void @"~File::SEPARATOR_STRING:init"() {
entry:
  ret void
}

; Function Attrs: uwtable
define internal %String* @"*String#check_no_null_byte:String"(%String* %self) #0 {
alloca:
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"(Int32 | Nil)" @"*String#byte_index<Int32>:(Int32 | Nil)"(%String* %self, i32 0)
  store %"(Int32 | Nil)" %1, %"(Int32 | Nil)"* %0
  %2 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %3, 0
  %5 = xor i1 %4, true
  %6 = and i1 true, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  %7 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [26 x i8] }* @"'string contains nul...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %7)
  unreachable

else:                                             ; preds = %entry
  ret %String* %self
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*String#byte_index<Int32>:(Int32 | Nil)"(%String* %self, i32 %byte) #0 {
alloca:
  %offset = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %offset
  %1 = load i32, i32* %offset
  %2 = call %"(Int32 | Nil)" @"*String#byte_index<Int32, Int32>:(Int32 | Nil)"(%String* %self, i32 %byte, i32 %1)
  store %"(Int32 | Nil)" %2, %"(Int32 | Nil)"* %0
  %3 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %3
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*String#byte_index<Int32, Int32>:(Int32 | Nil)"(%String* %self, i32 %byte, i32 %offset) #0 {
alloca:
  %i = alloca i32
  %to = alloca i32
  %x = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  %1 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %3 = load i32, i32* %2
  %4 = sub i32 %3, 1
  store i32 %4, i32* %to
  store i32 %offset, i32* %x
  br label %while

while:                                            ; preds = %else, %entry
  %5 = load i32, i32* %x
  %6 = load i32, i32* %to
  %7 = icmp sle i32 %5, %6
  br i1 %7, label %body, label %exit

body:                                             ; preds = %while
  %8 = load i32, i32* %x
  store i32 %8, i32* %i
  %9 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %10 = load i32, i32* %i
  %11 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %9, i32 %10)
  %12 = zext i8 %11 to i32
  %13 = icmp eq i32 %12, %byte
  br i1 %13, label %then, label %else

exit:                                             ; preds = %while
  %14 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %14
  %15 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %15
  %16 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  ret %"(Int32 | Nil)" %16

then:                                             ; preds = %body
  %17 = load i32, i32* %i
  %18 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  store i32 138, i32* %18
  %19 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 1
  %20 = bitcast [1 x i64]* %19 to i32*
  store i32 %17, i32* %20
  %21 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %21

else:                                             ; preds = %body
  %22 = load i32, i32* %x
  %23 = add i32 %22, 1
  store i32 %23, i32* %x
  br label %while
}

; Function Attrs: uwtable
define internal i32 @"*String#[]<Int32>:Char"(%String* %self, i32 %index) #0 {
alloca:
  %index1 = alloca i32
  %byte = alloca %"(UInt8 | Nil)"
  %0 = alloca %"(UInt8 | Nil)"
  %char = alloca i32
  %i = alloca i32
  %i8 = alloca i32
  %char9 = alloca i32
  %byte12 = alloca i8
  %1 = alloca %"Slice(UInt8)"
  %byte13 = alloca i8
  %i14 = alloca i32
  %i15 = alloca i32
  %2 = alloca %"Char::Reader"
  %char20 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %3 = call i1 @"*String#ascii_only?:Bool"(%String* %self)
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i32, i32* %index1
  %5 = call %"(UInt8 | Nil)" @"*String#byte_at?<Int32>:(UInt8 | Nil)"(%String* %self, i32 %4)
  store %"(UInt8 | Nil)" %5, %"(UInt8 | Nil)"* %0
  %6 = load %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0
  store %"(UInt8 | Nil)" %6, %"(UInt8 | Nil)"* %byte
  %7 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %byte, i32 0, i32 0
  %8 = load i32, i32* %7
  %9 = icmp eq i32 %8, 0
  %10 = xor i1 %9, true
  %11 = and i1 true, %10
  br i1 %11, label %then2, label %else3

else:                                             ; preds = %entry
  %12 = load i32, i32* %index1
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %then5, label %else6

then2:                                            ; preds = %then
  %14 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %byte, i32 0, i32 1
  %15 = bitcast [1 x i64]* %14 to i8*
  %16 = load i8, i8* %15
  %17 = zext i8 %16 to i32
  br label %exit

else3:                                            ; preds = %then
  %18 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %18)
  unreachable

exit:                                             ; preds = %then2
  %19 = phi i32 [ %17, %then2 ]
  br label %exit4

exit4:                                            ; preds = %then24, %then17, %exit
  %20 = phi i32 [ %19, %exit ], [ %45, %then17 ], [ %60, %then24 ]
  ret i32 %20

then5:                                            ; preds = %else
  %21 = load i32, i32* %index1
  %22 = call i32 @"*String#size:Int32"(%String* %self)
  %23 = add i32 %21, %22
  store i32 %23, i32* %index1
  br label %exit7

else6:                                            ; preds = %else
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  store i32 0, i32* %i8
  %24 = call i1 @"*String#ascii_only?:Bool"(%String* %self)
  br i1 %24, label %then10, label %else11

then10:                                           ; preds = %exit7
  %25 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %26 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %27 = load i32, i32* %26
  %28 = call %"Slice(UInt8)" @"*Pointer(UInt8)@Pointer(T)#to_slice<Int32>:Slice(UInt8)"(i8* %25, i32 %27)
  store %"Slice(UInt8)" %28, %"Slice(UInt8)"* %1
  store i32 0, i32* %i15
  br label %while

else11:                                           ; preds = %exit7
  %29 = call %"Char::Reader" @"*Char::Reader::new<String>:Char::Reader"(%String* %self)
  store %"Char::Reader" %29, %"Char::Reader"* %2
  br label %while21

while:                                            ; preds = %else18, %then10
  %30 = load i32, i32* %i15
  %31 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %1, i32 0, i32 0
  %32 = load i32, i32* %31
  %33 = icmp slt i32 %30, %32
  br i1 %33, label %body, label %exit16

body:                                             ; preds = %while
  %34 = load i32, i32* %i15
  store i32 %34, i32* %i14
  %35 = load i32, i32* %i14
  %36 = call i8 @"*Slice(UInt8)@Slice(T)#unsafe_at<Int32>:UInt8"(%"Slice(UInt8)"* %1, i32 %35)
  store i8 %36, i8* %byte13
  %37 = load i8, i8* %byte13
  store i8 %37, i8* %byte12
  %38 = load i8, i8* %byte12
  %39 = zext i8 %38 to i32
  store i32 %39, i32* %char9
  %40 = load i32, i32* %char9
  %41 = load i32, i32* %i8
  store i32 %40, i32* %char
  store i32 %41, i32* %i
  %42 = load i32, i32* %index1
  %43 = load i32, i32* %i
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %then17, label %else18

exit16:                                           ; preds = %while
  br label %exit19

then17:                                           ; preds = %body
  %45 = load i32, i32* %char
  br label %exit4

else18:                                           ; preds = %body
  %46 = load i32, i32* %i8
  %47 = add i32 %46, 1
  store i32 %47, i32* %i8
  %48 = load i32, i32* %i15
  %49 = add i32 %48, 1
  store i32 %49, i32* %i15
  br label %while

exit19:                                           ; preds = %exit23, %exit16
  %50 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %50)
  unreachable

while21:                                          ; preds = %else25, %else11
  %51 = call i1 @"*Char::Reader#has_next?:Bool"(%"Char::Reader"* %2)
  br i1 %51, label %body22, label %exit23

body22:                                           ; preds = %while21
  %52 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %2, i32 0, i32 1
  %53 = load i32, i32* %52
  store i32 %53, i32* %char20
  %54 = load i32, i32* %char20
  store i32 %54, i32* %char9
  %55 = load i32, i32* %char9
  %56 = load i32, i32* %i8
  store i32 %55, i32* %char
  store i32 %56, i32* %i
  %57 = load i32, i32* %index1
  %58 = load i32, i32* %i
  %59 = icmp eq i32 %57, %58
  br i1 %59, label %then24, label %else25

exit23:                                           ; preds = %while21
  br label %exit19

then24:                                           ; preds = %body22
  %60 = load i32, i32* %char
  br label %exit4

else25:                                           ; preds = %body22
  %61 = load i32, i32* %i8
  %62 = add i32 %61, 1
  store i32 %62, i32* %i8
  %63 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %2, i32 0, i32 3
  %64 = load i32, i32* %63
  %65 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %2, i32 0, i32 2
  %66 = load i32, i32* %65
  %67 = add i32 %64, %66
  %68 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %2, i32 0, i32 3
  store i32 %67, i32* %68
  %69 = call i32 @"*Char::Reader#decode_current_char:Char"(%"Char::Reader"* %2)
  br label %while21
}

; Function Attrs: uwtable
define internal %"(UInt8 | Nil)" @"*String#byte_at?<Int32>:(UInt8 | Nil)"(%String* %self, i32 %index) #0 {
alloca:
  %index1 = alloca i32
  %__temp_63 = alloca i1
  %0 = alloca %"(UInt8 | Nil)"
  %1 = alloca %"(UInt8 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %2 = load i32, i32* %index1
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i32, i32* %index1
  %5 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %6 = load i32, i32* %5
  %7 = add i32 %4, %6
  store i32 %7, i32* %index1
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %8 = load i32, i32* %index1
  %9 = icmp sle i32 0, %8
  store i1 %9, i1* %__temp_63
  br i1 %9, label %then4, label %else5

then2:                                            ; preds = %exit6
  %10 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %11 = load i32, i32* %index1
  %12 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %10, i32 %11)
  %13 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  store i32 135, i32* %13
  %14 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %15 = bitcast [1 x i64]* %14 to i8*
  store i8 %12, i8* %15
  br label %exit7

else3:                                            ; preds = %exit6
  %16 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %16
  %17 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %17
  br label %exit7

then4:                                            ; preds = %exit
  %18 = load i32, i32* %index1
  %19 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %20 = load i32, i32* %19
  %21 = icmp slt i32 %18, %20
  br label %exit6

else5:                                            ; preds = %exit
  %22 = load i1, i1* %__temp_63
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  %23 = phi i1 [ %21, %then4 ], [ %22, %else5 ]
  br i1 %23, label %then2, label %else3

exit7:                                            ; preds = %else3, %then2
  %24 = phi %"(UInt8 | Nil)"* [ %0, %then2 ], [ %1, %else3 ]
  %25 = load %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %24
  ret %"(UInt8 | Nil)" %25
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Pointer(UInt8)@Pointer(T)#to_slice<Int32>:Slice(UInt8)"(i8* %self, i32 %size) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %self, i32 %size)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %2
}

; Function Attrs: uwtable
define internal %"Char::Reader" @"*Char::Reader::new<String>:Char::Reader"(%String* %string) #0 {
alloca:
  %_ = alloca %"Char::Reader"
  %0 = alloca %"Char::Reader"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Char::Reader"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Char::Reader"* getelementptr (%"Char::Reader", %"Char::Reader"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Char::Reader", %"Char::Reader"* %0
  store %"Char::Reader" %2, %"Char::Reader"* %_
  %3 = call i32 @"*Char::Reader#initialize<String>:Char"(%"Char::Reader"* %_, %String* %string)
  %4 = load %"Char::Reader", %"Char::Reader"* %_
  ret %"Char::Reader" %4
}

; Function Attrs: uwtable
define internal i32 @"*Char::Reader#initialize<String>:Char"(%"Char::Reader"* %self, %String* %string) #0 {
entry:
  %0 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 0
  store %String* %string, %String** %0
  %1 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 3
  store i32 0, i32* %1
  %2 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 1
  store i32 0, i32* %2
  %3 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 2
  store i32 0, i32* %3
  %4 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 4
  store i1 false, i1* %4
  %5 = call i32 @"*Char::Reader#decode_current_char:Char"(%"Char::Reader"* %self)
  ret i32 %5
}

; Function Attrs: alwaysinline uwtable
define internal i32 @"*Char::Reader#decode_current_char:Char"(%"Char::Reader"* %self) #4 {
alloca:
  %code_point = alloca i32
  %width = alloca i32
  %pos = alloca i32
  %first = alloca i32
  %second = alloca i32
  %third = alloca i32
  %__temp_70 = alloca i1
  %__temp_71 = alloca i1
  %__temp_72 = alloca i1
  %fourth = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 3
  %1 = load i32, i32* %0
  store i32 %1, i32* %pos
  %2 = load i32, i32* %pos
  %3 = call i32 @"*Char::Reader#byte_at<Int32>:UInt32"(%"Char::Reader"* %self, i32 %2)
  store i32 %3, i32* %first
  %4 = load i32, i32* %first
  %5 = icmp ult i32 %4, 128
  %6 = and i1 true, %5
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  %7 = load i32, i32* %first
  store i32 %7, i32* %code_point
  store i32 1, i32* %width
  %8 = load i32, i32* %width
  %9 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 2
  store i32 %8, i32* %9
  %10 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 3
  %11 = load i32, i32* %10
  %12 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 0
  %13 = load %String*, %String** %12
  %14 = getelementptr inbounds %String, %String* %13, i32 0, i32 1
  %15 = load i32, i32* %14
  %16 = icmp eq i32 %11, %15
  %17 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 4
  store i1 %16, i1* %17
  %18 = load i32, i32* %code_point
  %19 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 1
  store i32 %18, i32* %19
  br label %exit

else:                                             ; preds = %entry
  %20 = load i32, i32* %first
  %21 = icmp ult i32 %20, 194
  %22 = and i1 true, %21
  br i1 %22, label %then1, label %else2

exit:                                             ; preds = %then28, %else12, %then5, %then
  %23 = phi i32 [ %18, %then ], [ %53, %then5 ], [ %92, %else12 ], [ %150, %then28 ]
  ret i32 %23

then1:                                            ; preds = %else
  %24 = load i32, i32* %first
  %25 = load i32, i32* %pos
  call void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %24, i32 %25)
  unreachable

else2:                                            ; preds = %else
  %26 = load i32, i32* %pos
  %27 = add i32 %26, 1
  %28 = call i32 @"*Char::Reader#byte_at<Int32>:UInt32"(%"Char::Reader"* %self, i32 %27)
  store i32 %28, i32* %second
  %29 = load i32, i32* %second
  %30 = and i32 %29, 192
  %31 = icmp ne i32 %30, 128
  br i1 %31, label %then3, label %else4

then3:                                            ; preds = %else2
  %32 = load i32, i32* %second
  %33 = load i32, i32* %pos
  %34 = add i32 %33, 1
  call void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %32, i32 %34)
  unreachable

else4:                                            ; preds = %else2
  %35 = load i32, i32* %first
  %36 = icmp ult i32 %35, 224
  %37 = and i1 true, %36
  br i1 %37, label %then5, label %else6

then5:                                            ; preds = %else4
  %38 = load i32, i32* %first
  %39 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %38, i32 6)
  %40 = load i32, i32* %second
  %41 = sub i32 %40, 12416
  %42 = add i32 %39, %41
  store i32 %42, i32* %code_point
  store i32 2, i32* %width
  %43 = load i32, i32* %width
  %44 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 2
  store i32 %43, i32* %44
  %45 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 3
  %46 = load i32, i32* %45
  %47 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 0
  %48 = load %String*, %String** %47
  %49 = getelementptr inbounds %String, %String* %48, i32 0, i32 1
  %50 = load i32, i32* %49
  %51 = icmp eq i32 %46, %50
  %52 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 4
  store i1 %51, i1* %52
  %53 = load i32, i32* %code_point
  %54 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 1
  store i32 %53, i32* %54
  br label %exit

else6:                                            ; preds = %else4
  %55 = load i32, i32* %pos
  %56 = add i32 %55, 2
  %57 = call i32 @"*Char::Reader#byte_at<Int32>:UInt32"(%"Char::Reader"* %self, i32 %56)
  store i32 %57, i32* %third
  %58 = load i32, i32* %third
  %59 = and i32 %58, 192
  %60 = icmp ne i32 %59, 128
  br i1 %60, label %then7, label %else8

then7:                                            ; preds = %else6
  %61 = load i32, i32* %third
  %62 = load i32, i32* %pos
  %63 = add i32 %62, 2
  call void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %61, i32 %63)
  unreachable

else8:                                            ; preds = %else6
  %64 = load i32, i32* %first
  %65 = icmp ult i32 %64, 240
  %66 = and i1 true, %65
  br i1 %66, label %then9, label %else10

then9:                                            ; preds = %else8
  %67 = load i32, i32* %first
  %68 = icmp eq i32 %67, 224
  store i1 %68, i1* %__temp_70
  br i1 %68, label %then13, label %else14

else10:                                           ; preds = %else8
  %69 = load i32, i32* %first
  %70 = icmp eq i32 %69, 240
  store i1 %70, i1* %__temp_71
  br i1 %70, label %then18, label %else19

then11:                                           ; preds = %exit15
  %71 = load i32, i32* %second
  %72 = load i32, i32* %pos
  %73 = add i32 %72, 1
  call void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %71, i32 %73)
  unreachable

else12:                                           ; preds = %exit15
  %74 = load i32, i32* %first
  %75 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %74, i32 12)
  %76 = load i32, i32* %second
  %77 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %76, i32 6)
  %78 = add i32 %75, %77
  %79 = load i32, i32* %third
  %80 = sub i32 %79, 925824
  %81 = add i32 %78, %80
  store i32 %81, i32* %code_point
  store i32 3, i32* %width
  %82 = load i32, i32* %width
  %83 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 2
  store i32 %82, i32* %83
  %84 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 3
  %85 = load i32, i32* %84
  %86 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 0
  %87 = load %String*, %String** %86
  %88 = getelementptr inbounds %String, %String* %87, i32 0, i32 1
  %89 = load i32, i32* %88
  %90 = icmp eq i32 %85, %89
  %91 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 4
  store i1 %90, i1* %91
  %92 = load i32, i32* %code_point
  %93 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 1
  store i32 %92, i32* %93
  br label %exit

then13:                                           ; preds = %then9
  %94 = load i32, i32* %second
  %95 = icmp ult i32 %94, 160
  %96 = and i1 true, %95
  br label %exit15

else14:                                           ; preds = %then9
  %97 = load i1, i1* %__temp_70
  br label %exit15

exit15:                                           ; preds = %else14, %then13
  %98 = phi i1 [ %96, %then13 ], [ %97, %else14 ]
  br i1 %98, label %then11, label %else12

then16:                                           ; preds = %exit20
  %99 = load i32, i32* %second
  %100 = load i32, i32* %pos
  %101 = add i32 %100, 1
  call void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %99, i32 %101)
  unreachable

else17:                                           ; preds = %exit20
  %102 = load i32, i32* %first
  %103 = icmp eq i32 %102, 244
  store i1 %103, i1* %__temp_72
  br i1 %103, label %then23, label %else24

then18:                                           ; preds = %else10
  %104 = load i32, i32* %second
  %105 = icmp ult i32 %104, 144
  %106 = and i1 true, %105
  br label %exit20

else19:                                           ; preds = %else10
  %107 = load i1, i1* %__temp_71
  br label %exit20

exit20:                                           ; preds = %else19, %then18
  %108 = phi i1 [ %106, %then18 ], [ %107, %else19 ]
  br i1 %108, label %then16, label %else17

then21:                                           ; preds = %exit25
  %109 = load i32, i32* %second
  %110 = load i32, i32* %pos
  %111 = add i32 %110, 1
  call void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %109, i32 %111)
  unreachable

else22:                                           ; preds = %exit25
  %112 = load i32, i32* %pos
  %113 = add i32 %112, 3
  %114 = call i32 @"*Char::Reader#byte_at<Int32>:UInt32"(%"Char::Reader"* %self, i32 %113)
  store i32 %114, i32* %fourth
  %115 = load i32, i32* %fourth
  %116 = and i32 %115, 192
  %117 = icmp ne i32 %116, 128
  br i1 %117, label %then26, label %else27

then23:                                           ; preds = %else17
  %118 = load i32, i32* %second
  %119 = icmp uge i32 %118, 144
  %120 = or i1 false, %119
  br label %exit25

else24:                                           ; preds = %else17
  %121 = load i1, i1* %__temp_72
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %122 = phi i1 [ %120, %then23 ], [ %121, %else24 ]
  br i1 %122, label %then21, label %else22

then26:                                           ; preds = %else22
  %123 = load i32, i32* %fourth
  %124 = load i32, i32* %pos
  %125 = add i32 %124, 3
  call void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %123, i32 %125)
  unreachable

else27:                                           ; preds = %else22
  %126 = load i32, i32* %first
  %127 = icmp ult i32 %126, 245
  %128 = and i1 true, %127
  br i1 %128, label %then28, label %else29

then28:                                           ; preds = %else27
  %129 = load i32, i32* %first
  %130 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %129, i32 18)
  %131 = load i32, i32* %second
  %132 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %131, i32 12)
  %133 = add i32 %130, %132
  %134 = load i32, i32* %third
  %135 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %134, i32 6)
  %136 = add i32 %133, %135
  %137 = load i32, i32* %fourth
  %138 = sub i32 %137, 63447168
  %139 = add i32 %136, %138
  store i32 %139, i32* %code_point
  store i32 4, i32* %width
  %140 = load i32, i32* %width
  %141 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 2
  store i32 %140, i32* %141
  %142 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 3
  %143 = load i32, i32* %142
  %144 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 0
  %145 = load %String*, %String** %144
  %146 = getelementptr inbounds %String, %String* %145, i32 0, i32 1
  %147 = load i32, i32* %146
  %148 = icmp eq i32 %143, %147
  %149 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 4
  store i1 %148, i1* %149
  %150 = load i32, i32* %code_point
  %151 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 1
  store i32 %150, i32* %151
  br label %exit

else29:                                           ; preds = %else27
  %152 = load i32, i32* %first
  %153 = load i32, i32* %pos
  call void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %152, i32 %153)
  unreachable
}

; Function Attrs: uwtable
define internal i32 @"*Char::Reader#byte_at<Int32>:UInt32"(%"Char::Reader"* %self, i32 %i) #0 {
entry:
  %0 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 0
  %1 = load %String*, %String** %0
  %2 = call i8 @"*String#unsafe_byte_at<Int32>:UInt8"(%String* %1, i32 %i)
  %3 = zext i8 %2 to i32
  ret i32 %3
}

; Function Attrs: uwtable
define internal i8 @"*String#unsafe_byte_at<Int32>:UInt8"(%String* %self, i32 %index) #0 {
entry:
  %0 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %1 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %0, i32 %index)
  ret i8 %1
}

; Function Attrs: noreturn uwtable
define internal void @"*Char::Reader#invalid_byte_sequence<UInt32, Int32>:NoReturn"(%"Char::Reader"* %self, i32 %byte, i32 %byte_position) #1 {
entry:
  %0 = call %"String::Builder"* @"*String::Builder::new<Int32>:String::Builder"(i32 78)
  %1 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %0, %String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Unexpected byte 0x'" to %String*))
  %2 = call %String* @"*UInt32@Int#to_s<Int32>:String"(i32 %byte, i32 16)
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* %2)
  %4 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %3, %String* bitcast ({ i32, i32, i32, [14 x i8] }* @"' at position '" to %String*))
  %5 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %4, i32 %byte_position)
  %6 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %5, %String* bitcast ({ i32, i32, i32, [18 x i8] }* @"', malformed UTF-8'" to %String*))
  %7 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %6)
  %8 = call %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* %7)
  call void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %8)
  unreachable
}

; Function Attrs: uwtable
define internal %String* @"*UInt32@Int#to_s<Int32>:String"(i32 %self, i32 %base) #0 {
alloca:
  %upcase = alloca i1
  %__temp_65 = alloca i1
  %__temp_64 = alloca i1
  %ptr = alloca i8*
  %count = alloca i32
  %base16 = alloca i32
  %upcase17 = alloca i1
  %chars = alloca [65 x i8]
  %ptr_end = alloca i8*
  %ptr18 = alloca i8*
  %num = alloca i32
  %neg = alloca i1
  %digits = alloca i8*
  %count19 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %upcase
  %0 = icmp sle i32 2, %base
  store i1 %0, i1* %__temp_65
  br i1 %0, label %then3, label %else4

then:                                             ; preds = %exit5
  br label %exit6

else:                                             ; preds = %exit5
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* bitcast ({ i32, i32, i32, [14 x i8] }* @"'Invalid base '" to %String*))
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %2, i32 %base)
  %4 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %3)
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %4)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

then1:                                            ; preds = %exit
  %6 = load i1, i1* %__temp_64
  br label %exit5

else2:                                            ; preds = %exit
  %7 = icmp eq i32 %base, 62
  br label %exit5

then3:                                            ; preds = %entry
  %8 = icmp sle i32 %base, 36
  br label %exit

else4:                                            ; preds = %entry
  %9 = load i1, i1* %__temp_65
  br label %exit

exit:                                             ; preds = %else4, %then3
  %10 = phi i1 [ %8, %then3 ], [ %9, %else4 ]
  store i1 %10, i1* %__temp_64
  br i1 %10, label %then1, label %else2

exit5:                                            ; preds = %else2, %then1
  %11 = phi i1 [ %6, %then1 ], [ %7, %else2 ]
  br i1 %11, label %then, label %else

exit6:                                            ; preds = %then
  %12 = load i1, i1* %upcase
  br i1 %12, label %then9, label %else10

then7:                                            ; preds = %exit11
  %13 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [33 x i8] }* @"'upcase must be fals...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %13)
  unreachable

else8:                                            ; preds = %exit11
  %14 = call i1 @"*Int32@Object#===<UInt32>:Bool"(i32 0, i32 %self)
  br i1 %14, label %then12, label %else13

then9:                                            ; preds = %exit6
  %15 = icmp eq i32 %base, 62
  br label %exit11

else10:                                           ; preds = %exit6
  %16 = load i1, i1* %upcase
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %17 = phi i1 [ %15, %then9 ], [ %16, %else10 ]
  br i1 %17, label %then7, label %else8

then12:                                           ; preds = %else8
  ret %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'0'" to %String*)

else13:                                           ; preds = %else8
  %18 = call i1 @"*Int32@Object#===<UInt32>:Bool"(i32 1, i32 %self)
  br i1 %18, label %then14, label %else15

then14:                                           ; preds = %else13
  ret %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'1'" to %String*)

else15:                                           ; preds = %else13
  %19 = load i1, i1* %upcase
  store i32 %base, i32* %base16
  store i1 %19, i1* %upcase17
  %20 = call i8* @"*StaticArray(UInt8, 65)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([65 x i8]* %chars)
  %21 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %20, i32 64)
  store i8* %21, i8** %ptr_end
  %22 = load i8*, i8** %ptr_end
  store i8* %22, i8** %ptr18
  store i32 %self, i32* %num
  %23 = load i32, i32* %num
  %24 = icmp ult i32 %23, 0
  %25 = and i1 true, %24
  store i1 %25, i1* %neg
  %26 = load i32, i32* %base16
  %27 = icmp eq i32 %26, 62
  br i1 %27, label %then20, label %else21

then20:                                           ; preds = %else15
  %28 = call %String** @"~Int::DIGITS_BASE62:read"()
  %29 = load %String*, %String** %28
  br label %exit22

else21:                                           ; preds = %else15
  %30 = load i1, i1* %upcase17
  br i1 %30, label %then23, label %else24

exit22:                                           ; preds = %exit25, %then20
  %31 = phi %String* [ %29, %then20 ], [ %37, %exit25 ]
  %32 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %31)
  store i8* %32, i8** %digits
  br label %while

then23:                                           ; preds = %else21
  %33 = call %String** @"~Int::DIGITS_UPCASE:read"()
  %34 = load %String*, %String** %33
  br label %exit25

else24:                                           ; preds = %else21
  %35 = call %String** @"~Int::DIGITS_DOWNCASE:read"()
  %36 = load %String*, %String** %35
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %37 = phi %String* [ %34, %then23 ], [ %36, %else24 ]
  br label %exit22

while:                                            ; preds = %body, %exit22
  %38 = load i32, i32* %num
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %body, label %exit26

body:                                             ; preds = %while
  %40 = load i8*, i8** %ptr18
  %41 = call i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %40, i32 1)
  store i8* %41, i8** %ptr18
  %42 = load i8*, i8** %ptr18
  %43 = load i8*, i8** %digits
  %44 = load i32, i32* %num
  %45 = load i32, i32* %base16
  %46 = call i32 @"*UInt32@Int#remainder<Int32>:UInt32"(i32 %44, i32 %45)
  %47 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<UInt32>:UInt8"(i8* %43, i32 %46)
  store i8 %47, i8* %42
  %48 = load i32, i32* %num
  %49 = load i32, i32* %base16
  %50 = call i32 @"*UInt32@Int#tdiv<Int32>:UInt32"(i32 %48, i32 %49)
  store i32 %50, i32* %num
  br label %while

exit26:                                           ; preds = %while
  %51 = load i1, i1* %neg
  br i1 %51, label %then27, label %else28

then27:                                           ; preds = %exit26
  %52 = load i8*, i8** %ptr18
  %53 = call i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %52, i32 1)
  store i8* %53, i8** %ptr18
  %54 = load i8*, i8** %ptr18
  store i8 45, i8* %54
  br label %exit29

else28:                                           ; preds = %exit26
  br label %exit29

exit29:                                           ; preds = %else28, %then27
  %55 = load i8*, i8** %ptr_end
  %56 = load i8*, i8** %ptr18
  %57 = ptrtoint i8* %55 to i64
  %58 = ptrtoint i8* %56 to i64
  %59 = sub i64 %57, %58
  %60 = sdiv exact i64 %59, ptrtoint (i8* getelementptr inbounds (i8, i8* null, i32 1) to i64)
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %count19
  %62 = load i8*, i8** %ptr18
  %63 = load i32, i32* %count19
  store i8* %62, i8** %ptr
  store i32 %63, i32* %count
  %64 = load i8*, i8** %ptr
  %65 = load i32, i32* %count
  %66 = load i32, i32* %count
  %67 = call %String* @"*String::new<Pointer(UInt8), Int32, Int32>:String"(i8* %64, i32 %65, i32 %66)
  ret %String* %67
}

; Function Attrs: uwtable
define internal i1 @"*Int32@Object#===<UInt32>:Bool"(i32 %self, i32 %other) #0 {
entry:
  %0 = icmp eq i32 %self, %other
  ret i1 %0
}

; Function Attrs: uwtable
define internal i8 @"*Pointer(UInt8)@Pointer(T)#[]<UInt32>:UInt8"(i8* %self, i32 %offset) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<UInt32>:Pointer(UInt8)"(i8* %self, i32 %offset)
  %1 = load i8, i8* %0
  ret i8 %1
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#+<UInt32>:Pointer(UInt8)"(i8* %self, i32 %other) #0 {
entry:
  %0 = zext i32 %other to i64
  %1 = getelementptr inbounds i8, i8* %self, i64 %0
  ret i8* %1
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Int#tdiv<Int32>:UInt32"(i32 %self, i32 %other) #0 {
entry:
  call void @"*UInt32@Int#check_div_argument<Int32>:Nil"(i32 %self, i32 %other)
  %0 = udiv i32 %self, %other
  ret i32 %0
}

; Function Attrs: uwtable
define internal void @"*UInt32@Int#check_div_argument<Int32>:Nil"(i32 %self, i32 %other) #0 {
alloca:
  %__temp_67 = alloca i1
  %__temp_66 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = icmp eq i32 %other, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = icmp ult i32 %self, 0
  %3 = and i1 true, %2
  store i1 %3, i1* %__temp_67
  br i1 %3, label %then5, label %else6

then1:                                            ; preds = %exit7
  %4 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [27 x i8] }* @"'overflow: UInt32::M...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %4)
  unreachable

else2:                                            ; preds = %exit7
  ret void

then3:                                            ; preds = %exit
  %5 = icmp eq i32 %other, -1
  br label %exit7

else4:                                            ; preds = %exit
  %6 = load i1, i1* %__temp_66
  br label %exit7

then5:                                            ; preds = %else
  %7 = icmp eq i32 %self, 0
  br label %exit

else6:                                            ; preds = %else
  %8 = load i1, i1* %__temp_67
  br label %exit

exit:                                             ; preds = %else6, %then5
  %9 = phi i1 [ %7, %then5 ], [ %8, %else6 ]
  store i1 %9, i1* %__temp_66
  br i1 %9, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  %10 = phi i1 [ %5, %then3 ], [ %6, %else4 ]
  br i1 %10, label %then1, label %else2
}

; Function Attrs: uwtable
define internal %String* @"*String::new<Pointer(UInt8), Int32, Int32>:String"(i8* %chars, i32 %bytesize, i32 %size) #0 {
alloca:
  %buffer = alloca i8*
  %capacity = alloca i32
  %str = alloca i8*
  %buffer1 = alloca i8*
  %__temp_68 = alloca %"Tuple(Int32, Int32)"
  %bytesize2 = alloca i32
  %size3 = alloca i32
  %__temp_69 = alloca i1
  %str_header = alloca %"Tuple(Int32, Int32, Int32)"*
  %0 = alloca %"Tuple(Int32, Int32)"
  %1 = alloca %"Tuple(Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = icmp eq i32 %bytesize, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  ret %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*)

else:                                             ; preds = %entry
  store i32 %bytesize, i32* %capacity
  %3 = load i32, i32* %capacity
  call void @"*String::check_capacity_in_bounds<Int32>:Nil"(i32 %3)
  %4 = load i32, i32* %capacity
  %5 = add i32 %4, 12
  %6 = add i32 %5, 1
  %7 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %6)
  store i8* %7, i8** %str
  %8 = load i8*, i8** %str
  %9 = bitcast i8* %8 to %String*
  %10 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %9)
  store i8* %10, i8** %buffer1
  %11 = load i8*, i8** %buffer1
  store i8* %11, i8** %buffer
  %12 = load i8*, i8** %buffer
  %13 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_from<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %12, i8* %chars, i32 %bytesize)
  %14 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %0, i32 0, i32 0
  store i32 %bytesize, i32* %14
  %15 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %0, i32 0, i32 1
  store i32 %size, i32* %15
  %16 = load %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %0
  store %"Tuple(Int32, Int32)" %16, %"Tuple(Int32, Int32)"* %__temp_68
  %17 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %__temp_68, i32 0, i32 0
  %18 = load i32, i32* %17
  store i32 %18, i32* %bytesize2
  %19 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %__temp_68, i32 0, i32 1
  %20 = load i32, i32* %19
  store i32 %20, i32* %size3
  %21 = load i32, i32* %bytesize2
  %22 = icmp sle i32 0, %21
  store i1 %22, i1* %__temp_69
  br i1 %22, label %then6, label %else7

then4:                                            ; preds = %exit
  br label %exit8

else5:                                            ; preds = %exit
  %23 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [32 x i8] }* @"'bytesize out of cap...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %23)
  unreachable

then6:                                            ; preds = %else
  %24 = load i32, i32* %bytesize2
  %25 = load i32, i32* %capacity
  %26 = icmp sle i32 %24, %25
  br label %exit

else7:                                            ; preds = %else
  %27 = load i1, i1* %__temp_69
  br label %exit

exit:                                             ; preds = %else7, %then6
  %28 = phi i1 [ %26, %then6 ], [ %27, %else7 ]
  br i1 %28, label %then4, label %else5

exit8:                                            ; preds = %then4
  %29 = load i8*, i8** %buffer1
  %30 = load i32, i32* %bytesize2
  %31 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %29, i32 %30, i8 0)
  %32 = load i32, i32* %bytesize2
  %33 = load i32, i32* %capacity
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %then9, label %else10

then9:                                            ; preds = %exit8
  %35 = load i8*, i8** %str
  %36 = load i32, i32* %bytesize2
  %37 = add i32 %36, 12
  %38 = add i32 %37, 1
  %39 = call i8* @"*Pointer(UInt8)@Pointer(T)#realloc<UInt32>:Pointer(UInt8)"(i8* %35, i32 %38)
  store i8* %39, i8** %str
  br label %exit11

else10:                                           ; preds = %exit8
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %40 = load i8*, i8** %str
  %41 = bitcast i8* %40 to %"Tuple(Int32, Int32, Int32)"*
  store %"Tuple(Int32, Int32, Int32)"* %41, %"Tuple(Int32, Int32, Int32)"** %str_header
  %42 = load %"Tuple(Int32, Int32, Int32)"*, %"Tuple(Int32, Int32, Int32)"** %str_header
  %43 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 0
  store i32 1, i32* %43
  %44 = load i32, i32* %bytesize2
  %45 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 1
  store i32 %44, i32* %45
  %46 = load i32, i32* %size3
  %47 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 2
  store i32 %46, i32* %47
  %48 = load %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1
  store %"Tuple(Int32, Int32, Int32)" %48, %"Tuple(Int32, Int32, Int32)"* %42
  %49 = load i8*, i8** %str
  %50 = bitcast i8* %49 to %String*
  ret %String* %50
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)#copy_from<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %self, i8* %source, i32 %count) #0 {
entry:
  %0 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_to<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %source, i8* %self, i32 %count)
  ret i8* %0
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %self, i32 %count) #0 {
entry:
  %0 = icmp slt i32 %count, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call i32 @"*Int32@Int#abs:Int32"(i32 %count)
  %2 = call i32 @"*UInt32@Int#>><Int32>:UInt32"(i32 %self, i32 %1)
  br label %exit

else:                                             ; preds = %entry
  %3 = icmp slt i32 %count, 32
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i32 [ %2, %then ], [ %7, %exit3 ]
  ret i32 %4

then1:                                            ; preds = %else
  %5 = shl i32 %self, %count
  br label %exit3

else2:                                            ; preds = %else
  %6 = call i32 @"*UInt32@Number::zero:UInt32"()
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %7 = phi i32 [ %5, %then1 ], [ %6, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Int#>><Int32>:UInt32"(i32 %self, i32 %count) #0 {
entry:
  %0 = icmp slt i32 %count, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call i32 @"*Int32@Int#abs:Int32"(i32 %count)
  %2 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %self, i32 %1)
  br label %exit

else:                                             ; preds = %entry
  %3 = icmp slt i32 %count, 32
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i32 [ %2, %then ], [ %7, %exit3 ]
  ret i32 %4

then1:                                            ; preds = %else
  %5 = lshr i32 %self, %count
  br label %exit3

else2:                                            ; preds = %else
  %6 = call i32 @"*UInt32@Number::zero:UInt32"()
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %7 = phi i32 [ %5, %then1 ], [ %6, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Number::zero:UInt32"() #0 {
entry:
  %0 = call i32 @"*UInt32::new<Int32>:UInt32"(i32 0)
  ret i32 %0
}

; Function Attrs: uwtable
define internal i32 @"*UInt32::new<Int32>:UInt32"(i32 %value) #0 {
entry:
  ret i32 %value
}

; Function Attrs: uwtable
define internal i1 @"*Char::Reader#has_next?:Bool"(%"Char::Reader"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %self, i32 0, i32 4
  %1 = load i1, i1* %0
  %2 = xor i1 %1, true
  ret i1 %2
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*String#rindex<Char, Int32>:(Int32 | Nil)"(%String* %self, i32 %search, i32 %offset) #0 {
alloca:
  %__temp_73 = alloca i1
  %last_index = alloca %"(Int32 | Nil)"
  %offset1 = alloca i32
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"(Int32 | Nil)"
  %char = alloca i32
  %i = alloca i32
  %__temp_74 = alloca i1
  %i9 = alloca i32
  %char10 = alloca i32
  %byte = alloca i8
  %3 = alloca %"Slice(UInt8)"
  %byte13 = alloca i8
  %i14 = alloca i32
  %i15 = alloca i32
  %4 = alloca %"(Int32 | Nil)"
  %5 = alloca %"(Int32 | Nil)"
  %6 = alloca %"Char::Reader"
  %char24 = alloca i32
  %7 = alloca %"(Int32 | Nil)"
  %8 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %offset, i32* %offset1
  %9 = call i1 @"*Char#ascii?:Bool"(i32 %search)
  store i1 %9, i1* %__temp_73
  br i1 %9, label %then2, label %else3

then:                                             ; preds = %exit
  %10 = call %"Slice(UInt8)" @"*String#to_slice:Slice(UInt8)"(%String* %self)
  store %"Slice(UInt8)" %10, %"Slice(UInt8)"* %0
  %11 = trunc i32 %search to i8
  %12 = load i32, i32* %offset1
  %13 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Indexable(T)#rindex<UInt8, Int32>:(Int32 | Nil)"(%"Slice(UInt8)"* %0, i8 %11, i32 %12)
  store %"(Int32 | Nil)" %13, %"(Int32 | Nil)"* %1
  %14 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  ret %"(Int32 | Nil)" %14

else:                                             ; preds = %exit
  %15 = load i32, i32* %offset1
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %then4, label %else5

then2:                                            ; preds = %entry
  %17 = call i1 @"*String#ascii_only?:Bool"(%String* %self)
  br label %exit

else3:                                            ; preds = %entry
  %18 = load i1, i1* %__temp_73
  br label %exit

exit:                                             ; preds = %else3, %then2
  %19 = phi i1 [ %17, %then2 ], [ %18, %else3 ]
  br i1 %19, label %then, label %else

then4:                                            ; preds = %else
  %20 = load i32, i32* %offset1
  %21 = call i32 @"*String#size:Int32"(%String* %self)
  %22 = add i32 %20, %21
  store i32 %22, i32* %offset1
  br label %exit6

else5:                                            ; preds = %else
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  %23 = load i32, i32* %offset1
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %then7, label %else8

then7:                                            ; preds = %exit6
  %25 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 0
  store i32 0, i32* %25
  %26 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %26
  %27 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %2
  ret %"(Int32 | Nil)" %27

else8:                                            ; preds = %exit6
  %28 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %last_index, i32 0, i32 0
  store i32 0, i32* %28
  %29 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %last_index, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %29
  store i32 0, i32* %i9
  %30 = call i1 @"*String#ascii_only?:Bool"(%String* %self)
  br i1 %30, label %then11, label %else12

then11:                                           ; preds = %else8
  %31 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %32 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %33 = load i32, i32* %32
  %34 = call %"Slice(UInt8)" @"*Pointer(UInt8)@Pointer(T)#to_slice<Int32>:Slice(UInt8)"(i8* %31, i32 %33)
  store %"Slice(UInt8)" %34, %"Slice(UInt8)"* %3
  store i32 0, i32* %i15
  br label %while

else12:                                           ; preds = %else8
  %35 = call %"Char::Reader" @"*Char::Reader::new<String>:Char::Reader"(%String* %self)
  store %"Char::Reader" %35, %"Char::Reader"* %6
  br label %while25

while:                                            ; preds = %exit22, %then11
  %36 = load i32, i32* %i15
  %37 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %3, i32 0, i32 0
  %38 = load i32, i32* %37
  %39 = icmp slt i32 %36, %38
  br i1 %39, label %body, label %exit16

body:                                             ; preds = %while
  %40 = load i32, i32* %i15
  store i32 %40, i32* %i14
  %41 = load i32, i32* %i14
  %42 = call i8 @"*Slice(UInt8)@Slice(T)#unsafe_at<Int32>:UInt8"(%"Slice(UInt8)"* %3, i32 %41)
  store i8 %42, i8* %byte13
  %43 = load i8, i8* %byte13
  store i8 %43, i8* %byte
  %44 = load i8, i8* %byte
  %45 = zext i8 %44 to i32
  store i32 %45, i32* %char10
  %46 = load i32, i32* %char10
  %47 = load i32, i32* %i9
  store i32 %46, i32* %char
  store i32 %47, i32* %i
  %48 = load i32, i32* %i
  %49 = load i32, i32* %offset1
  %50 = icmp sle i32 %48, %49
  store i1 %50, i1* %__temp_74
  br i1 %50, label %then19, label %else20

exit16:                                           ; preds = %while
  br label %exit23

then17:                                           ; preds = %exit21
  %51 = load i32, i32* %i
  %52 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %last_index, i32 0, i32 0
  store i32 138, i32* %52
  %53 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %last_index, i32 0, i32 1
  %54 = bitcast [1 x i64]* %53 to i32*
  store i32 %51, i32* %54
  %55 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %4, i32 0, i32 0
  store i32 138, i32* %55
  %56 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %4, i32 0, i32 1
  %57 = bitcast [1 x i64]* %56 to i32*
  store i32 %51, i32* %57
  br label %exit22

else18:                                           ; preds = %exit21
  %58 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %5, i32 0, i32 0
  store i32 0, i32* %58
  %59 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %5, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %59
  br label %exit22

then19:                                           ; preds = %body
  %60 = load i32, i32* %char
  %61 = icmp eq i32 %60, %search
  br label %exit21

else20:                                           ; preds = %body
  %62 = load i1, i1* %__temp_74
  br label %exit21

exit21:                                           ; preds = %else20, %then19
  %63 = phi i1 [ %61, %then19 ], [ %62, %else20 ]
  br i1 %63, label %then17, label %else18

exit22:                                           ; preds = %else18, %then17
  %64 = phi %"(Int32 | Nil)"* [ %4, %then17 ], [ %5, %else18 ]
  %65 = load i32, i32* %i9
  %66 = add i32 %65, 1
  store i32 %66, i32* %i9
  %67 = load i32, i32* %i15
  %68 = add i32 %67, 1
  store i32 %68, i32* %i15
  br label %while

exit23:                                           ; preds = %exit27, %exit16
  %69 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %last_index
  ret %"(Int32 | Nil)" %69

while25:                                          ; preds = %exit33, %else12
  %70 = call i1 @"*Char::Reader#has_next?:Bool"(%"Char::Reader"* %6)
  br i1 %70, label %body26, label %exit27

body26:                                           ; preds = %while25
  %71 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %6, i32 0, i32 1
  %72 = load i32, i32* %71
  store i32 %72, i32* %char24
  %73 = load i32, i32* %char24
  store i32 %73, i32* %char10
  %74 = load i32, i32* %char10
  %75 = load i32, i32* %i9
  store i32 %74, i32* %char
  store i32 %75, i32* %i
  %76 = load i32, i32* %i
  %77 = load i32, i32* %offset1
  %78 = icmp sle i32 %76, %77
  store i1 %78, i1* %__temp_74
  br i1 %78, label %then30, label %else31

exit27:                                           ; preds = %while25
  br label %exit23

then28:                                           ; preds = %exit32
  %79 = load i32, i32* %i
  %80 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %last_index, i32 0, i32 0
  store i32 138, i32* %80
  %81 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %last_index, i32 0, i32 1
  %82 = bitcast [1 x i64]* %81 to i32*
  store i32 %79, i32* %82
  %83 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %7, i32 0, i32 0
  store i32 138, i32* %83
  %84 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %7, i32 0, i32 1
  %85 = bitcast [1 x i64]* %84 to i32*
  store i32 %79, i32* %85
  br label %exit33

else29:                                           ; preds = %exit32
  %86 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %8, i32 0, i32 0
  store i32 0, i32* %86
  %87 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %8, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %87
  br label %exit33

then30:                                           ; preds = %body26
  %88 = load i32, i32* %char
  %89 = icmp eq i32 %88, %search
  br label %exit32

else31:                                           ; preds = %body26
  %90 = load i1, i1* %__temp_74
  br label %exit32

exit32:                                           ; preds = %else31, %then30
  %91 = phi i1 [ %89, %then30 ], [ %90, %else31 ]
  br i1 %91, label %then28, label %else29

exit33:                                           ; preds = %else29, %then28
  %92 = phi %"(Int32 | Nil)"* [ %7, %then28 ], [ %8, %else29 ]
  %93 = load i32, i32* %i9
  %94 = add i32 %93, 1
  store i32 %94, i32* %i9
  %95 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %6, i32 0, i32 3
  %96 = load i32, i32* %95
  %97 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %6, i32 0, i32 2
  %98 = load i32, i32* %97
  %99 = add i32 %96, %98
  %100 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %6, i32 0, i32 3
  store i32 %99, i32* %100
  %101 = call i32 @"*Char::Reader#decode_current_char:Char"(%"Char::Reader"* %6)
  br label %while25
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*String#to_slice:Slice(UInt8)"(%String* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %2 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %3 = load i32, i32* %2
  %4 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %3)
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %0
  %5 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %5
}

; Function Attrs: uwtable
define internal %String* @"*String#[]<Int32, Int32>:String"(%String* %self, i32 %start, i32 %count) #0 {
alloca:
  %start_pos = alloca %"(Int32 | Nil)"
  %end_pos = alloca %"(Int32 | Nil)"
  %reader = alloca %"Char::Reader"
  %i = alloca i32
  %start1 = alloca i32
  %count2 = alloca i32
  %0 = alloca %"Char::Reader"
  %char = alloca i32
  %__temp_78 = alloca i1
  %buffer = alloca i8*
  %capacity = alloca i32
  %str = alloca i8*
  %buffer26 = alloca i8*
  %__temp_79 = alloca %"Tuple(Int32, Int32)"
  %bytesize = alloca i32
  %size = alloca i32
  %__temp_80 = alloca i1
  %str_header = alloca %"Tuple(Int32, Int32, Int32)"*
  %1 = alloca %"Tuple(Int32, Int32)"
  %2 = alloca %"Tuple(Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %start, i32* %start1
  store i32 %count, i32* %count2
  %3 = call i1 @"*String#ascii_only?:Bool"(%String* %self)
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i32, i32* %start1
  %5 = load i32, i32* %count2
  %6 = call %String* @"*String#byte_slice<Int32, Int32>:String"(%String* %self, i32 %4, i32 %5)
  ret %String* %6

else:                                             ; preds = %entry
  %7 = load i32, i32* %start1
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %then3, label %else4

then3:                                            ; preds = %else
  %9 = load i32, i32* %start1
  %10 = call i32 @"*String#size:Int32"(%String* %self)
  %11 = add i32 %9, %10
  store i32 %11, i32* %start1
  br label %exit

else4:                                            ; preds = %else
  br label %exit

exit:                                             ; preds = %else4, %then3
  %12 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %start_pos, i32 0, i32 0
  store i32 0, i32* %12
  %13 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %start_pos, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %13
  %14 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 0
  store i32 0, i32* %14
  %15 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %15
  %16 = call %"Char::Reader" @"*Char::Reader::new<String>:Char::Reader"(%String* %self)
  store %"Char::Reader" %16, %"Char::Reader"* %0
  %17 = load %"Char::Reader", %"Char::Reader"* %0
  store %"Char::Reader" %17, %"Char::Reader"* %reader
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %exit8, %exit
  %18 = call i1 @"*Char::Reader#has_next?:Bool"(%"Char::Reader"* %reader)
  br i1 %18, label %body, label %exit5

body:                                             ; preds = %while
  %19 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %reader, i32 0, i32 1
  %20 = load i32, i32* %19
  store i32 %20, i32* %char
  %21 = load i32, i32* %i
  %22 = load i32, i32* %start1
  %23 = icmp eq i32 %21, %22
  br i1 %23, label %then6, label %else7

exit5:                                            ; preds = %while
  br label %exit14

then6:                                            ; preds = %body
  %24 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %reader, i32 0, i32 3
  %25 = load i32, i32* %24
  %26 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %start_pos, i32 0, i32 0
  store i32 138, i32* %26
  %27 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %start_pos, i32 0, i32 1
  %28 = bitcast [1 x i64]* %27 to i32*
  store i32 %25, i32* %28
  br label %exit8

else7:                                            ; preds = %body
  %29 = load i32, i32* %count2
  %30 = icmp sge i32 %29, 0
  store i1 %30, i1* %__temp_78
  br i1 %30, label %then11, label %else12

exit8:                                            ; preds = %else10, %then6
  %31 = load i32, i32* %i
  %32 = add i32 %31, 1
  store i32 %32, i32* %i
  %33 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %reader, i32 0, i32 3
  %34 = load i32, i32* %33
  %35 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %reader, i32 0, i32 2
  %36 = load i32, i32* %35
  %37 = add i32 %34, %36
  %38 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %reader, i32 0, i32 3
  store i32 %37, i32* %38
  %39 = call i32 @"*Char::Reader#decode_current_char:Char"(%"Char::Reader"* %reader)
  br label %while

then9:                                            ; preds = %exit13
  %40 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %reader, i32 0, i32 3
  %41 = load i32, i32* %40
  %42 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 0
  store i32 138, i32* %42
  %43 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 1
  %44 = bitcast [1 x i64]* %43 to i32*
  store i32 %41, i32* %44
  %45 = load i32, i32* %i
  %46 = add i32 %45, 1
  store i32 %46, i32* %i
  br label %exit14

else10:                                           ; preds = %exit13
  br label %exit8

then11:                                           ; preds = %else7
  %47 = load i32, i32* %i
  %48 = load i32, i32* %start1
  %49 = load i32, i32* %count2
  %50 = add i32 %48, %49
  %51 = icmp eq i32 %47, %50
  br label %exit13

else12:                                           ; preds = %else7
  %52 = load i1, i1* %__temp_78
  br label %exit13

exit13:                                           ; preds = %else12, %then11
  %53 = phi i1 [ %51, %then11 ], [ %52, %else12 ]
  br i1 %53, label %then9, label %else10

exit14:                                           ; preds = %exit5, %then9
  %54 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 0
  %55 = load i32, i32* %54
  %56 = icmp eq i32 %55, 0
  %57 = xor i1 %56, true
  %58 = and i1 true, %57
  br i1 %58, label %then15, label %else16

then15:                                           ; preds = %exit14
  %59 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 1
  %60 = bitcast [1 x i64]* %59 to i32*
  %61 = load i32, i32* %60
  br label %exit17

else16:                                           ; preds = %exit14
  %62 = getelementptr inbounds %"Char::Reader", %"Char::Reader"* %reader, i32 0, i32 3
  %63 = load i32, i32* %62
  %64 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 0
  store i32 138, i32* %64
  %65 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 1
  %66 = bitcast [1 x i64]* %65 to i32*
  store i32 %63, i32* %66
  br label %exit17

exit17:                                           ; preds = %else16, %then15
  %67 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %start_pos, i32 0, i32 0
  %68 = load i32, i32* %67
  %69 = icmp eq i32 %68, 0
  %70 = xor i1 %69, true
  %71 = and i1 true, %70
  br i1 %71, label %then18, label %else19

then18:                                           ; preds = %exit17
  %72 = load i32, i32* %count2
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %then20, label %else21

else19:                                           ; preds = %exit17
  %74 = load i32, i32* %start1
  %75 = load i32, i32* %i
  %76 = icmp eq i32 %74, %75
  br i1 %76, label %then37, label %else38

then20:                                           ; preds = %then18
  %77 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative count'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %77)
  unreachable

else21:                                           ; preds = %then18
  %78 = load i32, i32* %count2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %then22, label %else23

then22:                                           ; preds = %else21
  ret %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*)

else23:                                           ; preds = %else21
  %80 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %end_pos, i32 0, i32 1
  %81 = bitcast [1 x i64]* %80 to i32*
  %82 = load i32, i32* %81
  %83 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %start_pos, i32 0, i32 1
  %84 = bitcast [1 x i64]* %83 to i32*
  %85 = load i32, i32* %84
  %86 = sub i32 %82, %85
  store i32 %86, i32* %count2
  %87 = load i32, i32* %count2
  %88 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %89 = load i32, i32* %88
  %90 = icmp eq i32 %87, %89
  br i1 %90, label %then24, label %else25

then24:                                           ; preds = %else23
  ret %String* %self

else25:                                           ; preds = %else23
  %91 = load i32, i32* %count2
  store i32 %91, i32* %capacity
  %92 = load i32, i32* %capacity
  call void @"*String::check_capacity_in_bounds<Int32>:Nil"(i32 %92)
  %93 = load i32, i32* %capacity
  %94 = add i32 %93, 12
  %95 = add i32 %94, 1
  %96 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %95)
  store i8* %96, i8** %str
  %97 = load i8*, i8** %str
  %98 = bitcast i8* %97 to %String*
  %99 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %98)
  store i8* %99, i8** %buffer26
  %100 = load i8*, i8** %buffer26
  store i8* %100, i8** %buffer
  %101 = load i8*, i8** %buffer
  %102 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %103 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %start_pos, i32 0, i32 1
  %104 = bitcast [1 x i64]* %103 to i32*
  %105 = load i32, i32* %104
  %106 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %102, i32 %105)
  %107 = load i32, i32* %count2
  %108 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_from<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %101, i8* %106, i32 %107)
  %109 = load i32, i32* %count2
  %110 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %1, i32 0, i32 0
  store i32 %109, i32* %110
  %111 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %1, i32 0, i32 1
  store i32 0, i32* %111
  %112 = load %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %1
  store %"Tuple(Int32, Int32)" %112, %"Tuple(Int32, Int32)"* %__temp_79
  %113 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %__temp_79, i32 0, i32 0
  %114 = load i32, i32* %113
  store i32 %114, i32* %bytesize
  %115 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %__temp_79, i32 0, i32 1
  %116 = load i32, i32* %115
  store i32 %116, i32* %size
  %117 = load i32, i32* %bytesize
  %118 = icmp sle i32 0, %117
  store i1 %118, i1* %__temp_80
  br i1 %118, label %then29, label %else30

then27:                                           ; preds = %exit31
  br label %exit32

else28:                                           ; preds = %exit31
  %119 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [32 x i8] }* @"'bytesize out of cap...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %119)
  unreachable

then29:                                           ; preds = %else25
  %120 = load i32, i32* %bytesize
  %121 = load i32, i32* %capacity
  %122 = icmp sle i32 %120, %121
  br label %exit31

else30:                                           ; preds = %else25
  %123 = load i1, i1* %__temp_80
  br label %exit31

exit31:                                           ; preds = %else30, %then29
  %124 = phi i1 [ %122, %then29 ], [ %123, %else30 ]
  br i1 %124, label %then27, label %else28

exit32:                                           ; preds = %then27
  %125 = load i8*, i8** %buffer26
  %126 = load i32, i32* %bytesize
  %127 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %125, i32 %126, i8 0)
  %128 = load i32, i32* %bytesize
  %129 = load i32, i32* %capacity
  %130 = icmp slt i32 %128, %129
  br i1 %130, label %then33, label %else34

then33:                                           ; preds = %exit32
  %131 = load i8*, i8** %str
  %132 = load i32, i32* %bytesize
  %133 = add i32 %132, 12
  %134 = add i32 %133, 1
  %135 = call i8* @"*Pointer(UInt8)@Pointer(T)#realloc<UInt32>:Pointer(UInt8)"(i8* %131, i32 %134)
  store i8* %135, i8** %str
  br label %exit35

else34:                                           ; preds = %exit32
  br label %exit35

exit35:                                           ; preds = %else34, %then33
  %136 = load i8*, i8** %str
  %137 = bitcast i8* %136 to %"Tuple(Int32, Int32, Int32)"*
  store %"Tuple(Int32, Int32, Int32)"* %137, %"Tuple(Int32, Int32, Int32)"** %str_header
  %138 = load %"Tuple(Int32, Int32, Int32)"*, %"Tuple(Int32, Int32, Int32)"** %str_header
  %139 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %2, i32 0, i32 0
  store i32 1, i32* %139
  %140 = load i32, i32* %bytesize
  %141 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %2, i32 0, i32 1
  store i32 %140, i32* %141
  %142 = load i32, i32* %size
  %143 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %2, i32 0, i32 2
  store i32 %142, i32* %143
  %144 = load %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %2
  store %"Tuple(Int32, Int32, Int32)" %144, %"Tuple(Int32, Int32, Int32)"* %138
  %145 = load i8*, i8** %str
  %146 = bitcast i8* %145 to %String*
  br label %exit36

exit36:                                           ; preds = %exit35
  %147 = phi %String* [ %146, %exit35 ]
  ret %String* %147

then37:                                           ; preds = %else19
  %148 = load i32, i32* %count2
  %149 = icmp sge i32 %148, 0
  br i1 %149, label %then39, label %else40

else38:                                           ; preds = %else19
  %150 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %150)
  unreachable

then39:                                           ; preds = %then37
  ret %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*)

else40:                                           ; preds = %then37
  %151 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative count'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %151)
  unreachable
}

; Function Attrs: uwtable
define internal %String* @"*String#byte_slice<Int32, Int32>:String"(%String* %self, i32 %start, i32 %count) #0 {
alloca:
  %single_byte_optimizable = alloca i1
  %__temp_75 = alloca i1
  %start1 = alloca i32
  %count2 = alloca i32
  %buffer = alloca i8*
  %slice_size = alloca i32
  %capacity = alloca i32
  %str = alloca i8*
  %buffer17 = alloca i8*
  %__temp_76 = alloca %"Tuple(Int32, Int32)"
  %bytesize = alloca i32
  %size = alloca i32
  %__temp_77 = alloca i1
  %str_header = alloca %"Tuple(Int32, Int32, Int32)"*
  %0 = alloca %"Tuple(Int32, Int32)"
  %1 = alloca %"Tuple(Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %start, i32* %start1
  store i32 %count, i32* %count2
  %2 = load i32, i32* %start1
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i32, i32* %start1
  %5 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %6 = load i32, i32* %5
  %7 = add i32 %4, %6
  store i32 %7, i32* %start1
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %8 = call i1 @"*String#ascii_only?:Bool"(%String* %self)
  store i1 %8, i1* %single_byte_optimizable
  %9 = load i32, i32* %start1
  %10 = icmp sle i32 0, %9
  store i1 %10, i1* %__temp_75
  br i1 %10, label %then5, label %else6

then3:                                            ; preds = %exit7
  %11 = load i32, i32* %count2
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %then8, label %else9

else4:                                            ; preds = %exit7
  %13 = load i32, i32* %start1
  %14 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %15 = load i32, i32* %14
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %then31, label %else32

then5:                                            ; preds = %exit
  %17 = load i32, i32* %start1
  %18 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %19 = load i32, i32* %18
  %20 = icmp slt i32 %17, %19
  br label %exit7

else6:                                            ; preds = %exit
  %21 = load i1, i1* %__temp_75
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %22 = phi i1 [ %20, %then5 ], [ %21, %else6 ]
  br i1 %22, label %then3, label %else4

then8:                                            ; preds = %then3
  %23 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative count'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %23)
  unreachable

else9:                                            ; preds = %then3
  %24 = load i32, i32* %start1
  %25 = load i32, i32* %count2
  %26 = add i32 %24, %25
  %27 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %28 = load i32, i32* %27
  %29 = icmp sgt i32 %26, %28
  br i1 %29, label %then10, label %else11

then10:                                           ; preds = %else9
  %30 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %31 = load i32, i32* %30
  %32 = load i32, i32* %start1
  %33 = sub i32 %31, %32
  store i32 %33, i32* %count2
  br label %exit12

else11:                                           ; preds = %else9
  br label %exit12

exit12:                                           ; preds = %else11, %then10
  %34 = load i32, i32* %count2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %then13, label %else14

then13:                                           ; preds = %exit12
  ret %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*)

else14:                                           ; preds = %exit12
  %36 = load i32, i32* %count2
  %37 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %38 = load i32, i32* %37
  %39 = icmp eq i32 %36, %38
  br i1 %39, label %then15, label %else16

then15:                                           ; preds = %else14
  ret %String* %self

else16:                                           ; preds = %else14
  %40 = load i32, i32* %count2
  store i32 %40, i32* %capacity
  %41 = load i32, i32* %capacity
  call void @"*String::check_capacity_in_bounds<Int32>:Nil"(i32 %41)
  %42 = load i32, i32* %capacity
  %43 = add i32 %42, 12
  %44 = add i32 %43, 1
  %45 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %44)
  store i8* %45, i8** %str
  %46 = load i8*, i8** %str
  %47 = bitcast i8* %46 to %String*
  %48 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %47)
  store i8* %48, i8** %buffer17
  %49 = load i8*, i8** %buffer17
  store i8* %49, i8** %buffer
  %50 = load i8*, i8** %buffer
  %51 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %52 = load i32, i32* %start1
  %53 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %51, i32 %52)
  %54 = load i32, i32* %count2
  %55 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_from<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %50, i8* %53, i32 %54)
  %56 = load i1, i1* %single_byte_optimizable
  br i1 %56, label %then18, label %else19

then18:                                           ; preds = %else16
  %57 = load i32, i32* %count2
  br label %exit20

else19:                                           ; preds = %else16
  br label %exit20

exit20:                                           ; preds = %else19, %then18
  %58 = phi i32 [ %57, %then18 ], [ 0, %else19 ]
  store i32 %58, i32* %slice_size
  %59 = load i32, i32* %count2
  %60 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %0, i32 0, i32 0
  store i32 %59, i32* %60
  %61 = load i32, i32* %slice_size
  %62 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %0, i32 0, i32 1
  store i32 %61, i32* %62
  %63 = load %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %0
  store %"Tuple(Int32, Int32)" %63, %"Tuple(Int32, Int32)"* %__temp_76
  %64 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %__temp_76, i32 0, i32 0
  %65 = load i32, i32* %64
  store i32 %65, i32* %bytesize
  %66 = getelementptr inbounds %"Tuple(Int32, Int32)", %"Tuple(Int32, Int32)"* %__temp_76, i32 0, i32 1
  %67 = load i32, i32* %66
  store i32 %67, i32* %size
  %68 = load i32, i32* %bytesize
  %69 = icmp sle i32 0, %68
  store i1 %69, i1* %__temp_77
  br i1 %69, label %then23, label %else24

then21:                                           ; preds = %exit25
  br label %exit26

else22:                                           ; preds = %exit25
  %70 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [32 x i8] }* @"'bytesize out of cap...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %70)
  unreachable

then23:                                           ; preds = %exit20
  %71 = load i32, i32* %bytesize
  %72 = load i32, i32* %capacity
  %73 = icmp sle i32 %71, %72
  br label %exit25

else24:                                           ; preds = %exit20
  %74 = load i1, i1* %__temp_77
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %75 = phi i1 [ %73, %then23 ], [ %74, %else24 ]
  br i1 %75, label %then21, label %else22

exit26:                                           ; preds = %then21
  %76 = load i8*, i8** %buffer17
  %77 = load i32, i32* %bytesize
  %78 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %76, i32 %77, i8 0)
  %79 = load i32, i32* %bytesize
  %80 = load i32, i32* %capacity
  %81 = icmp slt i32 %79, %80
  br i1 %81, label %then27, label %else28

then27:                                           ; preds = %exit26
  %82 = load i8*, i8** %str
  %83 = load i32, i32* %bytesize
  %84 = add i32 %83, 12
  %85 = add i32 %84, 1
  %86 = call i8* @"*Pointer(UInt8)@Pointer(T)#realloc<UInt32>:Pointer(UInt8)"(i8* %82, i32 %85)
  store i8* %86, i8** %str
  br label %exit29

else28:                                           ; preds = %exit26
  br label %exit29

exit29:                                           ; preds = %else28, %then27
  %87 = load i8*, i8** %str
  %88 = bitcast i8* %87 to %"Tuple(Int32, Int32, Int32)"*
  store %"Tuple(Int32, Int32, Int32)"* %88, %"Tuple(Int32, Int32, Int32)"** %str_header
  %89 = load %"Tuple(Int32, Int32, Int32)"*, %"Tuple(Int32, Int32, Int32)"** %str_header
  %90 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 0
  store i32 1, i32* %90
  %91 = load i32, i32* %bytesize
  %92 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 1
  store i32 %91, i32* %92
  %93 = load i32, i32* %size
  %94 = getelementptr inbounds %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1, i32 0, i32 2
  store i32 %93, i32* %94
  %95 = load %"Tuple(Int32, Int32, Int32)", %"Tuple(Int32, Int32, Int32)"* %1
  store %"Tuple(Int32, Int32, Int32)" %95, %"Tuple(Int32, Int32, Int32)"* %89
  %96 = load i8*, i8** %str
  %97 = bitcast i8* %96 to %String*
  br label %exit30

exit30:                                           ; preds = %exit29
  %98 = phi %String* [ %97, %exit29 ]
  ret %String* %98

then31:                                           ; preds = %else4
  %99 = load i32, i32* %count2
  %100 = icmp sge i32 %99, 0
  br i1 %100, label %then33, label %else34

else32:                                           ; preds = %else4
  %101 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %101)
  unreachable

then33:                                           ; preds = %then31
  ret %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*)

else34:                                           ; preds = %then31
  %102 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative count'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %102)
  unreachable
}

; Function Attrs: uwtable
define internal i1 @"*File::exists?<String>:Bool"(%String* %path) #0 {
entry:
  %0 = call i1 @"*File::accessible?<String, Int32>:Bool"(%String* %path, i32 0)
  ret i1 %0
}

; Function Attrs: uwtable
define internal i1 @"*File::accessible?<String, Int32>:Bool"(%String* %path, i32 %flag) #0 {
entry:
  %0 = call %String* @"*String#check_no_null_byte:String"(%String* %path)
  %1 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %0)
  %2 = call i32 @access(i8* %1, i32 %flag)
  %3 = icmp eq i32 %2, 0
  ret i1 %3
}

declare i32 @access(i8*, i32)

; Function Attrs: uwtable
define internal %File* @"*File::new<String, String, Int32, Nil, Nil>:File"(%String* %filename, %String* %mode, i32 %perm, %Nil %encoding, %Nil %invalid) #0 {
alloca:
  %_ = alloca %File*
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @__crystal_malloc(i32 ptrtoint (%File* getelementptr (%File, %File* null, i32 1) to i32))
  %2 = bitcast i8* %1 to %File*
  %3 = bitcast %File* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* %3, i8 0, i32 ptrtoint (%File* getelementptr (%File, %File* null, i32 1) to i32), i32 4, i1 false)
  %4 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::empty:Slice(UInt8)"(i32 935)
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %0
  %5 = getelementptr inbounds %File, %File* %2, i32 0, i32 4
  %6 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %5
  %7 = getelementptr inbounds %File, %File* %2, i32 0, i32 5
  store i32 0, i32* %7
  %8 = getelementptr inbounds %File, %File* %2, i32 0, i32 6
  store i1 false, i1* %8
  %9 = getelementptr inbounds %File, %File* %2, i32 0, i32 7
  store i1 false, i1* %9
  %10 = getelementptr inbounds %File, %File* %2, i32 0, i32 0
  store i32 65, i32* %10
  store %File* %2, %File** %_
  %11 = load %File*, %File** %_
  %12 = call %"(Event::Event | Nil)" @"*File#initialize<String, String, Int32, Nil, Nil>:(Event::Event | Nil)"(%File* %11, %String* %filename, %String* %mode, i32 %perm, %Nil zeroinitializer, %Nil zeroinitializer)
  %13 = load %File*, %File** %_
  call void @"*GC::add_finalizer<File>:Nil"(%File* %13)
  %14 = load %File*, %File** %_
  ret %File* %14
}

; Function Attrs: uwtable
define internal %"(Event::Event | Nil)" @"*File#initialize<String, String, Int32, Nil, Nil>:(Event::Event | Nil)"(%File* %self, %String* %filename, %String* %mode, i32 %perm, %Nil %encoding, %Nil %invalid) #0 {
alloca:
  %oflag = alloca i32
  %fd = alloca i32
  %0 = alloca %"(Event::Event | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i32 @"*File#open_flag<String>:Int32"(%File* %self, %String* %mode)
  %2 = or i32 %1, 16777216
  store i32 %2, i32* %oflag
  %3 = call %String* @"*String#check_no_null_byte:String"(%String* %filename)
  %4 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %3)
  %5 = load i32, i32* %oflag
  %6 = call i32 (i8*, i32, ...) @open(i8* %4, i32 %5, i32 %perm)
  store i32 %6, i32* %fd
  %7 = load i32, i32* %fd
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %then, label %else

then:                                             ; preds = %entry
  %9 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %10 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %9, %String* bitcast ({ i32, i32, i32, [21 x i8] }* @"'Error opening file ...'" to %String*))
  %11 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %10, %String* %filename)
  %12 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %11, %String* bitcast ({ i32, i32, i32, [14 x i8] }* @"'' with mode ''" to %String*))
  %13 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %12, %String* %mode)
  %14 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %13, %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'''" to %String*))
  %15 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %14)
  %16 = call %Errno* @"*Errno::new<String>:Errno"(%String* %15)
  call void @"*raise<Errno>:NoReturn"(%Errno* %16)
  unreachable

else:                                             ; preds = %entry
  %17 = getelementptr inbounds %File, %File* %self, i32 0, i32 21
  store %String* %filename, %String** %17
  %18 = load i32, i32* %fd
  %19 = call %"(Event::Event | Nil)" @"*File@IO::FileDescriptor#initialize:blocking<Int32, Bool>:(Event::Event | Nil)"(%File* %self, i32 %18, i1 true)
  store %"(Event::Event | Nil)" %19, %"(Event::Event | Nil)"* %0
  %20 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %0
  ret %"(Event::Event | Nil)" %20
}

; Function Attrs: uwtable
define internal i32 @"*File#open_flag<String>:Int32"(%File* %self, %String* %mode) #0 {
alloca:
  %m = alloca i32
  %o = alloca i32
  %__temp_81 = alloca i32
  %__temp_82 = alloca i32
  %__temp_83 = alloca i32
  %oflag = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @"*String#size:Int32"(%String* %mode)
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %2, %String* bitcast ({ i32, i32, i32, [21 x i8] }* @"'invalid access mode...'" to %String*))
  %4 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %3, %String* %mode)
  %5 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %4)
  call void @"*raise<String>:NoReturn"(%String* %5)
  unreachable

else:                                             ; preds = %entry
  store i32 0, i32* %m
  store i32 0, i32* %o
  %6 = call i32 @"*String#[]<Int32>:Char"(%String* %mode, i32 0)
  store i32 %6, i32* %__temp_81
  %7 = load i32, i32* %__temp_81
  %8 = call i1 @"*Char@Object#===<Char>:Bool"(i32 114, i32 %7)
  br i1 %8, label %then1, label %else2

then1:                                            ; preds = %else
  store i32 0, i32* %m
  br label %exit

else2:                                            ; preds = %else
  %9 = load i32, i32* %__temp_81
  %10 = call i1 @"*Char@Object#===<Char>:Bool"(i32 119, i32 %9)
  br i1 %10, label %then3, label %else4

exit:                                             ; preds = %exit5, %then1
  %11 = call i32 @"*String#size:Int32"(%String* %mode)
  store i32 %11, i32* %__temp_82
  %12 = load i32, i32* %__temp_82
  %13 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 1, i32 %12)
  br i1 %13, label %then9, label %else10

then3:                                            ; preds = %else2
  store i32 1, i32* %m
  store i32 1536, i32* %o
  br label %exit5

else4:                                            ; preds = %else2
  %14 = load i32, i32* %__temp_81
  %15 = call i1 @"*Char@Object#===<Char>:Bool"(i32 97, i32 %14)
  br i1 %15, label %then6, label %else7

exit5:                                            ; preds = %exit8, %then3
  br label %exit

then6:                                            ; preds = %else4
  store i32 1, i32* %m
  store i32 520, i32* %o
  br label %exit8

else7:                                            ; preds = %else4
  %16 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %17 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %16, %String* bitcast ({ i32, i32, i32, [21 x i8] }* @"'invalid access mode...'" to %String*))
  %18 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %17, %String* %mode)
  %19 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %18)
  call void @"*raise<String>:NoReturn"(%String* %19)
  unreachable

exit8:                                            ; preds = %then6
  br label %exit5

then9:                                            ; preds = %exit
  br label %exit11

else10:                                           ; preds = %exit
  %20 = load i32, i32* %__temp_82
  %21 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 2, i32 %20)
  br i1 %21, label %then12, label %else13

exit11:                                           ; preds = %exit20, %then9
  %22 = load i32, i32* %m
  %23 = load i32, i32* %o
  %24 = or i32 %22, %23
  store i32 %24, i32* %oflag
  ret i32 %24

then12:                                           ; preds = %else10
  %25 = call i32 @"*String#[]<Int32>:Char"(%String* %mode, i32 1)
  store i32 %25, i32* %__temp_83
  %26 = load i32, i32* %__temp_83
  %27 = call i1 @"*Char@Object#===<Char>:Bool"(i32 43, i32 %26)
  br i1 %27, label %then14, label %else15

else13:                                           ; preds = %else10
  %28 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %29 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %28, %String* bitcast ({ i32, i32, i32, [21 x i8] }* @"'invalid access mode...'" to %String*))
  %30 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %29, %String* %mode)
  %31 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %30)
  call void @"*raise<String>:NoReturn"(%String* %31)
  unreachable

then14:                                           ; preds = %then12
  store i32 2, i32* %m
  br label %exit16

else15:                                           ; preds = %then12
  %32 = load i32, i32* %__temp_83
  %33 = call i1 @"*Char@Object#===<Char>:Bool"(i32 98, i32 %32)
  br i1 %33, label %then17, label %else18

exit16:                                           ; preds = %exit19, %then14
  br label %exit20

then17:                                           ; preds = %else15
  br label %exit19

else18:                                           ; preds = %else15
  %34 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %35 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %34, %String* bitcast ({ i32, i32, i32, [21 x i8] }* @"'invalid access mode...'" to %String*))
  %36 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %35, %String* %mode)
  %37 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %36)
  call void @"*raise<String>:NoReturn"(%String* %37)
  unreachable

exit19:                                           ; preds = %then17
  br label %exit16

exit20:                                           ; preds = %exit16
  br label %exit11
}

declare i32 @open(i8*, i32, ...)

; Function Attrs: uwtable
define internal %"(Event::Event | Nil)" @"*File@IO::FileDescriptor#initialize:blocking<Int32, Bool>:(Event::Event | Nil)"(%File* %self, i32 %fd, i1 %blocking) #0 {
alloca:
  %edge_triggerable = alloca i1
  %0 = alloca %"(Event::Event | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %edge_triggerable
  %1 = load i1, i1* %edge_triggerable
  %2 = call %"(Event::Event | Nil)" @"*File@IO::FileDescriptor#initialize<Int32, Bool, Bool>:(Event::Event | Nil)"(%File* %self, i32 %fd, i1 %blocking, i1 %1)
  store %"(Event::Event | Nil)" %2, %"(Event::Event | Nil)"* %0
  %3 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %0
  ret %"(Event::Event | Nil)" %3
}

; Function Attrs: uwtable
define internal %"(Event::Event | Nil)" @"*File@IO::FileDescriptor#initialize<Int32, Bool, Bool>:(Event::Event | Nil)"(%File* %self, i32 %fd, i1 %blocking, i1 %edge_triggerable) #0 {
alloca:
  %0 = alloca %"(Event::Event | Nil)"
  %1 = alloca %"Event::Event.6"
  %2 = alloca %"Event::Event.6"
  %3 = alloca %"(Event::Event | Nil)"
  %4 = alloca %"(Event::Event | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %5 = getelementptr inbounds %File, %File* %self, i32 0, i32 16
  store i32 %fd, i32* %5
  %6 = xor i1 %edge_triggerable, true
  %7 = xor i1 %6, true
  %8 = getelementptr inbounds %File, %File* %self, i32 0, i32 17
  store i1 %7, i1* %8
  %9 = getelementptr inbounds %File, %File* %self, i32 0, i32 18
  store i1 false, i1* %9
  %10 = getelementptr inbounds %File, %File* %self, i32 0, i32 14
  store i1 false, i1* %10
  %11 = getelementptr inbounds %File, %File* %self, i32 0, i32 15
  store i1 false, i1* %11
  %12 = getelementptr inbounds %File, %File* %self, i32 0, i32 16
  store i32 %fd, i32* %12
  br i1 %blocking, label %then, label %else

then:                                             ; preds = %entry
  %13 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %13
  %14 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %0, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %14
  br label %exit

else:                                             ; preds = %entry
  %15 = call i32 @"*File@IO::FileDescriptor#blocking=<Bool>:Int32"(%File* %self, i1 false)
  %16 = getelementptr inbounds %File, %File* %self, i32 0, i32 17
  %17 = load i1, i1* %16
  br i1 %17, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %18 = phi %"(Event::Event | Nil)"* [ %0, %then ], [ %42, %exit3 ]
  %19 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %18
  ret %"(Event::Event | Nil)" %19

then1:                                            ; preds = %else
  %20 = getelementptr inbounds %File, %File* %self, i32 0, i32 17
  %21 = load i1, i1* %20
  %22 = call %"Event::Event.6" @"*Scheduler::create_fd_read_event<File, Bool>:Event::Event"(%File* %self, i1 %21)
  store %"Event::Event.6" %22, %"Event::Event.6"* %1
  %23 = getelementptr inbounds %File, %File* %self, i32 0, i32 12
  %24 = load %"Event::Event.6", %"Event::Event.6"* %1
  %25 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %23, i32 0, i32 0
  store i32 359, i32* %25
  %26 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %23, i32 0, i32 1
  %27 = bitcast [2 x i64]* %26 to %"Event::Event.6"*
  store %"Event::Event.6" %24, %"Event::Event.6"* %27
  %28 = getelementptr inbounds %File, %File* %self, i32 0, i32 17
  %29 = load i1, i1* %28
  %30 = call %"Event::Event.6" @"*Scheduler::create_fd_write_event<File, Bool>:Event::Event"(%File* %self, i1 %29)
  store %"Event::Event.6" %30, %"Event::Event.6"* %2
  %31 = getelementptr inbounds %File, %File* %self, i32 0, i32 13
  %32 = load %"Event::Event.6", %"Event::Event.6"* %2
  %33 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %31, i32 0, i32 0
  store i32 359, i32* %33
  %34 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %31, i32 0, i32 1
  %35 = bitcast [2 x i64]* %34 to %"Event::Event.6"*
  store %"Event::Event.6" %32, %"Event::Event.6"* %35
  %36 = load %"Event::Event.6", %"Event::Event.6"* %2
  %37 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %3, i32 0, i32 0
  store i32 359, i32* %37
  %38 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %3, i32 0, i32 1
  %39 = bitcast [2 x i64]* %38 to %"Event::Event.6"*
  store %"Event::Event.6" %36, %"Event::Event.6"* %39
  br label %exit3

else2:                                            ; preds = %else
  %40 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %4, i32 0, i32 0
  store i32 0, i32* %40
  %41 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %4, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %41
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %42 = phi %"(Event::Event | Nil)"* [ %3, %then1 ], [ %4, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*File@IO::FileDescriptor#blocking=<Bool>:Int32"(%File* %self, i1 %value) #0 {
alloca:
  %flags = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @"*File@IO::FileDescriptor#fcntl<Int32>:Int32"(%File* %self, i32 3)
  store i32 %0, i32* %flags
  br i1 %value, label %then, label %else

then:                                             ; preds = %entry
  %1 = load i32, i32* %flags
  %2 = call i32 @"*Int32@Int#~:Int32"(i32 4)
  %3 = and i32 %1, %2
  store i32 %3, i32* %flags
  br label %exit

else:                                             ; preds = %entry
  %4 = load i32, i32* %flags
  %5 = or i32 %4, 4
  store i32 %5, i32* %flags
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = load i32, i32* %flags
  %7 = call i32 @"*File@IO::FileDescriptor#fcntl<Int32, Int32>:Int32"(%File* %self, i32 4, i32 %6)
  ret i32 %7
}

; Function Attrs: uwtable
define internal i32 @"*File@IO::FileDescriptor#fcntl<Int32>:Int32"(%File* %self, i32 %cmd) #0 {
alloca:
  %arg = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %arg
  %0 = load i32, i32* %arg
  %1 = call i32 @"*File@IO::FileDescriptor#fcntl<Int32, Int32>:Int32"(%File* %self, i32 %cmd, i32 %0)
  ret i32 %1
}

; Function Attrs: uwtable
define internal i32 @"*File@IO::FileDescriptor#fcntl<Int32, Int32>:Int32"(%File* %self, i32 %cmd, i32 %arg) #0 {
entry:
  %0 = getelementptr inbounds %File, %File* %self, i32 0, i32 16
  %1 = load i32, i32* %0
  %2 = call i32 @"*File@IO::FileDescriptor::fcntl<Int32, Int32, Int32>:Int32"(i32 %1, i32 %cmd, i32 %arg)
  ret i32 %2
}

; Function Attrs: uwtable
define internal i32 @"*File@IO::FileDescriptor::fcntl<Int32, Int32, Int32>:Int32"(i32 %fd, i32 %cmd, i32 %arg) #0 {
alloca:
  %r = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd, i32 %arg)
  store i32 %0, i32* %r
  %1 = load i32, i32* %r
  %2 = icmp eq i32 %1, -1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'fcntl() failed'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %3)
  unreachable

else:                                             ; preds = %entry
  %4 = load i32, i32* %r
  ret i32 %4
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_fd_read_event<File, Bool>:Event::Event"(%File* %io, i1 %edge_triggered) #0 {
alloca:
  %flags = alloca i16
  %event = alloca %"Event::Event.6"
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store i16 2, i16* %flags
  br i1 %edge_triggered, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i16, i16* %flags
  %3 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 16, i16 32)
  %4 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %2, i16 %3)
  store i16 %4, i16* %flags
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %5 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %6 = getelementptr inbounds %File, %File* %io, i32 0, i32 16
  %7 = load i32, i32* %6
  %8 = load i16, i16* %flags
  %9 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~proc2Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:49" to i8*), i8** %9
  %10 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %10
  %11 = load %"->", %"->"* %0
  %12 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, File, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %5, i32 %7, i16 %8, %File* %io, %"->" %11)
  store %"Event::Event.6" %12, %"Event::Event.6"* %1
  %13 = load %"Event::Event.6", %"Event::Event.6"* %1
  store %"Event::Event.6" %13, %"Event::Event.6"* %event
  %14 = load %"Event::Event.6", %"Event::Event.6"* %event
  ret %"Event::Event.6" %14
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, File, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %self, i32 %s, i16 %flags, %File* %data, %"->" %callback) #0 {
alloca:
  %event = alloca i8*
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Event::Base", %"Event::Base"* %self, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = call i8* @"~check_proc_is_not_closure"(%"->" %callback)
  %4 = bitcast i8* %3 to %Nil (i32, i16, i8*)*
  %5 = bitcast %File* %data to i8*
  %6 = call i8* @event_new(i8* %2, i32 %s, i16 %flags, %Nil (i32, i16, i8*)* %4, i8* %5)
  store i8* %6, i8** %event
  %7 = load i8*, i8** %event
  %8 = call %"Event::Event.6" @"*Event::Event::new<Pointer(Void)>:Event::Event"(i8* %7)
  store %"Event::Event.6" %8, %"Event::Event.6"* %0
  %9 = load %"Event::Event.6", %"Event::Event.6"* %0
  ret %"Event::Event.6" %9
}

; Function Attrs: uwtable
define internal void @"~proc2Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:49"(i32 %s, i16 %flags, i8* %data) #0 {
alloca:
  %fd_io = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to i32*
  store i32* %0, i32** %fd_io
  %1 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 2)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_read:Nil"(i32* %2)
  br label %exit

else:                                             ; preds = %entry
  %3 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 1)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret void

then1:                                            ; preds = %else
  %4 = load i32*, i32** %fd_io
  %5 = call i1 @"*IO::FileDescriptor+@IO::FileDescriptor#read_timed_out=<Bool>:Bool"(i32* %4, i1 true)
  %6 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_read:Nil"(i32* %6)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  br label %exit
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_fd_write_event<File, Bool>:Event::Event"(%File* %io, i1 %edge_triggered) #0 {
alloca:
  %flags = alloca i16
  %event = alloca %"Event::Event.6"
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store i16 4, i16* %flags
  br i1 %edge_triggered, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i16, i16* %flags
  %3 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 16, i16 32)
  %4 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %2, i16 %3)
  store i16 %4, i16* %flags
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %5 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %6 = getelementptr inbounds %File, %File* %io, i32 0, i32 16
  %7 = load i32, i32* %6
  %8 = load i16, i16* %flags
  %9 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~proc4Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34" to i8*), i8** %9
  %10 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %10
  %11 = load %"->", %"->"* %0
  %12 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, File, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %5, i32 %7, i16 %8, %File* %io, %"->" %11)
  store %"Event::Event.6" %12, %"Event::Event.6"* %1
  %13 = load %"Event::Event.6", %"Event::Event.6"* %1
  store %"Event::Event.6" %13, %"Event::Event.6"* %event
  %14 = load %"Event::Event.6", %"Event::Event.6"* %event
  ret %"Event::Event.6" %14
}

; Function Attrs: uwtable
define internal void @"~proc4Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34"(i32 %s, i16 %flags, i8* %data) #0 {
alloca:
  %fd_io = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to i32*
  store i32* %0, i32** %fd_io
  %1 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 4)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %2)
  br label %exit

else:                                             ; preds = %entry
  %3 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 1)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret void

then1:                                            ; preds = %else
  %4 = load i32*, i32** %fd_io
  %5 = call i1 @"*IO::FileDescriptor+@IO::FileDescriptor#write_timed_out=<Bool>:Bool"(i32* %4, i1 true)
  %6 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %6)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  br label %exit
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer<File>:Nil"(%File* %object) #0 {
entry:
  call void @"*GC::add_finalizer_impl<File>:Nil"(%File* %object)
  ret void
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer_impl<File>:Nil"(%File* %object) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %File* %object to i8*
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i8*, i8*)* @"~proc3Proc(Pointer(Void), Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108" to i8*), i8** %2
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %3
  %4 = load %"->", %"->"* %0
  %5 = call i8* @"~check_proc_is_not_closure"(%"->" %4)
  %6 = bitcast i8* %5 to %Nil (i8*, i8*)*
  call void @GC_register_finalizer_ignore_self(i8* %1, %Nil (i8*, i8*)* %6, i8* null, %"->"* null, i8** null)
  ret void
}

; Function Attrs: uwtable
define internal void @"~proc3Proc(Pointer(Void), Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108"(i8* %obj, i8* %data) #0 {
entry:
  %0 = bitcast i8* %obj to %File*
  call void @"*File@IO::FileDescriptor#finalize:Nil"(%File* %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*File@IO::FileDescriptor#finalize:Nil"(%File* %self) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
entry:
  %0 = getelementptr inbounds %File, %File* %self, i32 0, i32 18
  %1 = load i1, i1* %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  invoke void @"*File@IO::Buffered#close:Nil"(%File* %self)
          to label %invoke_out unwind label %rescue

rescue:                                           ; preds = %else
  %2 = landingpad %landing_pad
          cleanup
  %3 = extractvalue %landing_pad %2, 0
  %4 = extractvalue %landing_pad %2, 1
  br label %this_rescue

invoke_out:                                       ; preds = %else
  br label %exit

exit:                                             ; preds = %this_rescue, %invoke_out
  ret void

this_rescue:                                      ; preds = %rescue
  br label %exit
}

; Function Attrs: uwtable
define internal void @"*File@IO::Buffered#close:Nil"(%File* %self) #0 {
entry:
  %0 = getelementptr inbounds %File, %File* %self, i32 0, i32 5
  %1 = load i32, i32* %0
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = call %File* @"*File@IO::Buffered#flush:File"(%File* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  call void @"*File@IO::FileDescriptor#unbuffered_close:Nil"(%File* %self)
  ret void
}

; Function Attrs: uwtable
define internal %File* @"*File@IO::Buffered#flush:File"(%File* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %File, %File* %self, i32 0, i32 5
  %2 = load i32, i32* %1
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = call i8* @"*File@IO::Buffered#out_buffer:Pointer(UInt8)"(%File* %self)
  %5 = getelementptr inbounds %File, %File* %self, i32 0, i32 5
  %6 = load i32, i32* %5
  %7 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %4, i32 %6)
  store %"Slice(UInt8)" %7, %"Slice(UInt8)"* %0
  %8 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %9 = call i32 @"*File@IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(%File* %self, %"Slice(UInt8)" %8)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %10 = getelementptr inbounds %File, %File* %self, i32 0, i32 5
  store i32 0, i32* %10
  ret %File* %self
}

; Function Attrs: uwtable
define internal i8* @"*File@IO::Buffered#out_buffer:Pointer(UInt8)"(%File* %self) #0 {
alloca:
  %__temp_84 = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %File, %File* %self, i32 0, i32 9
  %1 = load i8*, i8** %0
  store i8* %1, i8** %__temp_84
  %2 = icmp ne i8* %1, null
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i8*, i8** %__temp_84
  br label %exit

else:                                             ; preds = %entry
  %4 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 8192)
  %5 = getelementptr inbounds %File, %File* %self, i32 0, i32 9
  store i8* %4, i8** %5
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i8* [ %3, %then ], [ %4, %else ]
  ret i8* %6
}

; Function Attrs: uwtable
define internal i32 @"*File@IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(%File* %self, %"Slice(UInt8)" %slice) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %count = alloca i32
  %total = alloca i32
  %writers = alloca %"Deque(Fiber)"*
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %bytes_written = alloca i64
  %i = alloca i32
  %1 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %2 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %3 = alloca %"Slice(UInt8)"
  %4 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %5 = alloca %"(Bool | Deque(Fiber) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %0
  %6 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %slice1
  %7 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %8 = load i32, i32* %7
  store i32 %8, i32* %count
  %9 = load i32, i32* %count
  store i32 %9, i32* %total
  store i32 0, i32* %i
  br label %while

rescue:                                           ; preds = %invoke_out19, %else17, %then16, %then12, %else3, %body
  %10 = landingpad %landing_pad
          cleanup
  %11 = extractvalue %landing_pad %10, 0
  %12 = extractvalue %landing_pad %10, 1
  %13 = getelementptr inbounds %File, %File* %self, i32 0, i32 20
  %14 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %13
  store %"Deque(Fiber)"* %14, %"Deque(Fiber)"** %writers
  %15 = icmp ne %"Deque(Fiber)"* %14, null
  br i1 %15, label %then23, label %else24

while:                                            ; preds = %exit15, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %16 = load i32, i32* %i
  %17 = getelementptr inbounds %File, %File* %self, i32 0, i32 16
  %18 = load i32, i32* %17
  %19 = load i32, i32* %count
  %20 = invoke i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i32 %19)
          to label %invoke_out unwind label %rescue

exit:                                             ; preds = %while
  unreachable

invoke_out:                                       ; preds = %body
  %21 = load i32, i32* %count
  %22 = sext i32 %21 to i64
  %23 = call i64 @write(i32 %18, i8* %20, i64 %22)
  store i64 %23, i64* %bytes_written
  %24 = load i64, i64* %bytes_written
  %25 = icmp ne i64 %24, -1
  br i1 %25, label %then, label %else

then:                                             ; preds = %invoke_out
  %26 = load i32, i32* %count
  %27 = load i64, i64* %bytes_written
  %28 = sext i32 %26 to i64
  %29 = sub i64 %28, %27
  %30 = trunc i64 %29 to i32
  store i32 %30, i32* %count
  %31 = load i32, i32* %count
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %then2, label %else3

else:                                             ; preds = %invoke_out
  %33 = call i32 @"*Errno::value:Int32"()
  %34 = icmp eq i32 %33, 35
  br i1 %34, label %then12, label %else13

then2:                                            ; preds = %then
  %35 = load i32, i32* %total
  %36 = getelementptr inbounds %File, %File* %self, i32 0, i32 20
  %37 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %36
  store %"Deque(Fiber)"* %37, %"Deque(Fiber)"** %writers
  %38 = icmp ne %"Deque(Fiber)"* %37, null
  br i1 %38, label %then6, label %else7

else3:                                            ; preds = %then
  %39 = load i64, i64* %bytes_written
  %40 = invoke %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int64>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i64 %39)
          to label %invoke_out10 unwind label %rescue

then4:                                            ; preds = %exit8
  call void @"*File@IO::FileDescriptor#add_write_event:Nil"(%File* %self)
  br label %exit9

else5:                                            ; preds = %exit8
  br label %exit9

then6:                                            ; preds = %then2
  %41 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %42 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %41)
  %43 = xor i1 %42, true
  %44 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %1, i32 0, i32 0
  store i32 147, i32* %44
  %45 = zext i1 %43 to i64
  %46 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %1, i32 0, i32 1
  %47 = bitcast [1 x i64]* %46 to i64*
  store i64 %45, i64* %47
  br label %exit8

else7:                                            ; preds = %then2
  %48 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %49 = icmp eq %"Deque(Fiber)"* %48, null
  %50 = select i1 %49, i32 0, i32 94
  %51 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %2, i32 0, i32 0
  store i32 %50, i32* %51
  %52 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %2, i32 0, i32 1
  %53 = bitcast [1 x i64]* %52 to %"Deque(Fiber)"**
  store %"Deque(Fiber)"* %48, %"Deque(Fiber)"** %53
  br label %exit8

exit8:                                            ; preds = %else7, %then6
  %54 = phi %"(Bool | Deque(Fiber) | Nil)"* [ %1, %then6 ], [ %2, %else7 ]
  %55 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %54, i32 0, i32 0
  %56 = load i32, i32* %55
  %57 = icmp eq i32 %56, 0
  %58 = xor i1 %57, true
  %59 = and i1 true, %58
  %60 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %54, i32 0, i32 1
  %61 = bitcast [1 x i64]* %60 to i1*
  %62 = load i1, i1* %61
  %63 = icmp eq i32 %56, 147
  %64 = xor i1 %62, true
  %65 = and i1 %63, %64
  %66 = xor i1 %65, true
  %67 = and i1 %59, %66
  br i1 %67, label %then4, label %else5

exit9:                                            ; preds = %else5, %then4
  ret i32 %35

invoke_out10:                                     ; preds = %else3
  store %"Slice(UInt8)" %40, %"Slice(UInt8)"* %3
  %68 = load %"Slice(UInt8)", %"Slice(UInt8)"* %3
  store %"Slice(UInt8)" %68, %"Slice(UInt8)"* %slice1
  br label %exit11

exit11:                                           ; preds = %invoke_out10
  %69 = phi %"Slice(UInt8)"* [ %3, %invoke_out10 ]
  br label %exit15

then12:                                           ; preds = %else
  invoke void @"*File@IO::FileDescriptor#wait_writable:Nil"(%File* %self)
          to label %invoke_out14 unwind label %rescue

else13:                                           ; preds = %else
  %70 = call i32 @"*Errno::value:Int32"()
  %71 = icmp eq i32 %70, 9
  br i1 %71, label %then16, label %else17

invoke_out14:                                     ; preds = %then12
  br label %exit15

exit15:                                           ; preds = %exit11, %invoke_out14
  %72 = load i32, i32* %i
  %73 = add i32 %72, 1
  store i32 %73, i32* %i
  br label %while

then16:                                           ; preds = %else13
  %74 = call %"IO::Error"* @"*IO::Error@Exception::new<String>:IO::Error"(%String* bitcast ({ i32, i32, i32, [26 x i8] }* @"'File not open for w...'" to %String*))
  invoke void @"*raise<IO::Error>:NoReturn"(%"IO::Error"* %74)
          to label %invoke_out18 unwind label %rescue

else17:                                           ; preds = %else13
  %75 = invoke %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Error writing file'" to %String*))
          to label %invoke_out19 unwind label %rescue

invoke_out18:                                     ; preds = %then16
  unreachable

invoke_out19:                                     ; preds = %else17
  invoke void @"*raise<Errno>:NoReturn"(%Errno* %75)
          to label %invoke_out20 unwind label %rescue

invoke_out20:                                     ; preds = %invoke_out19
  unreachable

then21:                                           ; preds = %exit25
  call void @"*File@IO::FileDescriptor#add_write_event:Nil"(%File* %self)
  br label %exit26

else22:                                           ; preds = %exit25
  br label %exit26

then23:                                           ; preds = %rescue
  %76 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %77 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %76)
  %78 = xor i1 %77, true
  %79 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %4, i32 0, i32 0
  store i32 147, i32* %79
  %80 = zext i1 %78 to i64
  %81 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %4, i32 0, i32 1
  %82 = bitcast [1 x i64]* %81 to i64*
  store i64 %80, i64* %82
  br label %exit25

else24:                                           ; preds = %rescue
  %83 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %84 = icmp eq %"Deque(Fiber)"* %83, null
  %85 = select i1 %84, i32 0, i32 94
  %86 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %5, i32 0, i32 0
  store i32 %85, i32* %86
  %87 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %5, i32 0, i32 1
  %88 = bitcast [1 x i64]* %87 to %"Deque(Fiber)"**
  store %"Deque(Fiber)"* %83, %"Deque(Fiber)"** %88
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %89 = phi %"(Bool | Deque(Fiber) | Nil)"* [ %4, %then23 ], [ %5, %else24 ]
  %90 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %89, i32 0, i32 0
  %91 = load i32, i32* %90
  %92 = icmp eq i32 %91, 0
  %93 = xor i1 %92, true
  %94 = and i1 true, %93
  %95 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %89, i32 0, i32 1
  %96 = bitcast [1 x i64]* %95 to i1*
  %97 = load i1, i1* %96
  %98 = icmp eq i32 %91, 147
  %99 = xor i1 %97, true
  %100 = and i1 %98, %99
  %101 = xor i1 %100, true
  %102 = and i1 %94, %101
  br i1 %102, label %then21, label %else22

exit26:                                           ; preds = %else22, %then21
  %103 = bitcast i8* %11 to %"struct.LibUnwind::Exception"*
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %103)
  unreachable
}

; Function Attrs: uwtable
define internal void @"*File@IO::FileDescriptor#add_write_event:Nil"(%File* %self) #0 {
alloca:
  %timeout = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %File, %File* %self, i32 0, i32 11
  %1 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %0
  store %"(Float64 | Nil)" %1, %"(Float64 | Nil)"* %timeout
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout
  call void @"*File@IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(%File* %self, %"(Float64 | Nil)" %2)
  ret void
}

; Function Attrs: uwtable
define internal void @"*File@IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(%File* %self, %"(Float64 | Nil)" %timeout) #0 {
alloca:
  %__temp_86 = alloca %"(Event::Event | Nil)"
  %event = alloca %"Event::Event.6"
  %timeout1 = alloca %"(Float64 | Nil)"
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Float64 | Nil)" %timeout, %"(Float64 | Nil)"* %timeout1
  %1 = getelementptr inbounds %File, %File* %self, i32 0, i32 17
  %2 = load i1, i1* %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %File, %File* %self, i32 0, i32 13
  %4 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %3
  store %"(Event::Event | Nil)" %4, %"(Event::Event | Nil)"* %__temp_86
  %5 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %3, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp eq i32 %6, 0
  %8 = xor i1 %7, true
  %9 = and i1 true, %8
  br i1 %9, label %then2, label %else3

then2:                                            ; preds = %else
  %10 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %__temp_86, i32 0, i32 1
  %11 = bitcast [2 x i64]* %10 to %"Event::Event.6"*
  br label %exit

else3:                                            ; preds = %else
  %12 = call %"Event::Event.6" @"*Scheduler::create_fd_write_event<File>:Event::Event"(%File* %self)
  store %"Event::Event.6" %12, %"Event::Event.6"* %0
  %13 = getelementptr inbounds %File, %File* %self, i32 0, i32 13
  %14 = load %"Event::Event.6", %"Event::Event.6"* %0
  %15 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %13, i32 0, i32 0
  store i32 359, i32* %15
  %16 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %13, i32 0, i32 1
  %17 = bitcast [2 x i64]* %16 to %"Event::Event.6"*
  store %"Event::Event.6" %14, %"Event::Event.6"* %17
  br label %exit

exit:                                             ; preds = %else3, %then2
  %18 = phi %"Event::Event.6"* [ %11, %then2 ], [ %0, %else3 ]
  %19 = load %"Event::Event.6", %"Event::Event.6"* %18
  store %"Event::Event.6" %19, %"Event::Event.6"* %event
  %20 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout1
  %21 = call i32 @"*Event::Event#add<(Float64 | Nil)>:Int32"(%"Event::Event.6"* %event, %"(Float64 | Nil)" %20)
  ret void
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_fd_write_event<File>:Event::Event"(%File* %io) #0 {
alloca:
  %edge_triggered = alloca i1
  %flags = alloca i16
  %event = alloca %"Event::Event.6"
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %edge_triggered
  store i16 4, i16* %flags
  %2 = load i1, i1* %edge_triggered
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i16, i16* %flags
  %4 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 16, i16 32)
  %5 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %3, i16 %4)
  store i16 %5, i16* %flags
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %7 = getelementptr inbounds %File, %File* %io, i32 0, i32 16
  %8 = load i32, i32* %7
  %9 = load i16, i16* %flags
  %10 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~proc5Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34" to i8*), i8** %10
  %11 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %11
  %12 = load %"->", %"->"* %0
  %13 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, File, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %6, i32 %8, i16 %9, %File* %io, %"->" %12)
  store %"Event::Event.6" %13, %"Event::Event.6"* %1
  %14 = load %"Event::Event.6", %"Event::Event.6"* %1
  store %"Event::Event.6" %14, %"Event::Event.6"* %event
  %15 = load %"Event::Event.6", %"Event::Event.6"* %event
  ret %"Event::Event.6" %15
}

; Function Attrs: uwtable
define internal void @"~proc5Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:34"(i32 %s, i16 %flags, i8* %data) #0 {
alloca:
  %fd_io = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to i32*
  store i32* %0, i32** %fd_io
  %1 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 4)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %2)
  br label %exit

else:                                             ; preds = %entry
  %3 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 1)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret void

then1:                                            ; preds = %else
  %4 = load i32*, i32** %fd_io
  %5 = call i1 @"*IO::FileDescriptor+@IO::FileDescriptor#write_timed_out=<Bool>:Bool"(i32* %4, i1 true)
  %6 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_write:Nil"(i32* %6)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  br label %exit
}

; Function Attrs: uwtable
define internal void @"*File@IO::FileDescriptor#wait_writable:Nil"(%File* %self) #0 {
alloca:
  %timeout = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %File, %File* %self, i32 0, i32 11
  %1 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %0
  store %"(Float64 | Nil)" %1, %"(Float64 | Nil)"* %timeout
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout
  call void @"*File@IO::FileDescriptor#wait_writable<(Float64 | Nil)>:Nil"(%File* %self, %"(Float64 | Nil)" %2)
  ret void
}

; Function Attrs: uwtable
define internal void @"*File@IO::FileDescriptor#wait_writable<(Float64 | Nil)>:Nil"(%File* %self, %"(Float64 | Nil)" %timeout) #0 {
alloca:
  %timeout1 = alloca %"(Float64 | Nil)"
  %err = alloca %"IO::Timeout"*
  %timeout2 = alloca %"(Float64 | Nil)"
  %msg = alloca %String*
  %__temp_85 = alloca %"Deque(Fiber)"*
  %writers = alloca %"Deque(Fiber)"*
  %0 = alloca %"(Float64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Float64 | Nil)" %timeout, %"(Float64 | Nil)"* %timeout1
  %1 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout1
  store %"(Float64 | Nil)" %1, %"(Float64 | Nil)"* %0
  %2 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %0
  store %"(Float64 | Nil)" %2, %"(Float64 | Nil)"* %timeout2
  store %String* bitcast ({ i32, i32, i32, [16 x i8] }* @"'write timed out'" to %String*), %String** %msg
  %3 = getelementptr inbounds %File, %File* %self, i32 0, i32 20
  %4 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %3
  store %"Deque(Fiber)"* %4, %"Deque(Fiber)"** %__temp_85
  %5 = icmp ne %"Deque(Fiber)"* %4, null
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %6 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %__temp_85
  br label %exit

else:                                             ; preds = %entry
  %7 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)::new:Deque(Fiber)"(i32 547)
  %8 = getelementptr inbounds %File, %File* %self, i32 0, i32 20
  store %"Deque(Fiber)"* %7, %"Deque(Fiber)"** %8
  br label %exit

exit:                                             ; preds = %else, %then
  %9 = phi %"Deque(Fiber)"* [ %6, %then ], [ %7, %else ]
  store %"Deque(Fiber)"* %9, %"Deque(Fiber)"** %writers
  %10 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %11 = call %Fiber* @"*Fiber::current:Fiber"()
  %12 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#<<<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %10, %Fiber* %11)
  %13 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %timeout2
  call void @"*File@IO::FileDescriptor#add_write_event<(Float64 | Nil)>:Nil"(%File* %self, %"(Float64 | Nil)" %13)
  call void @"*Scheduler::reschedule:Nil"()
  %14 = getelementptr inbounds %File, %File* %self, i32 0, i32 15
  %15 = load i1, i1* %14
  br i1 %15, label %then3, label %else4

then3:                                            ; preds = %exit
  %16 = getelementptr inbounds %File, %File* %self, i32 0, i32 15
  store i1 false, i1* %16
  %17 = load %String*, %String** %msg
  %18 = call %"IO::Timeout"* @"*IO::Timeout@Exception::new<String>:IO::Timeout"(%String* %17)
  store %"IO::Timeout"* %18, %"IO::Timeout"** %err
  %19 = load %"IO::Timeout"*, %"IO::Timeout"** %err
  call void @"*raise<IO::Timeout>:NoReturn"(%"IO::Timeout"* %19)
  unreachable

else4:                                            ; preds = %exit
  ret void
}

; Function Attrs: uwtable
define internal void @"*File@IO::FileDescriptor#unbuffered_close:Nil"(%File* %self) #0 {
alloca:
  %err = alloca %Errno*
  %__temp_87 = alloca i32
  %readers = alloca %"Deque(Fiber)"*
  %writers = alloca %"Deque(Fiber)"*
  %__arg2 = alloca %"Event::Event.6"
  %__arg212 = alloca %"Event::Event.6"
  %__arg3 = alloca %"Event::Event.6"
  %__arg318 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %File, %File* %self, i32 0, i32 18
  %1 = load i1, i1* %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  store %Errno* null, %Errno** %err
  %2 = getelementptr inbounds %File, %File* %self, i32 0, i32 16
  %3 = load i32, i32* %2
  %4 = call i32 @close(i32 %3)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %then1, label %else2

then1:                                            ; preds = %else
  %6 = call i32 @"*Errno::value:Int32"()
  store i32 %6, i32* %__temp_87
  %7 = load i32, i32* %__temp_87
  %8 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 4, i32 %7)
  br i1 %8, label %then5, label %else6

else2:                                            ; preds = %else
  br label %exit8

then3:                                            ; preds = %exit
  br label %exit7

else4:                                            ; preds = %exit
  %9 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Error closing file'" to %String*))
  store %Errno* %9, %Errno** %err
  br label %exit7

then5:                                            ; preds = %then1
  %10 = load i32, i32* %__temp_87
  %11 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 4, i32 %10)
  br label %exit

else6:                                            ; preds = %then1
  %12 = load i32, i32* %__temp_87
  %13 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 36, i32 %12)
  br label %exit

exit:                                             ; preds = %else6, %then5
  %14 = phi i1 [ %11, %then5 ], [ %13, %else6 ]
  br i1 %14, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  br label %exit8

exit8:                                            ; preds = %else2, %exit7
  %15 = getelementptr inbounds %File, %File* %self, i32 0, i32 18
  store i1 true, i1* %15
  %16 = getelementptr inbounds %File, %File* %self, i32 0, i32 12
  %17 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %16, i32 0, i32 0
  %18 = load i32, i32* %17
  %19 = icmp eq i32 359, %18
  br i1 %19, label %current_def, label %next_def

current_def:                                      ; preds = %exit8
  %20 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %16, i32 0, i32 1
  %21 = bitcast [2 x i64]* %20 to %"Event::Event.6"*
  %22 = load %"Event::Event.6", %"Event::Event.6"* %21
  store %"Event::Event.6" %22, %"Event::Event.6"* %__arg2
  %23 = call i1 @"*Event::Event#free:Bool"(%"Event::Event.6"* %__arg2)
  br label %exit9

next_def:                                         ; preds = %exit8
  %24 = icmp eq i32 0, %18
  br i1 %24, label %current_def10, label %next_def11

exit9:                                            ; preds = %current_def10, %current_def
  %25 = getelementptr inbounds %File, %File* %self, i32 0, i32 12
  %26 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %25, i32 0, i32 0
  store i32 0, i32* %26
  %27 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %25, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %27
  %28 = getelementptr inbounds %File, %File* %self, i32 0, i32 13
  %29 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %28, i32 0, i32 0
  %30 = load i32, i32* %29
  %31 = icmp eq i32 359, %30
  br i1 %31, label %current_def13, label %next_def14

current_def10:                                    ; preds = %next_def
  br label %exit9

next_def11:                                       ; preds = %next_def
  unreachable

current_def13:                                    ; preds = %exit9
  %32 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %28, i32 0, i32 1
  %33 = bitcast [2 x i64]* %32 to %"Event::Event.6"*
  %34 = load %"Event::Event.6", %"Event::Event.6"* %33
  store %"Event::Event.6" %34, %"Event::Event.6"* %__arg3
  %35 = call i1 @"*Event::Event#free:Bool"(%"Event::Event.6"* %__arg3)
  br label %exit15

next_def14:                                       ; preds = %exit9
  %36 = icmp eq i32 0, %30
  br i1 %36, label %current_def16, label %next_def17

exit15:                                           ; preds = %current_def16, %current_def13
  %37 = getelementptr inbounds %File, %File* %self, i32 0, i32 13
  %38 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %37, i32 0, i32 0
  store i32 0, i32* %38
  %39 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %37, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %39
  %40 = getelementptr inbounds %File, %File* %self, i32 0, i32 19
  %41 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %40
  store %"Deque(Fiber)"* %41, %"Deque(Fiber)"** %readers
  %42 = icmp ne %"Deque(Fiber)"* %41, null
  br i1 %42, label %then19, label %else20

current_def16:                                    ; preds = %next_def14
  br label %exit15

next_def17:                                       ; preds = %next_def14
  unreachable

then19:                                           ; preds = %exit15
  %43 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %44 = call %"Deque(Fiber)"* @"*Scheduler::enqueue<Deque(Fiber)>:Deque(Fiber)"(%"Deque(Fiber)"* %43)
  %45 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %46 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#clear:Deque(Fiber)"(%"Deque(Fiber)"* %45)
  br label %exit21

else20:                                           ; preds = %exit15
  br label %exit21

exit21:                                           ; preds = %else20, %then19
  %47 = getelementptr inbounds %File, %File* %self, i32 0, i32 20
  %48 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %47
  store %"Deque(Fiber)"* %48, %"Deque(Fiber)"** %writers
  %49 = icmp ne %"Deque(Fiber)"* %48, null
  br i1 %49, label %then22, label %else23

then22:                                           ; preds = %exit21
  %50 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %51 = call %"Deque(Fiber)"* @"*Scheduler::enqueue<Deque(Fiber)>:Deque(Fiber)"(%"Deque(Fiber)"* %50)
  %52 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %53 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#clear:Deque(Fiber)"(%"Deque(Fiber)"* %52)
  br label %exit24

else23:                                           ; preds = %exit21
  br label %exit24

exit24:                                           ; preds = %else23, %then22
  %54 = load %Errno*, %Errno** %err
  %55 = icmp ne %Errno* %54, null
  br i1 %55, label %then25, label %else26

then25:                                           ; preds = %exit24
  %56 = load %Errno*, %Errno** %err
  call void @"*raise<Errno>:NoReturn"(%Errno* %56)
  unreachable

else26:                                           ; preds = %exit24
  ret void
}

declare i32 @close(i32)

; Function Attrs: uwtable
define internal i1 @"*Event::Event#free:Bool"(%"Event::Event.6"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Event::Event.6", %"Event::Event.6"* %self, i32 0, i32 1
  %1 = load i1, i1* %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %2 = getelementptr inbounds %"Event::Event.6", %"Event::Event.6"* %self, i32 0, i32 0
  %3 = load i8*, i8** %2
  call void @event_free(i8* %3)
  br label %exit

exit:                                             ; preds = %else, %then
  %4 = getelementptr inbounds %"Event::Event.6", %"Event::Event.6"* %self, i32 0, i32 1
  store i1 true, i1* %4
  ret i1 true
}

declare void @event_free(i8*)

; Function Attrs: uwtable
define internal %"Deque(Fiber)"* @"*Scheduler::enqueue<Deque(Fiber)>:Deque(Fiber)"(%"Deque(Fiber)"* %fibers) #0 {
entry:
  %0 = call %"Deque(Fiber)"** @"~Scheduler::runnables:read"()
  %1 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %0
  %2 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#concat<Deque(Fiber)>:Deque(Fiber)"(%"Deque(Fiber)"* %1, %"Deque(Fiber)"* %fibers)
  ret %"Deque(Fiber)"* %2
}

; Function Attrs: uwtable
define internal %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#concat<Deque(Fiber)>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %"Deque(Fiber)"* %other) #0 {
alloca:
  %x = alloca %Fiber*
  %r = alloca %"Range(Int32, Int32)"
  %a = alloca i32
  %b = alloca i32
  %0 = alloca %"Range(Int32, Int32)"
  %i = alloca i32
  %current = alloca i32
  %__temp_49 = alloca i1
  %1 = alloca %"Range(Int32, Int32)"
  %i14 = alloca i32
  %current15 = alloca i32
  %__temp_4916 = alloca i1
  %2 = alloca %"Range(Int32, Int32)"
  %i26 = alloca i32
  %current27 = alloca i32
  %__temp_4928 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %3 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %other)
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 1
  %5 = load i32, i32* %4
  store i32 %5, i32* %a
  %6 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 2
  %9 = load i32, i32* %8
  %10 = add i32 %7, %9
  store i32 %10, i32* %b
  %11 = load i32, i32* %b
  %12 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 3
  %13 = load i32, i32* %12
  %14 = icmp sgt i32 %11, %13
  br i1 %14, label %then1, label %else2

exit:                                             ; preds = %exit13, %then
  ret %"Deque(Fiber)"* %self

then1:                                            ; preds = %else
  %15 = load i32, i32* %b
  %16 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 3
  %17 = load i32, i32* %16
  %18 = sub i32 %15, %17
  store i32 %18, i32* %b
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %19 = load i32, i32* %a
  %20 = load i32, i32* %b
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %then4, label %else5

then4:                                            ; preds = %exit3
  %22 = load i32, i32* %a
  %23 = load i32, i32* %b
  %24 = call %"Range(Int32, Int32)" @"*Range(B, E)::new<Int32, Int32, Bool>:Range(Int32, Int32)"(i32 %22, i32 %23, i1 true)
  store %"Range(Int32, Int32)" %24, %"Range(Int32, Int32)"* %0
  %25 = load %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %0
  store %"Range(Int32, Int32)" %25, %"Range(Int32, Int32)"* %r
  %26 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %27 = load i32, i32* %26
  store i32 %27, i32* %current
  br label %while

else5:                                            ; preds = %exit3
  %28 = load i32, i32* %a
  %29 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 3
  %30 = load i32, i32* %29
  %31 = call %"Range(Int32, Int32)" @"*Range(B, E)::new<Int32, Int32, Bool>:Range(Int32, Int32)"(i32 %28, i32 %30, i1 true)
  store %"Range(Int32, Int32)" %31, %"Range(Int32, Int32)"* %1
  %32 = load %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %1
  store %"Range(Int32, Int32)" %32, %"Range(Int32, Int32)"* %r
  %33 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %34 = load i32, i32* %33
  store i32 %34, i32* %current15
  br label %while17

while:                                            ; preds = %body, %then4
  %35 = load i32, i32* %current
  %36 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %37 = load i32, i32* %36
  %38 = icmp slt i32 %35, %37
  br i1 %38, label %body, label %exit6

body:                                             ; preds = %while
  %39 = load i32, i32* %current
  store i32 %39, i32* %i
  %40 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 4
  %41 = load %Fiber**, %Fiber*** %40
  %42 = load i32, i32* %i
  %43 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %41, i32 %42)
  store %Fiber* %43, %Fiber** %x
  %44 = load %Fiber*, %Fiber** %x
  %45 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#push<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %44)
  %46 = load i32, i32* %current
  %47 = call i32 @"*Int32@Int#succ:Int32"(i32 %46)
  store i32 %47, i32* %current
  br label %while

exit6:                                            ; preds = %while
  %48 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 2
  %49 = load i1, i1* %48
  %50 = xor i1 %49, true
  store i1 %50, i1* %__temp_49
  br i1 %50, label %then9, label %else10

then7:                                            ; preds = %exit11
  %51 = load i32, i32* %current
  store i32 %51, i32* %i
  %52 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 4
  %53 = load %Fiber**, %Fiber*** %52
  %54 = load i32, i32* %i
  %55 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %53, i32 %54)
  store %Fiber* %55, %Fiber** %x
  %56 = load %Fiber*, %Fiber** %x
  %57 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#push<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %56)
  br label %exit12

else8:                                            ; preds = %exit11
  br label %exit12

then9:                                            ; preds = %exit6
  %58 = load i32, i32* %current
  %59 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %60 = load i32, i32* %59
  %61 = icmp eq i32 %58, %60
  br label %exit11

else10:                                           ; preds = %exit6
  %62 = load i1, i1* %__temp_49
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %63 = phi i1 [ %61, %then9 ], [ %62, %else10 ]
  br i1 %63, label %then7, label %else8

exit12:                                           ; preds = %else8, %then7
  %64 = phi %"Deque(Fiber)"* [ %57, %then7 ], [ null, %else8 ]
  br label %exit13

exit13:                                           ; preds = %exit37, %exit12
  br label %exit

while17:                                          ; preds = %body18, %else5
  %65 = load i32, i32* %current15
  %66 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %67 = load i32, i32* %66
  %68 = icmp slt i32 %65, %67
  br i1 %68, label %body18, label %exit19

body18:                                           ; preds = %while17
  %69 = load i32, i32* %current15
  store i32 %69, i32* %i14
  %70 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 4
  %71 = load %Fiber**, %Fiber*** %70
  %72 = load i32, i32* %i14
  %73 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %71, i32 %72)
  store %Fiber* %73, %Fiber** %x
  %74 = load %Fiber*, %Fiber** %x
  %75 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#push<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %74)
  %76 = load i32, i32* %current15
  %77 = call i32 @"*Int32@Int#succ:Int32"(i32 %76)
  store i32 %77, i32* %current15
  br label %while17

exit19:                                           ; preds = %while17
  %78 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 2
  %79 = load i1, i1* %78
  %80 = xor i1 %79, true
  store i1 %80, i1* %__temp_4916
  br i1 %80, label %then22, label %else23

then20:                                           ; preds = %exit24
  %81 = load i32, i32* %current15
  store i32 %81, i32* %i14
  %82 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 4
  %83 = load %Fiber**, %Fiber*** %82
  %84 = load i32, i32* %i14
  %85 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %83, i32 %84)
  store %Fiber* %85, %Fiber** %x
  %86 = load %Fiber*, %Fiber** %x
  %87 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#push<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %86)
  br label %exit25

else21:                                           ; preds = %exit24
  br label %exit25

then22:                                           ; preds = %exit19
  %88 = load i32, i32* %current15
  %89 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %90 = load i32, i32* %89
  %91 = icmp eq i32 %88, %90
  br label %exit24

else23:                                           ; preds = %exit19
  %92 = load i1, i1* %__temp_4916
  br label %exit24

exit24:                                           ; preds = %else23, %then22
  %93 = phi i1 [ %91, %then22 ], [ %92, %else23 ]
  br i1 %93, label %then20, label %else21

exit25:                                           ; preds = %else21, %then20
  %94 = phi %"Deque(Fiber)"* [ %87, %then20 ], [ null, %else21 ]
  %95 = load i32, i32* %b
  %96 = call %"Range(Int32, Int32)" @"*Range(B, E)::new<Int32, Int32, Bool>:Range(Int32, Int32)"(i32 0, i32 %95, i1 true)
  store %"Range(Int32, Int32)" %96, %"Range(Int32, Int32)"* %2
  %97 = load %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %2
  store %"Range(Int32, Int32)" %97, %"Range(Int32, Int32)"* %r
  %98 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %99 = load i32, i32* %98
  store i32 %99, i32* %current27
  br label %while29

while29:                                          ; preds = %body30, %exit25
  %100 = load i32, i32* %current27
  %101 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %102 = load i32, i32* %101
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %body30, label %exit31

body30:                                           ; preds = %while29
  %104 = load i32, i32* %current27
  store i32 %104, i32* %i26
  %105 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 4
  %106 = load %Fiber**, %Fiber*** %105
  %107 = load i32, i32* %i26
  %108 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %106, i32 %107)
  store %Fiber* %108, %Fiber** %x
  %109 = load %Fiber*, %Fiber** %x
  %110 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#push<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %109)
  %111 = load i32, i32* %current27
  %112 = call i32 @"*Int32@Int#succ:Int32"(i32 %111)
  store i32 %112, i32* %current27
  br label %while29

exit31:                                           ; preds = %while29
  %113 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 2
  %114 = load i1, i1* %113
  %115 = xor i1 %114, true
  store i1 %115, i1* %__temp_4928
  br i1 %115, label %then34, label %else35

then32:                                           ; preds = %exit36
  %116 = load i32, i32* %current27
  store i32 %116, i32* %i26
  %117 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %other, i32 0, i32 4
  %118 = load %Fiber**, %Fiber*** %117
  %119 = load i32, i32* %i26
  %120 = call %Fiber* @"*Pointer(Fiber)@Pointer(T)#[]<Int32>:Fiber"(%Fiber** %118, i32 %119)
  store %Fiber* %120, %Fiber** %x
  %121 = load %Fiber*, %Fiber** %x
  %122 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#push<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %self, %Fiber* %121)
  br label %exit37

else33:                                           ; preds = %exit36
  br label %exit37

then34:                                           ; preds = %exit31
  %123 = load i32, i32* %current27
  %124 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %125 = load i32, i32* %124
  %126 = icmp eq i32 %123, %125
  br label %exit36

else35:                                           ; preds = %exit31
  %127 = load i1, i1* %__temp_4928
  br label %exit36

exit36:                                           ; preds = %else35, %then34
  %128 = phi i1 [ %126, %then34 ], [ %127, %else35 ]
  br i1 %128, label %then32, label %else33

exit37:                                           ; preds = %else33, %then32
  %129 = phi %"Deque(Fiber)"* [ %122, %then32 ], [ null, %else33 ]
  br label %exit13
}

; Function Attrs: uwtable
define internal %"Range(Int32, Int32)" @"*Range(B, E)::new<Int32, Int32, Bool>:Range(Int32, Int32)"(i32 %begin, i32 %end, i1 %exclusive) #0 {
alloca:
  %_ = alloca %"Range(Int32, Int32)"
  %0 = alloca %"Range(Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Range(Int32, Int32)"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Range(Int32, Int32)"* getelementptr (%"Range(Int32, Int32)", %"Range(Int32, Int32)"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %0
  store %"Range(Int32, Int32)" %2, %"Range(Int32, Int32)"* %_
  %3 = call i1 @"*Range(Int32, Int32)@Range(B, E)#initialize<Int32, Int32, Bool>:Bool"(%"Range(Int32, Int32)"* %_, i32 %begin, i32 %end, i1 %exclusive)
  %4 = load %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %_
  ret %"Range(Int32, Int32)" %4
}

; Function Attrs: uwtable
define internal i1 @"*Range(Int32, Int32)@Range(B, E)#initialize<Int32, Int32, Bool>:Bool"(%"Range(Int32, Int32)"* %self, i32 %begin, i32 %end, i1 %exclusive) #0 {
entry:
  %0 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %self, i32 0, i32 0
  store i32 %begin, i32* %0
  %1 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %self, i32 0, i32 1
  store i32 %end, i32* %1
  %2 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %self, i32 0, i32 2
  store i1 %exclusive, i1* %2
  ret i1 %exclusive
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#succ:Int32"(i32 %self) #0 {
entry:
  %0 = add i32 %self, 1
  ret i32 %0
}

; Function Attrs: uwtable
define internal %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#clear:Deque(Fiber)"(%"Deque(Fiber)"* %self) #0 {
alloca:
  %r = alloca %"Range(Int32, Int32)"
  %a = alloca i32
  %b = alloca i32
  %0 = alloca %"Range(Int32, Int32)"
  %1 = alloca %"Range(Int32, Int32)"
  %2 = alloca %"Range(Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  %3 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %self)
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %5 = load i32, i32* %4
  store i32 %5, i32* %a
  %6 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  %9 = load i32, i32* %8
  %10 = add i32 %7, %9
  store i32 %10, i32* %b
  %11 = load i32, i32* %b
  %12 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %13 = load i32, i32* %12
  %14 = icmp sgt i32 %11, %13
  br i1 %14, label %then1, label %else2

exit:                                             ; preds = %exit6, %then
  %15 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 2
  store i32 0, i32* %15
  %16 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 1
  store i32 0, i32* %16
  ret %"Deque(Fiber)"* %self

then1:                                            ; preds = %else
  %17 = load i32, i32* %b
  %18 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %19 = load i32, i32* %18
  %20 = sub i32 %17, %19
  store i32 %20, i32* %b
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %21 = load i32, i32* %a
  %22 = load i32, i32* %b
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %then4, label %else5

then4:                                            ; preds = %exit3
  %24 = load i32, i32* %a
  %25 = load i32, i32* %b
  %26 = call %"Range(Int32, Int32)" @"*Range(B, E)::new<Int32, Int32, Bool>:Range(Int32, Int32)"(i32 %24, i32 %25, i1 true)
  store %"Range(Int32, Int32)" %26, %"Range(Int32, Int32)"* %0
  %27 = load %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %0
  store %"Range(Int32, Int32)" %27, %"Range(Int32, Int32)"* %r
  %28 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %29 = load %Fiber**, %Fiber*** %28
  %30 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %31 = load i32, i32* %30
  %32 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %29, i32 %31)
  %33 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %34 = load i32, i32* %33
  %35 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %36 = load i32, i32* %35
  %37 = sub i32 %34, %36
  call void @"*Pointer(Fiber)@Pointer(T)#clear<Int32>:Nil"(%Fiber** %32, i32 %37)
  br label %exit6

else5:                                            ; preds = %exit3
  %38 = load i32, i32* %a
  %39 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 3
  %40 = load i32, i32* %39
  %41 = call %"Range(Int32, Int32)" @"*Range(B, E)::new<Int32, Int32, Bool>:Range(Int32, Int32)"(i32 %38, i32 %40, i1 true)
  store %"Range(Int32, Int32)" %41, %"Range(Int32, Int32)"* %1
  %42 = load %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %1
  store %"Range(Int32, Int32)" %42, %"Range(Int32, Int32)"* %r
  %43 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %44 = load %Fiber**, %Fiber*** %43
  %45 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %46 = load i32, i32* %45
  %47 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %44, i32 %46)
  %48 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %49 = load i32, i32* %48
  %50 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %51 = load i32, i32* %50
  %52 = sub i32 %49, %51
  call void @"*Pointer(Fiber)@Pointer(T)#clear<Int32>:Nil"(%Fiber** %47, i32 %52)
  %53 = load i32, i32* %b
  %54 = call %"Range(Int32, Int32)" @"*Range(B, E)::new<Int32, Int32, Bool>:Range(Int32, Int32)"(i32 0, i32 %53, i1 true)
  store %"Range(Int32, Int32)" %54, %"Range(Int32, Int32)"* %2
  %55 = load %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %2
  store %"Range(Int32, Int32)" %55, %"Range(Int32, Int32)"* %r
  %56 = getelementptr inbounds %"Deque(Fiber)", %"Deque(Fiber)"* %self, i32 0, i32 4
  %57 = load %Fiber**, %Fiber*** %56
  %58 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %59 = load i32, i32* %58
  %60 = call %Fiber** @"*Pointer(Fiber)@Pointer(T)#+<Int32>:Pointer(Fiber)"(%Fiber** %57, i32 %59)
  %61 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 1
  %62 = load i32, i32* %61
  %63 = getelementptr inbounds %"Range(Int32, Int32)", %"Range(Int32, Int32)"* %r, i32 0, i32 0
  %64 = load i32, i32* %63
  %65 = sub i32 %62, %64
  call void @"*Pointer(Fiber)@Pointer(T)#clear<Int32>:Nil"(%Fiber** %60, i32 %65)
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  br label %exit
}

; Function Attrs: uwtable
define internal %"Debug::MachO" @"*Debug::MachO::new<File>:Debug::MachO"(%File* %io) #0 {
alloca:
  %_ = alloca %"Debug::MachO"
  %0 = alloca %"Debug::MachO"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Debug::MachO"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Debug::MachO"* getelementptr (%"Debug::MachO", %"Debug::MachO"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Debug::MachO", %"Debug::MachO"* %0
  store %"Debug::MachO" %2, %"Debug::MachO"* %_
  %3 = call %"Array(Debug::MachO::Section64)"* @"*Debug::MachO#initialize<File>:Array(Debug::MachO::Section64)"(%"Debug::MachO"* %_, %File* %io)
  %4 = load %"Debug::MachO", %"Debug::MachO"* %_
  ret %"Debug::MachO" %4
}

; Function Attrs: uwtable
define internal %"Array(Debug::MachO::Section64)"* @"*Debug::MachO#initialize<File>:Array(Debug::MachO::Section64)"(%"Debug::MachO"* %self, %File* %io) #0 {
alloca:
  %0 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %2 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %3 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %4 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %5 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  %6 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %7 = bitcast %File* %io to i32*
  store i32* %7, i32** %6
  %8 = call i32 @"*Debug::MachO#read_magic:UInt32"(%"Debug::MachO"* %self)
  %9 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 0
  store i32 %8, i32* %9
  %10 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %11 = load i32*, i32** %10
  %12 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %12, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %0
  %13 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %0
  %14 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<Int32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:Int32"(i32* %11, i32 608, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %13)
  %15 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 1
  store i32 %14, i32* %15
  %16 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %17 = load i32*, i32** %16
  %18 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %18, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %1
  %19 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %1
  %20 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<Int32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:Int32"(i32* %17, i32 608, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %19)
  %21 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 2
  store i32 %20, i32* %21
  %22 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %23 = load i32*, i32** %22
  %24 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %24, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %2
  %25 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %2
  %26 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %23, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %25)
  %27 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 3
  store i32 %26, i32* %27
  %28 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %29 = load i32*, i32** %28
  %30 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %30, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %3
  %31 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %3
  %32 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %29, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %31)
  %33 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 4
  store i32 %32, i32* %33
  %34 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %35 = load i32*, i32** %34
  %36 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %36, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %4
  %37 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %4
  %38 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %35, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %37)
  %39 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 5
  store i32 %38, i32* %39
  %40 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %41 = load i32*, i32** %40
  %42 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %42, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %5
  %43 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %5
  %44 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %41, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %43)
  %45 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 6
  store i32 %44, i32* %45
  %46 = call i1 @"*Debug::MachO#abi64?:Bool"(%"Debug::MachO"* %self)
  br i1 %46, label %then, label %else

then:                                             ; preds = %entry
  %47 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %48 = load i32*, i32** %47
  call void @"*IO::FileDescriptor+@IO#skip<Int32>:Nil"(i32* %48, i32 4)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %49 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %50 = load i32*, i32** %49
  %51 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#tell:Int64"(i32* %50)
  %52 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 7
  store i64 %51, i64* %52
  %53 = call %"Array(Debug::MachO::Segment64)"* @"*Array(Debug::MachO::Segment64)@Array(T)::new:Array(Debug::MachO::Segment64)"(i32 450)
  %54 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 13
  store %"Array(Debug::MachO::Segment64)"* %53, %"Array(Debug::MachO::Segment64)"** %54
  %55 = call %"Array(Debug::MachO::Section64)"* @"*Array(Debug::MachO::Section64)@Array(T)::new:Array(Debug::MachO::Section64)"(i32 451)
  %56 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 14
  store %"Array(Debug::MachO::Section64)"* %55, %"Array(Debug::MachO::Section64)"** %56
  ret %"Array(Debug::MachO::Section64)"* %55
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO#read_magic:UInt32"(%"Debug::MachO"* %self) #0 {
alloca:
  %magic = alloca i32
  %__temp_96 = alloca i1
  %__temp_95 = alloca i1
  %__temp_94 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %1 = load i32*, i32** %0
  %2 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class>:UInt32"(i32* %1, i32 609)
  store i32 %2, i32* %magic
  %3 = load i32, i32* %magic
  %4 = zext i32 %3 to i64
  %5 = icmp eq i64 %4, 4277009103
  store i1 %5, i1* %__temp_96
  br i1 %5, label %then5, label %else6

then:                                             ; preds = %exit8
  br label %exit9

else:                                             ; preds = %exit8
  %6 = call %"Debug::MachO::Error"* @"*Debug::MachO::Error@Exception::new<String>:Debug::MachO::Error"(%String* bitcast ({ i32, i32, i32, [21 x i8] }* @"'Invalid magic numbe...'" to %String*))
  call void @"*raise<Debug::MachO::Error>:NoReturn"(%"Debug::MachO::Error"* %6)
  unreachable

then1:                                            ; preds = %exit7
  %7 = load i1, i1* %__temp_94
  br label %exit8

else2:                                            ; preds = %exit7
  %8 = load i32, i32* %magic
  %9 = zext i32 %8 to i64
  %10 = icmp eq i64 %9, 3472551422
  br label %exit8

then3:                                            ; preds = %exit
  %11 = load i1, i1* %__temp_95
  br label %exit7

else4:                                            ; preds = %exit
  %12 = load i32, i32* %magic
  %13 = zext i32 %12 to i64
  %14 = icmp eq i64 %13, 4277009102
  br label %exit7

then5:                                            ; preds = %entry
  %15 = load i1, i1* %__temp_96
  br label %exit

else6:                                            ; preds = %entry
  %16 = load i32, i32* %magic
  %17 = zext i32 %16 to i64
  %18 = icmp eq i64 %17, 3489328638
  br label %exit

exit:                                             ; preds = %else6, %then5
  %19 = phi i1 [ %15, %then5 ], [ %18, %else6 ]
  store i1 %19, i1* %__temp_95
  br i1 %19, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  %20 = phi i1 [ %11, %then3 ], [ %14, %else4 ]
  store i1 %20, i1* %__temp_94
  br i1 %20, label %then1, label %else2

exit8:                                            ; preds = %else2, %then1
  %21 = phi i1 [ %7, %then1 ], [ %10, %else2 ]
  br i1 %21, label %then, label %else

exit9:                                            ; preds = %then
  %22 = load i32, i32* %magic
  ret i32 %22
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class>:UInt32"(i32* %self, i32 %type) #0 {
alloca:
  %format = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1009, i32* %format
  %0 = load i32, i32* %format
  %1 = call i32 @"*UInt32@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:UInt32"(i32* %self, i32 %0)
  ret i32 %1
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:UInt32"(i32* %io, i32 %format) #0 {
entry:
  %0 = call i32 @"*IO::ByteFormat::LittleEndian::decode<UInt32:Class, IO::FileDescriptor+>:UInt32"(i32 609, i32* %io)
  ret i32 %0
}

; Function Attrs: uwtable
define internal i32 @"*IO::ByteFormat::LittleEndian::decode<UInt32:Class, IO::FileDescriptor+>:UInt32"(i32 %type, i32* %io) #0 {
alloca:
  %buffer = alloca [4 x i8]
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %buffer)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %2)
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::LittleEndian:Module>:Bool"(i32 1009)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [4 x i8] @"*StaticArray(UInt8, 4)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 4)"([4 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i8* @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([4 x i8]* %buffer)
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7
  ret i32 %8
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %slice) #0 {
alloca:
  %__temp_88 = alloca %"(Int32 | Nil)"
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  %1 = load %"Slice(UInt8)", %"Slice(UInt8)"* %slice1
  %2 = call %"(Int32 | Nil)" @"*IO::FileDescriptor+@IO#read_fully?<Slice(UInt8)>:(Int32 | Nil)"(i32* %self, %"Slice(UInt8)" %1)
  store %"(Int32 | Nil)" %2, %"(Int32 | Nil)"* %0
  %3 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  store %"(Int32 | Nil)" %3, %"(Int32 | Nil)"* %__temp_88
  %4 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  %5 = load i32, i32* %4
  %6 = icmp eq i32 %5, 0
  %7 = xor i1 %6, true
  %8 = and i1 true, %7
  br i1 %8, label %then, label %else

then:                                             ; preds = %entry
  %9 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %__temp_88, i32 0, i32 1
  %10 = bitcast [1 x i64]* %9 to i32*
  %11 = load i32, i32* %10
  br label %exit

else:                                             ; preds = %entry
  %12 = call %"IO::EOFError"* @"*IO::EOFError::new:IO::EOFError"()
  call void @"*raise<IO::EOFError>:NoReturn"(%"IO::EOFError"* %12)
  unreachable

exit:                                             ; preds = %then
  %13 = phi i32 [ %11, %then ]
  ret i32 %13
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*IO::FileDescriptor+@IO#read_fully?<Slice(UInt8)>:(Int32 | Nil)"(i32* %self, %"Slice(UInt8)" %slice) #0 {
alloca:
  %count = alloca i32
  %read_bytes = alloca i32
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"Slice(UInt8)"
  %3 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %slice1
  %5 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %6 = load i32, i32* %5
  store i32 %6, i32* %count
  br label %while

while:                                            ; preds = %else, %entry
  %7 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %8 = load i32, i32* %7
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %body, label %exit

body:                                             ; preds = %while
  %10 = load %"Slice(UInt8)", %"Slice(UInt8)"* %slice1
  %11 = call i32 @"*IO::FileDescriptor+@IO::Buffered#read<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %10)
  store i32 %11, i32* %read_bytes
  %12 = load i32, i32* %read_bytes
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %then, label %else

exit:                                             ; preds = %while
  %14 = load i32, i32* %count
  %15 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %3, i32 0, i32 0
  store i32 138, i32* %15
  %16 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %3, i32 0, i32 1
  %17 = bitcast [1 x i64]* %16 to i32*
  store i32 %14, i32* %17
  %18 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %3
  ret %"(Int32 | Nil)" %18

then:                                             ; preds = %body
  %19 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %19
  %20 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %20
  %21 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  ret %"(Int32 | Nil)" %21

else:                                             ; preds = %body
  %22 = load i32, i32* %read_bytes
  %23 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 %22)
  store %"Slice(UInt8)" %23, %"Slice(UInt8)"* %2
  %24 = load %"Slice(UInt8)", %"Slice(UInt8)"* %2
  store %"Slice(UInt8)" %24, %"Slice(UInt8)"* %slice1
  br label %while
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor+@IO::Buffered#read<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %slice) #0 {
alloca:
  %count = alloca i32
  %to_read = alloca i32
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  call void @"*IO::FileDescriptor+@IO#check_open:Nil"(i32* %self)
  %2 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %3 = load i32, i32* %2
  store i32 %3, i32* %count
  %4 = load i32, i32* %count
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  ret i32 0

else:                                             ; preds = %entry
  %6 = bitcast i32* %self to %"IO::FileDescriptor"*
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %6, i32 0, i32 4
  %8 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %7)
  br i1 %8, label %then2, label %else3

then2:                                            ; preds = %else
  %9 = load i32, i32* %count
  %10 = call i32 @"*Int32@Int#/<Int32>:Int32"(i32 8192, i32 2)
  %11 = icmp sge i32 %9, %10
  br i1 %11, label %then4, label %else5

else3:                                            ; preds = %else
  br label %exit

then4:                                            ; preds = %then2
  %12 = load i32, i32* %count
  %13 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 0, i32 %12)
  store %"Slice(UInt8)" %13, %"Slice(UInt8)"* %0
  %14 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %15 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_read<Slice(UInt8)>:Int64"(i32* %self, %"Slice(UInt8)" %14)
  %16 = trunc i64 %15 to i32
  ret i32 %16

else5:                                            ; preds = %then2
  %17 = call %"Slice(UInt8)" @"*IO::FileDescriptor+@IO::Buffered#fill_buffer:Slice(UInt8)"(i32* %self)
  %18 = bitcast i32* %self to %"IO::FileDescriptor"*
  %19 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %18, i32 0, i32 4
  %20 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %19)
  br i1 %20, label %then6, label %else7

then6:                                            ; preds = %else5
  ret i32 0

else7:                                            ; preds = %else5
  br label %exit

exit:                                             ; preds = %else3, %else7
  %21 = load i32, i32* %count
  %22 = bitcast i32* %self to %"IO::FileDescriptor"*
  %23 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %22, i32 0, i32 4
  %24 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %23, i32 0, i32 0
  %25 = load i32, i32* %24
  %26 = call i32 @"*Math@Math::min<Int32, Int32>:Int32"(i32 %21, i32 %25)
  store i32 %26, i32* %to_read
  %27 = bitcast i32* %self to %"IO::FileDescriptor"*
  %28 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %27, i32 0, i32 4
  %29 = load i32, i32* %to_read
  %30 = call i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %28, i32 %29)
  %31 = load i32, i32* %to_read
  %32 = call i8* @"*Slice(UInt8)@Slice(T)#copy_from<Pointer(UInt8), Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i8* %30, i32 %31)
  %33 = bitcast i32* %self to %"IO::FileDescriptor"*
  %34 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %33, i32 0, i32 4
  %35 = load i32, i32* %to_read
  %36 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %34, i32 %35)
  store %"Slice(UInt8)" %36, %"Slice(UInt8)"* %1
  %37 = bitcast i32* %self to %"IO::FileDescriptor"*
  %38 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %37, i32 0, i32 4
  %39 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  store %"Slice(UInt8)" %39, %"Slice(UInt8)"* %38
  %40 = load i32, i32* %to_read
  ret i32 %40
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO#check_open:Nil"(i32* %self) #0 {
entry:
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 18
  %2 = load i1, i1* %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = call %"IO::Error"* @"*IO::Error@Exception::new<String>:IO::Error"(%String* bitcast ({ i32, i32, i32, [14 x i8] }* @"'closed stream'" to %String*))
  call void @"*raise<IO::Error>:NoReturn"(%"IO::Error"* %3)
  unreachable

else:                                             ; preds = %entry
  ret void
}

; Function Attrs: uwtable
define internal i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  ret i1 %2
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#/<Int32>:Int32"(i32 %self, i32 %other) #0 {
alloca:
  %div = alloca i32
  %mod = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  call void @"*Int32@Int#check_div_argument<Int32>:Nil"(i32 %self, i32 %other)
  %0 = sdiv i32 %self, %other
  store i32 %0, i32* %div
  %1 = srem i32 %self, %other
  store i32 %1, i32* %mod
  %2 = icmp sgt i32 %other, 0
  br i1 %2, label %then1, label %else2

then:                                             ; preds = %exit
  %3 = load i32, i32* %div
  %4 = sub i32 %3, 1
  store i32 %4, i32* %div
  br label %exit3

else:                                             ; preds = %exit
  br label %exit3

then1:                                            ; preds = %entry
  %5 = load i32, i32* %mod
  %6 = icmp slt i32 %5, 0
  br label %exit

else2:                                            ; preds = %entry
  %7 = load i32, i32* %mod
  %8 = icmp sgt i32 %7, 0
  br label %exit

exit:                                             ; preds = %else2, %then1
  %9 = phi i1 [ %6, %then1 ], [ %8, %else2 ]
  br i1 %9, label %then, label %else

exit3:                                            ; preds = %else, %then
  %10 = load i32, i32* %div
  ret i32 %10
}

; Function Attrs: uwtable
define internal i64 @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_read<Slice(UInt8)>:Int64"(i32* %self, %"Slice(UInt8)" %slice) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %count = alloca i32
  %readers = alloca %"Deque(Fiber)"*
  %slice1 = alloca %"Slice(UInt8)"
  %bytes_read = alloca i64
  %i = alloca i32
  %0 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %1 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %2 = alloca %"(Bool | Deque(Fiber) | Nil)"
  %3 = alloca %"(Bool | Deque(Fiber) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  %4 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %5 = load i32, i32* %4
  store i32 %5, i32* %count
  store i32 0, i32* %i
  br label %while

rescue:                                           ; preds = %invoke_out12, %else9, %then8, %body
  %6 = landingpad %landing_pad
          cleanup
  %7 = extractvalue %landing_pad %6, 0
  %8 = extractvalue %landing_pad %6, 1
  %9 = bitcast i32* %self to %"IO::FileDescriptor"*
  %10 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %9, i32 0, i32 19
  %11 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %10
  store %"Deque(Fiber)"* %11, %"Deque(Fiber)"** %readers
  %12 = icmp ne %"Deque(Fiber)"* %11, null
  br i1 %12, label %then16, label %else17

while:                                            ; preds = %exit11, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %13 = load i32, i32* %i
  %14 = bitcast i32* %self to %"IO::FileDescriptor"*
  %15 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %14, i32 0, i32 16
  %16 = load i32, i32* %15
  %17 = load i32, i32* %count
  %18 = invoke i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i32 %17)
          to label %invoke_out unwind label %rescue

exit:                                             ; preds = %while
  unreachable

invoke_out:                                       ; preds = %body
  %19 = load i32, i32* %count
  %20 = sext i32 %19 to i64
  %21 = call i64 @read(i32 %16, i8* %18, i64 %20)
  store i64 %21, i64* %bytes_read
  %22 = load i64, i64* %bytes_read
  %23 = icmp ne i64 %22, -1
  br i1 %23, label %then, label %else

then:                                             ; preds = %invoke_out
  %24 = load i64, i64* %bytes_read
  %25 = bitcast i32* %self to %"IO::FileDescriptor"*
  %26 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %25, i32 0, i32 19
  %27 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %26
  store %"Deque(Fiber)"* %27, %"Deque(Fiber)"** %readers
  %28 = icmp ne %"Deque(Fiber)"* %27, null
  br i1 %28, label %then4, label %else5

else:                                             ; preds = %invoke_out
  %29 = call i32 @"*Errno::value:Int32"()
  %30 = icmp eq i32 %29, 35
  br i1 %30, label %then8, label %else9

then2:                                            ; preds = %exit6
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#add_read_event:Nil"(i32* %self)
  br label %exit7

else3:                                            ; preds = %exit6
  br label %exit7

then4:                                            ; preds = %then
  %31 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %32 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %31)
  %33 = xor i1 %32, true
  %34 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %0, i32 0, i32 0
  store i32 147, i32* %34
  %35 = zext i1 %33 to i64
  %36 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %0, i32 0, i32 1
  %37 = bitcast [1 x i64]* %36 to i64*
  store i64 %35, i64* %37
  br label %exit6

else5:                                            ; preds = %then
  %38 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %39 = icmp eq %"Deque(Fiber)"* %38, null
  %40 = select i1 %39, i32 0, i32 94
  %41 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %1, i32 0, i32 0
  store i32 %40, i32* %41
  %42 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %1, i32 0, i32 1
  %43 = bitcast [1 x i64]* %42 to %"Deque(Fiber)"**
  store %"Deque(Fiber)"* %38, %"Deque(Fiber)"** %43
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  %44 = phi %"(Bool | Deque(Fiber) | Nil)"* [ %0, %then4 ], [ %1, %else5 ]
  %45 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %44, i32 0, i32 0
  %46 = load i32, i32* %45
  %47 = icmp eq i32 %46, 0
  %48 = xor i1 %47, true
  %49 = and i1 true, %48
  %50 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %44, i32 0, i32 1
  %51 = bitcast [1 x i64]* %50 to i1*
  %52 = load i1, i1* %51
  %53 = icmp eq i32 %46, 147
  %54 = xor i1 %52, true
  %55 = and i1 %53, %54
  %56 = xor i1 %55, true
  %57 = and i1 %49, %56
  br i1 %57, label %then2, label %else3

exit7:                                            ; preds = %else3, %then2
  ret i64 %24

then8:                                            ; preds = %else
  invoke void @"*IO::FileDescriptor+@IO::FileDescriptor#wait_readable:Nil"(i32* %self)
          to label %invoke_out10 unwind label %rescue

else9:                                            ; preds = %else
  %58 = invoke %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Error reading file'" to %String*))
          to label %invoke_out12 unwind label %rescue

invoke_out10:                                     ; preds = %then8
  br label %exit11

exit11:                                           ; preds = %invoke_out10
  %59 = load i32, i32* %i
  %60 = add i32 %59, 1
  store i32 %60, i32* %i
  br label %while

invoke_out12:                                     ; preds = %else9
  invoke void @"*raise<Errno>:NoReturn"(%Errno* %58)
          to label %invoke_out13 unwind label %rescue

invoke_out13:                                     ; preds = %invoke_out12
  unreachable

then14:                                           ; preds = %exit18
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#add_read_event:Nil"(i32* %self)
  br label %exit19

else15:                                           ; preds = %exit18
  br label %exit19

then16:                                           ; preds = %rescue
  %61 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %62 = call i1 @"*Deque(Fiber)@Indexable(T)#empty?:Bool"(%"Deque(Fiber)"* %61)
  %63 = xor i1 %62, true
  %64 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %2, i32 0, i32 0
  store i32 147, i32* %64
  %65 = zext i1 %63 to i64
  %66 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %2, i32 0, i32 1
  %67 = bitcast [1 x i64]* %66 to i64*
  store i64 %65, i64* %67
  br label %exit18

else17:                                           ; preds = %rescue
  %68 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %69 = icmp eq %"Deque(Fiber)"* %68, null
  %70 = select i1 %69, i32 0, i32 94
  %71 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %3, i32 0, i32 0
  store i32 %70, i32* %71
  %72 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %3, i32 0, i32 1
  %73 = bitcast [1 x i64]* %72 to %"Deque(Fiber)"**
  store %"Deque(Fiber)"* %68, %"Deque(Fiber)"** %73
  br label %exit18

exit18:                                           ; preds = %else17, %then16
  %74 = phi %"(Bool | Deque(Fiber) | Nil)"* [ %2, %then16 ], [ %3, %else17 ]
  %75 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %74, i32 0, i32 0
  %76 = load i32, i32* %75
  %77 = icmp eq i32 %76, 0
  %78 = xor i1 %77, true
  %79 = and i1 true, %78
  %80 = getelementptr inbounds %"(Bool | Deque(Fiber) | Nil)", %"(Bool | Deque(Fiber) | Nil)"* %74, i32 0, i32 1
  %81 = bitcast [1 x i64]* %80 to i1*
  %82 = load i1, i1* %81
  %83 = icmp eq i32 %76, 147
  %84 = xor i1 %82, true
  %85 = and i1 %83, %84
  %86 = xor i1 %85, true
  %87 = and i1 %79, %86
  br i1 %87, label %then14, label %else15

exit19:                                           ; preds = %else15, %then14
  %88 = bitcast i8* %7 to %"struct.LibUnwind::Exception"*
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %88)
  unreachable
}

declare i64 @read(i32, i8*, i64)

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#add_read_event:Nil"(i32* %self) #0 {
alloca:
  %__temp_90 = alloca %"(Event::Event | Nil)"
  %event = alloca %"Event::Event.6"
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast i32* %self to %"IO::FileDescriptor"*
  %2 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %1, i32 0, i32 17
  %3 = load i1, i1* %2
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  %4 = bitcast i32* %self to %"IO::FileDescriptor"*
  %5 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %4, i32 0, i32 12
  %6 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %5
  store %"(Event::Event | Nil)" %6, %"(Event::Event | Nil)"* %__temp_90
  %7 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %5, i32 0, i32 0
  %8 = load i32, i32* %7
  %9 = icmp eq i32 %8, 0
  %10 = xor i1 %9, true
  %11 = and i1 true, %10
  br i1 %11, label %then1, label %else2

then1:                                            ; preds = %else
  %12 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %__temp_90, i32 0, i32 1
  %13 = bitcast [2 x i64]* %12 to %"Event::Event.6"*
  br label %exit

else2:                                            ; preds = %else
  %14 = call %"Event::Event.6" @"*Scheduler::create_fd_read_event<IO::FileDescriptor+>:Event::Event"(i32* %self)
  store %"Event::Event.6" %14, %"Event::Event.6"* %0
  %15 = bitcast i32* %self to %"IO::FileDescriptor"*
  %16 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %15, i32 0, i32 12
  %17 = load %"Event::Event.6", %"Event::Event.6"* %0
  %18 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %16, i32 0, i32 0
  store i32 359, i32* %18
  %19 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %16, i32 0, i32 1
  %20 = bitcast [2 x i64]* %19 to %"Event::Event.6"*
  store %"Event::Event.6" %17, %"Event::Event.6"* %20
  br label %exit

exit:                                             ; preds = %else2, %then1
  %21 = phi %"Event::Event.6"* [ %13, %then1 ], [ %0, %else2 ]
  %22 = load %"Event::Event.6", %"Event::Event.6"* %21
  store %"Event::Event.6" %22, %"Event::Event.6"* %event
  %23 = bitcast i32* %self to %"IO::FileDescriptor"*
  %24 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %23, i32 0, i32 10
  %25 = load %"(Float64 | Nil)", %"(Float64 | Nil)"* %24
  %26 = call i32 @"*Event::Event#add<(Float64 | Nil)>:Int32"(%"Event::Event.6"* %event, %"(Float64 | Nil)" %25)
  ret void
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_fd_read_event<IO::FileDescriptor+>:Event::Event"(i32* %io) #0 {
alloca:
  %edge_triggered = alloca i1
  %flags = alloca i16
  %event = alloca %"Event::Event.6"
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %edge_triggered
  store i16 2, i16* %flags
  %2 = load i1, i1* %edge_triggered
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i16, i16* %flags
  %4 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 16, i16 32)
  %5 = call i16 @"*LibEvent2::EventFlags@Enum#|<LibEvent2::EventFlags>:LibEvent2::EventFlags"(i16 %3, i16 %4)
  store i16 %5, i16* %flags
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %7 = bitcast i32* %io to %"IO::FileDescriptor"*
  %8 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %7, i32 0, i32 16
  %9 = load i32, i32* %8
  %10 = load i16, i16* %flags
  %11 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~proc3Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:49" to i8*), i8** %11
  %12 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %12
  %13 = load %"->", %"->"* %0
  %14 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, IO::FileDescriptor+, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %6, i32 %9, i16 %10, i32* %io, %"->" %13)
  store %"Event::Event.6" %14, %"Event::Event.6"* %1
  %15 = load %"Event::Event.6", %"Event::Event.6"* %1
  store %"Event::Event.6" %15, %"Event::Event.6"* %event
  %16 = load %"Event::Event.6", %"Event::Event.6"* %event
  ret %"Event::Event.6" %16
}

; Function Attrs: uwtable
define internal void @"~proc3Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:49"(i32 %s, i16 %flags, i8* %data) #0 {
alloca:
  %fd_io = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i8* %data to i32*
  store i32* %0, i32** %fd_io
  %1 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 2)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_read:Nil"(i32* %2)
  br label %exit

else:                                             ; preds = %entry
  %3 = call i1 @"*LibEvent2::EventFlags@Enum#includes?<LibEvent2::EventFlags>:Bool"(i16 %flags, i16 1)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret void

then1:                                            ; preds = %else
  %4 = load i32*, i32** %fd_io
  %5 = call i1 @"*IO::FileDescriptor+@IO::FileDescriptor#read_timed_out=<Bool>:Bool"(i32* %4, i1 true)
  %6 = load i32*, i32** %fd_io
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#resume_read:Nil"(i32* %6)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  br label %exit
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#wait_readable:Nil"(i32* %self) #0 {
alloca:
  %err = alloca %"IO::Timeout"*
  %__temp_89 = alloca %"Deque(Fiber)"*
  %readers = alloca %"Deque(Fiber)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 19
  %2 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %1
  store %"Deque(Fiber)"* %2, %"Deque(Fiber)"** %__temp_89
  %3 = icmp ne %"Deque(Fiber)"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %__temp_89
  br label %exit

else:                                             ; preds = %entry
  %5 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)::new:Deque(Fiber)"(i32 547)
  %6 = bitcast i32* %self to %"IO::FileDescriptor"*
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %6, i32 0, i32 19
  store %"Deque(Fiber)"* %5, %"Deque(Fiber)"** %7
  br label %exit

exit:                                             ; preds = %else, %then
  %8 = phi %"Deque(Fiber)"* [ %4, %then ], [ %5, %else ]
  store %"Deque(Fiber)"* %8, %"Deque(Fiber)"** %readers
  %9 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %10 = call %Fiber* @"*Fiber::current:Fiber"()
  %11 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#<<<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %9, %Fiber* %10)
  call void @"*IO::FileDescriptor+@IO::FileDescriptor#add_read_event:Nil"(i32* %self)
  call void @"*Scheduler::reschedule:Nil"()
  %12 = bitcast i32* %self to %"IO::FileDescriptor"*
  %13 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %12, i32 0, i32 14
  %14 = load i1, i1* %13
  br i1 %14, label %then1, label %else2

then1:                                            ; preds = %exit
  %15 = bitcast i32* %self to %"IO::FileDescriptor"*
  %16 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %15, i32 0, i32 14
  store i1 false, i1* %16
  %17 = call %"IO::Timeout"* @"*IO::Timeout@Exception::new<String>:IO::Timeout"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'read timed out'" to %String*))
  store %"IO::Timeout"* %17, %"IO::Timeout"** %err
  %18 = load %"IO::Timeout"*, %"IO::Timeout"** %err
  call void @"*raise<IO::Timeout>:NoReturn"(%"IO::Timeout"* %18)
  unreachable

else2:                                            ; preds = %exit
  ret void
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*IO::FileDescriptor+@IO::Buffered#fill_buffer:Slice(UInt8)"(i32* %self) #0 {
alloca:
  %in_buffer = alloca i8*
  %size = alloca i32
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = call i8* @"*IO::FileDescriptor+@IO::Buffered#in_buffer:Pointer(UInt8)"(i32* %self)
  store i8* %2, i8** %in_buffer
  %3 = load i8*, i8** %in_buffer
  %4 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %3, i32 8192)
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %0
  %5 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %6 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_read<Slice(UInt8)>:Int64"(i32* %self, %"Slice(UInt8)" %5)
  %7 = trunc i64 %6 to i32
  store i32 %7, i32* %size
  %8 = load i8*, i8** %in_buffer
  %9 = load i32, i32* %size
  %10 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %8, i32 %9)
  store %"Slice(UInt8)" %10, %"Slice(UInt8)"* %1
  %11 = bitcast i32* %self to %"IO::FileDescriptor"*
  %12 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %11, i32 0, i32 4
  %13 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  store %"Slice(UInt8)" %13, %"Slice(UInt8)"* %12
  %14 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  ret %"Slice(UInt8)" %14
}

; Function Attrs: uwtable
define internal i8* @"*IO::FileDescriptor+@IO::Buffered#in_buffer:Pointer(UInt8)"(i32* %self) #0 {
alloca:
  %__temp_91 = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 8
  %2 = load i8*, i8** %1
  store i8* %2, i8** %__temp_91
  %3 = icmp ne i8* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i8*, i8** %__temp_91
  br label %exit

else:                                             ; preds = %entry
  %5 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 8192)
  %6 = bitcast i32* %self to %"IO::FileDescriptor"*
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %6, i32 0, i32 8
  store i8* %5, i8** %7
  br label %exit

exit:                                             ; preds = %else, %then
  %8 = phi i8* [ %4, %then ], [ %5, %else ]
  ret i8* %8
}

; Function Attrs: uwtable
define internal i32 @"*Math@Math::min<Int32, Int32>:Int32"(i32 %value1, i32 %value2) #0 {
entry:
  %0 = icmp sle i32 %value1, %value2
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %1 = phi i32 [ %value1, %then ], [ %value2, %else ]
  ret i32 %1
}

; Function Attrs: uwtable
define internal i8* @"*Slice(UInt8)@Slice(T)#copy_from<Pointer(UInt8), Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %self, i8* %source, i32 %count) #0 {
entry:
  %0 = call i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %self, i32 %count)
  %1 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_from<Pointer(UInt8), Int32>:Pointer(UInt8)"(i8* %0, i8* %source, i32 %count)
  ret i8* %1
}

; Function Attrs: uwtable
define internal %"IO::EOFError"* @"*IO::EOFError::new:IO::EOFError"() #0 {
alloca:
  %_ = alloca %"IO::EOFError"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"IO::EOFError"* getelementptr (%"IO::EOFError", %"IO::EOFError"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"IO::EOFError"*
  %2 = bitcast %"IO::EOFError"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"IO::EOFError"* getelementptr (%"IO::EOFError", %"IO::EOFError"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"IO::EOFError", %"IO::EOFError"* %1, i32 0, i32 0
  store i32 42, i32* %3
  store %"IO::EOFError"* %1, %"IO::EOFError"** %_
  %4 = load %"IO::EOFError"*, %"IO::EOFError"** %_
  call void @"*IO::EOFError#initialize:Nil"(%"IO::EOFError"* %4)
  %5 = load %"IO::EOFError"*, %"IO::EOFError"** %_
  ret %"IO::EOFError"* %5
}

; Function Attrs: uwtable
define internal void @"*IO::EOFError#initialize:Nil"(%"IO::EOFError"* %self) #0 {
alloca:
  %message = alloca %String*
  br label %entry

entry:                                            ; preds = %alloca
  store %String* bitcast ({ i32, i32, i32, [20 x i8] }* @"'end of file reached...'" to %String*), %String** %message
  %0 = load %String*, %String** %message
  call void @"*IO::EOFError#initialize<String>:Nil"(%"IO::EOFError"* %self, %String* %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::EOFError#initialize<String>:Nil"(%"IO::EOFError"* %self, %String* %message) #0 {
entry:
  call void @"*IO::EOFError@Exception#initialize<String>:Nil"(%"IO::EOFError"* %self, %String* %message)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::EOFError@Exception#initialize<String>:Nil"(%"IO::EOFError"* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"IO::EOFError", %"IO::EOFError"* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %"IO::EOFError", %"IO::EOFError"* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<IO::EOFError>:NoReturn"(%"IO::EOFError"* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*IO::EOFError@Exception#callstack=<CallStack>:CallStack"(%"IO::EOFError"* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %"IO::EOFError"* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 42, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*IO::EOFError@Exception#callstack=<CallStack>:CallStack"(%"IO::EOFError"* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %"IO::EOFError", %"IO::EOFError"* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::LittleEndian:Module>:Bool"(i32 %other) #0 {
entry:
  ret i1 true
}

; Function Attrs: uwtable
define internal [4 x i8] @"*StaticArray(UInt8, 4)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 4)"([4 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %self)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#reverse!:Slice(UInt8)"(%"Slice(UInt8)"* %0)
  %3 = load [4 x i8], [4 x i8]* %self
  ret [4 x i8] %3
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#reverse!:Slice(UInt8)"(%"Slice(UInt8)"* %self) #0 {
alloca:
  %i = alloca i32
  %j = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %i
  %0 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %1 = load i32, i32* %0
  %2 = sub i32 %1, 1
  store i32 %2, i32* %j
  br label %while

while:                                            ; preds = %body, %entry
  %3 = load i32, i32* %i
  %4 = load i32, i32* %j
  %5 = icmp slt i32 %3, %4
  br i1 %5, label %body, label %exit

body:                                             ; preds = %while
  %6 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %7 = load i8*, i8** %6
  %8 = load i32, i32* %i
  %9 = load i32, i32* %j
  %10 = call i8 @"*Pointer(UInt8)@Pointer(T)#swap<Int32, Int32>:UInt8"(i8* %7, i32 %8, i32 %9)
  %11 = load i32, i32* %i
  %12 = add i32 %11, 1
  store i32 %12, i32* %i
  %13 = load i32, i32* %j
  %14 = sub i32 %13, 1
  store i32 %14, i32* %j
  br label %while

exit:                                             ; preds = %while
  %15 = load %"Slice(UInt8)", %"Slice(UInt8)"* %self
  ret %"Slice(UInt8)" %15
}

; Function Attrs: uwtable
define internal i8 @"*Pointer(UInt8)@Pointer(T)#swap<Int32, Int32>:UInt8"(i8* %self, i32 %i, i32 %j) #0 {
alloca:
  %__temp_92 = alloca i8
  %__temp_93 = alloca i8
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %self, i32 %j)
  store i8 %0, i8* %__temp_92
  %1 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %self, i32 %i)
  store i8 %1, i8* %__temp_93
  %2 = load i8, i8* %__temp_92
  %3 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %self, i32 %i, i8 %2)
  %4 = load i8, i8* %__temp_93
  %5 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %self, i32 %j, i8 %4)
  ret i8 %5
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Error"* @"*Debug::MachO::Error@Exception::new<String>:Debug::MachO::Error"(%String* %__arg0) #0 {
alloca:
  %_ = alloca %"Debug::MachO::Error"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Debug::MachO::Error"* getelementptr (%"Debug::MachO::Error", %"Debug::MachO::Error"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Debug::MachO::Error"*
  %2 = bitcast %"Debug::MachO::Error"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Debug::MachO::Error"* getelementptr (%"Debug::MachO::Error", %"Debug::MachO::Error"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Debug::MachO::Error", %"Debug::MachO::Error"* %1, i32 0, i32 0
  store i32 33, i32* %3
  store %"Debug::MachO::Error"* %1, %"Debug::MachO::Error"** %_
  %4 = load %"Debug::MachO::Error"*, %"Debug::MachO::Error"** %_
  call void @"*Debug::MachO::Error@Exception#initialize<String>:Nil"(%"Debug::MachO::Error"* %4, %String* %__arg0)
  %5 = load %"Debug::MachO::Error"*, %"Debug::MachO::Error"** %_
  ret %"Debug::MachO::Error"* %5
}

; Function Attrs: uwtable
define internal void @"*Debug::MachO::Error@Exception#initialize<String>:Nil"(%"Debug::MachO::Error"* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Debug::MachO::Error", %"Debug::MachO::Error"* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %"Debug::MachO::Error", %"Debug::MachO::Error"* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<Debug::MachO::Error>:NoReturn"(%"Debug::MachO::Error"* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*Debug::MachO::Error@Exception#callstack=<CallStack>:CallStack"(%"Debug::MachO::Error"* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %"Debug::MachO::Error"* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 33, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*Debug::MachO::Error@Exception#callstack=<CallStack>:CallStack"(%"Debug::MachO::Error"* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %"Debug::MachO::Error", %"Debug::MachO::Error"* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self) #0 {
alloca:
  %__temp_97 = alloca i1
  %0 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %2 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  %3 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = zext i32 %4 to i64
  %6 = icmp eq i64 %5, 4277009103
  store i1 %6, i1* %__temp_97
  br i1 %6, label %then1, label %else2

then:                                             ; preds = %exit
  %7 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %0, i32 0, i32 0
  store i32 1009, i32* %7
  %8 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %0, i32 0, i32 1
  %9 = bitcast [1 x i64]* %8 to i32*
  store i32 1009, i32* %9
  br label %exit3

else:                                             ; preds = %exit
  %10 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::LittleEndian:Module>:Bool"(i32 1009)
  br i1 %10, label %then4, label %else5

then1:                                            ; preds = %entry
  %11 = load i1, i1* %__temp_97
  br label %exit

else2:                                            ; preds = %entry
  %12 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 0
  %13 = load i32, i32* %12
  %14 = zext i32 %13 to i64
  %15 = icmp eq i64 %14, 4277009102
  br label %exit

exit:                                             ; preds = %else2, %then1
  %16 = phi i1 [ %11, %then1 ], [ %15, %else2 ]
  br i1 %16, label %then, label %else

exit3:                                            ; preds = %exit6, %then
  %17 = phi %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* [ %0, %then ], [ %25, %exit6 ]
  %18 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %17
  ret %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %18

then4:                                            ; preds = %else
  %19 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %1, i32 0, i32 0
  store i32 1011, i32* %19
  %20 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %1, i32 0, i32 1
  %21 = bitcast [1 x i64]* %20 to i32*
  store i32 1011, i32* %21
  br label %exit6

else5:                                            ; preds = %else
  %22 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %2, i32 0, i32 0
  store i32 1009, i32* %22
  %23 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %2, i32 0, i32 1
  %24 = bitcast [1 x i64]* %23 to i32*
  store i32 1009, i32* %24
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  %25 = phi %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* [ %1, %then4 ], [ %2, %else5 ]
  br label %exit3
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor+@IO#read_bytes<Int32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:Int32"(i32* %self, i32 %type, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format) #0 {
alloca:
  %format1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %0 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %1 = call i32 @"*Int32@Int::from_io<IO::FileDescriptor+, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:Int32"(i32* %self, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %0)
  ret i32 %1
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int::from_io<IO::FileDescriptor+, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:Int32"(i32* %io, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format) #0 {
alloca:
  %format1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %0 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 0
  %1 = load i32, i32* %0
  %2 = load i32, i32* %io
  %3 = icmp eq i32 1011, %1
  %4 = call i1 @"~match<IO::FileDescriptor+>"(i32 %2)
  %5 = and i1 %3, %4
  br i1 %5, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %6 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to i32*
  %8 = load i32, i32* %7
  %9 = call i32 @"*IO::ByteFormat::BigEndian::decode<Int32:Class, IO::FileDescriptor+>:Int32"(i32 608, i32* %io)
  br label %exit

next_def:                                         ; preds = %entry
  %10 = icmp eq i32 1009, %1
  %11 = call i1 @"~match<IO::FileDescriptor+>"(i32 %2)
  %12 = and i1 %10, %11
  br i1 %12, label %current_def2, label %next_def3

exit:                                             ; preds = %current_def2, %current_def
  %13 = phi i32 [ %9, %current_def ], [ %17, %current_def2 ]
  ret i32 %13

current_def2:                                     ; preds = %next_def
  %14 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 1
  %15 = bitcast [1 x i64]* %14 to i32*
  %16 = load i32, i32* %15
  %17 = call i32 @"*IO::ByteFormat::LittleEndian::decode<Int32:Class, IO::FileDescriptor+>:Int32"(i32 608, i32* %io)
  br label %exit

next_def3:                                        ; preds = %next_def
  unreachable
}

define internal i1 @"~match<IO::FileDescriptor+>"(i32) {
entry:
  %1 = icmp sge i32 %0, 65
  %2 = icmp sle i32 %0, 66
  %3 = and i1 %1, %2
  ret i1 %3
}

; Function Attrs: uwtable
define internal i32 @"*IO::ByteFormat::BigEndian::decode<Int32:Class, IO::FileDescriptor+>:Int32"(i32 %type, i32* %io) #0 {
alloca:
  %buffer = alloca [4 x i8]
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %buffer)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %2)
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::BigEndian:Module>:Bool"(i32 1011)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [4 x i8] @"*StaticArray(UInt8, 4)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 4)"([4 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i8* @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([4 x i8]* %buffer)
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7
  ret i32 %8
}

; Function Attrs: uwtable
define internal i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::BigEndian:Module>:Bool"(i32 %other) #0 {
entry:
  ret i1 false
}

; Function Attrs: uwtable
define internal i32 @"*IO::ByteFormat::LittleEndian::decode<Int32:Class, IO::FileDescriptor+>:Int32"(i32 %type, i32* %io) #0 {
alloca:
  %buffer = alloca [4 x i8]
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %buffer)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %2)
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::LittleEndian:Module>:Bool"(i32 1009)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [4 x i8] @"*StaticArray(UInt8, 4)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 4)"([4 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i8* @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([4 x i8]* %buffer)
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7
  ret i32 %8
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %self, i32 %type, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format) #0 {
alloca:
  %format1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %0 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %1 = call i32 @"*UInt32@Int::from_io<IO::FileDescriptor+, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %self, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %0)
  ret i32 %1
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Int::from_io<IO::FileDescriptor+, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %io, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format) #0 {
alloca:
  %format1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %0 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 0
  %1 = load i32, i32* %0
  %2 = load i32, i32* %io
  %3 = icmp eq i32 1011, %1
  %4 = call i1 @"~match<IO::FileDescriptor+>"(i32 %2)
  %5 = and i1 %3, %4
  br i1 %5, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %6 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to i32*
  %8 = load i32, i32* %7
  %9 = call i32 @"*IO::ByteFormat::BigEndian::decode<UInt32:Class, IO::FileDescriptor+>:UInt32"(i32 609, i32* %io)
  br label %exit

next_def:                                         ; preds = %entry
  %10 = icmp eq i32 1009, %1
  %11 = call i1 @"~match<IO::FileDescriptor+>"(i32 %2)
  %12 = and i1 %10, %11
  br i1 %12, label %current_def2, label %next_def3

exit:                                             ; preds = %current_def2, %current_def
  %13 = phi i32 [ %9, %current_def ], [ %17, %current_def2 ]
  ret i32 %13

current_def2:                                     ; preds = %next_def
  %14 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 1
  %15 = bitcast [1 x i64]* %14 to i32*
  %16 = load i32, i32* %15
  %17 = call i32 @"*IO::ByteFormat::LittleEndian::decode<UInt32:Class, IO::FileDescriptor+>:UInt32"(i32 609, i32* %io)
  br label %exit

next_def3:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i32 @"*IO::ByteFormat::BigEndian::decode<UInt32:Class, IO::FileDescriptor+>:UInt32"(i32 %type, i32* %io) #0 {
alloca:
  %buffer = alloca [4 x i8]
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %buffer)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %2)
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::BigEndian:Module>:Bool"(i32 1011)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [4 x i8] @"*StaticArray(UInt8, 4)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 4)"([4 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i8* @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([4 x i8]* %buffer)
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7
  ret i32 %8
}

; Function Attrs: uwtable
define internal i1 @"*Debug::MachO#abi64?:Bool"(%"Debug::MachO"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = and i32 %1, 16777216
  %3 = icmp eq i32 %2, 16777216
  ret i1 %3
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO#skip<Int32>:Nil"(i32* %self, i32 %bytes_count) #0 {
alloca:
  %buffer = alloca [1024 x i8]
  %read_count = alloca i32
  %bytes_count1 = alloca i32
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %bytes_count, i32* %bytes_count1
  br label %while

while:                                            ; preds = %else, %entry
  %2 = load i32, i32* %bytes_count1
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %body, label %exit

body:                                             ; preds = %while
  %4 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_slice:Slice(UInt8)"([1024 x i8]* %buffer)
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %0
  %5 = load i32, i32* %bytes_count1
  %6 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %0, i32 0, i32 %5)
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %1
  %7 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  %8 = call i32 @"*IO::FileDescriptor+@IO::Buffered#read<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %7)
  store i32 %8, i32* %read_count
  %9 = load i32, i32* %read_count
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %then, label %else

exit:                                             ; preds = %while
  ret void

then:                                             ; preds = %body
  %11 = call %"IO::EOFError"* @"*IO::EOFError::new:IO::EOFError"()
  call void @"*raise<IO::EOFError>:NoReturn"(%"IO::EOFError"* %11)
  unreachable

else:                                             ; preds = %body
  %12 = load i32, i32* %bytes_count1
  %13 = load i32, i32* %read_count
  %14 = sub i32 %12, %13
  store i32 %14, i32* %bytes_count1
  br label %while
}

; Function Attrs: uwtable
define internal i64 @"*IO::FileDescriptor+@IO::FileDescriptor#tell:Int64"(i32* %self) #0 {
entry:
  %0 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#pos:Int64"(i32* %self)
  ret i64 %0
}

; Function Attrs: uwtable
define internal i64 @"*IO::FileDescriptor+@IO::FileDescriptor#pos:Int64"(i32* %self) #0 {
alloca:
  %seek_value = alloca i64
  br label %entry

entry:                                            ; preds = %alloca
  call void @"*IO::FileDescriptor+@IO#check_open:Nil"(i32* %self)
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 16
  %2 = load i32, i32* %1
  %3 = call i32 @"*IO::Seek@Enum#to_i32:Int32"(i32 1)
  %4 = call i64 @lseek(i32 %2, i64 0, i32 %3)
  store i64 %4, i64* %seek_value
  %5 = load i64, i64* %seek_value
  %6 = icmp eq i64 %5, -1
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  %7 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'Unable to tell'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %7)
  unreachable

else:                                             ; preds = %entry
  %8 = load i64, i64* %seek_value
  %9 = bitcast i32* %self to %"IO::FileDescriptor"*
  %10 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %9, i32 0, i32 4
  %11 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %10, i32 0, i32 0
  %12 = load i32, i32* %11
  %13 = sext i32 %12 to i64
  %14 = sub i64 %8, %13
  ret i64 %14
}

; Function Attrs: uwtable
define internal i32 @"*IO::Seek@Enum#to_i32:Int32"(i32 %self) #0 {
entry:
  ret i32 %self
}

declare i64 @lseek(i32, i64, i32)

; Function Attrs: uwtable
define internal %"Array(Debug::MachO::Segment64)"* @"*Array(Debug::MachO::Segment64)@Array(T)::new:Array(Debug::MachO::Segment64)"(i32 %self) #0 {
alloca:
  %_ = alloca %"Array(Debug::MachO::Segment64)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(Debug::MachO::Segment64)"* getelementptr (%"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(Debug::MachO::Segment64)"*
  %2 = bitcast %"Array(Debug::MachO::Segment64)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(Debug::MachO::Segment64)"* getelementptr (%"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %1, i32 0, i32 0
  store i32 13, i32* %3
  store %"Array(Debug::MachO::Segment64)"* %1, %"Array(Debug::MachO::Segment64)"** %_
  %4 = load %"Array(Debug::MachO::Segment64)"*, %"Array(Debug::MachO::Segment64)"** %_
  %5 = call %"Debug::MachO::Segment64"* @"*Array(Debug::MachO::Segment64)@Array(T)#initialize:Pointer(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %4)
  %6 = load %"Array(Debug::MachO::Segment64)"*, %"Array(Debug::MachO::Segment64)"** %_
  ret %"Array(Debug::MachO::Segment64)"* %6
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64"* @"*Array(Debug::MachO::Segment64)@Array(T)#initialize:Pointer(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 1
  store i32 0, i32* %0
  %1 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 2
  store i32 0, i32* %1
  %2 = call %"Debug::MachO::Segment64"* @"*Pointer(Debug::MachO::Segment64)@Pointer(T)::null:Pointer(Debug::MachO::Segment64)"(i32 686)
  %3 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 3
  store %"Debug::MachO::Segment64"* %2, %"Debug::MachO::Segment64"** %3
  ret %"Debug::MachO::Segment64"* %2
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64"* @"*Pointer(Debug::MachO::Segment64)@Pointer(T)::null:Pointer(Debug::MachO::Segment64)"(i32 %self) #0 {
entry:
  ret %"Debug::MachO::Segment64"* null
}

; Function Attrs: uwtable
define internal %"Array(Debug::MachO::Section64)"* @"*Array(Debug::MachO::Section64)@Array(T)::new:Array(Debug::MachO::Section64)"(i32 %self) #0 {
alloca:
  %_ = alloca %"Array(Debug::MachO::Section64)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(Debug::MachO::Section64)"* getelementptr (%"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(Debug::MachO::Section64)"*
  %2 = bitcast %"Array(Debug::MachO::Section64)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(Debug::MachO::Section64)"* getelementptr (%"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %1, i32 0, i32 0
  store i32 14, i32* %3
  store %"Array(Debug::MachO::Section64)"* %1, %"Array(Debug::MachO::Section64)"** %_
  %4 = load %"Array(Debug::MachO::Section64)"*, %"Array(Debug::MachO::Section64)"** %_
  %5 = call %"Debug::MachO::Section64"* @"*Array(Debug::MachO::Section64)@Array(T)#initialize:Pointer(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %4)
  %6 = load %"Array(Debug::MachO::Section64)"*, %"Array(Debug::MachO::Section64)"** %_
  ret %"Array(Debug::MachO::Section64)"* %6
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64"* @"*Array(Debug::MachO::Section64)@Array(T)#initialize:Pointer(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 1
  store i32 0, i32* %0
  %1 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 2
  store i32 0, i32* %1
  %2 = call %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)::null:Pointer(Debug::MachO::Section64)"(i32 687)
  %3 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 3
  store %"Debug::MachO::Section64"* %2, %"Debug::MachO::Section64"** %3
  ret %"Debug::MachO::Section64"* %2
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)::null:Pointer(Debug::MachO::Section64)"(i32 %self) #0 {
entry:
  ret %"Debug::MachO::Section64"* null
}

; Function Attrs: uwtable
define internal %"Debug::MachO::UUID.22" @"*Debug::MachO#uuid:Debug::MachO::UUID"(%"Debug::MachO"* %self) #0 {
alloca:
  %__temp_98 = alloca %"(Debug::MachO::UUID | Nil)"
  %bytes = alloca [16 x i8]
  %load_command = alloca i32
  %cmd = alloca i32
  %cmdsize = alloca i32
  %load_command1 = alloca i32
  %cmd2 = alloca i32
  %cmdsize3 = alloca i32
  %i = alloca i32
  %0 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %2 = alloca %"Slice(UInt8)"
  %3 = alloca %"Debug::MachO::UUID.22"
  %4 = alloca %"(Debug::MachO::UUID | Nil)"
  %5 = alloca %"(Debug::MachO::UUID | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %6 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 8
  %7 = load %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %6
  store %"(Debug::MachO::UUID | Nil)" %7, %"(Debug::MachO::UUID | Nil)"* %__temp_98
  %8 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %6, i32 0, i32 0
  %9 = load i32, i32* %8
  %10 = icmp eq i32 %9, 0
  %11 = xor i1 %10, true
  %12 = and i1 true, %11
  br i1 %12, label %then, label %else

then:                                             ; preds = %entry
  %13 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %__temp_98, i32 0, i32 1
  %14 = bitcast [2 x i64]* %13 to %"Debug::MachO::UUID.22"*
  br label %exit

else:                                             ; preds = %entry
  store i32 27, i32* %load_command
  %15 = load i32, i32* %load_command
  store i32 %15, i32* %load_command1
  %16 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %17 = load i32*, i32** %16
  %18 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 7
  %19 = load i64, i64* %18
  %20 = call i32* @"*IO::FileDescriptor+@IO::FileDescriptor#seek<Int64>:IO::FileDescriptor+"(i32* %17, i64 %19)
  %21 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 4
  %22 = load i32, i32* %21
  %23 = xor i32 %22, %22
  store i32 %23, i32* %i
  br label %while

exit:                                             ; preds = %exit8, %then
  %24 = phi %"Debug::MachO::UUID.22"* [ %14, %then ], [ %71, %exit8 ]
  %25 = load %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %24
  ret %"Debug::MachO::UUID.22" %25

while:                                            ; preds = %else6, %else
  %26 = load i32, i32* %i
  %27 = icmp ult i32 %26, %22
  br i1 %27, label %body, label %exit4

body:                                             ; preds = %while
  %28 = load i32, i32* %i
  %29 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %30 = load i32*, i32** %29
  %31 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %31, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %0
  %32 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %0
  %33 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %30, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %32)
  store i32 %33, i32* %cmd2
  %34 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %35 = load i32*, i32** %34
  %36 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %36, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %1
  %37 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %1
  %38 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %35, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %37)
  store i32 %38, i32* %cmdsize3
  %39 = load i32, i32* %cmd2
  %40 = load i32, i32* %load_command1
  %41 = call i1 @"*Debug::MachO::LoadCommand@Enum#==<Debug::MachO::LoadCommand>:Bool"(i32 %39, i32 %40)
  br i1 %41, label %then5, label %else6

exit4:                                            ; preds = %while
  %42 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %5, i32 0, i32 0
  store i32 0, i32* %42
  %43 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %5, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %43
  br label %exit7

then5:                                            ; preds = %body
  %44 = load i32, i32* %cmd2
  %45 = load i32, i32* %cmdsize3
  store i32 %44, i32* %cmd
  store i32 %45, i32* %cmdsize
  %46 = load i32, i32* %cmdsize
  %47 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %48 = load i32*, i32** %47
  %49 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 16)@StaticArray(T, N)#to_slice:Slice(UInt8)"([16 x i8]* %bytes)
  store %"Slice(UInt8)" %49, %"Slice(UInt8)"* %2
  %50 = load %"Slice(UInt8)", %"Slice(UInt8)"* %2
  %51 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %48, %"Slice(UInt8)" %50)
  %52 = load [16 x i8], [16 x i8]* %bytes
  %53 = call %"Debug::MachO::UUID.22" @"*Debug::MachO::UUID::new<StaticArray(UInt8, 16)>:Debug::MachO::UUID"([16 x i8] %52)
  store %"Debug::MachO::UUID.22" %53, %"Debug::MachO::UUID.22"* %3
  %54 = load %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %3
  %55 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %4, i32 0, i32 0
  store i32 296, i32* %55
  %56 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %4, i32 0, i32 1
  %57 = bitcast [2 x i64]* %56 to %"Debug::MachO::UUID.22"*
  store %"Debug::MachO::UUID.22" %54, %"Debug::MachO::UUID.22"* %57
  br label %exit7

else6:                                            ; preds = %body
  %58 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %59 = load i32*, i32** %58
  %60 = load i32, i32* %cmdsize3
  %61 = sub i32 %60, 8
  call void @"*IO::FileDescriptor+@IO#skip<UInt32>:Nil"(i32* %59, i32 %61)
  %62 = load i32, i32* %i
  %63 = add i32 %62, 1
  store i32 %63, i32* %i
  br label %while

exit7:                                            ; preds = %exit4, %then5
  %64 = phi %"(Debug::MachO::UUID | Nil)"* [ %4, %then5 ], [ %5, %exit4 ]
  %65 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %64, i32 0, i32 0
  %66 = load i32, i32* %65
  %67 = icmp eq i32 296, %66
  br i1 %67, label %current_def, label %next_def

current_def:                                      ; preds = %exit7
  %68 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %64, i32 0, i32 1
  %69 = bitcast [2 x i64]* %68 to %"Debug::MachO::UUID.22"*
  br label %exit8

next_def:                                         ; preds = %exit7
  %70 = icmp eq i32 0, %66
  br i1 %70, label %current_def9, label %next_def10

exit8:                                            ; preds = %current_def
  %71 = phi %"Debug::MachO::UUID.22"* [ %69, %current_def ]
  %72 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 8
  %73 = load %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %71
  %74 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %72, i32 0, i32 0
  store i32 296, i32* %74
  %75 = getelementptr inbounds %"(Debug::MachO::UUID | Nil)", %"(Debug::MachO::UUID | Nil)"* %72, i32 0, i32 1
  %76 = bitcast [2 x i64]* %75 to %"Debug::MachO::UUID.22"*
  store %"Debug::MachO::UUID.22" %73, %"Debug::MachO::UUID.22"* %76
  br label %exit

current_def9:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def10:                                       ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i32* @"*IO::FileDescriptor+@IO::FileDescriptor#seek<Int64>:IO::FileDescriptor+"(i32* %self, i64 %offset) #0 {
alloca:
  %whence = alloca i32
  %seek_value = alloca i64
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %whence
  call void @"*IO::FileDescriptor+@IO#check_open:Nil"(i32* %self)
  %1 = call i32* @"*IO::FileDescriptor+@IO::Buffered#flush:IO::FileDescriptor+"(i32* %self)
  %2 = bitcast i32* %self to %"IO::FileDescriptor"*
  %3 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 16
  %4 = load i32, i32* %3
  %5 = load i32, i32* %whence
  %6 = call i32 @"*IO::Seek@Enum#to_i32:Int32"(i32 %5)
  %7 = call i64 @lseek(i32 %4, i64 %offset, i32 %6)
  store i64 %7, i64* %seek_value
  %8 = load i64, i64* %seek_value
  %9 = icmp eq i64 %8, -1
  br i1 %9, label %then, label %else

then:                                             ; preds = %entry
  %10 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'Unable to seek'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %10)
  unreachable

else:                                             ; preds = %entry
  %11 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::empty:Slice(UInt8)"(i32 935)
  store %"Slice(UInt8)" %11, %"Slice(UInt8)"* %0
  %12 = bitcast i32* %self to %"IO::FileDescriptor"*
  %13 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %12, i32 0, i32 4
  %14 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %14, %"Slice(UInt8)"* %13
  ret i32* %self
}

; Function Attrs: uwtable
define internal i1 @"*Debug::MachO::LoadCommand@Enum#==<Debug::MachO::LoadCommand>:Bool"(i32 %self, i32 %other) #0 {
entry:
  %0 = icmp eq i32 %self, %other
  ret i1 %0
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*StaticArray(UInt8, 16)@StaticArray(T, N)#to_slice:Slice(UInt8)"([16 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*StaticArray(UInt8, 16)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([16 x i8]* %self)
  %2 = call i32 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#size:Int32"([16 x i8]* %self)
  %3 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %2)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i8* @"*StaticArray(UInt8, 16)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([16 x i8]* %self) #0 {
entry:
  %0 = getelementptr inbounds [16 x i8], [16 x i8]* %self, i32 0, i32 0
  ret i8* %0
}

; Function Attrs: uwtable
define internal i32 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#size:Int32"([16 x i8]* %self) #0 {
entry:
  ret i32 16
}

; Function Attrs: uwtable
define internal %"Debug::MachO::UUID.22" @"*Debug::MachO::UUID::new<StaticArray(UInt8, 16)>:Debug::MachO::UUID"([16 x i8] %bytes) #0 {
alloca:
  %_ = alloca %"Debug::MachO::UUID.22"
  %bytes1 = alloca [16 x i8]
  %0 = alloca %"Debug::MachO::UUID.22"
  br label %entry

entry:                                            ; preds = %alloca
  store [16 x i8] %bytes, [16 x i8]* %bytes1
  %1 = bitcast %"Debug::MachO::UUID.22"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 trunc (i64 mul nuw (i64 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64), i64 16) to i32), i32 4, i1 false)
  %2 = load %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %0
  store %"Debug::MachO::UUID.22" %2, %"Debug::MachO::UUID.22"* %_
  %3 = load [16 x i8], [16 x i8]* %bytes1
  %4 = call [16 x i8] @"*Debug::MachO::UUID#initialize<StaticArray(UInt8, 16)>:StaticArray(UInt8, 16)"(%"Debug::MachO::UUID.22"* %_, [16 x i8] %3)
  %5 = load %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %_
  ret %"Debug::MachO::UUID.22" %5
}

; Function Attrs: uwtable
define internal [16 x i8] @"*Debug::MachO::UUID#initialize<StaticArray(UInt8, 16)>:StaticArray(UInt8, 16)"(%"Debug::MachO::UUID.22"* %self, [16 x i8] %bytes) #0 {
alloca:
  %bytes1 = alloca [16 x i8]
  br label %entry

entry:                                            ; preds = %alloca
  store [16 x i8] %bytes, [16 x i8]* %bytes1
  %0 = getelementptr inbounds %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %self, i32 0, i32 0
  %1 = load [16 x i8], [16 x i8]* %bytes1
  store [16 x i8] %1, [16 x i8]* %0
  %2 = load [16 x i8], [16 x i8]* %bytes1
  ret [16 x i8] %2
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO#skip<UInt32>:Nil"(i32* %self, i32 %bytes_count) #0 {
alloca:
  %buffer = alloca [1024 x i8]
  %read_count = alloca i32
  %bytes_count1 = alloca i32
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %bytes_count, i32* %bytes_count1
  br label %while

while:                                            ; preds = %else, %entry
  %2 = load i32, i32* %bytes_count1
  %3 = icmp ugt i32 %2, 0
  %4 = or i1 false, %3
  br i1 %4, label %body, label %exit

body:                                             ; preds = %while
  %5 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 1024)@StaticArray(T, N)#to_slice:Slice(UInt8)"([1024 x i8]* %buffer)
  store %"Slice(UInt8)" %5, %"Slice(UInt8)"* %0
  %6 = load i32, i32* %bytes_count1
  %7 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, UInt32>:Slice(UInt8)"(%"Slice(UInt8)"* %0, i32 0, i32 %6)
  store %"Slice(UInt8)" %7, %"Slice(UInt8)"* %1
  %8 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  %9 = call i32 @"*IO::FileDescriptor+@IO::Buffered#read<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %8)
  store i32 %9, i32* %read_count
  %10 = load i32, i32* %read_count
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %then, label %else

exit:                                             ; preds = %while
  ret void

then:                                             ; preds = %body
  %12 = call %"IO::EOFError"* @"*IO::EOFError::new:IO::EOFError"()
  call void @"*raise<IO::EOFError>:NoReturn"(%"IO::EOFError"* %12)
  unreachable

else:                                             ; preds = %body
  %13 = load i32, i32* %bytes_count1
  %14 = load i32, i32* %read_count
  %15 = sub i32 %13, %14
  store i32 %15, i32* %bytes_count1
  br label %while
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, UInt32>:Slice(UInt8)"(%"Slice(UInt8)"* %self, i32 %start, i32 %count) #0 {
alloca:
  %__temp_99 = alloca i1
  %__temp_100 = alloca i1
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = icmp sle i32 0, %start
  store i1 %1, i1* %__temp_99
  br i1 %1, label %then1, label %else2

then:                                             ; preds = %exit
  br label %exit3

else:                                             ; preds = %exit
  %2 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %2)
  unreachable

then1:                                            ; preds = %entry
  %3 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = icmp sle i32 %start, %4
  br label %exit

else2:                                            ; preds = %entry
  %6 = load i1, i1* %__temp_99
  br label %exit

exit:                                             ; preds = %else2, %then1
  %7 = phi i1 [ %5, %then1 ], [ %6, %else2 ]
  br i1 %7, label %then, label %else

exit3:                                            ; preds = %then
  %8 = icmp ule i32 0, %count
  %9 = or i1 true, %8
  store i1 %9, i1* %__temp_100
  br i1 %9, label %then6, label %else7

then4:                                            ; preds = %exit8
  br label %exit9

else5:                                            ; preds = %exit8
  %10 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %10)
  unreachable

then6:                                            ; preds = %exit3
  %11 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %12 = load i32, i32* %11
  %13 = sub i32 %12, %start
  %14 = icmp sge i32 %13, 0
  %15 = icmp ule i32 %count, %13
  %16 = and i1 %14, %15
  br label %exit8

else7:                                            ; preds = %exit3
  %17 = load i1, i1* %__temp_100
  br label %exit8

exit8:                                            ; preds = %else7, %then6
  %18 = phi i1 [ %16, %then6 ], [ %17, %else7 ]
  br i1 %18, label %then4, label %else5

exit9:                                            ; preds = %then4
  %19 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %20 = load i8*, i8** %19
  %21 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %20, i32 %start)
  %22 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), UInt32>:Slice(UInt8)"(i8* %21, i32 %count)
  store %"Slice(UInt8)" %22, %"Slice(UInt8)"* %0
  %23 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %23
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), UInt32>:Slice(UInt8)"(i8* %pointer, i32 %size) #0 {
alloca:
  %_ = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Slice(UInt8)"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Slice(UInt8)"* getelementptr (%"Slice(UInt8)", %"Slice(UInt8)"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %2, %"Slice(UInt8)"* %_
  %3 = call i32 @"*Slice(UInt8)@Slice(T)#initialize<Pointer(UInt8), UInt32>:Int32"(%"Slice(UInt8)"* %_, i8* %pointer, i32 %size)
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %_
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i32 @"*Slice(UInt8)@Slice(T)#initialize<Pointer(UInt8), UInt32>:Int32"(%"Slice(UInt8)"* %self, i8* %pointer, i32 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  store i8* %pointer, i8** %0
  %1 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  store i32 %size, i32* %1
  ret i32 %size
}

; Function Attrs: uwtable
define internal i1 @"*Debug::MachO::UUID#==<Debug::MachO::UUID>:Bool"(%"Debug::MachO::UUID.22"* %self, %"Debug::MachO::UUID.22" %other) #0 {
alloca:
  %other1 = alloca %"Debug::MachO::UUID.22"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::UUID.22" %other, %"Debug::MachO::UUID.22"* %other1
  %0 = getelementptr inbounds %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %self, i32 0, i32 0
  %1 = getelementptr inbounds %"Debug::MachO::UUID.22", %"Debug::MachO::UUID.22"* %other1, i32 0, i32 0
  %2 = load [16 x i8], [16 x i8]* %1
  %3 = call i1 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#==<StaticArray(UInt8, 16)>:Bool"([16 x i8]* %0, [16 x i8] %2)
  ret i1 %3
}

; Function Attrs: uwtable
define internal i1 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#==<StaticArray(UInt8, 16)>:Bool"([16 x i8]* %self, [16 x i8] %other) #0 {
alloca:
  %other1 = alloca [16 x i8]
  %e = alloca i8
  %i = alloca i32
  %offset = alloca i32
  %i2 = alloca i32
  %elem = alloca i8
  %i3 = alloca i32
  %i4 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store [16 x i8] %other, [16 x i8]* %other1
  %0 = call i32 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#size:Int32"([16 x i8]* %self)
  %1 = call i32 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#size:Int32"([16 x i8]* %other1)
  %2 = icmp eq i32 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  ret i1 false

exit:                                             ; preds = %then
  store i32 0, i32* %offset
  %3 = load i32, i32* %offset
  store i32 %3, i32* %i2
  store i32 0, i32* %i4
  br label %while

while:                                            ; preds = %exit8, %exit
  %4 = load i32, i32* %i4
  %5 = call i32 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#size:Int32"([16 x i8]* %self)
  %6 = icmp slt i32 %4, %5
  br i1 %6, label %body, label %exit5

body:                                             ; preds = %while
  %7 = load i32, i32* %i4
  store i32 %7, i32* %i3
  %8 = load i32, i32* %i3
  %9 = call i8 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#unsafe_at<Int32>:UInt8"([16 x i8]* %self, i32 %8)
  store i8 %9, i8* %elem
  %10 = load i8, i8* %elem
  %11 = load i32, i32* %i2
  store i8 %10, i8* %e
  store i32 %11, i32* %i
  %12 = load i8, i8* %e
  %13 = load i32, i32* %i
  %14 = call i8 @"*StaticArray(UInt8, 16)@Indexable(T)#[]<Int32>:UInt8"([16 x i8]* %other1, i32 %13)
  %15 = icmp eq i8 %12, %14
  br i1 %15, label %then6, label %else7

exit5:                                            ; preds = %while
  ret i1 true

then6:                                            ; preds = %body
  br label %exit8

else7:                                            ; preds = %body
  ret i1 false

exit8:                                            ; preds = %then6
  %16 = load i32, i32* %i2
  %17 = add i32 %16, 1
  store i32 %17, i32* %i2
  %18 = load i32, i32* %i4
  %19 = add i32 %18, 1
  store i32 %19, i32* %i4
  br label %while
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#unsafe_at<Int32>:UInt8"([16 x i8]* %self, i32 %index) #4 {
entry:
  %0 = call i8* @"*StaticArray(UInt8, 16)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([16 x i8]* %self)
  %1 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %0, i32 %index)
  ret i8 %1
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*StaticArray(UInt8, 16)@Indexable(T)#[]<Int32>:UInt8"([16 x i8]* %self, i32 %index) #4 {
entry:
  %0 = call i8 @"*StaticArray(UInt8, 16)@Indexable(T)#at<Int32>:UInt8"([16 x i8]* %self, i32 %index)
  ret i8 %0
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*StaticArray(UInt8, 16)@Indexable(T)#at<Int32>:UInt8"([16 x i8]* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_101 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  store i32 %0, i32* %index2
  %1 = load i32, i32* %index2
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i32, i32* %index2
  %4 = call i32 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#size:Int32"([16 x i8]* %self)
  %5 = add i32 %3, %4
  store i32 %5, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = load i32, i32* %index2
  %7 = icmp sle i32 0, %6
  store i1 %7, i1* %__temp_101
  br i1 %7, label %then5, label %else6

then3:                                            ; preds = %exit7
  %8 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  %9 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %9)
  unreachable

then5:                                            ; preds = %exit
  %10 = load i32, i32* %index2
  %11 = call i32 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#size:Int32"([16 x i8]* %self)
  %12 = icmp slt i32 %10, %11
  br label %exit7

else6:                                            ; preds = %exit
  %13 = load i1, i1* %__temp_101
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %14 = phi i1 [ %12, %then5 ], [ %13, %else6 ]
  br i1 %14, label %then3, label %else4

exit8:                                            ; preds = %then3
  %15 = phi i32 [ %8, %then3 ]
  store i32 %15, i32* %index1
  %16 = load i32, i32* %index1
  %17 = call i8 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#unsafe_at<Int32>:UInt8"([16 x i8]* %self, i32 %16)
  ret i8 %17
}

; Function Attrs: uwtable
define internal %"Array(Debug::MachO::Section64)"* @"*Debug::MachO#sections:Array(Debug::MachO::Section64)"(%"Debug::MachO"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 14
  %1 = load %"Array(Debug::MachO::Section64)"*, %"Array(Debug::MachO::Section64)"** %0
  %2 = call i1 @"*Array(Debug::MachO::Section64)@Indexable(T)#empty?:Bool"(%"Array(Debug::MachO::Section64)"* %1)
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  call void @"*Debug::MachO#read_segments_and_sections:Nil"(%"Debug::MachO"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %3 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 14
  %4 = load %"Array(Debug::MachO::Section64)"*, %"Array(Debug::MachO::Section64)"** %3
  ret %"Array(Debug::MachO::Section64)"* %4
}

; Function Attrs: uwtable
define internal i1 @"*Array(Debug::MachO::Section64)@Indexable(T)#empty?:Bool"(%"Array(Debug::MachO::Section64)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  ret i1 %2
}

; Function Attrs: uwtable
define internal void @"*Debug::MachO#read_segments_and_sections:Nil"(%"Debug::MachO"* %self) #0 {
alloca:
  %cmd = alloca i32
  %cmdsize = alloca i32
  %segment = alloca %"Debug::MachO::Segment64"
  %load_command = alloca i32
  %cmd1 = alloca i32
  %cmdsize2 = alloca i32
  %i = alloca i32
  %0 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %2 = alloca %"Debug::MachO::Segment64"
  %3 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %4 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %5 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %6 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %7 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %8 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %9 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %10 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %section = alloca %"Debug::MachO::Section64"
  %i3 = alloca i32
  %11 = alloca %"Debug::MachO::Section64"
  %12 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %13 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %14 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %15 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %16 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %17 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  %18 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 25, i32* %load_command
  %19 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %20 = load i32*, i32** %19
  %21 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 7
  %22 = load i64, i64* %21
  %23 = call i32* @"*IO::FileDescriptor+@IO::FileDescriptor#seek<Int64>:IO::FileDescriptor+"(i32* %20, i64 %22)
  %24 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 4
  %25 = load i32, i32* %24
  %26 = xor i32 %25, %25
  store i32 %26, i32* %i
  br label %while

while:                                            ; preds = %exit7, %entry
  %27 = load i32, i32* %i
  %28 = icmp ult i32 %27, %25
  br i1 %28, label %body, label %exit

body:                                             ; preds = %while
  %29 = load i32, i32* %i
  %30 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %31 = load i32*, i32** %30
  %32 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %32, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %0
  %33 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %0
  %34 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %31, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %33)
  store i32 %34, i32* %cmd1
  %35 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %36 = load i32*, i32** %35
  %37 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %37, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %1
  %38 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %1
  %39 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %36, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %38)
  store i32 %39, i32* %cmdsize2
  %40 = load i32, i32* %cmd1
  %41 = load i32, i32* %load_command
  %42 = call i1 @"*Debug::MachO::LoadCommand@Enum#==<Debug::MachO::LoadCommand>:Bool"(i32 %40, i32 %41)
  br i1 %42, label %then, label %else

exit:                                             ; preds = %while
  ret void

then:                                             ; preds = %body
  %43 = load i32, i32* %cmd1
  %44 = load i32, i32* %cmdsize2
  store i32 %43, i32* %cmd
  store i32 %44, i32* %cmdsize
  %45 = call %"Debug::MachO::Segment64" @"*Debug::MachO::Segment64::new:Debug::MachO::Segment64"()
  store %"Debug::MachO::Segment64" %45, %"Debug::MachO::Segment64"* %2
  %46 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %2
  store %"Debug::MachO::Segment64" %46, %"Debug::MachO::Segment64"* %segment
  %47 = call %String* @"*Debug::MachO#read_name:String"(%"Debug::MachO"* %self)
  %48 = call %String* @"*Debug::MachO::Segment64#segname=<String>:String"(%"Debug::MachO::Segment64"* %segment, %String* %47)
  %49 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %50 = load i32*, i32** %49
  %51 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %51, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %3
  %52 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %3
  %53 = call i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %50, i32 611, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %52)
  %54 = call i64 @"*Debug::MachO::Segment64#vmaddr=<UInt64>:UInt64"(%"Debug::MachO::Segment64"* %segment, i64 %53)
  %55 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %56 = load i32*, i32** %55
  %57 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %57, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %4
  %58 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %4
  %59 = call i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %56, i32 611, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %58)
  %60 = call i64 @"*Debug::MachO::Segment64#vmsize=<UInt64>:UInt64"(%"Debug::MachO::Segment64"* %segment, i64 %59)
  %61 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %62 = load i32*, i32** %61
  %63 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %63, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %5
  %64 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %5
  %65 = call i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %62, i32 611, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %64)
  %66 = call i64 @"*Debug::MachO::Segment64#fileoff=<UInt64>:UInt64"(%"Debug::MachO::Segment64"* %segment, i64 %65)
  %67 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %68 = load i32*, i32** %67
  %69 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %69, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %6
  %70 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %6
  %71 = call i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %68, i32 611, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %70)
  %72 = call i64 @"*Debug::MachO::Segment64#filesize=<UInt64>:UInt64"(%"Debug::MachO::Segment64"* %segment, i64 %71)
  %73 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %74 = load i32*, i32** %73
  %75 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %75, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %7
  %76 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %7
  %77 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %74, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %76)
  %78 = call i32 @"*Debug::MachO::Segment64#maxprot=<UInt32>:UInt32"(%"Debug::MachO::Segment64"* %segment, i32 %77)
  %79 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %80 = load i32*, i32** %79
  %81 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %81, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %8
  %82 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %8
  %83 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %80, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %82)
  %84 = call i32 @"*Debug::MachO::Segment64#initprot=<UInt32>:UInt32"(%"Debug::MachO::Segment64"* %segment, i32 %83)
  %85 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %86 = load i32*, i32** %85
  %87 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %87, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %9
  %88 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %9
  %89 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %86, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %88)
  %90 = call i32 @"*Debug::MachO::Segment64#nsects=<UInt32>:UInt32"(%"Debug::MachO::Segment64"* %segment, i32 %89)
  %91 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %92 = load i32*, i32** %91
  %93 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %93, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %10
  %94 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %10
  %95 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %92, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %94)
  %96 = call i32 @"*Debug::MachO::Segment64#flags=<UInt32>:UInt32"(%"Debug::MachO::Segment64"* %segment, i32 %95)
  %97 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 13
  %98 = load %"Array(Debug::MachO::Segment64)"*, %"Array(Debug::MachO::Segment64)"** %97
  %99 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %segment
  %100 = call %"Array(Debug::MachO::Segment64)"* @"*Array(Debug::MachO::Segment64)@Array(T)#<<<Debug::MachO::Segment64>:Array(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %98, %"Debug::MachO::Segment64" %99)
  %101 = call i32 @"*Debug::MachO::Segment64#nsects:UInt32"(%"Debug::MachO::Segment64"* %segment)
  %102 = xor i32 %101, %101
  store i32 %102, i32* %i3
  br label %while4

else:                                             ; preds = %body
  %103 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %104 = load i32*, i32** %103
  %105 = load i32, i32* %cmdsize2
  %106 = sub i32 %105, 8
  call void @"*IO::FileDescriptor+@IO#skip<UInt32>:Nil"(i32* %104, i32 %106)
  br label %exit7

while4:                                           ; preds = %body5, %then
  %107 = load i32, i32* %i3
  %108 = icmp ult i32 %107, %101
  br i1 %108, label %body5, label %exit6

body5:                                            ; preds = %while4
  %109 = load i32, i32* %i3
  %110 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %segment
  %111 = call %"Debug::MachO::Section64" @"*Debug::MachO::Section64::new<Debug::MachO::Segment64>:Debug::MachO::Section64"(%"Debug::MachO::Segment64" %110)
  store %"Debug::MachO::Section64" %111, %"Debug::MachO::Section64"* %11
  %112 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %11
  store %"Debug::MachO::Section64" %112, %"Debug::MachO::Section64"* %section
  %113 = call %String* @"*Debug::MachO#read_name:String"(%"Debug::MachO"* %self)
  %114 = call %String* @"*Debug::MachO::Section64#sectname=<String>:String"(%"Debug::MachO::Section64"* %section, %String* %113)
  %115 = call %String* @"*Debug::MachO#read_name:String"(%"Debug::MachO"* %self)
  %116 = call %String* @"*Debug::MachO::Section64#segname=<String>:String"(%"Debug::MachO::Section64"* %section, %String* %115)
  %117 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %118 = load i32*, i32** %117
  %119 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %119, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %12
  %120 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %12
  %121 = call i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %118, i32 611, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %120)
  %122 = call i64 @"*Debug::MachO::Section64#addr=<UInt64>:UInt64"(%"Debug::MachO::Section64"* %section, i64 %121)
  %123 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %124 = load i32*, i32** %123
  %125 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %125, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %13
  %126 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %13
  %127 = call i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %124, i32 611, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %126)
  %128 = call i64 @"*Debug::MachO::Section64#size=<UInt64>:UInt64"(%"Debug::MachO::Section64"* %section, i64 %127)
  %129 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %130 = load i32*, i32** %129
  %131 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %131, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %14
  %132 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %14
  %133 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %130, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %132)
  %134 = call i32 @"*Debug::MachO::Section64#offset=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %section, i32 %133)
  %135 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %136 = load i32*, i32** %135
  %137 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %137, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %15
  %138 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %15
  %139 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %136, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %138)
  %140 = call i32 @"*Debug::MachO::Section64#align=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %section, i32 %139)
  %141 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %142 = load i32*, i32** %141
  %143 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %143, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %16
  %144 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %16
  %145 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %142, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %144)
  %146 = call i32 @"*Debug::MachO::Section64#reloff=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %section, i32 %145)
  %147 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %148 = load i32*, i32** %147
  %149 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %149, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %17
  %150 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %17
  %151 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %148, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %150)
  %152 = call i32 @"*Debug::MachO::Section64#nreloc=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %section, i32 %151)
  %153 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %154 = load i32*, i32** %153
  %155 = call %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" @"*Debug::MachO#endianness:(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"(%"Debug::MachO"* %self)
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %155, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %18
  %156 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %18
  %157 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt32"(i32* %154, i32 609, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %156)
  %158 = call i32 @"*Debug::MachO::Section64#flags=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %section, i32 %157)
  %159 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %160 = load i32*, i32** %159
  call void @"*IO::FileDescriptor+@IO#skip<Int32>:Nil"(i32* %160, i32 12)
  %161 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 14
  %162 = load %"Array(Debug::MachO::Section64)"*, %"Array(Debug::MachO::Section64)"** %161
  %163 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %section
  %164 = call %"Array(Debug::MachO::Section64)"* @"*Array(Debug::MachO::Section64)@Array(T)#<<<Debug::MachO::Section64>:Array(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %162, %"Debug::MachO::Section64" %163)
  %165 = load i32, i32* %i3
  %166 = add i32 %165, 1
  store i32 %166, i32* %i3
  br label %while4

exit6:                                            ; preds = %while4
  br label %exit7

exit7:                                            ; preds = %else, %exit6
  %167 = load i32, i32* %i
  %168 = add i32 %167, 1
  store i32 %168, i32* %i
  br label %while
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64" @"*Debug::MachO::Segment64::new:Debug::MachO::Segment64"() #0 {
alloca:
  %x = alloca %"Debug::MachO::Segment64"
  %0 = alloca %"Debug::MachO::Segment64"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Debug::MachO::Segment64"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Debug::MachO::Segment64"* getelementptr (%"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %0
  store %"Debug::MachO::Segment64" %2, %"Debug::MachO::Segment64"* %x
  %3 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %x
  ret %"Debug::MachO::Segment64" %3
}

; Function Attrs: uwtable
define internal %String* @"*Debug::MachO#read_name:String"(%"Debug::MachO"* %self) #0 {
alloca:
  %bytes = alloca [16 x i8]
  %len = alloca i32
  %__temp_102 = alloca i1
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Debug::MachO", %"Debug::MachO"* %self, i32 0, i32 12
  %2 = load i32*, i32** %1
  %3 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 16)@StaticArray(T, N)#to_slice:Slice(UInt8)"([16 x i8]* %bytes)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %5 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %2, %"Slice(UInt8)" %4)
  %6 = call i32 @"*StaticArray(UInt8, 16)@StaticArray(T, N)#size:Int32"([16 x i8]* %bytes)
  store i32 %6, i32* %len
  br label %while

while:                                            ; preds = %body, %entry
  %7 = load i32, i32* %len
  %8 = icmp sgt i32 %7, 0
  store i1 %8, i1* %__temp_102
  br i1 %8, label %then, label %else

body:                                             ; preds = %exit1
  %9 = load i32, i32* %len
  %10 = sub i32 %9, 1
  store i32 %10, i32* %len
  br label %while

exit:                                             ; preds = %exit1
  %11 = call i8* @"*StaticArray(UInt8, 16)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([16 x i8]* %bytes)
  %12 = load i32, i32* %len
  %13 = call %String* @"*String::new<Pointer(UInt8), Int32>:String"(i8* %11, i32 %12)
  ret %String* %13

then:                                             ; preds = %while
  %14 = load i32, i32* %len
  %15 = sub i32 %14, 1
  %16 = call i8 @"*StaticArray(UInt8, 16)@Indexable(T)#[]<Int32>:UInt8"([16 x i8]* %bytes, i32 %15)
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, 0
  br label %exit1

else:                                             ; preds = %while
  %19 = load i1, i1* %__temp_102
  br label %exit1

exit1:                                            ; preds = %else, %then
  %20 = phi i1 [ %18, %then ], [ %19, %else ]
  br i1 %20, label %body, label %exit
}

; Function Attrs: uwtable
define internal %String* @"*String::new<Pointer(UInt8), Int32>:String"(i8* %chars, i32 %bytesize) #0 {
alloca:
  %size = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %size
  %0 = load i32, i32* %size
  %1 = call %String* @"*String::new<Pointer(UInt8), Int32, Int32>:String"(i8* %chars, i32 %bytesize, i32 %0)
  ret %String* %1
}

; Function Attrs: uwtable
define internal %String* @"*Debug::MachO::Segment64#segname=<String>:String"(%"Debug::MachO::Segment64"* %self, %String* %segname) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 0
  store %String* %segname, %String** %0
  ret %String* %segname
}

; Function Attrs: uwtable
define internal i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %self, i32 %type, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format) #0 {
alloca:
  %format1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %0 = load %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %1 = call i64 @"*UInt64@Int::from_io<IO::FileDescriptor+, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %self, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %0)
  ret i64 %1
}

; Function Attrs: uwtable
define internal i64 @"*UInt64@Int::from_io<IO::FileDescriptor+, (IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)>:UInt64"(i32* %io, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format) #0 {
alloca:
  %format1 = alloca %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)" %format, %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1
  %0 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 0
  %1 = load i32, i32* %0
  %2 = load i32, i32* %io
  %3 = icmp eq i32 1011, %1
  %4 = call i1 @"~match<IO::FileDescriptor+>"(i32 %2)
  %5 = and i1 %3, %4
  br i1 %5, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %6 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to i32*
  %8 = load i32, i32* %7
  %9 = call i64 @"*IO::ByteFormat::BigEndian::decode<UInt64:Class, IO::FileDescriptor+>:UInt64"(i32 611, i32* %io)
  br label %exit

next_def:                                         ; preds = %entry
  %10 = icmp eq i32 1009, %1
  %11 = call i1 @"~match<IO::FileDescriptor+>"(i32 %2)
  %12 = and i1 %10, %11
  br i1 %12, label %current_def2, label %next_def3

exit:                                             ; preds = %current_def2, %current_def
  %13 = phi i64 [ %9, %current_def ], [ %17, %current_def2 ]
  ret i64 %13

current_def2:                                     ; preds = %next_def
  %14 = getelementptr inbounds %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)", %"(IO::ByteFormat::BigEndian:Module | IO::ByteFormat::LittleEndian:Module)"* %format1, i32 0, i32 1
  %15 = bitcast [1 x i64]* %14 to i32*
  %16 = load i32, i32* %15
  %17 = call i64 @"*IO::ByteFormat::LittleEndian::decode<UInt64:Class, IO::FileDescriptor+>:UInt64"(i32 611, i32* %io)
  br label %exit

next_def3:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i64 @"*IO::ByteFormat::BigEndian::decode<UInt64:Class, IO::FileDescriptor+>:UInt64"(i32 %type, i32* %io) #0 {
alloca:
  %buffer = alloca [8 x i8]
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 8)@StaticArray(T, N)#to_slice:Slice(UInt8)"([8 x i8]* %buffer)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %2)
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::BigEndian:Module>:Bool"(i32 1011)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [8 x i8] @"*StaticArray(UInt8, 8)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 8)"([8 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i8* @"*StaticArray(UInt8, 8)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([8 x i8]* %buffer)
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7
  ret i64 %8
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*StaticArray(UInt8, 8)@StaticArray(T, N)#to_slice:Slice(UInt8)"([8 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*StaticArray(UInt8, 8)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([8 x i8]* %self)
  %2 = call i32 @"*StaticArray(UInt8, 8)@StaticArray(T, N)#size:Int32"([8 x i8]* %self)
  %3 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %2)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i8* @"*StaticArray(UInt8, 8)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([8 x i8]* %self) #0 {
entry:
  %0 = getelementptr inbounds [8 x i8], [8 x i8]* %self, i32 0, i32 0
  ret i8* %0
}

; Function Attrs: uwtable
define internal i32 @"*StaticArray(UInt8, 8)@StaticArray(T, N)#size:Int32"([8 x i8]* %self) #0 {
entry:
  ret i32 8
}

; Function Attrs: uwtable
define internal [8 x i8] @"*StaticArray(UInt8, 8)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 8)"([8 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 8)@StaticArray(T, N)#to_slice:Slice(UInt8)"([8 x i8]* %self)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#reverse!:Slice(UInt8)"(%"Slice(UInt8)"* %0)
  %3 = load [8 x i8], [8 x i8]* %self
  ret [8 x i8] %3
}

; Function Attrs: uwtable
define internal i64 @"*IO::ByteFormat::LittleEndian::decode<UInt64:Class, IO::FileDescriptor+>:UInt64"(i32 %type, i32* %io) #0 {
alloca:
  %buffer = alloca [8 x i8]
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 8)@StaticArray(T, N)#to_slice:Slice(UInt8)"([8 x i8]* %buffer)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %2)
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::LittleEndian:Module>:Bool"(i32 1009)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [8 x i8] @"*StaticArray(UInt8, 8)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 8)"([8 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i8* @"*StaticArray(UInt8, 8)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([8 x i8]* %buffer)
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7
  ret i64 %8
}

; Function Attrs: uwtable
define internal i64 @"*Debug::MachO::Segment64#vmaddr=<UInt64>:UInt64"(%"Debug::MachO::Segment64"* %self, i64 %vmaddr) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 1
  %1 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 0
  store i32 141, i32* %1
  %2 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i64*
  store i64 %vmaddr, i64* %3
  ret i64 %vmaddr
}

; Function Attrs: uwtable
define internal i64 @"*Debug::MachO::Segment64#vmsize=<UInt64>:UInt64"(%"Debug::MachO::Segment64"* %self, i64 %vmsize) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 2
  %1 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 0
  store i32 141, i32* %1
  %2 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i64*
  store i64 %vmsize, i64* %3
  ret i64 %vmsize
}

; Function Attrs: uwtable
define internal i64 @"*Debug::MachO::Segment64#fileoff=<UInt64>:UInt64"(%"Debug::MachO::Segment64"* %self, i64 %fileoff) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 3
  %1 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 0
  store i32 141, i32* %1
  %2 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i64*
  store i64 %fileoff, i64* %3
  ret i64 %fileoff
}

; Function Attrs: uwtable
define internal i64 @"*Debug::MachO::Segment64#filesize=<UInt64>:UInt64"(%"Debug::MachO::Segment64"* %self, i64 %filesize) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 4
  %1 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 0
  store i32 141, i32* %1
  %2 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i64*
  store i64 %filesize, i64* %3
  ret i64 %filesize
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Segment64#maxprot=<UInt32>:UInt32"(%"Debug::MachO::Segment64"* %self, i32 %maxprot) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 5
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %maxprot, i32* %3
  ret i32 %maxprot
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Segment64#initprot=<UInt32>:UInt32"(%"Debug::MachO::Segment64"* %self, i32 %initprot) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 6
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %initprot, i32* %3
  ret i32 %initprot
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Segment64#nsects=<UInt32>:UInt32"(%"Debug::MachO::Segment64"* %self, i32 %nsects) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 7
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %nsects, i32* %3
  ret i32 %nsects
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Segment64#flags=<UInt32>:UInt32"(%"Debug::MachO::Segment64"* %self, i32 %flags) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 8
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %flags, i32* %3
  ret i32 %flags
}

; Function Attrs: uwtable
define internal %"Array(Debug::MachO::Segment64)"* @"*Array(Debug::MachO::Segment64)@Array(T)#<<<Debug::MachO::Segment64>:Array(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %self, %"Debug::MachO::Segment64" %value) #0 {
alloca:
  %value1 = alloca %"Debug::MachO::Segment64"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::Segment64" %value, %"Debug::MachO::Segment64"* %value1
  %0 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %value1
  %1 = call %"Array(Debug::MachO::Segment64)"* @"*Array(Debug::MachO::Segment64)@Array(T)#push<Debug::MachO::Segment64>:Array(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %self, %"Debug::MachO::Segment64" %0)
  ret %"Array(Debug::MachO::Segment64)"* %1
}

; Function Attrs: uwtable
define internal %"Array(Debug::MachO::Segment64)"* @"*Array(Debug::MachO::Segment64)@Array(T)#push<Debug::MachO::Segment64>:Array(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %self, %"Debug::MachO::Segment64" %value) #0 {
alloca:
  %value1 = alloca %"Debug::MachO::Segment64"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::Segment64" %value, %"Debug::MachO::Segment64"* %value1
  %0 = call %"Debug::MachO::Segment64"* @"*Array(Debug::MachO::Segment64)@Array(T)#check_needs_resize:(Pointer(Debug::MachO::Segment64) | Nil)"(%"Array(Debug::MachO::Segment64)"* %self)
  %1 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 3
  %2 = load %"Debug::MachO::Segment64"*, %"Debug::MachO::Segment64"** %1
  %3 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %value1
  %6 = call %"Debug::MachO::Segment64" @"*Pointer(Debug::MachO::Segment64)@Pointer(T)#[]=<Int32, Debug::MachO::Segment64>:Debug::MachO::Segment64"(%"Debug::MachO::Segment64"* %2, i32 %4, %"Debug::MachO::Segment64" %5)
  %7 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = add i32 %8, 1
  %10 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 1
  store i32 %9, i32* %10
  ret %"Array(Debug::MachO::Segment64)"* %self
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64"* @"*Array(Debug::MachO::Segment64)@Array(T)#check_needs_resize:(Pointer(Debug::MachO::Segment64) | Nil)"(%"Array(Debug::MachO::Segment64)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %"Debug::MachO::Segment64"* @"*Array(Debug::MachO::Segment64)@Array(T)#double_capacity:Pointer(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi %"Debug::MachO::Segment64"* [ %5, %then ], [ null, %else ]
  ret %"Debug::MachO::Segment64"* %6
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64"* @"*Array(Debug::MachO::Segment64)@Array(T)#double_capacity:Pointer(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call %"Debug::MachO::Segment64"* @"*Array(Debug::MachO::Segment64)@Array(T)#resize_to_capacity<Int32>:Pointer(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %self, i32 %6)
  ret %"Debug::MachO::Segment64"* %7
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64"* @"*Array(Debug::MachO::Segment64)@Array(T)#resize_to_capacity<Int32>:Pointer(Debug::MachO::Segment64)"(%"Array(Debug::MachO::Segment64)"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 3
  %2 = load %"Debug::MachO::Segment64"*, %"Debug::MachO::Segment64"** %1
  %3 = icmp ne %"Debug::MachO::Segment64"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 3
  %5 = load %"Debug::MachO::Segment64"*, %"Debug::MachO::Segment64"** %4
  %6 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call %"Debug::MachO::Segment64"* @"*Pointer(Debug::MachO::Segment64)@Pointer(T)#realloc<Int32>:Pointer(Debug::MachO::Segment64)"(%"Debug::MachO::Segment64"* %5, i32 %7)
  %9 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 3
  store %"Debug::MachO::Segment64"* %8, %"Debug::MachO::Segment64"** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call %"Debug::MachO::Segment64"* @"*Pointer(Debug::MachO::Segment64)@Pointer(T)::malloc<Int32>:Pointer(Debug::MachO::Segment64)"(i32 686, i32 %11)
  %13 = getelementptr inbounds %"Array(Debug::MachO::Segment64)", %"Array(Debug::MachO::Segment64)"* %self, i32 0, i32 3
  store %"Debug::MachO::Segment64"* %12, %"Debug::MachO::Segment64"** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi %"Debug::MachO::Segment64"* [ %8, %then ], [ %12, %else ]
  ret %"Debug::MachO::Segment64"* %14
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64"* @"*Pointer(Debug::MachO::Segment64)@Pointer(T)#realloc<Int32>:Pointer(Debug::MachO::Segment64)"(%"Debug::MachO::Segment64"* %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Debug::MachO::Segment64"* %self to i8*
  %2 = mul i64 %0, ptrtoint (%"Debug::MachO::Segment64"* getelementptr (%"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Debug::MachO::Segment64"*
  ret %"Debug::MachO::Segment64"* %5
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64"* @"*Pointer(Debug::MachO::Segment64)@Pointer(T)::malloc<Int32>:Pointer(Debug::MachO::Segment64)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (%"Debug::MachO::Segment64"* getelementptr (%"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Debug::MachO::Segment64"*
  ret %"Debug::MachO::Segment64"* %6
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64" @"*Pointer(Debug::MachO::Segment64)@Pointer(T)#[]=<Int32, Debug::MachO::Segment64>:Debug::MachO::Segment64"(%"Debug::MachO::Segment64"* %self, i32 %offset, %"Debug::MachO::Segment64" %value) #0 {
alloca:
  %value1 = alloca %"Debug::MachO::Segment64"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::Segment64" %value, %"Debug::MachO::Segment64"* %value1
  %0 = call %"Debug::MachO::Segment64"* @"*Pointer(Debug::MachO::Segment64)@Pointer(T)#+<Int32>:Pointer(Debug::MachO::Segment64)"(%"Debug::MachO::Segment64"* %self, i32 %offset)
  %1 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %value1
  store %"Debug::MachO::Segment64" %1, %"Debug::MachO::Segment64"* %0
  %2 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %value1
  ret %"Debug::MachO::Segment64" %2
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64"* @"*Pointer(Debug::MachO::Segment64)@Pointer(T)#+<Int32>:Pointer(Debug::MachO::Segment64)"(%"Debug::MachO::Segment64"* %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i64 %0
  ret %"Debug::MachO::Segment64"* %1
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Segment64#nsects:UInt32"(%"Debug::MachO::Segment64"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %self, i32 0, i32 7
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 139, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i32*
  %6 = load i32, i32* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i32 [ %6, %current_def ]
  ret i32 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64" @"*Debug::MachO::Section64::new<Debug::MachO::Segment64>:Debug::MachO::Section64"(%"Debug::MachO::Segment64" %segment) #0 {
alloca:
  %_ = alloca %"Debug::MachO::Section64"
  %segment1 = alloca %"Debug::MachO::Segment64"
  %0 = alloca %"Debug::MachO::Section64"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::Segment64" %segment, %"Debug::MachO::Segment64"* %segment1
  %1 = bitcast %"Debug::MachO::Section64"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Debug::MachO::Section64"* getelementptr (%"Debug::MachO::Section64", %"Debug::MachO::Section64"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %0
  store %"Debug::MachO::Section64" %2, %"Debug::MachO::Section64"* %_
  %3 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %segment1
  %4 = call %"Debug::MachO::Segment64" @"*Debug::MachO::Section64#initialize<Debug::MachO::Segment64>:Debug::MachO::Segment64"(%"Debug::MachO::Section64"* %_, %"Debug::MachO::Segment64" %3)
  %5 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %_
  ret %"Debug::MachO::Section64" %5
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Segment64" @"*Debug::MachO::Section64#initialize<Debug::MachO::Segment64>:Debug::MachO::Segment64"(%"Debug::MachO::Section64"* %self, %"Debug::MachO::Segment64" %segment) #0 {
alloca:
  %segment1 = alloca %"Debug::MachO::Segment64"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::Segment64" %segment, %"Debug::MachO::Segment64"* %segment1
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 0
  %1 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %segment1
  store %"Debug::MachO::Segment64" %1, %"Debug::MachO::Segment64"* %0
  %2 = load %"Debug::MachO::Segment64", %"Debug::MachO::Segment64"* %segment1
  ret %"Debug::MachO::Segment64" %2
}

; Function Attrs: uwtable
define internal %String* @"*Debug::MachO::Section64#sectname=<String>:String"(%"Debug::MachO::Section64"* %self, %String* %sectname) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 1
  store %String* %sectname, %String** %0
  ret %String* %sectname
}

; Function Attrs: uwtable
define internal %String* @"*Debug::MachO::Section64#segname=<String>:String"(%"Debug::MachO::Section64"* %self, %String* %segname) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 2
  store %String* %segname, %String** %0
  ret %String* %segname
}

; Function Attrs: uwtable
define internal i64 @"*Debug::MachO::Section64#addr=<UInt64>:UInt64"(%"Debug::MachO::Section64"* %self, i64 %addr) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 3
  %1 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 0
  store i32 141, i32* %1
  %2 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i64*
  store i64 %addr, i64* %3
  ret i64 %addr
}

; Function Attrs: uwtable
define internal i64 @"*Debug::MachO::Section64#size=<UInt64>:UInt64"(%"Debug::MachO::Section64"* %self, i64 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 4
  %1 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 0
  store i32 141, i32* %1
  %2 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i64*
  store i64 %size, i64* %3
  ret i64 %size
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Section64#offset=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %self, i32 %offset) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 5
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %offset, i32* %3
  ret i32 %offset
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Section64#align=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %self, i32 %align) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 6
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %align, i32* %3
  ret i32 %align
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Section64#reloff=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %self, i32 %reloff) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 7
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %reloff, i32* %3
  ret i32 %reloff
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Section64#nreloc=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %self, i32 %nreloc) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 8
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %nreloc, i32* %3
  ret i32 %nreloc
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Section64#flags=<UInt32>:UInt32"(%"Debug::MachO::Section64"* %self, i32 %flags) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 9
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %flags, i32* %3
  ret i32 %flags
}

; Function Attrs: uwtable
define internal %"Array(Debug::MachO::Section64)"* @"*Array(Debug::MachO::Section64)@Array(T)#<<<Debug::MachO::Section64>:Array(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %self, %"Debug::MachO::Section64" %value) #0 {
alloca:
  %value1 = alloca %"Debug::MachO::Section64"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::Section64" %value, %"Debug::MachO::Section64"* %value1
  %0 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %value1
  %1 = call %"Array(Debug::MachO::Section64)"* @"*Array(Debug::MachO::Section64)@Array(T)#push<Debug::MachO::Section64>:Array(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %self, %"Debug::MachO::Section64" %0)
  ret %"Array(Debug::MachO::Section64)"* %1
}

; Function Attrs: uwtable
define internal %"Array(Debug::MachO::Section64)"* @"*Array(Debug::MachO::Section64)@Array(T)#push<Debug::MachO::Section64>:Array(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %self, %"Debug::MachO::Section64" %value) #0 {
alloca:
  %value1 = alloca %"Debug::MachO::Section64"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::Section64" %value, %"Debug::MachO::Section64"* %value1
  %0 = call %"Debug::MachO::Section64"* @"*Array(Debug::MachO::Section64)@Array(T)#check_needs_resize:(Pointer(Debug::MachO::Section64) | Nil)"(%"Array(Debug::MachO::Section64)"* %self)
  %1 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 3
  %2 = load %"Debug::MachO::Section64"*, %"Debug::MachO::Section64"** %1
  %3 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %value1
  %6 = call %"Debug::MachO::Section64" @"*Pointer(Debug::MachO::Section64)@Pointer(T)#[]=<Int32, Debug::MachO::Section64>:Debug::MachO::Section64"(%"Debug::MachO::Section64"* %2, i32 %4, %"Debug::MachO::Section64" %5)
  %7 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = add i32 %8, 1
  %10 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 1
  store i32 %9, i32* %10
  ret %"Array(Debug::MachO::Section64)"* %self
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64"* @"*Array(Debug::MachO::Section64)@Array(T)#check_needs_resize:(Pointer(Debug::MachO::Section64) | Nil)"(%"Array(Debug::MachO::Section64)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %"Debug::MachO::Section64"* @"*Array(Debug::MachO::Section64)@Array(T)#double_capacity:Pointer(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi %"Debug::MachO::Section64"* [ %5, %then ], [ null, %else ]
  ret %"Debug::MachO::Section64"* %6
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64"* @"*Array(Debug::MachO::Section64)@Array(T)#double_capacity:Pointer(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call %"Debug::MachO::Section64"* @"*Array(Debug::MachO::Section64)@Array(T)#resize_to_capacity<Int32>:Pointer(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %self, i32 %6)
  ret %"Debug::MachO::Section64"* %7
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64"* @"*Array(Debug::MachO::Section64)@Array(T)#resize_to_capacity<Int32>:Pointer(Debug::MachO::Section64)"(%"Array(Debug::MachO::Section64)"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 3
  %2 = load %"Debug::MachO::Section64"*, %"Debug::MachO::Section64"** %1
  %3 = icmp ne %"Debug::MachO::Section64"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 3
  %5 = load %"Debug::MachO::Section64"*, %"Debug::MachO::Section64"** %4
  %6 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)#realloc<Int32>:Pointer(Debug::MachO::Section64)"(%"Debug::MachO::Section64"* %5, i32 %7)
  %9 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 3
  store %"Debug::MachO::Section64"* %8, %"Debug::MachO::Section64"** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)::malloc<Int32>:Pointer(Debug::MachO::Section64)"(i32 687, i32 %11)
  %13 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 3
  store %"Debug::MachO::Section64"* %12, %"Debug::MachO::Section64"** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi %"Debug::MachO::Section64"* [ %8, %then ], [ %12, %else ]
  ret %"Debug::MachO::Section64"* %14
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)#realloc<Int32>:Pointer(Debug::MachO::Section64)"(%"Debug::MachO::Section64"* %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Debug::MachO::Section64"* %self to i8*
  %2 = mul i64 %0, ptrtoint (%"Debug::MachO::Section64"* getelementptr (%"Debug::MachO::Section64", %"Debug::MachO::Section64"* null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Debug::MachO::Section64"*
  ret %"Debug::MachO::Section64"* %5
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)::malloc<Int32>:Pointer(Debug::MachO::Section64)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (%"Debug::MachO::Section64"* getelementptr (%"Debug::MachO::Section64", %"Debug::MachO::Section64"* null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Debug::MachO::Section64"*
  ret %"Debug::MachO::Section64"* %6
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64" @"*Pointer(Debug::MachO::Section64)@Pointer(T)#[]=<Int32, Debug::MachO::Section64>:Debug::MachO::Section64"(%"Debug::MachO::Section64"* %self, i32 %offset, %"Debug::MachO::Section64" %value) #0 {
alloca:
  %value1 = alloca %"Debug::MachO::Section64"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::MachO::Section64" %value, %"Debug::MachO::Section64"* %value1
  %0 = call %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)#+<Int32>:Pointer(Debug::MachO::Section64)"(%"Debug::MachO::Section64"* %self, i32 %offset)
  %1 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %value1
  store %"Debug::MachO::Section64" %1, %"Debug::MachO::Section64"* %0
  %2 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %value1
  ret %"Debug::MachO::Section64" %2
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)#+<Int32>:Pointer(Debug::MachO::Section64)"(%"Debug::MachO::Section64"* %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i64 %0
  ret %"Debug::MachO::Section64"* %1
}

; Function Attrs: alwaysinline uwtable
define internal %"Debug::MachO::Section64" @"*Array(Debug::MachO::Section64)@Array(T)#unsafe_at<Int32>:Debug::MachO::Section64"(%"Array(Debug::MachO::Section64)"* %self, i32 %index) #4 {
alloca:
  %0 = alloca %"Debug::MachO::Section64"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Array(Debug::MachO::Section64)", %"Array(Debug::MachO::Section64)"* %self, i32 0, i32 3
  %2 = load %"Debug::MachO::Section64"*, %"Debug::MachO::Section64"** %1
  %3 = call %"Debug::MachO::Section64" @"*Pointer(Debug::MachO::Section64)@Pointer(T)#[]<Int32>:Debug::MachO::Section64"(%"Debug::MachO::Section64"* %2, i32 %index)
  store %"Debug::MachO::Section64" %3, %"Debug::MachO::Section64"* %0
  %4 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %0
  ret %"Debug::MachO::Section64" %4
}

; Function Attrs: uwtable
define internal %"Debug::MachO::Section64" @"*Pointer(Debug::MachO::Section64)@Pointer(T)#[]<Int32>:Debug::MachO::Section64"(%"Debug::MachO::Section64"* %self, i32 %offset) #0 {
entry:
  %0 = call %"Debug::MachO::Section64"* @"*Pointer(Debug::MachO::Section64)@Pointer(T)#+<Int32>:Pointer(Debug::MachO::Section64)"(%"Debug::MachO::Section64"* %self, i32 %offset)
  %1 = load %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %0
  ret %"Debug::MachO::Section64" %1
}

; Function Attrs: uwtable
define internal %String* @"*Debug::MachO::Section64#sectname:String"(%"Debug::MachO::Section64"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 1
  %1 = load %String*, %String** %0
  %2 = icmp eq %String* %1, null
  %3 = select i1 %2, i32 0, i32 1
  %4 = icmp eq i32 0, %3
  br i1 %4, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def:                                         ; preds = %entry
  %5 = icmp eq i32 1, %3
  br i1 %5, label %current_def1, label %next_def2

current_def1:                                     ; preds = %next_def
  br label %exit

next_def2:                                        ; preds = %next_def
  unreachable

exit:                                             ; preds = %current_def1
  %6 = phi %String* [ %1, %current_def1 ]
  ret %String* %6
}

; Function Attrs: uwtable
define internal i32 @"*Debug::MachO::Section64#offset:UInt32"(%"Debug::MachO::Section64"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 5
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 139, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i32*
  %6 = load i32, i32* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i32 [ %6, %current_def ]
  ret i32 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i32* @"*IO::FileDescriptor+@IO::FileDescriptor#seek<UInt32>:IO::FileDescriptor+"(i32* %self, i32 %offset) #0 {
alloca:
  %whence = alloca i32
  %seek_value = alloca i64
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %whence
  call void @"*IO::FileDescriptor+@IO#check_open:Nil"(i32* %self)
  %1 = call i32* @"*IO::FileDescriptor+@IO::Buffered#flush:IO::FileDescriptor+"(i32* %self)
  %2 = bitcast i32* %self to %"IO::FileDescriptor"*
  %3 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 16
  %4 = load i32, i32* %3
  %5 = zext i32 %offset to i64
  %6 = load i32, i32* %whence
  %7 = call i32 @"*IO::Seek@Enum#to_i32:Int32"(i32 %6)
  %8 = call i64 @lseek(i32 %4, i64 %5, i32 %7)
  store i64 %8, i64* %seek_value
  %9 = load i64, i64* %seek_value
  %10 = icmp eq i64 %9, -1
  br i1 %10, label %then, label %else

then:                                             ; preds = %entry
  %11 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'Unable to seek'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %11)
  unreachable

else:                                             ; preds = %entry
  %12 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::empty:Slice(UInt8)"(i32 935)
  store %"Slice(UInt8)" %12, %"Slice(UInt8)"* %0
  %13 = bitcast i32* %self to %"IO::FileDescriptor"*
  %14 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %13, i32 0, i32 4
  %15 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %15, %"Slice(UInt8)"* %14
  ret i32* %self
}

; Function Attrs: uwtable
define internal i64 @"*Debug::MachO::Section64#size:UInt64"(%"Debug::MachO::Section64"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::MachO::Section64", %"Debug::MachO::Section64"* %self, i32 0, i32 4
  %1 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 141, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(UInt64 | Nil)", %"(UInt64 | Nil)"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i64*
  %6 = load i64, i64* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i64 [ %6, %current_def ]
  ret i64 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers.17" @"*Debug::DWARF::LineNumbers::new<IO::FileDescriptor+, UInt64>:Debug::DWARF::LineNumbers"(i32* %io, i64 %size) #0 {
alloca:
  %_ = alloca %"Debug::DWARF::LineNumbers.17"
  %0 = alloca %"Debug::DWARF::LineNumbers.17"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Debug::DWARF::LineNumbers.17"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Debug::DWARF::LineNumbers.17"* getelementptr (%"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %0
  store %"Debug::DWARF::LineNumbers.17" %2, %"Debug::DWARF::LineNumbers.17"* %_
  call void @"*Debug::DWARF::LineNumbers#initialize<IO::FileDescriptor+, UInt64>:Nil"(%"Debug::DWARF::LineNumbers.17"* %_, i32* %io, i64 %size)
  %3 = load %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %_
  ret %"Debug::DWARF::LineNumbers.17" %3
}

; Function Attrs: uwtable
define internal void @"*Debug::DWARF::LineNumbers#initialize<IO::FileDescriptor+, UInt64>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, i32* %io, i64 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  store i32* %io, i32** %0
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %2 = load i32*, i32** %1
  %3 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#tell:Int64"(i32* %2)
  %4 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 3
  store i64 %3, i64* %4
  %5 = call %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)::new:Array(Array(Debug::DWARF::LineNumbers::Row))"(i32 437)
  %6 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 0
  store %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %5, %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"** %6
  %7 = call %"Array(String)"* @"*Array(String)@Array(T)::new:Array(String)"(i32 438)
  %8 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 1
  store %"Array(String)"* %7, %"Array(String)"** %8
  %9 = call %"Array(String)"* @"*Array(String)@Array(T)::new:Array(String)"(i32 438)
  %10 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 2
  store %"Array(String)"* %9, %"Array(String)"** %10
  call void @"*Debug::DWARF::LineNumbers#decode_sequences<UInt64>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, i64 %size)
  ret void
}

; Function Attrs: uwtable
define internal %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)::new:Array(Array(Debug::DWARF::LineNumbers::Row))"(i32 %self) #0 {
alloca:
  %_ = alloca %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* getelementptr (%"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"*
  %2 = bitcast %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* getelementptr (%"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %1, i32 0, i32 0
  store i32 6, i32* %3
  store %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %1, %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"** %_
  %4 = load %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"*, %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"** %_
  %5 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#initialize:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %4)
  %6 = load %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"*, %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"** %_
  ret %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %6
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#initialize:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 1
  store i32 0, i32* %0
  %1 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 2
  store i32 0, i32* %1
  %2 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)::null:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(i32 675)
  %3 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 3
  store %"Array(Debug::DWARF::LineNumbers::Row).19"** %2, %"Array(Debug::DWARF::LineNumbers::Row).19"*** %3
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"** %2
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)::null:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(i32 %self) #0 {
entry:
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"** null
}

; Function Attrs: uwtable
define internal void @"*Debug::DWARF::LineNumbers#decode_sequences<UInt64>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, i64 %size) #0 {
alloca:
  %sequence = alloca %"Debug::DWARF::LineNumbers::Sequence"
  %0 = alloca %"Debug::DWARF::LineNumbers::Sequence"
  %1 = alloca %"(UInt8 | Nil)"
  %2 = alloca %"(UInt8 | Nil)"
  %3 = alloca %"(UInt8 | Nil)"
  %4 = alloca %"(UInt8 | Nil)"
  %5 = alloca %"(UInt8 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  br label %while

while:                                            ; preds = %exit27, %entry
  %6 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %7 = load i32*, i32** %6
  %8 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#tell:Int64"(i32* %7)
  %9 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 3
  %10 = load i64, i64* %9
  %11 = sub i64 %8, %10
  %12 = icmp slt i64 %11, 0
  %13 = icmp ult i64 %11, %size
  %14 = or i1 %12, %13
  br i1 %14, label %body, label %exit

body:                                             ; preds = %while
  %15 = call %"Debug::DWARF::LineNumbers::Sequence" @"*Debug::DWARF::LineNumbers::Sequence::new:Debug::DWARF::LineNumbers::Sequence"()
  store %"Debug::DWARF::LineNumbers::Sequence" %15, %"Debug::DWARF::LineNumbers::Sequence"* %0
  %16 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %0
  store %"Debug::DWARF::LineNumbers::Sequence" %16, %"Debug::DWARF::LineNumbers::Sequence"* %sequence
  %17 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %18 = load i32*, i32** %17
  %19 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#tell:Int64"(i32* %18)
  %20 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 3
  %21 = load i64, i64* %20
  %22 = sub i64 %19, %21
  %23 = call i64 @"*Debug::DWARF::LineNumbers::Sequence#offset=<Int64>:Int64"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i64 %22)
  %24 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %25 = load i32*, i32** %24
  %26 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class>:UInt32"(i32* %25, i32 609)
  %27 = call i32 @"*Debug::DWARF::LineNumbers::Sequence#unit_length=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i32 %26)
  %28 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %29 = load i32*, i32** %28
  %30 = call i16 @"*IO::FileDescriptor+@IO#read_bytes<UInt16:Class>:UInt16"(i32* %29, i32 607)
  %31 = call i16 @"*Debug::DWARF::LineNumbers::Sequence#version=<UInt16>:UInt16"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i16 %30)
  %32 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %33 = load i32*, i32** %32
  %34 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class>:UInt32"(i32* %33, i32 609)
  %35 = call i32 @"*Debug::DWARF::LineNumbers::Sequence#header_length=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i32 %34)
  %36 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %37 = load i32*, i32** %36
  %38 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %37)
  store %"(UInt8 | Nil)" %38, %"(UInt8 | Nil)"* %1
  %39 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %1, i32 0, i32 0
  %40 = load i32, i32* %39
  %41 = icmp eq i32 135, %40
  br i1 %41, label %current_def, label %next_def

exit:                                             ; preds = %while
  ret void

current_def:                                      ; preds = %body
  %42 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %1, i32 0, i32 1
  %43 = bitcast [1 x i64]* %42 to i8*
  %44 = load i8, i8* %43
  br label %exit1

next_def:                                         ; preds = %body
  %45 = icmp eq i32 0, %40
  br i1 %45, label %current_def2, label %next_def3

exit1:                                            ; preds = %current_def
  %46 = phi i8 [ %44, %current_def ]
  %47 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length=<UInt8>:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i8 %46)
  %48 = call i16 @"*Debug::DWARF::LineNumbers::Sequence#version:UInt16"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence)
  %49 = zext i16 %48 to i32
  %50 = icmp sge i32 %49, 4
  %51 = or i1 false, %50
  br i1 %51, label %then, label %else

current_def2:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def3:                                        ; preds = %next_def
  unreachable

then:                                             ; preds = %exit1
  %52 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %53 = load i32*, i32** %52
  %54 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %53)
  store %"(UInt8 | Nil)" %54, %"(UInt8 | Nil)"* %2
  %55 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %2, i32 0, i32 0
  %56 = load i32, i32* %55
  %57 = icmp eq i32 135, %56
  br i1 %57, label %current_def4, label %next_def5

else:                                             ; preds = %exit1
  br label %exit9

current_def4:                                     ; preds = %then
  %58 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %2, i32 0, i32 1
  %59 = bitcast [1 x i64]* %58 to i8*
  %60 = load i8, i8* %59
  br label %exit6

next_def5:                                        ; preds = %then
  %61 = icmp eq i32 0, %56
  br i1 %61, label %current_def7, label %next_def8

exit6:                                            ; preds = %current_def4
  %62 = phi i8 [ %60, %current_def4 ]
  %63 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#maximum_operations_per_instruction=<UInt8>:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i8 %62)
  br label %exit9

current_def7:                                     ; preds = %next_def5
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def8:                                        ; preds = %next_def5
  unreachable

exit9:                                            ; preds = %else, %exit6
  %64 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %65 = load i32*, i32** %64
  %66 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %65)
  store %"(UInt8 | Nil)" %66, %"(UInt8 | Nil)"* %3
  %67 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %3, i32 0, i32 0
  %68 = load i32, i32* %67
  %69 = icmp eq i32 135, %68
  br i1 %69, label %current_def10, label %next_def11

current_def10:                                    ; preds = %exit9
  %70 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %3, i32 0, i32 1
  %71 = bitcast [1 x i64]* %70 to i8*
  %72 = load i8, i8* %71
  br label %exit12

next_def11:                                       ; preds = %exit9
  %73 = icmp eq i32 0, %68
  br i1 %73, label %current_def13, label %next_def14

exit12:                                           ; preds = %current_def10
  %74 = phi i8 [ %72, %current_def10 ]
  %75 = zext i8 %74 to i32
  %76 = icmp eq i32 %75, 1
  %77 = call i1 @"*Debug::DWARF::LineNumbers::Sequence#default_is_stmt=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i1 %76)
  %78 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %79 = load i32*, i32** %78
  %80 = call i8 @"*IO::FileDescriptor+@IO#read_bytes<Int8:Class>:Int8"(i32* %79, i32 604)
  %81 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#line_base=<Int8>:Int8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i8 %80)
  %82 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %83 = load i32*, i32** %82
  %84 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %83)
  store %"(UInt8 | Nil)" %84, %"(UInt8 | Nil)"* %4
  %85 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %4, i32 0, i32 0
  %86 = load i32, i32* %85
  %87 = icmp eq i32 135, %86
  br i1 %87, label %current_def15, label %next_def16

current_def13:                                    ; preds = %next_def11
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def14:                                       ; preds = %next_def11
  unreachable

current_def15:                                    ; preds = %exit12
  %88 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %4, i32 0, i32 1
  %89 = bitcast [1 x i64]* %88 to i8*
  %90 = load i8, i8* %89
  br label %exit17

next_def16:                                       ; preds = %exit12
  %91 = icmp eq i32 0, %86
  br i1 %91, label %current_def18, label %next_def19

exit17:                                           ; preds = %current_def15
  %92 = phi i8 [ %90, %current_def15 ]
  %93 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#line_range=<UInt8>:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i8 %92)
  %94 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %95 = load i32*, i32** %94
  %96 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %95)
  store %"(UInt8 | Nil)" %96, %"(UInt8 | Nil)"* %5
  %97 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %5, i32 0, i32 0
  %98 = load i32, i32* %97
  %99 = icmp eq i32 135, %98
  br i1 %99, label %current_def20, label %next_def21

current_def18:                                    ; preds = %next_def16
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def19:                                       ; preds = %next_def16
  unreachable

current_def20:                                    ; preds = %exit17
  %100 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %5, i32 0, i32 1
  %101 = bitcast [1 x i64]* %100 to i8*
  %102 = load i8, i8* %101
  br label %exit22

next_def21:                                       ; preds = %exit17
  %103 = icmp eq i32 0, %98
  br i1 %103, label %current_def23, label %next_def24

exit22:                                           ; preds = %current_def20
  %104 = phi i8 [ %102, %current_def20 ]
  %105 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#opcode_base=<UInt8>:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence, i8 %104)
  %106 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence
  call void @"*Debug::DWARF::LineNumbers#read_opcodes<Debug::DWARF::LineNumbers::Sequence>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %106)
  %107 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence
  call void @"*Debug::DWARF::LineNumbers#read_directory_table<Debug::DWARF::LineNumbers::Sequence>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %107)
  %108 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence
  call void @"*Debug::DWARF::LineNumbers#read_filename_table<Debug::DWARF::LineNumbers::Sequence>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %108)
  %109 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %110 = load i32*, i32** %109
  %111 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#tell:Int64"(i32* %110)
  %112 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 3
  %113 = load i64, i64* %112
  %114 = sub i64 %111, %113
  %115 = call i64 @"*Debug::DWARF::LineNumbers::Sequence#offset:Int64"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence)
  %116 = call i32 @"*Debug::DWARF::LineNumbers::Sequence#unit_length:UInt32"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence)
  %117 = zext i32 %116 to i64
  %118 = add i64 %115, %117
  %119 = icmp slt i64 %114, %118
  br i1 %119, label %then25, label %else26

current_def23:                                    ; preds = %next_def21
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def24:                                       ; preds = %next_def21
  unreachable

then25:                                           ; preds = %exit22
  %120 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence
  call void @"*Debug::DWARF::LineNumbers#read_statement_program<Debug::DWARF::LineNumbers::Sequence>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %120)
  br label %exit27

else26:                                           ; preds = %exit22
  br label %exit27

exit27:                                           ; preds = %else26, %then25
  br label %while
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Sequence" @"*Debug::DWARF::LineNumbers::Sequence::new:Debug::DWARF::LineNumbers::Sequence"() #0 {
alloca:
  %_ = alloca %"Debug::DWARF::LineNumbers::Sequence"
  %0 = alloca %"Debug::DWARF::LineNumbers::Sequence"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Debug::DWARF::LineNumbers::Sequence"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Debug::DWARF::LineNumbers::Sequence"* getelementptr (%"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %0
  store %"Debug::DWARF::LineNumbers::Sequence" %2, %"Debug::DWARF::LineNumbers::Sequence"* %_
  %3 = call %"Array(UInt8)"* @"*Debug::DWARF::LineNumbers::Sequence#initialize:Array(UInt8)"(%"Debug::DWARF::LineNumbers::Sequence"* %_)
  %4 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %_
  ret %"Debug::DWARF::LineNumbers::Sequence" %4
}

; Function Attrs: uwtable
define internal %"Array(UInt8)"* @"*Debug::DWARF::LineNumbers::Sequence#initialize:Array(UInt8)"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
alloca:
  %__temp_103 = alloca %String**
  %capacity = alloca i32
  %ary = alloca %"Array(String)"*
  %__temp_104 = alloca %"Tuple(String, Int32, Int32, Int32)"*
  %capacity1 = alloca i32
  %ary2 = alloca %"Array(Tuple(String, Int32, Int32, Int32))"*
  %0 = alloca %"Tuple(String, Int32, Int32, Int32)"
  %__temp_105 = alloca i8*
  %capacity3 = alloca i32
  %ary4 = alloca %"Array(UInt8)"*
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 5
  store i8 1, i8* %1
  store i32 1, i32* %capacity
  %2 = load i32, i32* %capacity
  %3 = call %"Array(String)"* @"*Array(String)@Array(T)::new<Int32>:Array(String)"(i32 438, i32 %2)
  store %"Array(String)"* %3, %"Array(String)"** %ary
  %4 = load %"Array(String)"*, %"Array(String)"** %ary
  %5 = load %"Array(String)"*, %"Array(String)"** %ary
  %6 = getelementptr inbounds %"Array(String)", %"Array(String)"* %5, i32 0, i32 3
  %7 = load %String**, %String*** %6
  store %String** %7, %String*** %__temp_103
  %8 = load %String**, %String*** %__temp_103
  %9 = call %String* @"*Pointer(String)@Pointer(T)#[]=<Int32, String>:String"(%String** %8, i32 0, %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*))
  %10 = call i32 @"*Array(String)@Array(T)#size=<Int32>:Int32"(%"Array(String)"* %4, i32 1)
  %11 = load %"Array(String)"*, %"Array(String)"** %ary
  %12 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 10
  store %"Array(String)"* %11, %"Array(String)"** %12
  store i32 1, i32* %capacity1
  %13 = load i32, i32* %capacity1
  %14 = call %"Array(Tuple(String, Int32, Int32, Int32))"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)::new<Int32>:Array(Tuple(String, Int32, Int32, Int32))"(i32 452, i32 %13)
  store %"Array(Tuple(String, Int32, Int32, Int32))"* %14, %"Array(Tuple(String, Int32, Int32, Int32))"** %ary2
  %15 = load %"Array(Tuple(String, Int32, Int32, Int32))"*, %"Array(Tuple(String, Int32, Int32, Int32))"** %ary2
  %16 = load %"Array(Tuple(String, Int32, Int32, Int32))"*, %"Array(Tuple(String, Int32, Int32, Int32))"** %ary2
  %17 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %16, i32 0, i32 3
  %18 = load %"Tuple(String, Int32, Int32, Int32)"*, %"Tuple(String, Int32, Int32, Int32)"** %17
  store %"Tuple(String, Int32, Int32, Int32)"* %18, %"Tuple(String, Int32, Int32, Int32)"** %__temp_104
  %19 = load %"Tuple(String, Int32, Int32, Int32)"*, %"Tuple(String, Int32, Int32, Int32)"** %__temp_104
  %20 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0, i32 0, i32 0
  store %String* bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*), %String** %20
  %21 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0, i32 0, i32 1
  store i32 0, i32* %21
  %22 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0, i32 0, i32 2
  store i32 0, i32* %22
  %23 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0, i32 0, i32 3
  store i32 0, i32* %23
  %24 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0
  %25 = call %"Tuple(String, Int32, Int32, Int32)" @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#[]=<Int32, Tuple(String, Int32, Int32, Int32)>:Tuple(String, Int32, Int32, Int32)"(%"Tuple(String, Int32, Int32, Int32)"* %19, i32 0, %"Tuple(String, Int32, Int32, Int32)" %24)
  %26 = call i32 @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#size=<Int32>:Int32"(%"Array(Tuple(String, Int32, Int32, Int32))"* %15, i32 1)
  %27 = load %"Array(Tuple(String, Int32, Int32, Int32))"*, %"Array(Tuple(String, Int32, Int32, Int32))"** %ary2
  %28 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 11
  store %"Array(Tuple(String, Int32, Int32, Int32))"* %27, %"Array(Tuple(String, Int32, Int32, Int32))"** %28
  store i32 1, i32* %capacity3
  %29 = load i32, i32* %capacity3
  %30 = call %"Array(UInt8)"* @"*Array(UInt8)@Array(T)::new<Int32>:Array(UInt8)"(i32 453, i32 %29)
  store %"Array(UInt8)"* %30, %"Array(UInt8)"** %ary4
  %31 = load %"Array(UInt8)"*, %"Array(UInt8)"** %ary4
  %32 = load %"Array(UInt8)"*, %"Array(UInt8)"** %ary4
  %33 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %32, i32 0, i32 3
  %34 = load i8*, i8** %33
  store i8* %34, i8** %__temp_105
  %35 = load i8*, i8** %__temp_105
  %36 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %35, i32 0, i8 0)
  %37 = call i32 @"*Array(UInt8)@Array(T)#size=<Int32>:Int32"(%"Array(UInt8)"* %31, i32 1)
  %38 = load %"Array(UInt8)"*, %"Array(UInt8)"** %ary4
  %39 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 12
  store %"Array(UInt8)"* %38, %"Array(UInt8)"** %39
  ret %"Array(UInt8)"* %38
}

; Function Attrs: uwtable
define internal %"Array(String)"* @"*Array(String)@Array(T)::new<Int32>:Array(String)"(i32 %self, i32 %initial_capacity) #0 {
alloca:
  %_ = alloca %"Array(String)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(String)"* getelementptr (%"Array(String)", %"Array(String)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(String)"*
  %2 = bitcast %"Array(String)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(String)"* getelementptr (%"Array(String)", %"Array(String)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(String)", %"Array(String)"* %1, i32 0, i32 0
  store i32 7, i32* %3
  store %"Array(String)"* %1, %"Array(String)"** %_
  %4 = load %"Array(String)"*, %"Array(String)"** %_
  %5 = call %String** @"*Array(String)@Array(T)#initialize<Int32>:Pointer(String)"(%"Array(String)"* %4, i32 %initial_capacity)
  %6 = load %"Array(String)"*, %"Array(String)"** %_
  ret %"Array(String)"* %6
}

; Function Attrs: uwtable
define internal %String** @"*Array(String)@Array(T)#initialize<Int32>:Pointer(String)"(%"Array(String)"* %self, i32 %initial_capacity) #0 {
entry:
  %0 = icmp slt i32 %initial_capacity, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* bitcast ({ i32, i32, i32, [22 x i8] }* @"'negative array size...'" to %String*))
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %2, i32 %initial_capacity)
  %4 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %3)
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %4)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

else:                                             ; preds = %entry
  %6 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  store i32 0, i32* %6
  %7 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 2
  store i32 %initial_capacity, i32* %7
  %8 = icmp eq i32 %initial_capacity, 0
  br i1 %8, label %then1, label %else2

then1:                                            ; preds = %else
  %9 = call %String** @"*Pointer(String)@Pointer(T)::null:Pointer(String)"(i32 676)
  %10 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  store %String** %9, %String*** %10
  br label %exit

else2:                                            ; preds = %else
  %11 = call %String** @"*Pointer(String)@Pointer(T)::malloc<Int32>:Pointer(String)"(i32 676, i32 %initial_capacity)
  %12 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  store %String** %11, %String*** %12
  br label %exit

exit:                                             ; preds = %else2, %then1
  %13 = phi %String** [ %9, %then1 ], [ %11, %else2 ]
  ret %String** %13
}

; Function Attrs: uwtable
define internal i32 @"*Array(String)@Array(T)#size=<Int32>:Int32"(%"Array(String)"* %self, i32 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  store i32 %size, i32* %0
  ret i32 %size
}

; Function Attrs: uwtable
define internal %"Array(Tuple(String, Int32, Int32, Int32))"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)::new<Int32>:Array(Tuple(String, Int32, Int32, Int32))"(i32 %self, i32 %initial_capacity) #0 {
alloca:
  %_ = alloca %"Array(Tuple(String, Int32, Int32, Int32))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(Tuple(String, Int32, Int32, Int32))"* getelementptr (%"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(Tuple(String, Int32, Int32, Int32))"*
  %2 = bitcast %"Array(Tuple(String, Int32, Int32, Int32))"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(Tuple(String, Int32, Int32, Int32))"* getelementptr (%"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %1, i32 0, i32 0
  store i32 15, i32* %3
  store %"Array(Tuple(String, Int32, Int32, Int32))"* %1, %"Array(Tuple(String, Int32, Int32, Int32))"** %_
  %4 = load %"Array(Tuple(String, Int32, Int32, Int32))"*, %"Array(Tuple(String, Int32, Int32, Int32))"** %_
  %5 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#initialize<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %4, i32 %initial_capacity)
  %6 = load %"Array(Tuple(String, Int32, Int32, Int32))"*, %"Array(Tuple(String, Int32, Int32, Int32))"** %_
  ret %"Array(Tuple(String, Int32, Int32, Int32))"* %6
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#initialize<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %initial_capacity) #0 {
entry:
  %0 = icmp slt i32 %initial_capacity, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* bitcast ({ i32, i32, i32, [22 x i8] }* @"'negative array size...'" to %String*))
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %2, i32 %initial_capacity)
  %4 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %3)
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %4)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

else:                                             ; preds = %entry
  %6 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 1
  store i32 0, i32* %6
  %7 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 2
  store i32 %initial_capacity, i32* %7
  %8 = icmp eq i32 %initial_capacity, 0
  br i1 %8, label %then1, label %else2

then1:                                            ; preds = %else
  %9 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)::null:Pointer(Tuple(String, Int32, Int32, Int32))"(i32 688)
  %10 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 3
  store %"Tuple(String, Int32, Int32, Int32)"* %9, %"Tuple(String, Int32, Int32, Int32)"** %10
  br label %exit

else2:                                            ; preds = %else
  %11 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)::malloc<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(i32 688, i32 %initial_capacity)
  %12 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 3
  store %"Tuple(String, Int32, Int32, Int32)"* %11, %"Tuple(String, Int32, Int32, Int32)"** %12
  br label %exit

exit:                                             ; preds = %else2, %then1
  %13 = phi %"Tuple(String, Int32, Int32, Int32)"* [ %9, %then1 ], [ %11, %else2 ]
  ret %"Tuple(String, Int32, Int32, Int32)"* %13
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)::null:Pointer(Tuple(String, Int32, Int32, Int32))"(i32 %self) #0 {
entry:
  ret %"Tuple(String, Int32, Int32, Int32)"* null
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)::malloc<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (%"Tuple(String, Int32, Int32, Int32)"* getelementptr (%"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Tuple(String, Int32, Int32, Int32)"*
  ret %"Tuple(String, Int32, Int32, Int32)"* %6
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)" @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#[]=<Int32, Tuple(String, Int32, Int32, Int32)>:Tuple(String, Int32, Int32, Int32)"(%"Tuple(String, Int32, Int32, Int32)"* %self, i32 %offset, %"Tuple(String, Int32, Int32, Int32)" %value) #0 {
alloca:
  %value1 = alloca %"Tuple(String, Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Tuple(String, Int32, Int32, Int32)" %value, %"Tuple(String, Int32, Int32, Int32)"* %value1
  %0 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#+<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Tuple(String, Int32, Int32, Int32)"* %self, i32 %offset)
  %1 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %value1
  store %"Tuple(String, Int32, Int32, Int32)" %1, %"Tuple(String, Int32, Int32, Int32)"* %0
  %2 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %value1
  ret %"Tuple(String, Int32, Int32, Int32)" %2
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#+<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Tuple(String, Int32, Int32, Int32)"* %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %self, i64 %0
  ret %"Tuple(String, Int32, Int32, Int32)"* %1
}

; Function Attrs: uwtable
define internal i32 @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#size=<Int32>:Int32"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 1
  store i32 %size, i32* %0
  ret i32 %size
}

; Function Attrs: uwtable
define internal %"Array(UInt8)"* @"*Array(UInt8)@Array(T)::new<Int32>:Array(UInt8)"(i32 %self, i32 %initial_capacity) #0 {
alloca:
  %_ = alloca %"Array(UInt8)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(UInt8)"* getelementptr (%"Array(UInt8)", %"Array(UInt8)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(UInt8)"*
  %2 = bitcast %"Array(UInt8)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(UInt8)"* getelementptr (%"Array(UInt8)", %"Array(UInt8)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %1, i32 0, i32 0
  store i32 16, i32* %3
  store %"Array(UInt8)"* %1, %"Array(UInt8)"** %_
  %4 = load %"Array(UInt8)"*, %"Array(UInt8)"** %_
  %5 = call i8* @"*Array(UInt8)@Array(T)#initialize<Int32>:Pointer(UInt8)"(%"Array(UInt8)"* %4, i32 %initial_capacity)
  %6 = load %"Array(UInt8)"*, %"Array(UInt8)"** %_
  ret %"Array(UInt8)"* %6
}

; Function Attrs: uwtable
define internal i8* @"*Array(UInt8)@Array(T)#initialize<Int32>:Pointer(UInt8)"(%"Array(UInt8)"* %self, i32 %initial_capacity) #0 {
entry:
  %0 = icmp slt i32 %initial_capacity, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* bitcast ({ i32, i32, i32, [22 x i8] }* @"'negative array size...'" to %String*))
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %2, i32 %initial_capacity)
  %4 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %3)
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %4)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

else:                                             ; preds = %entry
  %6 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 1
  store i32 0, i32* %6
  %7 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 2
  store i32 %initial_capacity, i32* %7
  %8 = icmp eq i32 %initial_capacity, 0
  br i1 %8, label %then1, label %else2

then1:                                            ; preds = %else
  %9 = call i8* @"*Pointer(UInt8)@Pointer(T)::null:Pointer(UInt8)"(i32 620)
  %10 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 3
  store i8* %9, i8** %10
  br label %exit

else2:                                            ; preds = %else
  %11 = call i8* @"*Pointer(UInt8)@Pointer(T)::malloc<Int32>:Pointer(UInt8)"(i32 620, i32 %initial_capacity)
  %12 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 3
  store i8* %11, i8** %12
  br label %exit

exit:                                             ; preds = %else2, %then1
  %13 = phi i8* [ %9, %then1 ], [ %11, %else2 ]
  ret i8* %13
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)::malloc<Int32>:Pointer(UInt8)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  ret i8* %5
}

; Function Attrs: uwtable
define internal i32 @"*Array(UInt8)@Array(T)#size=<Int32>:Int32"(%"Array(UInt8)"* %self, i32 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 1
  store i32 %size, i32* %0
  ret i32 %size
}

; Function Attrs: uwtable
define internal i64 @"*Debug::DWARF::LineNumbers::Sequence#offset=<Int64>:Int64"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i64 %offset) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 0
  %1 = getelementptr inbounds %"(Int64 | Nil)", %"(Int64 | Nil)"* %0, i32 0, i32 0
  store i32 140, i32* %1
  %2 = getelementptr inbounds %"(Int64 | Nil)", %"(Int64 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i64*
  store i64 %offset, i64* %3
  ret i64 %offset
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Sequence#unit_length=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i32 %unit_length) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 1
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %unit_length, i32* %3
  ret i32 %unit_length
}

; Function Attrs: uwtable
define internal i16 @"*IO::FileDescriptor+@IO#read_bytes<UInt16:Class>:UInt16"(i32* %self, i32 %type) #0 {
alloca:
  %format = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1009, i32* %format
  %0 = load i32, i32* %format
  %1 = call i16 @"*UInt16@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:UInt16"(i32* %self, i32 %0)
  ret i16 %1
}

; Function Attrs: uwtable
define internal i16 @"*UInt16@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:UInt16"(i32* %io, i32 %format) #0 {
entry:
  %0 = call i16 @"*IO::ByteFormat::LittleEndian::decode<UInt16:Class, IO::FileDescriptor+>:UInt16"(i32 607, i32* %io)
  ret i16 %0
}

; Function Attrs: uwtable
define internal i16 @"*IO::ByteFormat::LittleEndian::decode<UInt16:Class, IO::FileDescriptor+>:UInt16"(i32 %type, i32* %io) #0 {
alloca:
  %buffer = alloca [2 x i8]
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 2)@StaticArray(T, N)#to_slice:Slice(UInt8)"([2 x i8]* %buffer)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %2)
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::LittleEndian:Module>:Bool"(i32 1009)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [2 x i8] @"*StaticArray(UInt8, 2)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 2)"([2 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i8* @"*StaticArray(UInt8, 2)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([2 x i8]* %buffer)
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7
  ret i16 %8
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*StaticArray(UInt8, 2)@StaticArray(T, N)#to_slice:Slice(UInt8)"([2 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*StaticArray(UInt8, 2)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([2 x i8]* %self)
  %2 = call i32 @"*StaticArray(UInt8, 2)@StaticArray(T, N)#size:Int32"([2 x i8]* %self)
  %3 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %2)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i8* @"*StaticArray(UInt8, 2)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([2 x i8]* %self) #0 {
entry:
  %0 = getelementptr inbounds [2 x i8], [2 x i8]* %self, i32 0, i32 0
  ret i8* %0
}

; Function Attrs: uwtable
define internal i32 @"*StaticArray(UInt8, 2)@StaticArray(T, N)#size:Int32"([2 x i8]* %self) #0 {
entry:
  ret i32 2
}

; Function Attrs: uwtable
define internal [2 x i8] @"*StaticArray(UInt8, 2)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 2)"([2 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 2)@StaticArray(T, N)#to_slice:Slice(UInt8)"([2 x i8]* %self)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#reverse!:Slice(UInt8)"(%"Slice(UInt8)"* %0)
  %3 = load [2 x i8], [2 x i8]* %self
  ret [2 x i8] %3
}

; Function Attrs: uwtable
define internal i16 @"*Debug::DWARF::LineNumbers::Sequence#version=<UInt16>:UInt16"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i16 %version) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 2
  %1 = getelementptr inbounds %"(UInt16 | Nil)", %"(UInt16 | Nil)"* %0, i32 0, i32 0
  store i32 137, i32* %1
  %2 = getelementptr inbounds %"(UInt16 | Nil)", %"(UInt16 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i16*
  store i16 %version, i16* %3
  ret i16 %version
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Sequence#header_length=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i32 %header_length) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 3
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  store i32 139, i32* %1
  %2 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i32*
  store i32 %header_length, i32* %3
  ret i32 %header_length
}

; Function Attrs: uwtable
define internal %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %self) #0 {
alloca:
  %b = alloca i8
  %0 = alloca %"(UInt8 | Nil)"
  %1 = alloca %"Slice(UInt8)"
  %2 = alloca %"(UInt8 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  call void @"*IO::FileDescriptor+@IO#check_open:Nil"(i32* %self)
  %3 = bitcast i32* %self to %"IO::FileDescriptor"*
  %4 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %3, i32 0, i32 4
  %5 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %4)
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %6 = call %"Slice(UInt8)" @"*IO::FileDescriptor+@IO::Buffered#fill_buffer:Slice(UInt8)"(i32* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %7 = bitcast i32* %self to %"IO::FileDescriptor"*
  %8 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %7, i32 0, i32 4
  %9 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %8)
  br i1 %9, label %then1, label %else2

then1:                                            ; preds = %exit
  %10 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %10
  %11 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %11
  br label %exit3

else2:                                            ; preds = %exit
  %12 = bitcast i32* %self to %"IO::FileDescriptor"*
  %13 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %12, i32 0, i32 4
  %14 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %13, i32 0)
  store i8 %14, i8* %b
  %15 = bitcast i32* %self to %"IO::FileDescriptor"*
  %16 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %15, i32 0, i32 4
  %17 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %16, i32 1)
  store %"Slice(UInt8)" %17, %"Slice(UInt8)"* %1
  %18 = bitcast i32* %self to %"IO::FileDescriptor"*
  %19 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %18, i32 0, i32 4
  %20 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  store %"Slice(UInt8)" %20, %"Slice(UInt8)"* %19
  %21 = load i8, i8* %b
  %22 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %2, i32 0, i32 0
  store i32 135, i32* %22
  %23 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %2, i32 0, i32 1
  %24 = bitcast [1 x i64]* %23 to i8*
  store i8 %21, i8* %24
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %25 = phi %"(UInt8 | Nil)"* [ %0, %then1 ], [ %2, %else2 ]
  %26 = load %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %25
  ret %"(UInt8 | Nil)" %26
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %self, i32 %index) #4 {
entry:
  %0 = call i8 @"*Slice(UInt8)@Indexable(T)#at<Int32>:UInt8"(%"Slice(UInt8)"* %self, i32 %index)
  ret i8 %0
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*Slice(UInt8)@Indexable(T)#at<Int32>:UInt8"(%"Slice(UInt8)"* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_106 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  store i32 %0, i32* %index2
  %1 = load i32, i32* %index2
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i32, i32* %index2
  %4 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %5 = load i32, i32* %4
  %6 = add i32 %3, %5
  store i32 %6, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %7 = load i32, i32* %index2
  %8 = icmp sle i32 0, %7
  store i1 %8, i1* %__temp_106
  br i1 %8, label %then5, label %else6

then3:                                            ; preds = %exit7
  %9 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  %10 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %10)
  unreachable

then5:                                            ; preds = %exit
  %11 = load i32, i32* %index2
  %12 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %13 = load i32, i32* %12
  %14 = icmp slt i32 %11, %13
  br label %exit7

else6:                                            ; preds = %exit
  %15 = load i1, i1* %__temp_106
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %16 = phi i1 [ %14, %then5 ], [ %15, %else6 ]
  br i1 %16, label %then3, label %else4

exit8:                                            ; preds = %then3
  %17 = phi i32 [ %9, %then3 ]
  store i32 %17, i32* %index1
  %18 = load i32, i32* %index1
  %19 = call i8 @"*Slice(UInt8)@Slice(T)#unsafe_at<Int32>:UInt8"(%"Slice(UInt8)"* %self, i32 %18)
  ret i8 %19
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length=<UInt8>:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i8 %minimum_instruction_length) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 4
  %1 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  store i32 135, i32* %1
  %2 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i8*
  store i8 %minimum_instruction_length, i8* %3
  ret i8 %minimum_instruction_length
}

; Function Attrs: uwtable
define internal i16 @"*Debug::DWARF::LineNumbers::Sequence#version:UInt16"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 2
  %1 = getelementptr inbounds %"(UInt16 | Nil)", %"(UInt16 | Nil)"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 137, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(UInt16 | Nil)", %"(UInt16 | Nil)"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i16*
  %6 = load i16, i16* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i16 [ %6, %current_def ]
  ret i16 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#maximum_operations_per_instruction=<UInt8>:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i8 %maximum_operations_per_instruction) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 5
  store i8 %maximum_operations_per_instruction, i8* %0
  ret i8 %maximum_operations_per_instruction
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LineNumbers::Sequence#default_is_stmt=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i1 %default_is_stmt) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 6
  %1 = getelementptr inbounds %"(Bool | Nil)", %"(Bool | Nil)"* %0, i32 0, i32 0
  store i32 147, i32* %1
  %2 = zext i1 %default_is_stmt to i64
  %3 = getelementptr inbounds %"(Bool | Nil)", %"(Bool | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [1 x i64]* %3 to i64*
  store i64 %2, i64* %4
  ret i1 %default_is_stmt
}

; Function Attrs: uwtable
define internal i8 @"*IO::FileDescriptor+@IO#read_bytes<Int8:Class>:Int8"(i32* %self, i32 %type) #0 {
alloca:
  %format = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1009, i32* %format
  %0 = load i32, i32* %format
  %1 = call i8 @"*Int8@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:Int8"(i32* %self, i32 %0)
  ret i8 %1
}

; Function Attrs: uwtable
define internal i8 @"*Int8@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:Int8"(i32* %io, i32 %format) #0 {
entry:
  %0 = call i8 @"*IO::ByteFormat::LittleEndian::decode<Int8:Class, IO::FileDescriptor+>:Int8"(i32 604, i32* %io)
  ret i8 %0
}

; Function Attrs: uwtable
define internal i8 @"*IO::ByteFormat::LittleEndian::decode<Int8:Class, IO::FileDescriptor+>:Int8"(i32 %type, i32* %io) #0 {
alloca:
  %buffer = alloca [1 x i8]
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 1)@StaticArray(T, N)#to_slice:Slice(UInt8)"([1 x i8]* %buffer)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %2)
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::LittleEndian:Module>:Bool"(i32 1009)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [1 x i8] @"*StaticArray(UInt8, 1)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 1)"([1 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i8* @"*StaticArray(UInt8, 1)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([1 x i8]* %buffer)
  %7 = load i8, i8* %6
  ret i8 %7
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*StaticArray(UInt8, 1)@StaticArray(T, N)#to_slice:Slice(UInt8)"([1 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*StaticArray(UInt8, 1)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([1 x i8]* %self)
  %2 = call i32 @"*StaticArray(UInt8, 1)@StaticArray(T, N)#size:Int32"([1 x i8]* %self)
  %3 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %1, i32 %2)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i8* @"*StaticArray(UInt8, 1)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([1 x i8]* %self) #0 {
entry:
  %0 = getelementptr inbounds [1 x i8], [1 x i8]* %self, i32 0, i32 0
  ret i8* %0
}

; Function Attrs: uwtable
define internal i32 @"*StaticArray(UInt8, 1)@StaticArray(T, N)#size:Int32"([1 x i8]* %self) #0 {
entry:
  ret i32 1
}

; Function Attrs: uwtable
define internal [1 x i8] @"*StaticArray(UInt8, 1)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 1)"([1 x i8]* %self) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 1)@StaticArray(T, N)#to_slice:Slice(UInt8)"([1 x i8]* %self)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#reverse!:Slice(UInt8)"(%"Slice(UInt8)"* %0)
  %3 = load [1 x i8], [1 x i8]* %self
  ret [1 x i8] %3
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#line_base=<Int8>:Int8"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i8 %line_base) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 7
  %1 = getelementptr inbounds %"(Int8 | Nil)", %"(Int8 | Nil)"* %0, i32 0, i32 0
  store i32 134, i32* %1
  %2 = getelementptr inbounds %"(Int8 | Nil)", %"(Int8 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i8*
  store i8 %line_base, i8* %3
  ret i8 %line_base
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#line_range=<UInt8>:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i8 %line_range) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 8
  %1 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  store i32 135, i32* %1
  %2 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i8*
  store i8 %line_range, i8* %3
  ret i8 %line_range
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#opcode_base=<UInt8>:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %self, i8 %opcode_base) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 9
  %1 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  store i32 135, i32* %1
  %2 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %3 = bitcast [1 x i64]* %2 to i8*
  store i8 %opcode_base, i8* %3
  ret i8 %opcode_base
}

; Function Attrs: uwtable
define internal void @"*Debug::DWARF::LineNumbers#read_opcodes<Debug::DWARF::LineNumbers::Sequence>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %sequence) #0 {
alloca:
  %sequence1 = alloca %"Debug::DWARF::LineNumbers::Sequence"
  %i = alloca i32
  %to = alloca i8
  %x = alloca i32
  %0 = alloca %"(UInt8 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::DWARF::LineNumbers::Sequence" %sequence, %"Debug::DWARF::LineNumbers::Sequence"* %sequence1
  %1 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#opcode_base:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %2 = zext i8 %1 to i32
  %3 = sub i32 %2, 1
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %to
  store i32 1, i32* %x
  br label %while

while:                                            ; preds = %exit2, %entry
  %5 = load i32, i32* %x
  %6 = load i8, i8* %to
  %7 = icmp sle i32 %5, 0
  %8 = zext i8 %6 to i32
  %9 = icmp sle i32 %5, %8
  %10 = or i1 %7, %9
  br i1 %10, label %body, label %exit

body:                                             ; preds = %while
  %11 = load i32, i32* %x
  store i32 %11, i32* %i
  %12 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 12
  %13 = load %"Array(UInt8)"*, %"Array(UInt8)"** %12
  %14 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %15 = load i32*, i32** %14
  %16 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %15)
  store %"(UInt8 | Nil)" %16, %"(UInt8 | Nil)"* %0
  %17 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  %18 = load i32, i32* %17
  %19 = icmp eq i32 135, %18
  br i1 %19, label %current_def, label %next_def

exit:                                             ; preds = %while
  ret void

current_def:                                      ; preds = %body
  %20 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %21 = bitcast [1 x i64]* %20 to i8*
  %22 = load i8, i8* %21
  br label %exit2

next_def:                                         ; preds = %body
  %23 = icmp eq i32 0, %18
  br i1 %23, label %current_def3, label %next_def4

exit2:                                            ; preds = %current_def
  %24 = phi i8 [ %22, %current_def ]
  %25 = call %"Array(UInt8)"* @"*Array(UInt8)@Array(T)#<<<UInt8>:Array(UInt8)"(%"Array(UInt8)"* %13, i8 %24)
  %26 = load i32, i32* %x
  %27 = add i32 %26, 1
  store i32 %27, i32* %x
  br label %while

current_def3:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def4:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#opcode_base:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 9
  %1 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 135, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i8*
  %6 = load i8, i8* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i8 [ %6, %current_def ]
  ret i8 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal %"Array(UInt8)"* @"*Array(UInt8)@Array(T)#<<<UInt8>:Array(UInt8)"(%"Array(UInt8)"* %self, i8 %value) #0 {
entry:
  %0 = call %"Array(UInt8)"* @"*Array(UInt8)@Array(T)#push<UInt8>:Array(UInt8)"(%"Array(UInt8)"* %self, i8 %value)
  ret %"Array(UInt8)"* %0
}

; Function Attrs: uwtable
define internal %"Array(UInt8)"* @"*Array(UInt8)@Array(T)#push<UInt8>:Array(UInt8)"(%"Array(UInt8)"* %self, i8 %value) #0 {
entry:
  %0 = call i8* @"*Array(UInt8)@Array(T)#check_needs_resize:(Pointer(UInt8) | Nil)"(%"Array(UInt8)"* %self)
  %1 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 3
  %2 = load i8*, i8** %1
  %3 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]=<Int32, UInt8>:UInt8"(i8* %2, i32 %4, i8 %value)
  %6 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = add i32 %7, 1
  %9 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 1
  store i32 %8, i32* %9
  ret %"Array(UInt8)"* %self
}

; Function Attrs: uwtable
define internal i8* @"*Array(UInt8)@Array(T)#check_needs_resize:(Pointer(UInt8) | Nil)"(%"Array(UInt8)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call i8* @"*Array(UInt8)@Array(T)#double_capacity:Pointer(UInt8)"(%"Array(UInt8)"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i8* [ %5, %then ], [ null, %else ]
  ret i8* %6
}

; Function Attrs: uwtable
define internal i8* @"*Array(UInt8)@Array(T)#double_capacity:Pointer(UInt8)"(%"Array(UInt8)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call i8* @"*Array(UInt8)@Array(T)#resize_to_capacity<Int32>:Pointer(UInt8)"(%"Array(UInt8)"* %self, i32 %6)
  ret i8* %7
}

; Function Attrs: uwtable
define internal i8* @"*Array(UInt8)@Array(T)#resize_to_capacity<Int32>:Pointer(UInt8)"(%"Array(UInt8)"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 3
  %2 = load i8*, i8** %1
  %3 = icmp ne i8* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 3
  %5 = load i8*, i8** %4
  %6 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call i8* @"*Pointer(UInt8)@Pointer(T)#realloc<Int32>:Pointer(UInt8)"(i8* %5, i32 %7)
  %9 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 3
  store i8* %8, i8** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call i8* @"*Pointer(UInt8)@Pointer(T)::malloc<Int32>:Pointer(UInt8)"(i32 620, i32 %11)
  %13 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 3
  store i8* %12, i8** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi i8* [ %8, %then ], [ %12, %else ]
  ret i8* %14
}

; Function Attrs: uwtable
define internal void @"*Debug::DWARF::LineNumbers#read_directory_table<Debug::DWARF::LineNumbers::Sequence>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %sequence) #0 {
alloca:
  %sequence1 = alloca %"Debug::DWARF::LineNumbers::Sequence"
  %name = alloca %String*
  %i = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::DWARF::LineNumbers::Sequence" %sequence, %"Debug::DWARF::LineNumbers::Sequence"* %sequence1
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %else, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %0 = load i32, i32* %i
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %2 = load i32*, i32** %1
  %3 = call %String* @"*IO::FileDescriptor+@IO#gets<Char>:(String | Nil)"(i32* %2, i32 0)
  %4 = icmp eq %String* %3, null
  %5 = select i1 %4, i32 0, i32 1
  %6 = icmp eq i32 0, %5
  br i1 %6, label %current_def, label %next_def

exit:                                             ; preds = %while
  unreachable

current_def:                                      ; preds = %body
  br label %exit2

next_def:                                         ; preds = %body
  %7 = icmp eq i32 1, %5
  br i1 %7, label %current_def3, label %next_def4

exit2:                                            ; preds = %current_def3, %current_def
  %8 = phi %String* [ bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*), %current_def ], [ %3, %current_def3 ]
  %9 = call %String* @"*String#chomp<Char>:String"(%String* %8, i32 0)
  store %String* %9, %String** %name
  %10 = load %String*, %String** %name
  %11 = call i1 @"*String#empty?:Bool"(%String* %10)
  br i1 %11, label %then, label %else

current_def3:                                     ; preds = %next_def
  br label %exit2

next_def4:                                        ; preds = %next_def
  unreachable

then:                                             ; preds = %exit2
  br label %exit5

else:                                             ; preds = %exit2
  %12 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 10
  %13 = load %"Array(String)"*, %"Array(String)"** %12
  %14 = load %String*, %String** %name
  %15 = call %"Array(String)"* @"*Array(String)@Array(T)#<<<String>:Array(String)"(%"Array(String)"* %13, %String* %14)
  %16 = load i32, i32* %i
  %17 = add i32 %16, 1
  store i32 %17, i32* %i
  br label %while

exit5:                                            ; preds = %then
  ret void
}

; Function Attrs: uwtable
define internal %String* @"*IO::FileDescriptor+@IO#gets<Char>:(String | Nil)"(i32* %self, i32 %delimiter) #0 {
alloca:
  %chomp = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %chomp
  %0 = load i1, i1* %chomp
  %1 = call %String* @"*IO::FileDescriptor+@IO#gets<Char, Bool>:(String | Nil)"(i32* %self, i32 %delimiter, i1 %0)
  ret %String* %1
}

; Function Attrs: uwtable
define internal %String* @"*IO::FileDescriptor+@IO#gets<Char, Bool>:(String | Nil)"(i32* %self, i32 %delimiter, i1 %chomp) #0 {
entry:
  %0 = call %String* @"*IO::FileDescriptor+@IO::Buffered#gets<Char, Int32, Bool>:(String | Nil)"(i32* %self, i32 %delimiter, i32 2147483647, i1 %chomp)
  ret %String* %0
}

; Function Attrs: uwtable
define internal %String* @"*IO::FileDescriptor+@IO::Buffered#gets<Char, Int32, Bool>:(String | Nil)"(i32* %self, i32 %delimiter, i32 %limit, i1 %chomp) #0 {
alloca:
  %__temp_107 = alloca i1
  %delimiter_byte = alloca i8
  %index = alloca %"(Int32 | Nil)"
  %advance = alloca i32
  %__temp_127 = alloca i1
  %__temp_129 = alloca i1
  %__temp_128 = alloca i1
  %string = alloca %String*
  %limit1 = alloca i32
  %0 = alloca %"(Bool | IO::EncodingOptions | Nil)"
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"Slice(UInt8)"
  %3 = alloca %"Slice(UInt8)"
  %buffer = alloca %"String::Builder"*
  %capacity = alloca i32
  %builder = alloca %"String::Builder"*
  %capacity37 = alloca i32
  %builder38 = alloca %"String::Builder"*
  %available = alloca i32
  %i = alloca i32
  %4 = alloca %"Slice(UInt8)"
  %5 = alloca %"Slice(UInt8)"
  %6 = alloca %"(Int32 | Nil)"
  %7 = alloca %"Slice(UInt8)"
  %8 = alloca %"Slice(UInt8)"
  %9 = alloca %"(Int32 | Nil)"
  %10 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %limit, i32* %limit1
  call void @"*IO::FileDescriptor+@IO#check_open:Nil"(i32* %self)
  %11 = icmp sge i32 %delimiter, 128
  store i1 %11, i1* %__temp_107
  br i1 %11, label %then2, label %else3

then:                                             ; preds = %exit
  %12 = load i32, i32* %limit1
  %13 = call %String* @"*IO::FileDescriptor+@IO#gets<Char, Int32, Bool>:(String | Nil)"(i32* %self, i32 %delimiter, i32 %12, i1 %chomp)
  ret %String* %13

else:                                             ; preds = %exit
  %14 = load i32, i32* %limit1
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %then4, label %else5

then2:                                            ; preds = %entry
  %16 = load i1, i1* %__temp_107
  %17 = getelementptr inbounds %"(Bool | IO::EncodingOptions | Nil)", %"(Bool | IO::EncodingOptions | Nil)"* %0, i32 0, i32 0
  store i32 147, i32* %17
  %18 = zext i1 %16 to i192
  %19 = getelementptr inbounds %"(Bool | IO::EncodingOptions | Nil)", %"(Bool | IO::EncodingOptions | Nil)"* %0, i32 0, i32 1
  %20 = bitcast [3 x i64]* %19 to i192*
  store i192 %18, i192* %20
  br label %exit

else3:                                            ; preds = %entry
  %21 = bitcast i32* %self to %"IO::FileDescriptor"*
  %22 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %21, i32 0, i32 3
  %23 = bitcast %"(IO::EncodingOptions | Nil)"* %22 to %"(Bool | IO::EncodingOptions | Nil)"*
  br label %exit

exit:                                             ; preds = %else3, %then2
  %24 = phi %"(Bool | IO::EncodingOptions | Nil)"* [ %0, %then2 ], [ %23, %else3 ]
  %25 = getelementptr inbounds %"(Bool | IO::EncodingOptions | Nil)", %"(Bool | IO::EncodingOptions | Nil)"* %24, i32 0, i32 0
  %26 = load i32, i32* %25
  %27 = icmp eq i32 %26, 0
  %28 = xor i1 %27, true
  %29 = and i1 true, %28
  %30 = getelementptr inbounds %"(Bool | IO::EncodingOptions | Nil)", %"(Bool | IO::EncodingOptions | Nil)"* %24, i32 0, i32 1
  %31 = bitcast [3 x i64]* %30 to i1*
  %32 = load i1, i1* %31
  %33 = icmp eq i32 %26, 147
  %34 = xor i1 %32, true
  %35 = and i1 %33, %34
  %36 = xor i1 %35, true
  %37 = and i1 %29, %36
  br i1 %37, label %then, label %else

then4:                                            ; preds = %else
  %38 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative limit'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %38)
  unreachable

else5:                                            ; preds = %else
  %39 = load i32, i32* %limit1
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %then6, label %else7

then6:                                            ; preds = %else5
  store i32 2147483647, i32* %limit1
  br label %exit8

else7:                                            ; preds = %else5
  br label %exit8

exit8:                                            ; preds = %else7, %then6
  %41 = trunc i32 %delimiter to i8
  store i8 %41, i8* %delimiter_byte
  %42 = bitcast i32* %self to %"IO::FileDescriptor"*
  %43 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %42, i32 0, i32 4
  %44 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %43)
  br i1 %44, label %then9, label %else10

then9:                                            ; preds = %exit8
  %45 = call %"Slice(UInt8)" @"*IO::FileDescriptor+@IO::Buffered#fill_buffer:Slice(UInt8)"(i32* %self)
  br label %exit11

else10:                                           ; preds = %exit8
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %46 = bitcast i32* %self to %"IO::FileDescriptor"*
  %47 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %46, i32 0, i32 4
  %48 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %47)
  br i1 %48, label %then12, label %else13

then12:                                           ; preds = %exit11
  ret %String* null

else13:                                           ; preds = %exit11
  %49 = bitcast i32* %self to %"IO::FileDescriptor"*
  %50 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %49, i32 0, i32 4
  %51 = load i8, i8* %delimiter_byte
  %52 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Slice(T)#index<UInt8>:(Int32 | Nil)"(%"Slice(UInt8)"* %50, i8 %51)
  store %"(Int32 | Nil)" %52, %"(Int32 | Nil)"* %1
  %53 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  store %"(Int32 | Nil)" %53, %"(Int32 | Nil)"* %index
  %54 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  %55 = load i32, i32* %54
  %56 = icmp eq i32 %55, 0
  %57 = xor i1 %56, true
  %58 = and i1 true, %57
  br i1 %58, label %then14, label %else15

then14:                                           ; preds = %else13
  %59 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %60 = bitcast [1 x i64]* %59 to i32*
  %61 = load i32, i32* %60
  %62 = load i32, i32* %limit1
  %63 = icmp sge i32 %61, %62
  br i1 %63, label %then16, label %else17

else15:                                           ; preds = %else13
  store i32 64, i32* %capacity
  %64 = load i32, i32* %capacity
  store i32 %64, i32* %capacity37
  %65 = load i32, i32* %capacity37
  %66 = call %"String::Builder"* @"*String::Builder::new<Int32>:String::Builder"(i32 %65)
  store %"String::Builder"* %66, %"String::Builder"** %builder38
  %67 = load %"String::Builder"*, %"String::Builder"** %builder38
  store %"String::Builder"* %67, %"String::Builder"** %builder
  %68 = load %"String::Builder"*, %"String::Builder"** %builder
  store %"String::Builder"* %68, %"String::Builder"** %buffer
  store i32 0, i32* %i
  br label %while

then16:                                           ; preds = %then14
  %69 = load i32, i32* %limit1
  %70 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %70
  %71 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %72 = bitcast [1 x i64]* %71 to i32*
  store i32 %69, i32* %72
  br label %exit18

else17:                                           ; preds = %then14
  %73 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %74 = bitcast [1 x i64]* %73 to i32*
  %75 = load i32, i32* %74
  %76 = add i32 %75, 1
  %77 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %77
  %78 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %79 = bitcast [1 x i64]* %78 to i32*
  store i32 %76, i32* %79
  br label %exit18

exit18:                                           ; preds = %else17, %then16
  %80 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %81 = bitcast [1 x i64]* %80 to i32*
  %82 = load i32, i32* %81
  store i32 %82, i32* %advance
  br i1 %chomp, label %then23, label %else24

then19:                                           ; preds = %exit26
  %83 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %84 = bitcast [1 x i64]* %83 to i32*
  %85 = load i32, i32* %84
  %86 = sub i32 %85, 1
  %87 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %87
  %88 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %89 = bitcast [1 x i64]* %88 to i32*
  store i32 %86, i32* %89
  %90 = icmp eq i32 %delimiter, 10
  store i1 %90, i1* %__temp_129
  br i1 %90, label %then31, label %else32

else20:                                           ; preds = %exit26
  br label %exit36

then21:                                           ; preds = %exit25
  %91 = bitcast i32* %self to %"IO::FileDescriptor"*
  %92 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %91, i32 0, i32 4
  %93 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %94 = bitcast [1 x i64]* %93 to i32*
  %95 = load i32, i32* %94
  %96 = sub i32 %95, 1
  %97 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %92, i32 %96)
  %98 = load i8, i8* %delimiter_byte
  %99 = call i1 @"*UInt8@Object#===<UInt8>:Bool"(i8 %97, i8 %98)
  br label %exit26

else22:                                           ; preds = %exit25
  %100 = load i1, i1* %__temp_127
  br label %exit26

then23:                                           ; preds = %exit18
  %101 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %102 = bitcast [1 x i64]* %101 to i32*
  %103 = load i32, i32* %102
  %104 = icmp sgt i32 %103, 0
  br label %exit25

else24:                                           ; preds = %exit18
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %105 = phi i1 [ %104, %then23 ], [ %chomp, %else24 ]
  store i1 %105, i1* %__temp_127
  br i1 %105, label %then21, label %else22

exit26:                                           ; preds = %else22, %then21
  %106 = phi i1 [ %99, %then21 ], [ %100, %else22 ]
  br i1 %106, label %then19, label %else20

then27:                                           ; preds = %exit34
  %107 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %108 = bitcast [1 x i64]* %107 to i32*
  %109 = load i32, i32* %108
  %110 = sub i32 %109, 1
  %111 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %111
  %112 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %113 = bitcast [1 x i64]* %112 to i32*
  store i32 %110, i32* %113
  br label %exit35

else28:                                           ; preds = %exit34
  br label %exit35

then29:                                           ; preds = %exit33
  %114 = bitcast i32* %self to %"IO::FileDescriptor"*
  %115 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %114, i32 0, i32 4
  %116 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %117 = bitcast [1 x i64]* %116 to i32*
  %118 = load i32, i32* %117
  %119 = sub i32 %118, 1
  %120 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %115, i32 %119)
  %121 = call i1 @"*UInt8@Int#===<Char>:Bool"(i8 %120, i32 13)
  br label %exit34

else30:                                           ; preds = %exit33
  %122 = load i1, i1* %__temp_128
  br label %exit34

then31:                                           ; preds = %then19
  %123 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %124 = bitcast [1 x i64]* %123 to i32*
  %125 = load i32, i32* %124
  %126 = icmp sgt i32 %125, 0
  br label %exit33

else32:                                           ; preds = %then19
  %127 = load i1, i1* %__temp_129
  br label %exit33

exit33:                                           ; preds = %else32, %then31
  %128 = phi i1 [ %126, %then31 ], [ %127, %else32 ]
  store i1 %128, i1* %__temp_128
  br i1 %128, label %then29, label %else30

exit34:                                           ; preds = %else30, %then29
  %129 = phi i1 [ %121, %then29 ], [ %122, %else30 ]
  br i1 %129, label %then27, label %else28

exit35:                                           ; preds = %else28, %then27
  br label %exit36

exit36:                                           ; preds = %else20, %exit35
  %130 = bitcast i32* %self to %"IO::FileDescriptor"*
  %131 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %130, i32 0, i32 4
  %132 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %133 = bitcast [1 x i64]* %132 to i32*
  %134 = load i32, i32* %133
  %135 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %131, i32 0, i32 %134)
  store %"Slice(UInt8)" %135, %"Slice(UInt8)"* %2
  %136 = load %"Slice(UInt8)", %"Slice(UInt8)"* %2
  %137 = call %String* @"*String::new<Slice(UInt8)>:String"(%"Slice(UInt8)" %136)
  store %String* %137, %String** %string
  %138 = bitcast i32* %self to %"IO::FileDescriptor"*
  %139 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %138, i32 0, i32 4
  %140 = load i32, i32* %advance
  %141 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %139, i32 %140)
  store %"Slice(UInt8)" %141, %"Slice(UInt8)"* %3
  %142 = bitcast i32* %self to %"IO::FileDescriptor"*
  %143 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %142, i32 0, i32 4
  %144 = load %"Slice(UInt8)", %"Slice(UInt8)"* %3
  store %"Slice(UInt8)" %144, %"Slice(UInt8)"* %143
  %145 = load %String*, %String** %string
  ret %String* %145

while:                                            ; preds = %else51, %else15
  br i1 true, label %body, label %exit39

body:                                             ; preds = %while
  %146 = load i32, i32* %i
  %147 = bitcast i32* %self to %"IO::FileDescriptor"*
  %148 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %147, i32 0, i32 4
  %149 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %148, i32 0, i32 0
  %150 = load i32, i32* %149
  %151 = load i32, i32* %limit1
  %152 = call i32 @"*Math@Math::min<Int32, Int32>:Int32"(i32 %150, i32 %151)
  store i32 %152, i32* %available
  %153 = load %"String::Builder"*, %"String::Builder"** %buffer
  %154 = bitcast i32* %self to %"IO::FileDescriptor"*
  %155 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %154, i32 0, i32 4
  %156 = load i32, i32* %available
  %157 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %155, i32 0, i32 %156)
  store %"Slice(UInt8)" %157, %"Slice(UInt8)"* %4
  %158 = load %"Slice(UInt8)", %"Slice(UInt8)"* %4
  call void @"*String::Builder#write<Slice(UInt8)>:Nil"(%"String::Builder"* %153, %"Slice(UInt8)" %158)
  %159 = bitcast i32* %self to %"IO::FileDescriptor"*
  %160 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %159, i32 0, i32 4
  %161 = load i32, i32* %available
  %162 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %160, i32 %161)
  store %"Slice(UInt8)" %162, %"Slice(UInt8)"* %5
  %163 = bitcast i32* %self to %"IO::FileDescriptor"*
  %164 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %163, i32 0, i32 4
  %165 = load %"Slice(UInt8)", %"Slice(UInt8)"* %5
  store %"Slice(UInt8)" %165, %"Slice(UInt8)"* %164
  %166 = load i32, i32* %limit1
  %167 = load i32, i32* %available
  %168 = sub i32 %166, %167
  store i32 %168, i32* %limit1
  %169 = load i32, i32* %limit1
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %then40, label %else41

exit39:                                           ; preds = %while
  unreachable

then40:                                           ; preds = %body
  br label %exit42

else41:                                           ; preds = %body
  %171 = bitcast i32* %self to %"IO::FileDescriptor"*
  %172 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %171, i32 0, i32 4
  %173 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %172)
  br i1 %173, label %then43, label %else44

exit42:                                           ; preds = %exit54, %else49, %then40
  br i1 %chomp, label %then55, label %else56

then43:                                           ; preds = %else41
  %174 = call %"Slice(UInt8)" @"*IO::FileDescriptor+@IO::Buffered#fill_buffer:Slice(UInt8)"(i32* %self)
  br label %exit45

else44:                                           ; preds = %else41
  br label %exit45

exit45:                                           ; preds = %else44, %then43
  %175 = bitcast i32* %self to %"IO::FileDescriptor"*
  %176 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %175, i32 0, i32 4
  %177 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %176)
  br i1 %177, label %then46, label %else47

then46:                                           ; preds = %exit45
  %178 = load %"String::Builder"*, %"String::Builder"** %buffer
  %179 = getelementptr inbounds %"String::Builder", %"String::Builder"* %178, i32 0, i32 4
  %180 = load i32, i32* %179
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %then48, label %else49

else47:                                           ; preds = %exit45
  %182 = bitcast i32* %self to %"IO::FileDescriptor"*
  %183 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %182, i32 0, i32 4
  %184 = load i8, i8* %delimiter_byte
  %185 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Slice(T)#index<UInt8>:(Int32 | Nil)"(%"Slice(UInt8)"* %183, i8 %184)
  store %"(Int32 | Nil)" %185, %"(Int32 | Nil)"* %6
  %186 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %6
  store %"(Int32 | Nil)" %186, %"(Int32 | Nil)"* %index
  %187 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  %188 = load i32, i32* %187
  %189 = icmp eq i32 %188, 0
  %190 = xor i1 %189, true
  %191 = and i1 true, %190
  br i1 %191, label %then50, label %else51

then48:                                           ; preds = %then46
  ret %String* null

else49:                                           ; preds = %then46
  br label %exit42

then50:                                           ; preds = %else47
  %192 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %193 = bitcast [1 x i64]* %192 to i32*
  %194 = load i32, i32* %193
  %195 = load i32, i32* %limit1
  %196 = icmp sge i32 %194, %195
  br i1 %196, label %then52, label %else53

else51:                                           ; preds = %else47
  %197 = load i32, i32* %i
  %198 = add i32 %197, 1
  store i32 %198, i32* %i
  br label %while

then52:                                           ; preds = %then50
  %199 = load i32, i32* %limit1
  %200 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %200
  %201 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %202 = bitcast [1 x i64]* %201 to i32*
  store i32 %199, i32* %202
  br label %exit54

else53:                                           ; preds = %then50
  %203 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %204 = bitcast [1 x i64]* %203 to i32*
  %205 = load i32, i32* %204
  %206 = add i32 %205, 1
  %207 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %207
  %208 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %209 = bitcast [1 x i64]* %208 to i32*
  store i32 %206, i32* %209
  br label %exit54

exit54:                                           ; preds = %else53, %then52
  %210 = load %"String::Builder"*, %"String::Builder"** %buffer
  %211 = bitcast i32* %self to %"IO::FileDescriptor"*
  %212 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %211, i32 0, i32 4
  %213 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %214 = bitcast [1 x i64]* %213 to i32*
  %215 = load i32, i32* %214
  %216 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %212, i32 0, i32 %215)
  store %"Slice(UInt8)" %216, %"Slice(UInt8)"* %7
  %217 = load %"Slice(UInt8)", %"Slice(UInt8)"* %7
  call void @"*String::Builder#write<Slice(UInt8)>:Nil"(%"String::Builder"* %210, %"Slice(UInt8)" %217)
  %218 = bitcast i32* %self to %"IO::FileDescriptor"*
  %219 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %218, i32 0, i32 4
  %220 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %221 = bitcast [1 x i64]* %220 to i32*
  %222 = load i32, i32* %221
  %223 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %219, i32 %222)
  store %"Slice(UInt8)" %223, %"Slice(UInt8)"* %8
  %224 = bitcast i32* %self to %"IO::FileDescriptor"*
  %225 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %224, i32 0, i32 4
  %226 = load %"Slice(UInt8)", %"Slice(UInt8)"* %8
  store %"Slice(UInt8)" %226, %"Slice(UInt8)"* %225
  br label %exit42

then55:                                           ; preds = %exit42
  %227 = load %"String::Builder"*, %"String::Builder"** %buffer
  %228 = load i8, i8* %delimiter_byte
  %229 = call %"(Int32 | Nil)" @"*String::Builder#chomp!<UInt8>:(Int32 | Nil)"(%"String::Builder"* %227, i8 %228)
  store %"(Int32 | Nil)" %229, %"(Int32 | Nil)"* %9
  br label %exit57

else56:                                           ; preds = %exit42
  %230 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %10, i32 0, i32 0
  store i32 0, i32* %230
  %231 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %10, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %231
  br label %exit57

exit57:                                           ; preds = %else56, %then55
  %232 = phi %"(Int32 | Nil)"* [ %9, %then55 ], [ %10, %else56 ]
  %233 = load %"String::Builder"*, %"String::Builder"** %builder38
  %234 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %233)
  ret %String* %234
}

; Function Attrs: uwtable
define internal %String* @"*IO::FileDescriptor+@IO#gets<Char, Int32, Bool>:(String | Nil)"(i32* %self, i32 %delimiter, i32 %limit, i1 %chomp) #0 {
alloca:
  %__temp_108 = alloca i1
  %decoder = alloca %"IO::Decoder"*
  %__temp_122 = alloca i1
  %chomp_rn = alloca i1
  %buffer = alloca %"String::Builder"*
  %total = alloca i32
  %info = alloca %"(Tuple(Char, Int32) | Nil)"
  %__temp_125 = alloca %"Tuple(Char, Int32).26"
  %char = alloca i32
  %char_bytesize = alloca i32
  %info2 = alloca %"(Tuple(Char, Int32) | Nil)"
  %__temp_126 = alloca %"Tuple(Char, Int32).26"
  %char2 = alloca i32
  %char_bytesize2 = alloca i32
  %0 = alloca %"(Bool | IO::Decoder | Nil)"
  %1 = alloca %"(Bool | IO::Decoder | Nil)"
  %2 = alloca %"(Tuple(Char, Int32) | Nil)"
  %3 = alloca %"(Tuple(Char, Int32) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %4 = icmp slt i32 %limit, 0
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative limit'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

else:                                             ; preds = %entry
  %6 = call i1 @"*Char#ascii?:Bool"(i32 %delimiter)
  store i1 %6, i1* %__temp_108
  br i1 %6, label %then3, label %else4

then1:                                            ; preds = %exit
  %7 = load %"IO::Decoder"*, %"IO::Decoder"** %decoder
  %8 = trunc i32 %delimiter to i8
  %9 = call %String* @"*IO::Decoder#gets<IO::FileDescriptor+, UInt8, Int32, Bool>:(String | Nil)"(%"IO::Decoder"* %7, i32* %self, i8 %8, i32 %limit, i1 %chomp)
  ret %String* %9

else2:                                            ; preds = %exit
  %10 = icmp eq i32 %delimiter, 10
  store i1 %10, i1* %__temp_122
  br i1 %10, label %then5, label %else6

then3:                                            ; preds = %else
  %11 = call %"IO::Decoder"* @"*IO::FileDescriptor+@IO#decoder:(IO::Decoder | Nil)"(i32* %self)
  store %"IO::Decoder"* %11, %"IO::Decoder"** %decoder
  %12 = icmp eq %"IO::Decoder"* %11, null
  %13 = select i1 %12, i32 0, i32 69
  %14 = getelementptr inbounds %"(Bool | IO::Decoder | Nil)", %"(Bool | IO::Decoder | Nil)"* %0, i32 0, i32 0
  store i32 %13, i32* %14
  %15 = getelementptr inbounds %"(Bool | IO::Decoder | Nil)", %"(Bool | IO::Decoder | Nil)"* %0, i32 0, i32 1
  %16 = bitcast [1 x i64]* %15 to %"IO::Decoder"**
  store %"IO::Decoder"* %11, %"IO::Decoder"** %16
  br label %exit

else4:                                            ; preds = %else
  %17 = load i1, i1* %__temp_108
  %18 = getelementptr inbounds %"(Bool | IO::Decoder | Nil)", %"(Bool | IO::Decoder | Nil)"* %1, i32 0, i32 0
  store i32 147, i32* %18
  %19 = zext i1 %17 to i64
  %20 = getelementptr inbounds %"(Bool | IO::Decoder | Nil)", %"(Bool | IO::Decoder | Nil)"* %1, i32 0, i32 1
  %21 = bitcast [1 x i64]* %20 to i64*
  store i64 %19, i64* %21
  br label %exit

exit:                                             ; preds = %else4, %then3
  %22 = phi %"(Bool | IO::Decoder | Nil)"* [ %0, %then3 ], [ %1, %else4 ]
  %23 = getelementptr inbounds %"(Bool | IO::Decoder | Nil)", %"(Bool | IO::Decoder | Nil)"* %22, i32 0, i32 0
  %24 = load i32, i32* %23
  %25 = icmp eq i32 %24, 0
  %26 = xor i1 %25, true
  %27 = and i1 true, %26
  %28 = getelementptr inbounds %"(Bool | IO::Decoder | Nil)", %"(Bool | IO::Decoder | Nil)"* %22, i32 0, i32 1
  %29 = bitcast [1 x i64]* %28 to i1*
  %30 = load i1, i1* %29
  %31 = icmp eq i32 %24, 147
  %32 = xor i1 %30, true
  %33 = and i1 %31, %32
  %34 = xor i1 %33, true
  %35 = and i1 %27, %34
  br i1 %35, label %then1, label %else2

then5:                                            ; preds = %else2
  br label %exit7

else6:                                            ; preds = %else2
  %36 = load i1, i1* %__temp_122
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %37 = phi i1 [ %chomp, %then5 ], [ %36, %else6 ]
  store i1 %37, i1* %chomp_rn
  %38 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  store %"String::Builder"* %38, %"String::Builder"** %buffer
  store i32 0, i32* %total
  br label %while

while:                                            ; preds = %else34, %exit7
  br i1 true, label %body, label %exit8

body:                                             ; preds = %while
  %39 = call %"(Tuple(Char, Int32) | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_char_with_bytesize:(Tuple(Char, Int32) | Nil)"(i32* %self)
  store %"(Tuple(Char, Int32) | Nil)" %39, %"(Tuple(Char, Int32) | Nil)"* %2
  %40 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %2
  store %"(Tuple(Char, Int32) | Nil)" %40, %"(Tuple(Char, Int32) | Nil)"* %info
  %41 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %info, i32 0, i32 0
  %42 = load i32, i32* %41
  %43 = icmp eq i32 %42, 0
  %44 = xor i1 %43, true
  %45 = and i1 true, %44
  br i1 %45, label %then9, label %else10

exit8:                                            ; preds = %then33, %exit32, %then25, %then23, %else21, %while
  %46 = load %"String::Builder"*, %"String::Builder"** %buffer
  %47 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %46)
  ret %String* %47

then9:                                            ; preds = %body
  br label %exit11

else10:                                           ; preds = %body
  %48 = load %"String::Builder"*, %"String::Builder"** %buffer
  %49 = call i1 @"*String::Builder#empty?:Bool"(%"String::Builder"* %48)
  br i1 %49, label %then12, label %else13

exit11:                                           ; preds = %then9
  %50 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %info, i32 0, i32 1
  %51 = bitcast [1 x i64]* %50 to %"Tuple(Char, Int32).26"*
  %52 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %51
  store %"Tuple(Char, Int32).26" %52, %"Tuple(Char, Int32).26"* %__temp_125
  %53 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %__temp_125, i32 0, i32 0
  %54 = load i32, i32* %53
  store i32 %54, i32* %char
  %55 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %__temp_125, i32 0, i32 1
  %56 = load i32, i32* %55
  store i32 %56, i32* %char_bytesize
  %57 = load i1, i1* %chomp_rn
  br i1 %57, label %then17, label %else18

then12:                                           ; preds = %else10
  br label %exit14

else13:                                           ; preds = %else10
  %58 = load %"String::Builder"*, %"String::Builder"** %buffer
  %59 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %58)
  br label %exit14

exit14:                                           ; preds = %else13, %then12
  %60 = phi %String* [ null, %then12 ], [ %59, %else13 ]
  ret %String* %60

then15:                                           ; preds = %exit19
  %61 = call %"(Tuple(Char, Int32) | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_char_with_bytesize:(Tuple(Char, Int32) | Nil)"(i32* %self)
  store %"(Tuple(Char, Int32) | Nil)" %61, %"(Tuple(Char, Int32) | Nil)"* %3
  %62 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %3
  store %"(Tuple(Char, Int32) | Nil)" %62, %"(Tuple(Char, Int32) | Nil)"* %info2
  %63 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %info2, i32 0, i32 0
  %64 = load i32, i32* %63
  %65 = icmp eq i32 %64, 0
  %66 = xor i1 %65, true
  %67 = and i1 true, %66
  br i1 %67, label %then20, label %else21

else16:                                           ; preds = %exit19
  %68 = load i32, i32* %char
  %69 = icmp eq i32 %68, %delimiter
  br i1 %69, label %then28, label %else29

then17:                                           ; preds = %exit11
  %70 = load i32, i32* %char
  %71 = icmp eq i32 %70, 13
  br label %exit19

else18:                                           ; preds = %exit11
  %72 = load i1, i1* %chomp_rn
  br label %exit19

exit19:                                           ; preds = %else18, %then17
  %73 = phi i1 [ %71, %then17 ], [ %72, %else18 ]
  br i1 %73, label %then15, label %else16

then20:                                           ; preds = %then15
  br label %exit22

else21:                                           ; preds = %then15
  %74 = load %"String::Builder"*, %"String::Builder"** %buffer
  %75 = load i32, i32* %char
  %76 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %74, i32 %75)
  br label %exit8

exit22:                                           ; preds = %then20
  %77 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %info2, i32 0, i32 1
  %78 = bitcast [1 x i64]* %77 to %"Tuple(Char, Int32).26"*
  %79 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %78
  store %"Tuple(Char, Int32).26" %79, %"Tuple(Char, Int32).26"* %__temp_126
  %80 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %__temp_126, i32 0, i32 0
  %81 = load i32, i32* %80
  store i32 %81, i32* %char2
  %82 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %__temp_126, i32 0, i32 1
  %83 = load i32, i32* %82
  store i32 %83, i32* %char_bytesize2
  %84 = load i32, i32* %char2
  %85 = icmp eq i32 %84, 10
  br i1 %85, label %then23, label %else24

then23:                                           ; preds = %exit22
  br label %exit8

else24:                                           ; preds = %exit22
  %86 = load %"String::Builder"*, %"String::Builder"** %buffer
  %87 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %86, i32 13)
  %88 = load i32, i32* %total
  %89 = load i32, i32* %char_bytesize
  %90 = add i32 %88, %89
  store i32 %90, i32* %total
  %91 = load i32, i32* %total
  %92 = icmp sge i32 %91, %limit
  br i1 %92, label %then25, label %else26

then25:                                           ; preds = %else24
  br label %exit8

else26:                                           ; preds = %else24
  %93 = load %"String::Builder"*, %"String::Builder"** %buffer
  %94 = load i32, i32* %char2
  %95 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %93, i32 %94)
  %96 = load i32, i32* %total
  %97 = load i32, i32* %char_bytesize2
  %98 = add i32 %96, %97
  store i32 %98, i32* %total
  br label %exit27

exit27:                                           ; preds = %else29, %else26
  %99 = load i32, i32* %total
  %100 = load i32, i32* %char_bytesize
  %101 = add i32 %99, %100
  store i32 %101, i32* %total
  %102 = load i32, i32* %total
  %103 = icmp sge i32 %102, %limit
  br i1 %103, label %then33, label %else34

then28:                                           ; preds = %else16
  br i1 %chomp, label %then30, label %else31

else29:                                           ; preds = %else16
  %104 = load %"String::Builder"*, %"String::Builder"** %buffer
  %105 = load i32, i32* %char
  %106 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %104, i32 %105)
  br label %exit27

then30:                                           ; preds = %then28
  br label %exit32

else31:                                           ; preds = %then28
  %107 = load %"String::Builder"*, %"String::Builder"** %buffer
  %108 = load i32, i32* %char
  %109 = call %"String::Builder"* @"*String::Builder@IO#<<<Char>:String::Builder"(%"String::Builder"* %107, i32 %108)
  br label %exit32

exit32:                                           ; preds = %else31, %then30
  br label %exit8

then33:                                           ; preds = %exit27
  br label %exit8

else34:                                           ; preds = %exit27
  br label %while
}

; Function Attrs: uwtable
define internal %"IO::Decoder"* @"*IO::FileDescriptor+@IO#decoder:(IO::Decoder | Nil)"(i32* %self) #0 {
alloca:
  %encoding = alloca %"(IO::EncodingOptions | Nil)"
  %__temp_109 = alloca %"IO::Decoder"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 3
  %2 = load %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %1
  store %"(IO::EncodingOptions | Nil)" %2, %"(IO::EncodingOptions | Nil)"* %encoding
  %3 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %1, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = icmp eq i32 %4, 0
  %6 = xor i1 %5, true
  %7 = and i1 true, %6
  br i1 %7, label %then, label %else

then:                                             ; preds = %entry
  %8 = bitcast i32* %self to %"IO::FileDescriptor"*
  %9 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %8, i32 0, i32 2
  %10 = load %"IO::Decoder"*, %"IO::Decoder"** %9
  store %"IO::Decoder"* %10, %"IO::Decoder"** %__temp_109
  %11 = icmp ne %"IO::Decoder"* %10, null
  br i1 %11, label %then1, label %else2

else:                                             ; preds = %entry
  br label %exit3

then1:                                            ; preds = %then
  %12 = load %"IO::Decoder"*, %"IO::Decoder"** %__temp_109
  br label %exit

else2:                                            ; preds = %then
  %13 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %encoding, i32 0, i32 1
  %14 = bitcast [3 x i64]* %13 to %"IO::EncodingOptions"*
  %15 = load %"IO::EncodingOptions", %"IO::EncodingOptions"* %14
  %16 = call %"IO::Decoder"* @"*IO::Decoder::new<IO::EncodingOptions>:IO::Decoder"(%"IO::EncodingOptions" %15)
  %17 = bitcast i32* %self to %"IO::FileDescriptor"*
  %18 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %17, i32 0, i32 2
  store %"IO::Decoder"* %16, %"IO::Decoder"** %18
  br label %exit

exit:                                             ; preds = %else2, %then1
  %19 = phi %"IO::Decoder"* [ %12, %then1 ], [ %16, %else2 ]
  br label %exit3

exit3:                                            ; preds = %else, %exit
  %20 = phi %"IO::Decoder"* [ %19, %exit ], [ null, %else ]
  ret %"IO::Decoder"* %20
}

; Function Attrs: uwtable
define internal %"IO::Decoder"* @"*IO::Decoder::new<IO::EncodingOptions>:IO::Decoder"(%"IO::EncodingOptions" %encoding_options) #0 {
alloca:
  %_ = alloca %"IO::Decoder"*
  %encoding_options1 = alloca %"IO::EncodingOptions"
  br label %entry

entry:                                            ; preds = %alloca
  store %"IO::EncodingOptions" %encoding_options, %"IO::EncodingOptions"* %encoding_options1
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"IO::Decoder"* getelementptr (%"IO::Decoder", %"IO::Decoder"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"IO::Decoder"*
  %2 = bitcast %"IO::Decoder"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"IO::Decoder"* getelementptr (%"IO::Decoder", %"IO::Decoder"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %1, i32 0, i32 0
  store i32 69, i32* %3
  store %"IO::Decoder"* %1, %"IO::Decoder"** %_
  %4 = load %"IO::Decoder"*, %"IO::Decoder"** %_
  %5 = load %"IO::EncodingOptions", %"IO::EncodingOptions"* %encoding_options1
  %6 = call i1 @"*IO::Decoder#initialize<IO::EncodingOptions>:Bool"(%"IO::Decoder"* %4, %"IO::EncodingOptions" %5)
  %7 = load %"IO::Decoder"*, %"IO::Decoder"** %_
  call void @"*GC::add_finalizer<IO::Decoder>:Nil"(%"IO::Decoder"* %7)
  %8 = load %"IO::Decoder"*, %"IO::Decoder"** %_
  ret %"IO::Decoder"* %8
}

; Function Attrs: uwtable
define internal i1 @"*IO::Decoder#initialize<IO::EncodingOptions>:Bool"(%"IO::Decoder"* %self, %"IO::EncodingOptions" %encoding_options) #0 {
alloca:
  %encoding_options1 = alloca %"IO::EncodingOptions"
  %0 = alloca %Iconv
  %1 = alloca %"Slice(UInt8)"
  %2 = alloca %"Slice(UInt8)"
  %3 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"IO::EncodingOptions" %encoding_options, %"IO::EncodingOptions"* %encoding_options1
  %4 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 3
  %5 = load %"IO::EncodingOptions", %"IO::EncodingOptions"* %encoding_options1
  store %"IO::EncodingOptions" %5, %"IO::EncodingOptions"* %4
  %6 = getelementptr inbounds %"IO::EncodingOptions", %"IO::EncodingOptions"* %encoding_options1, i32 0, i32 0
  %7 = load %String*, %String** %6
  %8 = getelementptr inbounds %"IO::EncodingOptions", %"IO::EncodingOptions"* %encoding_options1, i32 0, i32 1
  %9 = load %"(Symbol | Nil)", %"(Symbol | Nil)"* %8
  %10 = call %Iconv @"*Iconv::new<String, String, (Symbol | Nil)>:Iconv"(%String* %7, %String* bitcast ({ i32, i32, i32, [6 x i8] }* @"'UTF-8'" to %String*), %"(Symbol | Nil)" %9)
  store %Iconv %10, %Iconv* %0
  %11 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 4
  %12 = load %Iconv, %Iconv* %0
  store %Iconv %12, %Iconv* %11
  %13 = call i8* @"*GC::malloc_atomic<Int32>:Pointer(Void)"(i32 4096)
  %14 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i32 935, i8* %13, i32 4096)
  store %"Slice(UInt8)" %14, %"Slice(UInt8)"* %1
  %15 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %16 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  store %"Slice(UInt8)" %16, %"Slice(UInt8)"* %15
  %17 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %18 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %17, i32 0, i32 1
  %19 = load i8*, i8** %18
  %20 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  store i8* %19, i8** %20
  %21 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 0)
  %22 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  store i64 %21, i64* %22
  %23 = call i8* @"*GC::malloc_atomic<Int32>:Pointer(Void)"(i32 4096)
  %24 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i32 935, i8* %23, i32 4096)
  store %"Slice(UInt8)" %24, %"Slice(UInt8)"* %2
  %25 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 7
  %26 = load %"Slice(UInt8)", %"Slice(UInt8)"* %2
  store %"Slice(UInt8)" %26, %"Slice(UInt8)"* %25
  %27 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::empty:Slice(UInt8)"(i32 935)
  store %"Slice(UInt8)" %27, %"Slice(UInt8)"* %3
  %28 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %29 = load %"Slice(UInt8)", %"Slice(UInt8)"* %3
  store %"Slice(UInt8)" %29, %"Slice(UInt8)"* %28
  %30 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 8
  store i1 false, i1* %30
  ret i1 false
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer<IO::Decoder>:Nil"(%"IO::Decoder"* %object) #0 {
entry:
  call void @"*GC::add_finalizer_impl<IO::Decoder>:Nil"(%"IO::Decoder"* %object)
  ret void
}

; Function Attrs: uwtable
define internal void @"*GC::add_finalizer_impl<IO::Decoder>:Nil"(%"IO::Decoder"* %object) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"IO::Decoder"* %object to i8*
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i8*, i8*)* @"~proc4Proc(Pointer(Void), Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108" to i8*), i8** %2
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %3
  %4 = load %"->", %"->"* %0
  %5 = call i8* @"~check_proc_is_not_closure"(%"->" %4)
  %6 = bitcast i8* %5 to %Nil (i8*, i8*)*
  call void @GC_register_finalizer_ignore_self(i8* %1, %Nil (i8*, i8*)* %6, i8* null, %"->"* null, i8** null)
  ret void
}

; Function Attrs: uwtable
define internal void @"~proc4Proc(Pointer(Void), Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/gc/boehm.cr:108"(i8* %obj, i8* %data) #0 {
entry:
  %0 = bitcast i8* %obj to %"IO::Decoder"*
  call void @"*IO::Decoder#finalize:Nil"(%"IO::Decoder"* %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::Decoder#finalize:Nil"(%"IO::Decoder"* %self) #0 {
entry:
  call void @"*IO::Decoder#close:Nil"(%"IO::Decoder"* %self)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::Decoder#close:Nil"(%"IO::Decoder"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 8
  %1 = load i1, i1* %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  %2 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 8
  store i1 true, i1* %2
  %3 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 4
  call void @"*Iconv#close:Nil"(%Iconv* %3)
  ret void
}

; Function Attrs: uwtable
define internal %String* @"*IO::Decoder#gets<IO::FileDescriptor+, UInt8, Int32, Bool>:(String | Nil)"(%"IO::Decoder"* %self, i32* %io, i8 %delimiter, i32 %limit, i1 %chomp) #0 {
alloca:
  %index = alloca %"(Int32 | Nil)"
  %limit1 = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  %str = alloca %"String::Builder"*
  %capacity = alloca i32
  %builder = alloca %"String::Builder"*
  %capacity8 = alloca i32
  %builder9 = alloca %"String::Builder"*
  %i = alloca i32
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"(Int32 | Nil)"
  %3 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %limit, i32* %limit1
  call void @"*IO::Decoder#read<IO::FileDescriptor+>:Nil"(%"IO::Decoder"* %self, i32* %io)
  %4 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %5 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %4)
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  ret %String* null

else:                                             ; preds = %entry
  %6 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %7 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Slice(T)#index<UInt8>:(Int32 | Nil)"(%"Slice(UInt8)"* %6, i8 %delimiter)
  store %"(Int32 | Nil)" %7, %"(Int32 | Nil)"* %0
  %8 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  store %"(Int32 | Nil)" %8, %"(Int32 | Nil)"* %index
  %9 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  %10 = load i32, i32* %9
  %11 = icmp eq i32 %10, 0
  %12 = xor i1 %11, true
  %13 = and i1 true, %12
  br i1 %13, label %then2, label %else3

then2:                                            ; preds = %else
  %14 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %15 = bitcast [1 x i64]* %14 to i32*
  %16 = load i32, i32* %15
  %17 = load i32, i32* %limit1
  %18 = icmp sge i32 %16, %17
  br i1 %18, label %then4, label %else5

else3:                                            ; preds = %else
  %19 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %20 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %19, i32 0, i32 0
  %21 = load i32, i32* %20
  %22 = load i32, i32* %limit1
  %23 = icmp sge i32 %21, %22
  br i1 %23, label %then6, label %else7

then4:                                            ; preds = %then2
  %24 = load i32, i32* %limit1
  %25 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %25
  %26 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %27 = bitcast [1 x i64]* %26 to i32*
  store i32 %24, i32* %27
  br label %exit

else5:                                            ; preds = %then2
  %28 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %29 = bitcast [1 x i64]* %28 to i32*
  %30 = load i32, i32* %29
  %31 = add i32 %30, 1
  %32 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %32
  %33 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %34 = bitcast [1 x i64]* %33 to i32*
  store i32 %31, i32* %34
  br label %exit

exit:                                             ; preds = %else5, %then4
  %35 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %36 = bitcast [1 x i64]* %35 to i32*
  %37 = load i32, i32* %36
  %38 = call %String* @"*IO::Decoder#gets_index<Int32, UInt8, Bool>:String"(%"IO::Decoder"* %self, i32 %37, i8 %delimiter, i1 %chomp)
  ret %String* %38

then6:                                            ; preds = %else3
  %39 = load i32, i32* %limit1
  %40 = call %String* @"*IO::Decoder#gets_index<Int32, UInt8, Bool>:String"(%"IO::Decoder"* %self, i32 %39, i8 %delimiter, i1 %chomp)
  ret %String* %40

else7:                                            ; preds = %else3
  store i32 64, i32* %capacity
  %41 = load i32, i32* %capacity
  store i32 %41, i32* %capacity8
  %42 = load i32, i32* %capacity8
  %43 = call %"String::Builder"* @"*String::Builder::new<Int32>:String::Builder"(i32 %42)
  store %"String::Builder"* %43, %"String::Builder"** %builder9
  %44 = load %"String::Builder"*, %"String::Builder"** %builder9
  store %"String::Builder"* %44, %"String::Builder"** %builder
  %45 = load %"String::Builder"*, %"String::Builder"** %builder
  store %"String::Builder"* %45, %"String::Builder"** %str
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %else20, %else7
  br i1 true, label %body, label %exit10

body:                                             ; preds = %while
  %46 = load i32, i32* %i
  %47 = load i32, i32* %limit1
  %48 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %49 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %48, i32 0, i32 0
  %50 = load i32, i32* %49
  %51 = sub i32 %47, %50
  store i32 %51, i32* %limit1
  %52 = load %"String::Builder"*, %"String::Builder"** %str
  %53 = call %"Slice(UInt8)" @"*IO::Decoder#write<String::Builder>:Slice(UInt8)"(%"IO::Decoder"* %self, %"String::Builder"* %52)
  call void @"*IO::Decoder#read<IO::FileDescriptor+>:Nil"(%"IO::Decoder"* %self, i32* %io)
  %54 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %55 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %54)
  br i1 %55, label %then11, label %else12

exit10:                                           ; preds = %while
  unreachable

then11:                                           ; preds = %body
  br label %exit13

else12:                                           ; preds = %body
  %56 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %57 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Slice(T)#index<UInt8>:(Int32 | Nil)"(%"Slice(UInt8)"* %56, i8 %delimiter)
  store %"(Int32 | Nil)" %57, %"(Int32 | Nil)"* %1
  %58 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  store %"(Int32 | Nil)" %58, %"(Int32 | Nil)"* %index
  %59 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  %60 = load i32, i32* %59
  %61 = icmp eq i32 %60, 0
  %62 = xor i1 %61, true
  %63 = and i1 true, %62
  br i1 %63, label %then14, label %else15

exit13:                                           ; preds = %then19, %exit18, %then11
  br i1 %chomp, label %then21, label %else22

then14:                                           ; preds = %else12
  %64 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %65 = bitcast [1 x i64]* %64 to i32*
  %66 = load i32, i32* %65
  %67 = load i32, i32* %limit1
  %68 = icmp sge i32 %66, %67
  br i1 %68, label %then16, label %else17

else15:                                           ; preds = %else12
  %69 = load i32, i32* %limit1
  %70 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %71 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %70, i32 0, i32 0
  %72 = load i32, i32* %71
  %73 = icmp slt i32 %69, %72
  br i1 %73, label %then19, label %else20

then16:                                           ; preds = %then14
  %74 = load i32, i32* %limit1
  %75 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %75
  %76 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %77 = bitcast [1 x i64]* %76 to i32*
  store i32 %74, i32* %77
  br label %exit18

else17:                                           ; preds = %then14
  %78 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %79 = bitcast [1 x i64]* %78 to i32*
  %80 = load i32, i32* %79
  %81 = add i32 %80, 1
  %82 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %82
  %83 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %84 = bitcast [1 x i64]* %83 to i32*
  store i32 %81, i32* %84
  br label %exit18

exit18:                                           ; preds = %else17, %then16
  %85 = load %"String::Builder"*, %"String::Builder"** %str
  %86 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %87 = bitcast [1 x i64]* %86 to i32*
  %88 = load i32, i32* %87
  %89 = call %"Slice(UInt8)" @"*IO::Decoder#write<String::Builder, Int32>:Slice(UInt8)"(%"IO::Decoder"* %self, %"String::Builder"* %85, i32 %88)
  br label %exit13

then19:                                           ; preds = %else15
  %90 = load %"String::Builder"*, %"String::Builder"** %str
  %91 = load i32, i32* %limit1
  %92 = call %"Slice(UInt8)" @"*IO::Decoder#write<String::Builder, Int32>:Slice(UInt8)"(%"IO::Decoder"* %self, %"String::Builder"* %90, i32 %91)
  br label %exit13

else20:                                           ; preds = %else15
  %93 = load i32, i32* %i
  %94 = add i32 %93, 1
  store i32 %94, i32* %i
  br label %while

then21:                                           ; preds = %exit13
  %95 = load %"String::Builder"*, %"String::Builder"** %str
  %96 = call %"(Int32 | Nil)" @"*String::Builder#chomp!<UInt8>:(Int32 | Nil)"(%"String::Builder"* %95, i8 %delimiter)
  store %"(Int32 | Nil)" %96, %"(Int32 | Nil)"* %2
  br label %exit23

else22:                                           ; preds = %exit13
  %97 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %3, i32 0, i32 0
  store i32 0, i32* %97
  %98 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %3, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %98
  br label %exit23

exit23:                                           ; preds = %else22, %then21
  %99 = phi %"(Int32 | Nil)"* [ %2, %then21 ], [ %3, %else22 ]
  %100 = load %"String::Builder"*, %"String::Builder"** %builder9
  %101 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %100)
  ret %String* %101
}

; Function Attrs: uwtable
define internal void @"*IO::Decoder#read<IO::FileDescriptor+>:Nil"(%"IO::Decoder"* %self, i32* %io) #0 {
alloca:
  %buffer_remaining = alloca i32
  %out_buffer = alloca i8*
  %out_buffer_left = alloca i64
  %result = alloca i64
  %__temp_111 = alloca i32
  %old_in_buffer_left = alloca i64
  %i = alloca i32
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %exit22, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %2 = load i32, i32* %i
  %3 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %4 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %3)
  br i1 %4, label %then, label %else

exit:                                             ; preds = %while
  unreachable

then:                                             ; preds = %body
  br label %exit1

else:                                             ; preds = %body
  ret void

exit1:                                            ; preds = %then
  %5 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %6 = load i64, i64* %5
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %then2, label %else3

then2:                                            ; preds = %exit1
  %8 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %9 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %8, i32 0, i32 1
  %10 = load i8*, i8** %9
  %11 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  store i8* %10, i8** %11
  %12 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %13 = load %"Slice(UInt8)", %"Slice(UInt8)"* %12
  %14 = call i32 @"*IO::FileDescriptor+@IO::Buffered#read<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %13)
  %15 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 %14)
  %16 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  store i64 %15, i64* %16
  br label %exit4

else3:                                            ; preds = %exit1
  br label %exit4

exit4:                                            ; preds = %else3, %then2
  %17 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %18 = load i64, i64* %17
  %19 = icmp ult i64 %18, 16
  %20 = and i1 true, %19
  br i1 %20, label %then5, label %else6

then5:                                            ; preds = %exit4
  %21 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %22 = load i64, i64* %21
  %23 = sub i64 4096, %22
  %24 = trunc i64 %23 to i32
  %25 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %26 = load i8*, i8** %25
  %27 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %28 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %27, i32 0, i32 1
  %29 = load i8*, i8** %28
  %30 = ptrtoint i8* %26 to i64
  %31 = ptrtoint i8* %29 to i64
  %32 = sub i64 %30, %31
  %33 = sdiv exact i64 %32, ptrtoint (i8* getelementptr inbounds (i8, i8* null, i32 1) to i64)
  %34 = sext i32 %24 to i64
  %35 = sub i64 %34, %33
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %buffer_remaining
  %37 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %38 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %39 = load i8*, i8** %38
  %40 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %41 = load i64, i64* %40
  %42 = call i8* @"*Slice(UInt8)@Slice(T)#copy_from<Pointer(UInt8), UInt64>:Pointer(UInt8)"(%"Slice(UInt8)"* %37, i8* %39, i64 %41)
  %43 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %44 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %43, i32 0, i32 1
  %45 = load i8*, i8** %44
  %46 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  store i8* %45, i8** %46
  %47 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %48 = load i64, i64* %47
  %49 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %50 = load i8*, i8** %49
  %51 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %52 = load i64, i64* %51
  %53 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<UInt64>:Pointer(UInt8)"(i8* %50, i64 %52)
  %54 = load i32, i32* %buffer_remaining
  %55 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %53, i32 %54)
  store %"Slice(UInt8)" %55, %"Slice(UInt8)"* %0
  %56 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %57 = call i32 @"*IO::FileDescriptor+@IO::Buffered#read<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %56)
  %58 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 %57)
  %59 = add i64 %48, %58
  %60 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  store i64 %59, i64* %60
  br label %exit7

else6:                                            ; preds = %exit4
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %61 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %62 = load i64, i64* %61
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %then8, label %else9

then8:                                            ; preds = %exit7
  br label %exit10

else9:                                            ; preds = %exit7
  %64 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 7
  %65 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %64, i32 0, i32 1
  %66 = load i8*, i8** %65
  store i8* %66, i8** %out_buffer
  %67 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 4096)
  store i64 %67, i64* %out_buffer_left
  %68 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 4
  %69 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %70 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %71 = call i64 @"*Iconv#convert<Pointer(Pointer(UInt8)), Pointer(UInt64), Pointer(Pointer(UInt8)), Pointer(UInt64)>:UInt64"(%Iconv* %68, i8** %69, i64* %70, i8** %out_buffer, i64* %out_buffer_left)
  store i64 %71, i64* %result
  %72 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 7
  %73 = load i64, i64* %out_buffer_left
  %74 = sub i64 4096, %73
  %75 = trunc i64 %74 to i32
  %76 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %72, i32 0, i32 %75)
  store %"Slice(UInt8)" %76, %"Slice(UInt8)"* %1
  %77 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %78 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  store %"Slice(UInt8)" %78, %"Slice(UInt8)"* %77
  %79 = load i64, i64* %result
  %80 = icmp eq i64 %79, -1
  br i1 %80, label %then11, label %else12

exit10:                                           ; preds = %else12, %then8
  ret void

then11:                                           ; preds = %else9
  %81 = call i32 @"*Errno::value:Int32"()
  store i32 %81, i32* %__temp_111
  %82 = load i32, i32* %__temp_111
  %83 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 92, i32 %82)
  br i1 %83, label %then13, label %else14

else12:                                           ; preds = %else9
  br label %exit10

then13:                                           ; preds = %then11
  %84 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 4
  %85 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %86 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %87 = call %"(UInt64 | Nil)" @"*Iconv#handle_invalid<Pointer(Pointer(UInt8)), Pointer(UInt64)>:(UInt64 | Nil)"(%Iconv* %84, i8** %85, i64* %86)
  br label %exit15

else14:                                           ; preds = %then11
  %88 = load i32, i32* %__temp_111
  %89 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 22, i32 %88)
  br i1 %89, label %then16, label %else17

exit15:                                           ; preds = %exit21, %then13
  br label %exit22

then16:                                           ; preds = %else14
  %90 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %91 = load i64, i64* %90
  store i64 %91, i64* %old_in_buffer_left
  %92 = call i64 @"*IO::Decoder#refill_in_buffer<IO::FileDescriptor+>:UInt64"(%"IO::Decoder"* %self, i32* %io)
  %93 = load i64, i64* %old_in_buffer_left
  %94 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %95 = load i64, i64* %94
  %96 = icmp eq i64 %93, %95
  br i1 %96, label %then18, label %else19

else17:                                           ; preds = %else14
  br label %exit21

then18:                                           ; preds = %then16
  %97 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 4
  %98 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %99 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %100 = call %"(UInt64 | Nil)" @"*Iconv#handle_invalid<Pointer(Pointer(UInt8)), Pointer(UInt64)>:(UInt64 | Nil)"(%Iconv* %97, i8** %98, i64* %99)
  br label %exit20

else19:                                           ; preds = %then16
  br label %exit20

exit20:                                           ; preds = %else19, %then18
  br label %exit21

exit21:                                           ; preds = %else17, %exit20
  br label %exit15

exit22:                                           ; preds = %exit15
  %101 = load i32, i32* %i
  %102 = add i32 %101, 1
  store i32 %102, i32* %i
  br label %while
}

; Function Attrs: uwtable
define internal i8* @"*Slice(UInt8)@Slice(T)#copy_from<Pointer(UInt8), UInt64>:Pointer(UInt8)"(%"Slice(UInt8)"* %self, i8* %source, i64 %count) #0 {
entry:
  %0 = call i8* @"*Slice(UInt8)@Slice(T)#pointer<UInt64>:Pointer(UInt8)"(%"Slice(UInt8)"* %self, i64 %count)
  %1 = call i8* @"*Pointer(UInt8)@Pointer(T)#copy_from<Pointer(UInt8), UInt64>:Pointer(UInt8)"(i8* %0, i8* %source, i64 %count)
  ret i8* %1
}

; Function Attrs: uwtable
define internal i8* @"*Slice(UInt8)@Slice(T)#pointer<UInt64>:Pointer(UInt8)"(%"Slice(UInt8)"* %self, i64 %size) #0 {
alloca:
  %__temp_110 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = icmp ule i64 0, %size
  %1 = or i1 true, %0
  store i1 %1, i1* %__temp_110
  br i1 %1, label %then1, label %else2

then:                                             ; preds = %exit
  br label %exit3

else:                                             ; preds = %exit
  %2 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %2)
  unreachable

then1:                                            ; preds = %entry
  %3 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = icmp sge i32 %4, 0
  %6 = sext i32 %4 to i64
  %7 = icmp ule i64 %size, %6
  %8 = and i1 %5, %7
  br label %exit

else2:                                            ; preds = %entry
  %9 = load i1, i1* %__temp_110
  br label %exit

exit:                                             ; preds = %else2, %then1
  %10 = phi i1 [ %8, %then1 ], [ %9, %else2 ]
  br i1 %10, label %then, label %else

exit3:                                            ; preds = %then
  %11 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %12 = load i8*, i8** %11
  ret i8* %12
}

; Function Attrs: uwtable
define internal i64 @"*IO::Decoder#refill_in_buffer<IO::FileDescriptor+>:UInt64"(%"IO::Decoder"* %self, i32* %io) #0 {
alloca:
  %buffer_remaining = alloca i32
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %2 = load i64, i64* %1
  %3 = sub i64 4096, %2
  %4 = trunc i64 %3 to i32
  %5 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %6 = load i8*, i8** %5
  %7 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %8 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %7, i32 0, i32 1
  %9 = load i8*, i8** %8
  %10 = ptrtoint i8* %6 to i64
  %11 = ptrtoint i8* %9 to i64
  %12 = sub i64 %10, %11
  %13 = sdiv exact i64 %12, ptrtoint (i8* getelementptr inbounds (i8, i8* null, i32 1) to i64)
  %14 = sext i32 %4 to i64
  %15 = sub i64 %14, %13
  %16 = trunc i64 %15 to i32
  store i32 %16, i32* %buffer_remaining
  %17 = load i32, i32* %buffer_remaining
  %18 = icmp slt i32 %17, 64
  br i1 %18, label %then, label %else

then:                                             ; preds = %entry
  %19 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %20 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %21 = load i8*, i8** %20
  %22 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %23 = load i64, i64* %22
  %24 = call i8* @"*Slice(UInt8)@Slice(T)#copy_from<Pointer(UInt8), UInt64>:Pointer(UInt8)"(%"Slice(UInt8)"* %19, i8* %21, i64 %23)
  %25 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 5
  %26 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %25, i32 0, i32 1
  %27 = load i8*, i8** %26
  %28 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  store i8* %27, i8** %28
  %29 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %30 = load i64, i64* %29
  %31 = sub i64 4096, %30
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %buffer_remaining
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %33 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %34 = load i64, i64* %33
  %35 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 2
  %36 = load i8*, i8** %35
  %37 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  %38 = load i64, i64* %37
  %39 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<UInt64>:Pointer(UInt8)"(i8* %36, i64 %38)
  %40 = load i32, i32* %buffer_remaining
  %41 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %39, i32 %40)
  store %"Slice(UInt8)" %41, %"Slice(UInt8)"* %0
  %42 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %43 = call i32 @"*IO::FileDescriptor+@IO::Buffered#read<Slice(UInt8)>:Int32"(i32* %io, %"Slice(UInt8)" %42)
  %44 = call i64 @"*UInt64::new<Int32>:UInt64"(i32 %43)
  %45 = add i64 %34, %44
  %46 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 6
  store i64 %45, i64* %46
  ret i64 %45
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Slice(UInt8)@Slice(T)#index<UInt8>:(Int32 | Nil)"(%"Slice(UInt8)"* %self, i8 %object) #0 {
alloca:
  %offset = alloca i32
  %__temp_112 = alloca i1
  %__temp_113 = alloca %Nil
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %offset
  store i1 true, i1* %__temp_112
  %1 = load i32, i32* %offset
  %2 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Slice(T)#fast_index<UInt8, Int32>:(Int32 | Nil)"(%"Slice(UInt8)"* %self, i8 %object, i32 %1)
  store %"(Int32 | Nil)" %2, %"(Int32 | Nil)"* %0
  %3 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %3
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Slice(UInt8)@Slice(T)#fast_index<UInt8, Int32>:(Int32 | Nil)"(%"Slice(UInt8)"* %self, i8 %object, i32 %offset) #0 {
alloca:
  %__temp_114 = alloca i1
  %result = alloca i8*
  %offset1 = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  %1 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %offset, i32* %offset1
  %2 = load i32, i32* %offset1
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i32, i32* %offset1
  %5 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = add i32 %4, %6
  store i32 %7, i32* %offset1
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %8 = load i32, i32* %offset1
  %9 = icmp sle i32 0, %8
  store i1 %9, i1* %__temp_114
  br i1 %9, label %then4, label %else5

then2:                                            ; preds = %exit6
  %10 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %11 = load i8*, i8** %10
  %12 = load i32, i32* %offset1
  %13 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %11, i32 %12)
  %14 = zext i8 %object to i32
  %15 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %16 = load i32, i32* %15
  %17 = load i32, i32* %offset1
  %18 = sub i32 %16, %17
  %19 = sext i32 %18 to i64
  %20 = call i8* @memchr(i8* %13, i32 %14, i64 %19)
  store i8* %20, i8** %result
  %21 = load i8*, i8** %result
  %22 = icmp ne i8* %21, null
  br i1 %22, label %then7, label %else8

else3:                                            ; preds = %exit6
  br label %exit9

then4:                                            ; preds = %exit
  %23 = load i32, i32* %offset1
  %24 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 0
  %25 = load i32, i32* %24
  %26 = icmp slt i32 %23, %25
  br label %exit6

else5:                                            ; preds = %exit
  %27 = load i1, i1* %__temp_114
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  %28 = phi i1 [ %26, %then4 ], [ %27, %else5 ]
  br i1 %28, label %then2, label %else3

then7:                                            ; preds = %then2
  %29 = load i8*, i8** %result
  %30 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %self, i32 0, i32 1
  %31 = load i8*, i8** %30
  %32 = ptrtoint i8* %29 to i64
  %33 = ptrtoint i8* %31 to i64
  %34 = sub i64 %32, %33
  %35 = sdiv exact i64 %34, ptrtoint (i8* getelementptr inbounds (i8, i8* null, i32 1) to i64)
  %36 = trunc i64 %35 to i32
  %37 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  store i32 138, i32* %37
  %38 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 1
  %39 = bitcast [1 x i64]* %38 to i32*
  store i32 %36, i32* %39
  %40 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %40

else8:                                            ; preds = %then2
  br label %exit9

exit9:                                            ; preds = %else3, %else8
  %41 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %41
  %42 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %42
  %43 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  ret %"(Int32 | Nil)" %43
}

declare i8* @memchr(i8*, i32, i64)

; Function Attrs: uwtable
define internal %String* @"*IO::Decoder#gets_index<Int32, UInt8, Bool>:String"(%"IO::Decoder"* %self, i32 %index, i8 %delimiter, i1 %chomp) #0 {
alloca:
  %advance_increment = alloca i32
  %__temp_115 = alloca i1
  %__temp_117 = alloca i1
  %__temp_116 = alloca i1
  %string = alloca %String*
  %index1 = alloca i32
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %1 = load i32, i32* %index1
  store i32 %1, i32* %advance_increment
  br i1 %chomp, label %then4, label %else5

then:                                             ; preds = %exit6
  %2 = load i32, i32* %index1
  %3 = sub i32 %2, 1
  store i32 %3, i32* %index1
  %4 = call i1 @"*UInt8@Int#===<Char>:Bool"(i8 %delimiter, i32 10)
  store i1 %4, i1* %__temp_117
  br i1 %4, label %then11, label %else12

else:                                             ; preds = %exit6
  br label %exit16

then2:                                            ; preds = %exit
  %5 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %6 = load i32, i32* %index1
  %7 = sub i32 %6, 1
  %8 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %5, i32 %7)
  %9 = call i1 @"*UInt8@Object#===<UInt8>:Bool"(i8 %8, i8 %delimiter)
  br label %exit6

else3:                                            ; preds = %exit
  %10 = load i1, i1* %__temp_115
  br label %exit6

then4:                                            ; preds = %entry
  %11 = load i32, i32* %index1
  %12 = icmp sgt i32 %11, 0
  br label %exit

else5:                                            ; preds = %entry
  br label %exit

exit:                                             ; preds = %else5, %then4
  %13 = phi i1 [ %12, %then4 ], [ %chomp, %else5 ]
  store i1 %13, i1* %__temp_115
  br i1 %13, label %then2, label %else3

exit6:                                            ; preds = %else3, %then2
  %14 = phi i1 [ %9, %then2 ], [ %10, %else3 ]
  br i1 %14, label %then, label %else

then7:                                            ; preds = %exit14
  %15 = load i32, i32* %index1
  %16 = sub i32 %15, 1
  store i32 %16, i32* %index1
  br label %exit15

else8:                                            ; preds = %exit14
  br label %exit15

then9:                                            ; preds = %exit13
  %17 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %18 = load i32, i32* %index1
  %19 = sub i32 %18, 1
  %20 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %17, i32 %19)
  %21 = call i1 @"*UInt8@Int#===<Char>:Bool"(i8 %20, i32 13)
  br label %exit14

else10:                                           ; preds = %exit13
  %22 = load i1, i1* %__temp_116
  br label %exit14

then11:                                           ; preds = %then
  %23 = load i32, i32* %index1
  %24 = icmp sgt i32 %23, 0
  br label %exit13

else12:                                           ; preds = %then
  %25 = load i1, i1* %__temp_117
  br label %exit13

exit13:                                           ; preds = %else12, %then11
  %26 = phi i1 [ %24, %then11 ], [ %25, %else12 ]
  store i1 %26, i1* %__temp_116
  br i1 %26, label %then9, label %else10

exit14:                                           ; preds = %else10, %then9
  %27 = phi i1 [ %21, %then9 ], [ %22, %else10 ]
  br i1 %27, label %then7, label %else8

exit15:                                           ; preds = %else8, %then7
  br label %exit16

exit16:                                           ; preds = %else, %exit15
  %28 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %29 = load i32, i32* %index1
  %30 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %28, i32 0, i32 %29)
  store %"Slice(UInt8)" %30, %"Slice(UInt8)"* %0
  %31 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %32 = call %String* @"*String::new<Slice(UInt8)>:String"(%"Slice(UInt8)" %31)
  store %String* %32, %String** %string
  %33 = load i32, i32* %advance_increment
  %34 = call %"Slice(UInt8)" @"*IO::Decoder#advance<Int32>:Slice(UInt8)"(%"IO::Decoder"* %self, i32 %33)
  %35 = load %String*, %String** %string
  ret %String* %35
}

; Function Attrs: uwtable
define internal i1 @"*UInt8@Object#===<UInt8>:Bool"(i8 %self, i8 %other) #0 {
entry:
  %0 = icmp eq i8 %self, %other
  ret i1 %0
}

; Function Attrs: uwtable
define internal %String* @"*String::new<Slice(UInt8)>:String"(%"Slice(UInt8)" %slice) #0 {
alloca:
  %slice1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %slice1
  %0 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %1 = load i32, i32* %0
  %2 = call i8* @"*Slice(UInt8)@Slice(T)#pointer<Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i32 %1)
  %3 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = call %String* @"*String::new<Pointer(UInt8), Int32>:String"(i8* %2, i32 %4)
  ret %String* %5
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*IO::Decoder#advance<Int32>:Slice(UInt8)"(%"IO::Decoder"* %self, i32 %numbytes) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %2 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %1, i32 %numbytes)
  store %"Slice(UInt8)" %2, %"Slice(UInt8)"* %0
  %3 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %3
  %5 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %5
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*IO::Decoder#write<String::Builder>:Slice(UInt8)"(%"IO::Decoder"* %self, %"String::Builder"* %io) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  call void @"*String::Builder#write<Slice(UInt8)>:Nil"(%"String::Builder"* %io, %"Slice(UInt8)" %2)
  %3 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::empty:Slice(UInt8)"(i32 935)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %5 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %5, %"Slice(UInt8)"* %4
  %6 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %6
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*IO::Decoder#write<String::Builder, Int32>:Slice(UInt8)"(%"IO::Decoder"* %self, %"String::Builder"* %io, i32 %numbytes) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %3 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %2, i32 0, i32 %numbytes)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  call void @"*String::Builder#write<Slice(UInt8)>:Nil"(%"String::Builder"* %io, %"Slice(UInt8)" %4)
  %5 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %6 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %5, i32 %numbytes)
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %1
  %7 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %8 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  store %"Slice(UInt8)" %8, %"Slice(UInt8)"* %7
  %9 = load %"Slice(UInt8)", %"Slice(UInt8)"* %1
  ret %"Slice(UInt8)" %9
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*String::Builder#chomp!<UInt8>:(Int32 | Nil)"(%"String::Builder"* %self, i8 %byte) #0 {
alloca:
  %__temp_118 = alloca i1
  %__temp_121 = alloca i1
  %__temp_120 = alloca i1
  %0 = alloca %"(Int32 | Nil)"
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %3 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %4 = load i32, i32* %3
  %5 = icmp sgt i32 %4, 0
  store i1 %5, i1* %__temp_118
  br i1 %5, label %then1, label %else2

then:                                             ; preds = %exit
  %6 = call i32 @"*String::Builder#back<Int32>:Int32"(%"String::Builder"* %self, i32 1)
  %7 = call i1 @"*UInt8@Int#===<Char>:Bool"(i8 %byte, i32 10)
  store i1 %7, i1* %__temp_121
  br i1 %7, label %then7, label %else8

else:                                             ; preds = %exit
  %8 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 0
  store i32 0, i32* %8
  %9 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %9
  br label %exit12

then1:                                            ; preds = %entry
  %10 = call i8* @"*String::Builder#buffer:Pointer(UInt8)"(%"String::Builder"* %self)
  %11 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %12 = load i32, i32* %11
  %13 = sub i32 %12, 1
  %14 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %10, i32 %13)
  %15 = icmp eq i8 %14, %byte
  br label %exit

else2:                                            ; preds = %entry
  %16 = load i1, i1* %__temp_118
  br label %exit

exit:                                             ; preds = %else2, %then1
  %17 = phi i1 [ %15, %then1 ], [ %16, %else2 ]
  br i1 %17, label %then, label %else

then3:                                            ; preds = %exit10
  %18 = call i32 @"*String::Builder#back<Int32>:Int32"(%"String::Builder"* %self, i32 1)
  %19 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  store i32 138, i32* %19
  %20 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 1
  %21 = bitcast [1 x i64]* %20 to i32*
  store i32 %18, i32* %21
  br label %exit11

else4:                                            ; preds = %exit10
  %22 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %22
  %23 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %23
  br label %exit11

then5:                                            ; preds = %exit9
  %24 = call i8* @"*String::Builder#buffer:Pointer(UInt8)"(%"String::Builder"* %self)
  %25 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %26 = load i32, i32* %25
  %27 = sub i32 %26, 1
  %28 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %24, i32 %27)
  %29 = call i1 @"*UInt8@Int#===<Char>:Bool"(i8 %28, i32 13)
  br label %exit10

else6:                                            ; preds = %exit9
  %30 = load i1, i1* %__temp_120
  br label %exit10

then7:                                            ; preds = %then
  %31 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %32 = load i32, i32* %31
  %33 = icmp sgt i32 %32, 0
  br label %exit9

else8:                                            ; preds = %then
  %34 = load i1, i1* %__temp_121
  br label %exit9

exit9:                                            ; preds = %else8, %then7
  %35 = phi i1 [ %33, %then7 ], [ %34, %else8 ]
  store i1 %35, i1* %__temp_120
  br i1 %35, label %then5, label %else6

exit10:                                           ; preds = %else6, %then5
  %36 = phi i1 [ %29, %then5 ], [ %30, %else6 ]
  br i1 %36, label %then3, label %else4

exit11:                                           ; preds = %else4, %then3
  %37 = phi %"(Int32 | Nil)"* [ %0, %then3 ], [ %1, %else4 ]
  br label %exit12

exit12:                                           ; preds = %else, %exit11
  %38 = phi %"(Int32 | Nil)"* [ %37, %exit11 ], [ %2, %else ]
  %39 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %38
  ret %"(Int32 | Nil)" %39
}

; Function Attrs: uwtable
define internal i8* @"*String::Builder#buffer:Pointer(UInt8)"(%"String::Builder"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 6
  %1 = load i8*, i8** %0
  %2 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %1, i32 12)
  ret i8* %2
}

; Function Attrs: uwtable
define internal i32 @"*String::Builder#back<Int32>:Int32"(%"String::Builder"* %self, i32 %amount) #0 {
alloca:
  %__temp_119 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = icmp sle i32 0, %amount
  store i1 %0, i1* %__temp_119
  br i1 %0, label %then1, label %else2

then:                                             ; preds = %exit
  br label %exit3

else:                                             ; preds = %exit
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [20 x i8] }* @"'invalid back amount...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

then1:                                            ; preds = %entry
  %2 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %3 = load i32, i32* %2
  %4 = icmp sle i32 %amount, %3
  br label %exit

else2:                                            ; preds = %entry
  %5 = load i1, i1* %__temp_119
  br label %exit

exit:                                             ; preds = %else2, %then1
  %6 = phi i1 [ %4, %then1 ], [ %5, %else2 ]
  br i1 %6, label %then, label %else

exit3:                                            ; preds = %then
  %7 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %8 = load i32, i32* %7
  %9 = sub i32 %8, %amount
  %10 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  store i32 %9, i32* %10
  ret i32 %9
}

; Function Attrs: uwtable
define internal %"(Tuple(Char, Int32) | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_char_with_bytesize:(Tuple(Char, Int32) | Nil)"(i32* %self) #0 {
alloca:
  %__temp_123 = alloca %"(IO::EncodingOptions | Nil)"
  %first = alloca i32
  %second = alloca i32
  %third = alloca i32
  %fourth = alloca i32
  %0 = alloca %"(Bool | IO::EncodingOptions)"
  %1 = alloca %"(Bool | IO::EncodingOptions)"
  %2 = alloca %"(Tuple(Char, Int32) | Nil)"
  %3 = alloca %"Slice(UInt8)"
  %4 = alloca %"Tuple(Char, Int32).26"
  %5 = alloca %"(Tuple(Char, Int32) | Nil)"
  %6 = alloca %"Slice(UInt8)"
  %7 = alloca %"Tuple(Char, Int32).26"
  %8 = alloca %"(Tuple(Char, Int32) | Nil)"
  %9 = alloca %"Slice(UInt8)"
  %10 = alloca %"Tuple(Char, Int32).26"
  %11 = alloca %"(Tuple(Char, Int32) | Nil)"
  %12 = alloca %"Slice(UInt8)"
  %13 = alloca %"Tuple(Char, Int32).26"
  %14 = alloca %"(Tuple(Char, Int32) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %15 = bitcast i32* %self to %"IO::FileDescriptor"*
  %16 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %15, i32 0, i32 3
  %17 = load %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %16
  store %"(IO::EncodingOptions | Nil)" %17, %"(IO::EncodingOptions | Nil)"* %__temp_123
  %18 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %16, i32 0, i32 0
  %19 = load i32, i32* %18
  %20 = icmp eq i32 %19, 0
  %21 = xor i1 %20, true
  %22 = and i1 true, %21
  br i1 %22, label %then1, label %else2

then:                                             ; preds = %exit
  %23 = call %"(Tuple(Char, Int32) | Nil)" @"*IO::FileDescriptor+@IO#read_char_with_bytesize:(Tuple(Char, Int32) | Nil)"(i32* %self)
  store %"(Tuple(Char, Int32) | Nil)" %23, %"(Tuple(Char, Int32) | Nil)"* %2
  %24 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %2
  ret %"(Tuple(Char, Int32) | Nil)" %24

else:                                             ; preds = %exit
  %25 = bitcast i32* %self to %"IO::FileDescriptor"*
  %26 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %25, i32 0, i32 4
  %27 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %26, i32 0)
  %28 = zext i8 %27 to i32
  store i32 %28, i32* %first
  %29 = load i32, i32* %first
  %30 = icmp ult i32 %29, 128
  %31 = and i1 true, %30
  br i1 %31, label %then3, label %else4

then1:                                            ; preds = %entry
  %32 = getelementptr inbounds %"(IO::EncodingOptions | Nil)", %"(IO::EncodingOptions | Nil)"* %__temp_123, i32 0, i32 1
  %33 = bitcast [3 x i64]* %32 to %"IO::EncodingOptions"*
  %34 = load %"IO::EncodingOptions", %"IO::EncodingOptions"* %33
  %35 = getelementptr inbounds %"(Bool | IO::EncodingOptions)", %"(Bool | IO::EncodingOptions)"* %0, i32 0, i32 0
  store i32 343, i32* %35
  %36 = getelementptr inbounds %"(Bool | IO::EncodingOptions)", %"(Bool | IO::EncodingOptions)"* %0, i32 0, i32 1
  %37 = bitcast [3 x i64]* %36 to %"IO::EncodingOptions"*
  store %"IO::EncodingOptions" %34, %"IO::EncodingOptions"* %37
  br label %exit

else2:                                            ; preds = %entry
  %38 = bitcast i32* %self to %"IO::FileDescriptor"*
  %39 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %38, i32 0, i32 4
  %40 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %39, i32 0, i32 0
  %41 = load i32, i32* %40
  %42 = icmp slt i32 %41, 4
  %43 = getelementptr inbounds %"(Bool | IO::EncodingOptions)", %"(Bool | IO::EncodingOptions)"* %1, i32 0, i32 0
  store i32 147, i32* %43
  %44 = zext i1 %42 to i192
  %45 = getelementptr inbounds %"(Bool | IO::EncodingOptions)", %"(Bool | IO::EncodingOptions)"* %1, i32 0, i32 1
  %46 = bitcast [3 x i64]* %45 to i192*
  store i192 %44, i192* %46
  br label %exit

exit:                                             ; preds = %else2, %then1
  %47 = phi %"(Bool | IO::EncodingOptions)"* [ %0, %then1 ], [ %1, %else2 ]
  %48 = getelementptr inbounds %"(Bool | IO::EncodingOptions)", %"(Bool | IO::EncodingOptions)"* %47, i32 0, i32 0
  %49 = load i32, i32* %48
  %50 = getelementptr inbounds %"(Bool | IO::EncodingOptions)", %"(Bool | IO::EncodingOptions)"* %47, i32 0, i32 1
  %51 = bitcast [3 x i64]* %50 to i1*
  %52 = load i1, i1* %51
  %53 = icmp eq i32 %49, 147
  %54 = xor i1 %52, true
  %55 = and i1 %53, %54
  %56 = xor i1 %55, true
  %57 = and i1 true, %56
  br i1 %57, label %then, label %else

then3:                                            ; preds = %else
  %58 = bitcast i32* %self to %"IO::FileDescriptor"*
  %59 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %58, i32 0, i32 4
  %60 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %59, i32 1)
  store %"Slice(UInt8)" %60, %"Slice(UInt8)"* %3
  %61 = bitcast i32* %self to %"IO::FileDescriptor"*
  %62 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %61, i32 0, i32 4
  %63 = load %"Slice(UInt8)", %"Slice(UInt8)"* %3
  store %"Slice(UInt8)" %63, %"Slice(UInt8)"* %62
  %64 = load i32, i32* %first
  %65 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %4, i32 0, i32 0
  store i32 %64, i32* %65
  %66 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %4, i32 0, i32 1
  store i32 1, i32* %66
  %67 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %4
  %68 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %5, i32 0, i32 0
  store i32 254, i32* %68
  %69 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %5, i32 0, i32 1
  %70 = bitcast [1 x i64]* %69 to %"Tuple(Char, Int32).26"*
  store %"Tuple(Char, Int32).26" %67, %"Tuple(Char, Int32).26"* %70
  %71 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %5
  ret %"(Tuple(Char, Int32) | Nil)" %71

else4:                                            ; preds = %else
  %72 = bitcast i32* %self to %"IO::FileDescriptor"*
  %73 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %72, i32 0, i32 4
  %74 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %73, i32 1)
  %75 = zext i8 %74 to i32
  %76 = and i32 %75, 63
  %77 = trunc i32 %76 to i8
  %78 = zext i8 %77 to i32
  store i32 %78, i32* %second
  %79 = load i32, i32* %first
  %80 = icmp ult i32 %79, 224
  %81 = and i1 true, %80
  br i1 %81, label %then5, label %else6

then5:                                            ; preds = %else4
  %82 = bitcast i32* %self to %"IO::FileDescriptor"*
  %83 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %82, i32 0, i32 4
  %84 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %83, i32 2)
  store %"Slice(UInt8)" %84, %"Slice(UInt8)"* %6
  %85 = bitcast i32* %self to %"IO::FileDescriptor"*
  %86 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %85, i32 0, i32 4
  %87 = load %"Slice(UInt8)", %"Slice(UInt8)"* %6
  store %"Slice(UInt8)" %87, %"Slice(UInt8)"* %86
  %88 = load i32, i32* %first
  %89 = and i32 %88, 31
  %90 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %89, i32 6)
  %91 = load i32, i32* %second
  %92 = or i32 %90, %91
  %93 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %7, i32 0, i32 0
  store i32 %92, i32* %93
  %94 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %7, i32 0, i32 1
  store i32 2, i32* %94
  %95 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %7
  %96 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %8, i32 0, i32 0
  store i32 254, i32* %96
  %97 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %8, i32 0, i32 1
  %98 = bitcast [1 x i64]* %97 to %"Tuple(Char, Int32).26"*
  store %"Tuple(Char, Int32).26" %95, %"Tuple(Char, Int32).26"* %98
  %99 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %8
  ret %"(Tuple(Char, Int32) | Nil)" %99

else6:                                            ; preds = %else4
  %100 = bitcast i32* %self to %"IO::FileDescriptor"*
  %101 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %100, i32 0, i32 4
  %102 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %101, i32 2)
  %103 = zext i8 %102 to i32
  %104 = and i32 %103, 63
  %105 = trunc i32 %104 to i8
  %106 = zext i8 %105 to i32
  store i32 %106, i32* %third
  %107 = load i32, i32* %first
  %108 = icmp ult i32 %107, 240
  %109 = and i1 true, %108
  br i1 %109, label %then7, label %else8

then7:                                            ; preds = %else6
  %110 = bitcast i32* %self to %"IO::FileDescriptor"*
  %111 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %110, i32 0, i32 4
  %112 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %111, i32 3)
  store %"Slice(UInt8)" %112, %"Slice(UInt8)"* %9
  %113 = bitcast i32* %self to %"IO::FileDescriptor"*
  %114 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %113, i32 0, i32 4
  %115 = load %"Slice(UInt8)", %"Slice(UInt8)"* %9
  store %"Slice(UInt8)" %115, %"Slice(UInt8)"* %114
  %116 = load i32, i32* %first
  %117 = and i32 %116, 15
  %118 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %117, i32 12)
  %119 = load i32, i32* %second
  %120 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %119, i32 6)
  %121 = or i32 %118, %120
  %122 = load i32, i32* %third
  %123 = or i32 %121, %122
  %124 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %10, i32 0, i32 0
  store i32 %123, i32* %124
  %125 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %10, i32 0, i32 1
  store i32 3, i32* %125
  %126 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %10
  %127 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %11, i32 0, i32 0
  store i32 254, i32* %127
  %128 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %11, i32 0, i32 1
  %129 = bitcast [1 x i64]* %128 to %"Tuple(Char, Int32).26"*
  store %"Tuple(Char, Int32).26" %126, %"Tuple(Char, Int32).26"* %129
  %130 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %11
  ret %"(Tuple(Char, Int32) | Nil)" %130

else8:                                            ; preds = %else6
  %131 = bitcast i32* %self to %"IO::FileDescriptor"*
  %132 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %131, i32 0, i32 4
  %133 = call i8 @"*Slice(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Slice(UInt8)"* %132, i32 3)
  %134 = zext i8 %133 to i32
  %135 = and i32 %134, 63
  %136 = trunc i32 %135 to i8
  %137 = zext i8 %136 to i32
  store i32 %137, i32* %fourth
  %138 = load i32, i32* %first
  %139 = icmp ult i32 %138, 248
  %140 = and i1 true, %139
  br i1 %140, label %then9, label %else10

then9:                                            ; preds = %else8
  %141 = bitcast i32* %self to %"IO::FileDescriptor"*
  %142 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %141, i32 0, i32 4
  %143 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %142, i32 4)
  store %"Slice(UInt8)" %143, %"Slice(UInt8)"* %12
  %144 = bitcast i32* %self to %"IO::FileDescriptor"*
  %145 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %144, i32 0, i32 4
  %146 = load %"Slice(UInt8)", %"Slice(UInt8)"* %12
  store %"Slice(UInt8)" %146, %"Slice(UInt8)"* %145
  %147 = load i32, i32* %first
  %148 = and i32 %147, 7
  %149 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %148, i32 18)
  %150 = load i32, i32* %second
  %151 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %150, i32 12)
  %152 = or i32 %149, %151
  %153 = load i32, i32* %third
  %154 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %153, i32 6)
  %155 = or i32 %152, %154
  %156 = load i32, i32* %fourth
  %157 = or i32 %155, %156
  %158 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %13, i32 0, i32 0
  store i32 %157, i32* %158
  %159 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %13, i32 0, i32 1
  store i32 4, i32* %159
  %160 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %13
  %161 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %14, i32 0, i32 0
  store i32 254, i32* %161
  %162 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %14, i32 0, i32 1
  %163 = bitcast [1 x i64]* %162 to %"Tuple(Char, Int32).26"*
  store %"Tuple(Char, Int32).26" %160, %"Tuple(Char, Int32).26"* %163
  %164 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %14
  ret %"(Tuple(Char, Int32) | Nil)" %164

else10:                                           ; preds = %else8
  %165 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %166 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %165, %String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Unexpected byte 0x'" to %String*))
  %167 = load i32, i32* %first
  %168 = call %String* @"*UInt32@Int#to_s<Int32>:String"(i32 %167, i32 16)
  %169 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %166, %String* %168)
  %170 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %169, %String* bitcast ({ i32, i32, i32, [24 x i8] }* @"' in UTF-8 byte sequ...'" to %String*))
  %171 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %170)
  %172 = call %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* %171)
  call void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %172)
  unreachable
}

; Function Attrs: uwtable
define internal %"(Tuple(Char, Int32) | Nil)" @"*IO::FileDescriptor+@IO#read_char_with_bytesize:(Tuple(Char, Int32) | Nil)"(i32* %self) #0 {
alloca:
  %first = alloca %"(UInt32 | UInt8 | Nil)"
  %second = alloca i32
  %third = alloca i32
  %fourth = alloca i32
  %0 = alloca %"(UInt8 | Nil)"
  %1 = alloca %"(Tuple(Char, Int32) | Nil)"
  %2 = alloca %"Tuple(Char, Int32).26"
  %3 = alloca %"(Tuple(Char, Int32) | Nil)"
  %4 = alloca %"Tuple(Char, Int32).26"
  %5 = alloca %"(Tuple(Char, Int32) | Nil)"
  %6 = alloca %"Tuple(Char, Int32).26"
  %7 = alloca %"(Tuple(Char, Int32) | Nil)"
  %8 = alloca %"Tuple(Char, Int32).26"
  %9 = alloca %"(Tuple(Char, Int32) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %10 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO#read_utf8_byte:(UInt8 | Nil)"(i32* %self)
  store %"(UInt8 | Nil)" %10, %"(UInt8 | Nil)"* %0
  %11 = bitcast %"(UInt8 | Nil)"* %0 to %"(UInt32 | UInt8 | Nil)"*
  %12 = load %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %11
  store %"(UInt32 | UInt8 | Nil)" %12, %"(UInt32 | UInt8 | Nil)"* %first
  %13 = bitcast %"(UInt32 | UInt8 | Nil)"* %first to %"(UInt8 | Nil)"*
  %14 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %13, i32 0, i32 0
  %15 = load i32, i32* %14
  %16 = icmp eq i32 %15, 0
  %17 = xor i1 %16, true
  %18 = and i1 true, %17
  br i1 %18, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %19 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %19
  %20 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %20
  %21 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %1
  ret %"(Tuple(Char, Int32) | Nil)" %21

exit:                                             ; preds = %then
  %22 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %23 = bitcast [1 x i64]* %22 to i8*
  %24 = load i8, i8* %23
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 0
  store i32 139, i32* %26
  %27 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %28 = bitcast [1 x i64]* %27 to i32*
  store i32 %25, i32* %28
  %29 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %30 = bitcast [1 x i64]* %29 to i32*
  %31 = load i32, i32* %30
  %32 = icmp ult i32 %31, 128
  %33 = and i1 true, %32
  br i1 %33, label %then1, label %else2

then1:                                            ; preds = %exit
  %34 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %35 = bitcast [1 x i64]* %34 to i32*
  %36 = load i32, i32* %35
  %37 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %2, i32 0, i32 0
  store i32 %36, i32* %37
  %38 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %2, i32 0, i32 1
  store i32 1, i32* %38
  %39 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %2
  %40 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %3, i32 0, i32 0
  store i32 254, i32* %40
  %41 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %3, i32 0, i32 1
  %42 = bitcast [1 x i64]* %41 to %"Tuple(Char, Int32).26"*
  store %"Tuple(Char, Int32).26" %39, %"Tuple(Char, Int32).26"* %42
  %43 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %3
  ret %"(Tuple(Char, Int32) | Nil)" %43

else2:                                            ; preds = %exit
  %44 = call i32 @"*IO::FileDescriptor+@IO#read_utf8_masked_byte:UInt32"(i32* %self)
  store i32 %44, i32* %second
  %45 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %46 = bitcast [1 x i64]* %45 to i32*
  %47 = load i32, i32* %46
  %48 = icmp ult i32 %47, 224
  %49 = and i1 true, %48
  br i1 %49, label %then3, label %else4

then3:                                            ; preds = %else2
  %50 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %51 = bitcast [1 x i64]* %50 to i32*
  %52 = load i32, i32* %51
  %53 = and i32 %52, 31
  %54 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %53, i32 6)
  %55 = load i32, i32* %second
  %56 = or i32 %54, %55
  %57 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %4, i32 0, i32 0
  store i32 %56, i32* %57
  %58 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %4, i32 0, i32 1
  store i32 2, i32* %58
  %59 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %4
  %60 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %5, i32 0, i32 0
  store i32 254, i32* %60
  %61 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %5, i32 0, i32 1
  %62 = bitcast [1 x i64]* %61 to %"Tuple(Char, Int32).26"*
  store %"Tuple(Char, Int32).26" %59, %"Tuple(Char, Int32).26"* %62
  %63 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %5
  ret %"(Tuple(Char, Int32) | Nil)" %63

else4:                                            ; preds = %else2
  %64 = call i32 @"*IO::FileDescriptor+@IO#read_utf8_masked_byte:UInt32"(i32* %self)
  store i32 %64, i32* %third
  %65 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %66 = bitcast [1 x i64]* %65 to i32*
  %67 = load i32, i32* %66
  %68 = icmp ult i32 %67, 240
  %69 = and i1 true, %68
  br i1 %69, label %then5, label %else6

then5:                                            ; preds = %else4
  %70 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %71 = bitcast [1 x i64]* %70 to i32*
  %72 = load i32, i32* %71
  %73 = and i32 %72, 15
  %74 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %73, i32 12)
  %75 = load i32, i32* %second
  %76 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %75, i32 6)
  %77 = or i32 %74, %76
  %78 = load i32, i32* %third
  %79 = or i32 %77, %78
  %80 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %6, i32 0, i32 0
  store i32 %79, i32* %80
  %81 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %6, i32 0, i32 1
  store i32 3, i32* %81
  %82 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %6
  %83 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %7, i32 0, i32 0
  store i32 254, i32* %83
  %84 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %7, i32 0, i32 1
  %85 = bitcast [1 x i64]* %84 to %"Tuple(Char, Int32).26"*
  store %"Tuple(Char, Int32).26" %82, %"Tuple(Char, Int32).26"* %85
  %86 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %7
  ret %"(Tuple(Char, Int32) | Nil)" %86

else6:                                            ; preds = %else4
  %87 = call i32 @"*IO::FileDescriptor+@IO#read_utf8_masked_byte:UInt32"(i32* %self)
  store i32 %87, i32* %fourth
  %88 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %89 = bitcast [1 x i64]* %88 to i32*
  %90 = load i32, i32* %89
  %91 = icmp ult i32 %90, 248
  %92 = and i1 true, %91
  br i1 %92, label %then7, label %else8

then7:                                            ; preds = %else6
  %93 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %94 = bitcast [1 x i64]* %93 to i32*
  %95 = load i32, i32* %94
  %96 = and i32 %95, 7
  %97 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %96, i32 18)
  %98 = load i32, i32* %second
  %99 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %98, i32 12)
  %100 = or i32 %97, %99
  %101 = load i32, i32* %third
  %102 = call i32 @"*UInt32@Int#<<<Int32>:UInt32"(i32 %101, i32 6)
  %103 = or i32 %100, %102
  %104 = load i32, i32* %fourth
  %105 = or i32 %103, %104
  %106 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %8, i32 0, i32 0
  store i32 %105, i32* %106
  %107 = getelementptr inbounds %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %8, i32 0, i32 1
  store i32 4, i32* %107
  %108 = load %"Tuple(Char, Int32).26", %"Tuple(Char, Int32).26"* %8
  %109 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %9, i32 0, i32 0
  store i32 254, i32* %109
  %110 = getelementptr inbounds %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %9, i32 0, i32 1
  %111 = bitcast [1 x i64]* %110 to %"Tuple(Char, Int32).26"*
  store %"Tuple(Char, Int32).26" %108, %"Tuple(Char, Int32).26"* %111
  %112 = load %"(Tuple(Char, Int32) | Nil)", %"(Tuple(Char, Int32) | Nil)"* %9
  ret %"(Tuple(Char, Int32) | Nil)" %112

else8:                                            ; preds = %else6
  %113 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %114 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %113, %String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Unexpected byte 0x'" to %String*))
  %115 = getelementptr inbounds %"(UInt32 | UInt8 | Nil)", %"(UInt32 | UInt8 | Nil)"* %first, i32 0, i32 1
  %116 = bitcast [1 x i64]* %115 to i32*
  %117 = load i32, i32* %116
  %118 = call %String* @"*UInt32@Int#to_s<Int32>:String"(i32 %117, i32 16)
  %119 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %114, %String* %118)
  %120 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %119, %String* bitcast ({ i32, i32, i32, [24 x i8] }* @"' in UTF-8 byte sequ...'" to %String*))
  %121 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %120)
  %122 = call %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* %121)
  call void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %122)
  unreachable
}

; Function Attrs: uwtable
define internal %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO#read_utf8_byte:(UInt8 | Nil)"(i32* %self) #0 {
alloca:
  %decoder = alloca %"IO::Decoder"*
  %0 = alloca %"(UInt8 | Nil)"
  %1 = alloca %"(UInt8 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = call %"IO::Decoder"* @"*IO::FileDescriptor+@IO#decoder:(IO::Decoder | Nil)"(i32* %self)
  store %"IO::Decoder"* %2, %"IO::Decoder"** %decoder
  %3 = icmp ne %"IO::Decoder"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load %"IO::Decoder"*, %"IO::Decoder"** %decoder
  %5 = call %"(UInt8 | Nil)" @"*IO::Decoder#read_byte<IO::FileDescriptor+>:(UInt8 | Nil)"(%"IO::Decoder"* %4, i32* %self)
  store %"(UInt8 | Nil)" %5, %"(UInt8 | Nil)"* %0
  br label %exit

else:                                             ; preds = %entry
  %6 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %self)
  store %"(UInt8 | Nil)" %6, %"(UInt8 | Nil)"* %1
  br label %exit

exit:                                             ; preds = %else, %then
  %7 = phi %"(UInt8 | Nil)"* [ %0, %then ], [ %1, %else ]
  %8 = load %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %7
  ret %"(UInt8 | Nil)" %8
}

; Function Attrs: uwtable
define internal %"(UInt8 | Nil)" @"*IO::Decoder#read_byte<IO::FileDescriptor+>:(UInt8 | Nil)"(%"IO::Decoder"* %self, i32* %io) #0 {
alloca:
  %byte = alloca i8
  %0 = alloca %"(UInt8 | Nil)"
  %1 = alloca %"(UInt8 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  call void @"*IO::Decoder#read<IO::FileDescriptor+>:Nil"(%"IO::Decoder"* %self, i32* %io)
  %2 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %3 = call i1 @"*Slice(UInt8)@Indexable(T)#empty?:Bool"(%"Slice(UInt8)"* %2)
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %4
  %5 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %5
  br label %exit

else:                                             ; preds = %entry
  %6 = getelementptr inbounds %"IO::Decoder", %"IO::Decoder"* %self, i32 0, i32 1
  %7 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %6, i32 0, i32 1
  %8 = load i8*, i8** %7
  %9 = load i8, i8* %8
  store i8 %9, i8* %byte
  %10 = call %"Slice(UInt8)" @"*IO::Decoder#advance<Int32>:Slice(UInt8)"(%"IO::Decoder"* %self, i32 1)
  %11 = load i8, i8* %byte
  %12 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %1, i32 0, i32 0
  store i32 135, i32* %12
  %13 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %1, i32 0, i32 1
  %14 = bitcast [1 x i64]* %13 to i8*
  store i8 %11, i8* %14
  br label %exit

exit:                                             ; preds = %else, %then
  %15 = phi %"(UInt8 | Nil)"* [ %0, %then ], [ %1, %else ]
  %16 = load %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %15
  ret %"(UInt8 | Nil)" %16
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor+@IO#read_utf8_masked_byte:UInt32"(i32* %self) #0 {
alloca:
  %__temp_124 = alloca %"(UInt8 | Nil)"
  %byte = alloca i8
  %0 = alloca %"(UInt8 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO#read_utf8_byte:(UInt8 | Nil)"(i32* %self)
  store %"(UInt8 | Nil)" %1, %"(UInt8 | Nil)"* %0
  %2 = load %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0
  store %"(UInt8 | Nil)" %2, %"(UInt8 | Nil)"* %__temp_124
  %3 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = icmp eq i32 %4, 0
  %6 = xor i1 %5, true
  %7 = and i1 true, %6
  br i1 %7, label %then, label %else

then:                                             ; preds = %entry
  %8 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %__temp_124, i32 0, i32 1
  %9 = bitcast [1 x i64]* %8 to i8*
  %10 = load i8, i8* %9
  br label %exit

else:                                             ; preds = %entry
  %11 = call %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* bitcast ({ i32, i32, i32, [31 x i8] }* @"'Incomplete UTF-8 by...'" to %String*))
  call void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %11)
  unreachable

exit:                                             ; preds = %then
  %12 = phi i8 [ %10, %then ]
  store i8 %12, i8* %byte
  %13 = load i8, i8* %byte
  %14 = zext i8 %13 to i32
  %15 = and i32 %14, 63
  %16 = trunc i32 %15 to i8
  %17 = zext i8 %16 to i32
  ret i32 %17
}

; Function Attrs: uwtable
define internal i1 @"*String::Builder#empty?:Bool"(%"String::Builder"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"String::Builder", %"String::Builder"* %self, i32 0, i32 4
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  ret i1 %2
}

; Function Attrs: uwtable
define internal %String* @"*String#chomp<Char>:String"(%String* %self, i32 %char) #0 {
entry:
  %0 = icmp eq i32 %char, 10
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %String* @"*String#chomp:String"(%String* %self)
  br label %exit

else:                                             ; preds = %entry
  %2 = call i1 @"*String#ends_with?<Char>:Bool"(%String* %self, i32 %char)
  br i1 %2, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %3 = phi %String* [ %1, %then ], [ %9, %exit3 ]
  ret %String* %3

then1:                                            ; preds = %else
  %4 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %5 = load i32, i32* %4
  %6 = call i32 @"*Char#bytesize:Int32"(i32 %char)
  %7 = sub i32 %5, %6
  %8 = call %String* @"*String#unsafe_byte_slice_string<Int32, Int32>:String"(%String* %self, i32 0, i32 %7)
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %9 = phi %String* [ %8, %then1 ], [ %self, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal %String* @"*String#chomp:String"(%String* %self) #0 {
alloca:
  %__temp_130 = alloca i8
  %__temp_131 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i1 @"*String#empty?:Bool"(%String* %self)
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  ret %String* %self

else:                                             ; preds = %entry
  %1 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %2 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %3 = load i32, i32* %2
  %4 = sub i32 %3, 1
  %5 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %1, i32 %4)
  store i8 %5, i8* %__temp_130
  %6 = load i8, i8* %__temp_130
  %7 = call i1 @"*Char#===<UInt8>:Bool"(i32 10, i8 %6)
  br i1 %7, label %then1, label %else2

then1:                                            ; preds = %else
  %8 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %9 = load i32, i32* %8
  %10 = icmp sgt i32 %9, 1
  store i1 %10, i1* %__temp_131
  br i1 %10, label %then5, label %else6

else2:                                            ; preds = %else
  %11 = load i8, i8* %__temp_130
  %12 = call i1 @"*Char#===<UInt8>:Bool"(i32 13, i8 %11)
  br i1 %12, label %then9, label %else10

then3:                                            ; preds = %exit
  %13 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %14 = load i32, i32* %13
  %15 = sub i32 %14, 2
  %16 = call %String* @"*String#unsafe_byte_slice_string<Int32, Int32>:String"(%String* %self, i32 0, i32 %15)
  br label %exit7

else4:                                            ; preds = %exit
  %17 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %18 = load i32, i32* %17
  %19 = sub i32 %18, 1
  %20 = call %String* @"*String#unsafe_byte_slice_string<Int32, Int32>:String"(%String* %self, i32 0, i32 %19)
  br label %exit7

then5:                                            ; preds = %then1
  %21 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %22 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %23 = load i32, i32* %22
  %24 = sub i32 %23, 2
  %25 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %21, i32 %24)
  %26 = call i1 @"*UInt8@Int#===<Char>:Bool"(i8 %25, i32 13)
  br label %exit

else6:                                            ; preds = %then1
  %27 = load i1, i1* %__temp_131
  br label %exit

exit:                                             ; preds = %else6, %then5
  %28 = phi i1 [ %26, %then5 ], [ %27, %else6 ]
  br i1 %28, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  %29 = phi %String* [ %16, %then3 ], [ %20, %else4 ]
  br label %exit8

exit8:                                            ; preds = %exit11, %exit7
  %30 = phi %String* [ %29, %exit7 ], [ %35, %exit11 ]
  ret %String* %30

then9:                                            ; preds = %else2
  %31 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %32 = load i32, i32* %31
  %33 = sub i32 %32, 1
  %34 = call %String* @"*String#unsafe_byte_slice_string<Int32, Int32>:String"(%String* %self, i32 0, i32 %33)
  br label %exit11

else10:                                           ; preds = %else2
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %35 = phi %String* [ %34, %then9 ], [ %self, %else10 ]
  br label %exit8
}

; Function Attrs: uwtable
define internal i1 @"*String#empty?:Bool"(%String* %self) #0 {
entry:
  %0 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  ret i1 %2
}

; Function Attrs: uwtable
define internal i1 @"*Char#===<UInt8>:Bool"(i32 %self, i8 %byte) #0 {
entry:
  %0 = call i1 @"*Int32@Object#===<UInt8>:Bool"(i32 %self, i8 %byte)
  ret i1 %0
}

; Function Attrs: uwtable
define internal i1 @"*Int32@Object#===<UInt8>:Bool"(i32 %self, i8 %other) #0 {
entry:
  %0 = zext i8 %other to i32
  %1 = icmp eq i32 %self, %0
  ret i1 %1
}

; Function Attrs: uwtable
define internal %String* @"*String#unsafe_byte_slice_string<Int32, Int32>:String"(%String* %self, i32 %byte_offset, i32 %count) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Slice(UInt8)" @"*String#unsafe_byte_slice<Int32, Int32>:Slice(UInt8)"(%String* %self, i32 %byte_offset, i32 %count)
  store %"Slice(UInt8)" %1, %"Slice(UInt8)"* %0
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %3 = call %String* @"*String::new<Slice(UInt8)>:String"(%"Slice(UInt8)" %2)
  ret %String* %3
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*String#unsafe_byte_slice<Int32, Int32>:Slice(UInt8)"(%String* %self, i32 %byte_offset, i32 %count) #0 {
alloca:
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %2 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %1, i32 %byte_offset)
  %3 = call %"Slice(UInt8)" @"*Slice(T)::new<Pointer(UInt8), Int32>:Slice(UInt8)"(i8* %2, i32 %count)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i32 @"*Char#bytesize:Int32"(i32 %self) #0 {
alloca:
  %c = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %self, i32* %c
  %0 = load i32, i32* %c
  %1 = icmp slt i32 %0, 128
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %2 = load i32, i32* %c
  %3 = icmp sle i32 %2, 2047
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i32 [ 1, %then ], [ %7, %exit3 ]
  ret i32 %4

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  %5 = load i32, i32* %c
  %6 = icmp sle i32 %5, 65535
  br i1 %6, label %then4, label %else5

exit3:                                            ; preds = %exit6, %then1
  %7 = phi i32 [ 2, %then1 ], [ %10, %exit6 ]
  br label %exit

then4:                                            ; preds = %else2
  br label %exit6

else5:                                            ; preds = %else2
  %8 = load i32, i32* %c
  %9 = icmp sle i32 %8, 1114111
  br i1 %9, label %then7, label %else8

exit6:                                            ; preds = %exit9, %then4
  %10 = phi i32 [ 3, %then4 ], [ %17, %exit9 ]
  br label %exit3

then7:                                            ; preds = %else5
  br label %exit9

else8:                                            ; preds = %else5
  %11 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %12 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %11, %String* bitcast ({ i32, i32, i32, [20 x i8] }* @"'Invalid char value ...'" to %String*))
  %13 = call %String* @"*Char#dump:String"(i32 %self)
  %14 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %12, %String* %13)
  %15 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %14)
  %16 = call %InvalidByteSequenceError* @"*InvalidByteSequenceError::new<String>:InvalidByteSequenceError"(%String* %15)
  call void @"*raise<InvalidByteSequenceError>:NoReturn"(%InvalidByteSequenceError* %16)
  unreachable

exit9:                                            ; preds = %then7
  %17 = phi i32 [ 4, %then7 ]
  br label %exit6
}

; Function Attrs: uwtable
define internal void @"*Debug::DWARF::LineNumbers#read_filename_table<Debug::DWARF::LineNumbers::Sequence>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %sequence) #0 {
alloca:
  %sequence1 = alloca %"Debug::DWARF::LineNumbers::Sequence"
  %name = alloca %String*
  %dir = alloca i32
  %time = alloca i32
  %length = alloca i32
  %i = alloca i32
  %0 = alloca %"Tuple(String, Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::DWARF::LineNumbers::Sequence" %sequence, %"Debug::DWARF::LineNumbers::Sequence"* %sequence1
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %else, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %1 = load i32, i32* %i
  %2 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %3 = load i32*, i32** %2
  %4 = call %String* @"*IO::FileDescriptor+@IO#gets<Char>:(String | Nil)"(i32* %3, i32 0)
  %5 = icmp eq %String* %4, null
  %6 = select i1 %5, i32 0, i32 1
  %7 = icmp eq i32 0, %6
  br i1 %7, label %current_def, label %next_def

exit:                                             ; preds = %while
  unreachable

current_def:                                      ; preds = %body
  br label %exit2

next_def:                                         ; preds = %body
  %8 = icmp eq i32 1, %6
  br i1 %8, label %current_def3, label %next_def4

exit2:                                            ; preds = %current_def3, %current_def
  %9 = phi %String* [ bitcast ({ i32, i32, i32, [1 x i8] }* @"''" to %String*), %current_def ], [ %4, %current_def3 ]
  %10 = call %String* @"*String#chomp<Char>:String"(%String* %9, i32 0)
  store %String* %10, %String** %name
  %11 = load %String*, %String** %name
  %12 = call i1 @"*String#empty?:Bool"(%String* %11)
  br i1 %12, label %then, label %else

current_def3:                                     ; preds = %next_def
  br label %exit2

next_def4:                                        ; preds = %next_def
  unreachable

then:                                             ; preds = %exit2
  br label %exit5

else:                                             ; preds = %exit2
  %13 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %14 = load i32*, i32** %13
  %15 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %14)
  store i32 %15, i32* %dir
  %16 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %17 = load i32*, i32** %16
  %18 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %17)
  store i32 %18, i32* %time
  %19 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %20 = load i32*, i32** %19
  %21 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %20)
  store i32 %21, i32* %length
  %22 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 11
  %23 = load %"Array(Tuple(String, Int32, Int32, Int32))"*, %"Array(Tuple(String, Int32, Int32, Int32))"** %22
  %24 = load %String*, %String** %name
  %25 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0, i32 0, i32 0
  store %String* %24, %String** %25
  %26 = load i32, i32* %dir
  %27 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0, i32 0, i32 1
  store i32 %26, i32* %27
  %28 = load i32, i32* %time
  %29 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0, i32 0, i32 2
  store i32 %28, i32* %29
  %30 = load i32, i32* %length
  %31 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0, i32 0, i32 3
  store i32 %30, i32* %31
  %32 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0
  %33 = call %"Array(Tuple(String, Int32, Int32, Int32))"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#<<<Tuple(String, Int32, Int32, Int32)>:Array(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %23, %"Tuple(String, Int32, Int32, Int32)" %32)
  %34 = load i32, i32* %i
  %35 = add i32 %34, 1
  store i32 %35, i32* %i
  br label %while

exit5:                                            ; preds = %then
  ret void
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %io) #0 {
alloca:
  %result = alloca i32
  %shift = alloca i32
  %byte = alloca i32
  %i = alloca i32
  %0 = alloca %"(UInt8 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %result
  store i32 0, i32* %shift
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %else, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %1 = load i32, i32* %i
  %2 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %io)
  store %"(UInt8 | Nil)" %2, %"(UInt8 | Nil)"* %0
  %3 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = icmp eq i32 135, %4
  br i1 %5, label %current_def, label %next_def

exit:                                             ; preds = %while
  unreachable

current_def:                                      ; preds = %body
  %6 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to i8*
  %8 = load i8, i8* %7
  br label %exit1

next_def:                                         ; preds = %body
  %9 = icmp eq i32 0, %4
  br i1 %9, label %current_def2, label %next_def3

exit1:                                            ; preds = %current_def
  %10 = phi i8 [ %8, %current_def ]
  %11 = zext i8 %10 to i32
  store i32 %11, i32* %byte
  %12 = load i32, i32* %result
  %13 = load i32, i32* %byte
  %14 = and i32 %13, 127
  %15 = load i32, i32* %shift
  %16 = call i32 @"*Int32@Int#<<<Int32>:Int32"(i32 %14, i32 %15)
  %17 = or i32 %12, %16
  store i32 %17, i32* %result
  %18 = load i32, i32* %byte
  %19 = call i32 @"*Int32@Int#bit<Int32>:Int32"(i32 %18, i32 7)
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %then, label %else

current_def2:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def3:                                        ; preds = %next_def
  unreachable

then:                                             ; preds = %exit1
  br label %exit4

else:                                             ; preds = %exit1
  %21 = load i32, i32* %shift
  %22 = add i32 %21, 7
  store i32 %22, i32* %shift
  %23 = load i32, i32* %i
  %24 = add i32 %23, 1
  store i32 %24, i32* %i
  br label %while

exit4:                                            ; preds = %then
  %25 = load i32, i32* %result
  ret i32 %25
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#bit<Int32>:Int32"(i32 %self, i32 %bit) #0 {
entry:
  %0 = call i32 @"*Int32@Int#>><Int32>:Int32"(i32 %self, i32 %bit)
  %1 = and i32 %0, 1
  ret i32 %1
}

; Function Attrs: uwtable
define internal %"Array(Tuple(String, Int32, Int32, Int32))"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#<<<Tuple(String, Int32, Int32, Int32)>:Array(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, %"Tuple(String, Int32, Int32, Int32)" %value) #0 {
alloca:
  %value1 = alloca %"Tuple(String, Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Tuple(String, Int32, Int32, Int32)" %value, %"Tuple(String, Int32, Int32, Int32)"* %value1
  %0 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %value1
  %1 = call %"Array(Tuple(String, Int32, Int32, Int32))"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#push<Tuple(String, Int32, Int32, Int32)>:Array(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, %"Tuple(String, Int32, Int32, Int32)" %0)
  ret %"Array(Tuple(String, Int32, Int32, Int32))"* %1
}

; Function Attrs: uwtable
define internal %"Array(Tuple(String, Int32, Int32, Int32))"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#push<Tuple(String, Int32, Int32, Int32)>:Array(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, %"Tuple(String, Int32, Int32, Int32)" %value) #0 {
alloca:
  %value1 = alloca %"Tuple(String, Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Tuple(String, Int32, Int32, Int32)" %value, %"Tuple(String, Int32, Int32, Int32)"* %value1
  %0 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#check_needs_resize:(Pointer(Tuple(String, Int32, Int32, Int32)) | Nil)"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self)
  %1 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 3
  %2 = load %"Tuple(String, Int32, Int32, Int32)"*, %"Tuple(String, Int32, Int32, Int32)"** %1
  %3 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %value1
  %6 = call %"Tuple(String, Int32, Int32, Int32)" @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#[]=<Int32, Tuple(String, Int32, Int32, Int32)>:Tuple(String, Int32, Int32, Int32)"(%"Tuple(String, Int32, Int32, Int32)"* %2, i32 %4, %"Tuple(String, Int32, Int32, Int32)" %5)
  %7 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = add i32 %8, 1
  %10 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 1
  store i32 %9, i32* %10
  ret %"Array(Tuple(String, Int32, Int32, Int32))"* %self
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#check_needs_resize:(Pointer(Tuple(String, Int32, Int32, Int32)) | Nil)"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#double_capacity:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi %"Tuple(String, Int32, Int32, Int32)"* [ %5, %then ], [ null, %else ]
  ret %"Tuple(String, Int32, Int32, Int32)"* %6
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#double_capacity:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#resize_to_capacity<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %6)
  ret %"Tuple(String, Int32, Int32, Int32)"* %7
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#resize_to_capacity<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 3
  %2 = load %"Tuple(String, Int32, Int32, Int32)"*, %"Tuple(String, Int32, Int32, Int32)"** %1
  %3 = icmp ne %"Tuple(String, Int32, Int32, Int32)"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 3
  %5 = load %"Tuple(String, Int32, Int32, Int32)"*, %"Tuple(String, Int32, Int32, Int32)"** %4
  %6 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#realloc<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Tuple(String, Int32, Int32, Int32)"* %5, i32 %7)
  %9 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 3
  store %"Tuple(String, Int32, Int32, Int32)"* %8, %"Tuple(String, Int32, Int32, Int32)"** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)::malloc<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(i32 688, i32 %11)
  %13 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 3
  store %"Tuple(String, Int32, Int32, Int32)"* %12, %"Tuple(String, Int32, Int32, Int32)"** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi %"Tuple(String, Int32, Int32, Int32)"* [ %8, %then ], [ %12, %else ]
  ret %"Tuple(String, Int32, Int32, Int32)"* %14
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#realloc<Int32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Tuple(String, Int32, Int32, Int32)"* %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Tuple(String, Int32, Int32, Int32)"* %self to i8*
  %2 = mul i64 %0, ptrtoint (%"Tuple(String, Int32, Int32, Int32)"* getelementptr (%"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Tuple(String, Int32, Int32, Int32)"*
  ret %"Tuple(String, Int32, Int32, Int32)"* %5
}

; Function Attrs: uwtable
define internal i64 @"*Debug::DWARF::LineNumbers::Sequence#offset:Int64"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 0
  %1 = getelementptr inbounds %"(Int64 | Nil)", %"(Int64 | Nil)"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 140, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(Int64 | Nil)", %"(Int64 | Nil)"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i64*
  %6 = load i64, i64* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i64 [ %6, %current_def ]
  ret i64 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Sequence#unit_length:UInt32"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 1
  %1 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 139, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i32*
  %6 = load i32, i32* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i32 [ %6, %current_def ]
  ret i32 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal void @"*Debug::DWARF::LineNumbers#read_statement_program<Debug::DWARF::LineNumbers::Sequence>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %sequence) #0 {
alloca:
  %registers = alloca %"Debug::DWARF::LineNumbers::Register"
  %sequence1 = alloca %"Debug::DWARF::LineNumbers::Sequence"
  %0 = alloca %"Debug::DWARF::LineNumbers::Register"
  %opcode = alloca i8
  %adjusted_opcode = alloca %"(Int32 | UInt8)"
  %operation_advance = alloca %"(Int32 | UInt32 | UInt8)"
  %len = alloca i32
  %extended_opcode = alloca i8
  %standard_opcode = alloca i8
  %n_args = alloca i8
  %i = alloca i32
  %1 = alloca %"(UInt8 | Nil)"
  %2 = alloca %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)"
  %3 = alloca %"(UInt8 | Nil)"
  %4 = alloca %"Debug::DWARF::LineNumbers::Register"
  %5 = alloca %"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)"
  %6 = alloca %"(Int32 | UInt32)"
  %7 = alloca %"(Int32 | UInt32)"
  %8 = alloca %"Slice(UInt8)"
  %9 = alloca %"(Int32 | UInt32)"
  %10 = alloca %"(Bool | UInt32 | UInt64 | Nil)"
  %11 = alloca %"(UInt32 | UInt64)"
  %12 = alloca %"(UInt32 | UInt64)"
  %13 = alloca %"(Bool | UInt32 | UInt64 | Nil)"
  %14 = alloca %"(Bool | UInt32 | UInt64 | Nil)"
  %15 = alloca %"(Bool | UInt32 | UInt64 | Nil)"
  %16 = alloca %"(Bool | UInt32 | UInt64 | Nil)"
  %17 = alloca %"(Bool | UInt32 | UInt64 | Nil)"
  %18 = alloca %"(UInt32 | UInt64)"
  %19 = alloca %"(UInt32 | UInt64)"
  %20 = alloca %"(Bool | UInt32 | Nil)"
  %21 = alloca %"(Bool | UInt32 | Nil)"
  %22 = alloca %"(Bool | UInt32 | Nil)"
  %23 = alloca %"(UInt32 | Nil).21"
  %i78 = alloca i8
  %24 = alloca %"(UInt32 | Nil).21"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::DWARF::LineNumbers::Sequence" %sequence, %"Debug::DWARF::LineNumbers::Sequence"* %sequence1
  %25 = call i1 @"*Debug::DWARF::LineNumbers::Sequence#default_is_stmt:Bool"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %26 = call %"Debug::DWARF::LineNumbers::Register" @"*Debug::DWARF::LineNumbers::Register::new<Bool>:Debug::DWARF::LineNumbers::Register"(i1 %25)
  store %"Debug::DWARF::LineNumbers::Register" %26, %"Debug::DWARF::LineNumbers::Register"* %0
  %27 = load %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %0
  store %"Debug::DWARF::LineNumbers::Register" %27, %"Debug::DWARF::LineNumbers::Register"* %registers
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %exit8, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %28 = load i32, i32* %i
  %29 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %30 = load i32*, i32** %29
  %31 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %30)
  store %"(UInt8 | Nil)" %31, %"(UInt8 | Nil)"* %1
  %32 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %1, i32 0, i32 0
  %33 = load i32, i32* %32
  %34 = icmp eq i32 135, %33
  br i1 %34, label %current_def, label %next_def

exit:                                             ; preds = %while
  unreachable

current_def:                                      ; preds = %body
  %35 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %1, i32 0, i32 1
  %36 = bitcast [1 x i64]* %35 to i8*
  %37 = load i8, i8* %36
  br label %exit2

next_def:                                         ; preds = %body
  %38 = icmp eq i32 0, %33
  br i1 %38, label %current_def3, label %next_def4

exit2:                                            ; preds = %current_def
  %39 = phi i8 [ %37, %current_def ]
  store i8 %39, i8* %opcode
  %40 = load i8, i8* %opcode
  %41 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#opcode_base:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %42 = icmp uge i8 %40, %41
  br i1 %42, label %then, label %else

current_def3:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def4:                                        ; preds = %next_def
  unreachable

then:                                             ; preds = %exit2
  %43 = load i8, i8* %opcode
  %44 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#opcode_base:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %45 = sub i8 %43, %44
  %46 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %adjusted_opcode, i32 0, i32 0
  store i32 135, i32* %46
  %47 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %adjusted_opcode, i32 0, i32 1
  %48 = bitcast [1 x i64]* %47 to i8*
  store i8 %45, i8* %48
  %49 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %adjusted_opcode, i32 0, i32 1
  %50 = bitcast [1 x i64]* %49 to i8*
  %51 = load i8, i8* %50
  %52 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#line_range:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %53 = call i8 @"*UInt8@Int#/<UInt8>:UInt8"(i8 %51, i8 %52)
  %54 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 0
  store i32 135, i32* %54
  %55 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %56 = bitcast [1 x i64]* %55 to i8*
  store i8 %53, i8* %56
  %57 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %58 = load i8, i8* %57
  %59 = zext i8 %58 to i32
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %then5, label %else6

else:                                             ; preds = %exit2
  %61 = load i8, i8* %opcode
  %62 = zext i8 %61 to i32
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %then9, label %else10

then5:                                            ; preds = %then
  %64 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 0
  %65 = load i64, i64* %64
  %66 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %67 = bitcast [1 x i64]* %66 to i8*
  %68 = load i8, i8* %67
  %69 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %70 = mul i8 %68, %69
  %71 = zext i8 %70 to i64
  %72 = add i64 %65, %71
  %73 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %72)
  br label %exit7

else6:                                            ; preds = %then
  %74 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 0
  %75 = load i64, i64* %74
  %76 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %77 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 1
  %78 = load i32, i32* %77
  %79 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %80 = bitcast [1 x i64]* %79 to i8*
  %81 = load i8, i8* %80
  %82 = zext i8 %81 to i32
  %83 = add i32 %78, %82
  %84 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %85 = load i8, i8* %84
  %86 = call i32 @"*UInt32@Int#/<UInt8>:UInt32"(i32 %83, i8 %85)
  %87 = zext i8 %76 to i32
  %88 = mul i32 %87, %86
  %89 = trunc i32 %88 to i8
  %90 = zext i8 %89 to i64
  %91 = add i64 %75, %90
  %92 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %91)
  %93 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 1
  %94 = load i32, i32* %93
  %95 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %96 = bitcast [1 x i64]* %95 to i8*
  %97 = load i8, i8* %96
  %98 = zext i8 %97 to i32
  %99 = add i32 %94, %98
  %100 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %101 = load i8, i8* %100
  %102 = call i32 @"*UInt32@Int#%<UInt8>:UInt32"(i32 %99, i8 %101)
  %103 = call i32 @"*Debug::DWARF::LineNumbers::Register#op_index=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %102)
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %104 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 3
  %105 = load i32, i32* %104
  %106 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#line_base:Int8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %107 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %adjusted_opcode, i32 0, i32 1
  %108 = bitcast [1 x i64]* %107 to i8*
  %109 = load i8, i8* %108
  %110 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#line_range:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %111 = call i8 @"*UInt8@Int#%<UInt8>:UInt8"(i8 %109, i8 %110)
  %112 = add i8 %106, %111
  %113 = sext i8 %112 to i32
  %114 = add i32 %105, %113
  %115 = call i32 @"*Debug::DWARF::LineNumbers::Register#line=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %114)
  %116 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1
  %117 = load %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers
  call void @"*Debug::DWARF::LineNumbers#register_to_matrix<Debug::DWARF::LineNumbers::Sequence, Debug::DWARF::LineNumbers::Register>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %116, %"Debug::DWARF::LineNumbers::Register" %117)
  %118 = call i32 @"*Debug::DWARF::LineNumbers::Register#reset:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers)
  %119 = getelementptr inbounds %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)", %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)"* %2, i32 0, i32 0
  store i32 139, i32* %119
  %120 = getelementptr inbounds %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)", %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)"* %2, i32 0, i32 1
  %121 = bitcast [5 x i64]* %120 to i32*
  store i32 %118, i32* %121
  br label %exit8

exit8:                                            ; preds = %exit35, %exit7
  %122 = phi %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)"* [ %2, %exit7 ], [ %214, %exit35 ]
  %123 = load i32, i32* %i
  %124 = add i32 %123, 1
  store i32 %124, i32* %i
  br label %while

then9:                                            ; preds = %else
  %125 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %126 = load i32*, i32** %125
  %127 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %126)
  %128 = sub i32 %127, 1
  store i32 %128, i32* %len
  %129 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %130 = load i32*, i32** %129
  %131 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %130)
  store %"(UInt8 | Nil)" %131, %"(UInt8 | Nil)"* %3
  %132 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %3, i32 0, i32 0
  %133 = load i32, i32* %132
  %134 = icmp eq i32 135, %133
  br i1 %134, label %current_def11, label %next_def12

else10:                                           ; preds = %else
  %135 = load i8, i8* %opcode
  store i8 %135, i8* %standard_opcode
  %136 = load i8, i8* %standard_opcode
  %137 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 1, i8 %136)
  br i1 %137, label %then36, label %else37

current_def11:                                    ; preds = %then9
  %138 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %3, i32 0, i32 1
  %139 = bitcast [1 x i64]* %138 to i8*
  %140 = load i8, i8* %139
  br label %exit13

next_def12:                                       ; preds = %then9
  %141 = icmp eq i32 0, %133
  br i1 %141, label %current_def14, label %next_def15

exit13:                                           ; preds = %current_def11
  %142 = phi i8 [ %140, %current_def11 ]
  store i8 %142, i8* %extended_opcode
  %143 = load i8, i8* %extended_opcode
  %144 = call i1 @"*Debug::DWARF::LNE@Object#===<Debug::DWARF::LNE>:Bool"(i8 1, i8 %143)
  br i1 %144, label %then16, label %else17

current_def14:                                    ; preds = %next_def12
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def15:                                       ; preds = %next_def12
  unreachable

then16:                                           ; preds = %exit13
  %145 = call i1 @"*Debug::DWARF::LineNumbers::Register#end_sequence=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %registers, i1 true)
  %146 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1
  %147 = load %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers
  call void @"*Debug::DWARF::LineNumbers#register_to_matrix<Debug::DWARF::LineNumbers::Sequence, Debug::DWARF::LineNumbers::Register>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %146, %"Debug::DWARF::LineNumbers::Register" %147)
  %148 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %149 = load i32*, i32** %148
  %150 = call i64 @"*IO::FileDescriptor+@IO::FileDescriptor#tell:Int64"(i32* %149)
  %151 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 3
  %152 = load i64, i64* %151
  %153 = sub i64 %150, %152
  %154 = call i64 @"*Debug::DWARF::LineNumbers::Sequence#offset:Int64"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %155 = sub i64 %153, %154
  %156 = call i32 @"*Debug::DWARF::LineNumbers::Sequence#unit_length:UInt32"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %157 = icmp slt i64 %155, 0
  %158 = zext i32 %156 to i64
  %159 = icmp slt i64 %155, %158
  %160 = or i1 %157, %159
  br i1 %160, label %then18, label %else19

else17:                                           ; preds = %exit13
  %161 = load i8, i8* %extended_opcode
  %162 = call i1 @"*Debug::DWARF::LNE@Object#===<Debug::DWARF::LNE>:Bool"(i8 2, i8 %161)
  br i1 %162, label %then23, label %else24

then18:                                           ; preds = %then16
  %163 = call i1 @"*Debug::DWARF::LineNumbers::Sequence#default_is_stmt:Bool"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %164 = call %"Debug::DWARF::LineNumbers::Register" @"*Debug::DWARF::LineNumbers::Register::new<Bool>:Debug::DWARF::LineNumbers::Register"(i1 %163)
  store %"Debug::DWARF::LineNumbers::Register" %164, %"Debug::DWARF::LineNumbers::Register"* %4
  %165 = load %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %4
  store %"Debug::DWARF::LineNumbers::Register" %165, %"Debug::DWARF::LineNumbers::Register"* %registers
  br label %exit20

else19:                                           ; preds = %then16
  br label %exit21

exit20:                                           ; preds = %then18
  %166 = phi %"Debug::DWARF::LineNumbers::Register"* [ %4, %then18 ]
  %167 = load %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %166
  %168 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)", %"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)"* %5, i32 0, i32 0
  store i32 303, i32* %168
  %169 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)", %"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)"* %5, i32 0, i32 1
  %170 = bitcast [5 x i64]* %169 to %"Debug::DWARF::LineNumbers::Register"*
  store %"Debug::DWARF::LineNumbers::Register" %167, %"Debug::DWARF::LineNumbers::Register"* %170
  br label %exit22

exit21:                                           ; preds = %else19
  ret void

exit22:                                           ; preds = %exit31, %exit20
  %171 = phi %"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)"* [ %5, %exit20 ], [ %196, %exit31 ]
  %172 = bitcast %"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)"* %171 to %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)"*
  br label %exit35

then23:                                           ; preds = %else17
  %173 = load i32, i32* %len
  %174 = call i1 @"*Int32@Object#===<UInt32>:Bool"(i32 8, i32 %173)
  br i1 %174, label %then25, label %else26

else24:                                           ; preds = %else17
  %175 = load i8, i8* %extended_opcode
  %176 = call i1 @"*Debug::DWARF::LNE@Object#===<Debug::DWARF::LNE>:Bool"(i8 4, i8 %175)
  br i1 %176, label %then32, label %else33

then25:                                           ; preds = %then23
  %177 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %178 = load i32*, i32** %177
  %179 = call i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class>:UInt64"(i32* %178, i32 611)
  %180 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %179)
  br label %exit27

else26:                                           ; preds = %then23
  %181 = load i32, i32* %len
  %182 = call i1 @"*Int32@Object#===<UInt32>:Bool"(i32 4, i32 %181)
  br i1 %182, label %then28, label %else29

exit27:                                           ; preds = %exit30, %then25
  %183 = call i32 @"*Debug::DWARF::LineNumbers::Register#op_index=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 0)
  %184 = getelementptr inbounds %"(Int32 | UInt32)", %"(Int32 | UInt32)"* %6, i32 0, i32 0
  store i32 139, i32* %184
  %185 = getelementptr inbounds %"(Int32 | UInt32)", %"(Int32 | UInt32)"* %6, i32 0, i32 1
  %186 = bitcast [1 x i64]* %185 to i32*
  store i32 %183, i32* %186
  br label %exit31

then28:                                           ; preds = %else26
  %187 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %188 = load i32*, i32** %187
  %189 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<UInt32:Class>:UInt32"(i32* %188, i32 609)
  %190 = zext i32 %189 to i64
  %191 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %190)
  br label %exit30

else29:                                           ; preds = %else26
  %192 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %193 = load i32*, i32** %192
  %194 = load i32, i32* %len
  call void @"*IO::FileDescriptor+@IO#skip<UInt32>:Nil"(i32* %193, i32 %194)
  br label %exit30

exit30:                                           ; preds = %else29, %then28
  br label %exit27

exit31:                                           ; preds = %exit34, %exit27
  %195 = phi %"(Int32 | UInt32)"* [ %6, %exit27 ], [ %213, %exit34 ]
  %196 = bitcast %"(Int32 | UInt32)"* %195 to %"(Debug::DWARF::LineNumbers::Register | Int32 | UInt32)"*
  br label %exit22

then32:                                           ; preds = %else24
  %197 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %198 = load i32*, i32** %197
  %199 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %198)
  %200 = call i32 @"*Debug::DWARF::LineNumbers::Register#discriminator=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %199)
  %201 = getelementptr inbounds %"(Int32 | UInt32)", %"(Int32 | UInt32)"* %7, i32 0, i32 0
  store i32 139, i32* %201
  %202 = getelementptr inbounds %"(Int32 | UInt32)", %"(Int32 | UInt32)"* %7, i32 0, i32 1
  %203 = bitcast [1 x i64]* %202 to i32*
  store i32 %200, i32* %203
  br label %exit34

else33:                                           ; preds = %else24
  %204 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %205 = load i32*, i32** %204
  %206 = load i32, i32* %len
  %207 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::new<UInt32>:Slice(UInt8)"(i32 935, i32 %206)
  store %"Slice(UInt8)" %207, %"Slice(UInt8)"* %8
  %208 = load %"Slice(UInt8)", %"Slice(UInt8)"* %8
  %209 = call i32 @"*IO::FileDescriptor+@IO#read_fully<Slice(UInt8)>:Int32"(i32* %205, %"Slice(UInt8)" %208)
  %210 = getelementptr inbounds %"(Int32 | UInt32)", %"(Int32 | UInt32)"* %9, i32 0, i32 0
  store i32 138, i32* %210
  %211 = getelementptr inbounds %"(Int32 | UInt32)", %"(Int32 | UInt32)"* %9, i32 0, i32 1
  %212 = bitcast [1 x i64]* %211 to i32*
  store i32 %209, i32* %212
  br label %exit34

exit34:                                           ; preds = %else33, %then32
  %213 = phi %"(Int32 | UInt32)"* [ %7, %then32 ], [ %9, %else33 ]
  br label %exit31

exit35:                                           ; preds = %exit38, %exit22
  %214 = phi %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)"* [ %172, %exit22 ], [ %224, %exit38 ]
  br label %exit8

then36:                                           ; preds = %else10
  %215 = load %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1
  %216 = load %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers
  call void @"*Debug::DWARF::LineNumbers#register_to_matrix<Debug::DWARF::LineNumbers::Sequence, Debug::DWARF::LineNumbers::Register>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %215, %"Debug::DWARF::LineNumbers::Register" %216)
  %217 = call i32 @"*Debug::DWARF::LineNumbers::Register#reset:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers)
  %218 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %10, i32 0, i32 0
  store i32 139, i32* %218
  %219 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %10, i32 0, i32 1
  %220 = bitcast [1 x i64]* %219 to i32*
  store i32 %217, i32* %220
  br label %exit38

else37:                                           ; preds = %else10
  %221 = load i8, i8* %standard_opcode
  %222 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 2, i8 %221)
  br i1 %222, label %then39, label %else40

exit38:                                           ; preds = %exit44, %then36
  %223 = phi %"(Bool | UInt32 | UInt64 | Nil)"* [ %10, %then36 ], [ %284, %exit44 ]
  %224 = bitcast %"(Bool | UInt32 | UInt64 | Nil)"* %223 to %"(Bool | Debug::DWARF::LineNumbers::Register | Int32 | UInt32 | UInt64 | Nil)"*
  br label %exit35

then39:                                           ; preds = %else37
  %225 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %226 = load i32*, i32** %225
  %227 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %226)
  %228 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 0
  store i32 139, i32* %228
  %229 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %230 = bitcast [1 x i64]* %229 to i32*
  store i32 %227, i32* %230
  %231 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %232 = load i8, i8* %231
  %233 = zext i8 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %then41, label %else42

else40:                                           ; preds = %else37
  %235 = load i8, i8* %standard_opcode
  %236 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 3, i8 %235)
  br i1 %236, label %then45, label %else46

then41:                                           ; preds = %then39
  %237 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 0
  %238 = load i64, i64* %237
  %239 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %240 = bitcast [1 x i64]* %239 to i32*
  %241 = load i32, i32* %240
  %242 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %243 = zext i8 %242 to i32
  %244 = mul i32 %241, %243
  %245 = zext i32 %244 to i64
  %246 = add i64 %238, %245
  %247 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %246)
  %248 = getelementptr inbounds %"(UInt32 | UInt64)", %"(UInt32 | UInt64)"* %11, i32 0, i32 0
  store i32 141, i32* %248
  %249 = getelementptr inbounds %"(UInt32 | UInt64)", %"(UInt32 | UInt64)"* %11, i32 0, i32 1
  %250 = bitcast [1 x i64]* %249 to i64*
  store i64 %247, i64* %250
  br label %exit43

else42:                                           ; preds = %then39
  %251 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 0
  %252 = load i64, i64* %251
  %253 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %254 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 1
  %255 = load i32, i32* %254
  %256 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %257 = bitcast [1 x i64]* %256 to i32*
  %258 = load i32, i32* %257
  %259 = add i32 %255, %258
  %260 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %261 = load i8, i8* %260
  %262 = call i32 @"*UInt32@Int#/<UInt8>:UInt32"(i32 %259, i8 %261)
  %263 = zext i8 %253 to i32
  %264 = mul i32 %263, %262
  %265 = trunc i32 %264 to i8
  %266 = zext i8 %265 to i64
  %267 = add i64 %252, %266
  %268 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %267)
  %269 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 1
  %270 = load i32, i32* %269
  %271 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %272 = bitcast [1 x i64]* %271 to i32*
  %273 = load i32, i32* %272
  %274 = add i32 %270, %273
  %275 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %276 = load i8, i8* %275
  %277 = call i32 @"*UInt32@Int#%<UInt8>:UInt32"(i32 %274, i8 %276)
  %278 = call i32 @"*Debug::DWARF::LineNumbers::Register#op_index=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %277)
  %279 = getelementptr inbounds %"(UInt32 | UInt64)", %"(UInt32 | UInt64)"* %12, i32 0, i32 0
  store i32 139, i32* %279
  %280 = getelementptr inbounds %"(UInt32 | UInt64)", %"(UInt32 | UInt64)"* %12, i32 0, i32 1
  %281 = bitcast [1 x i64]* %280 to i32*
  store i32 %278, i32* %281
  br label %exit43

exit43:                                           ; preds = %else42, %then41
  %282 = phi %"(UInt32 | UInt64)"* [ %11, %then41 ], [ %12, %else42 ]
  %283 = bitcast %"(UInt32 | UInt64)"* %282 to %"(Bool | UInt32 | UInt64 | Nil)"*
  br label %exit44

exit44:                                           ; preds = %exit47, %exit43
  %284 = phi %"(Bool | UInt32 | UInt64 | Nil)"* [ %283, %exit43 ], [ %297, %exit47 ]
  br label %exit38

then45:                                           ; preds = %else40
  %285 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 3
  %286 = load i32, i32* %285
  %287 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %288 = load i32*, i32** %287
  %289 = call i32 @"*Debug::DWARF::read_signed_leb128<IO::FileDescriptor+>:Int32"(i32* %288)
  %290 = add i32 %286, %289
  %291 = call i32 @"*Debug::DWARF::LineNumbers::Register#line=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %290)
  %292 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %13, i32 0, i32 0
  store i32 139, i32* %292
  %293 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %13, i32 0, i32 1
  %294 = bitcast [1 x i64]* %293 to i32*
  store i32 %291, i32* %294
  br label %exit47

else46:                                           ; preds = %else40
  %295 = load i8, i8* %standard_opcode
  %296 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 4, i8 %295)
  br i1 %296, label %then48, label %else49

exit47:                                           ; preds = %exit50, %then45
  %297 = phi %"(Bool | UInt32 | UInt64 | Nil)"* [ %13, %then45 ], [ %307, %exit50 ]
  br label %exit44

then48:                                           ; preds = %else46
  %298 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %299 = load i32*, i32** %298
  %300 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %299)
  %301 = call i32 @"*Debug::DWARF::LineNumbers::Register#file=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %300)
  %302 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %14, i32 0, i32 0
  store i32 139, i32* %302
  %303 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %14, i32 0, i32 1
  %304 = bitcast [1 x i64]* %303 to i32*
  store i32 %301, i32* %304
  br label %exit50

else49:                                           ; preds = %else46
  %305 = load i8, i8* %standard_opcode
  %306 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 5, i8 %305)
  br i1 %306, label %then51, label %else52

exit50:                                           ; preds = %exit53, %then48
  %307 = phi %"(Bool | UInt32 | UInt64 | Nil)"* [ %14, %then48 ], [ %317, %exit53 ]
  br label %exit47

then51:                                           ; preds = %else49
  %308 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %309 = load i32*, i32** %308
  %310 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %309)
  %311 = call i32 @"*Debug::DWARF::LineNumbers::Register#column=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %310)
  %312 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %15, i32 0, i32 0
  store i32 139, i32* %312
  %313 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %15, i32 0, i32 1
  %314 = bitcast [1 x i64]* %313 to i32*
  store i32 %311, i32* %314
  br label %exit53

else52:                                           ; preds = %else49
  %315 = load i8, i8* %standard_opcode
  %316 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 6, i8 %315)
  br i1 %316, label %then54, label %else55

exit53:                                           ; preds = %exit56, %then51
  %317 = phi %"(Bool | UInt32 | UInt64 | Nil)"* [ %15, %then51 ], [ %328, %exit56 ]
  br label %exit50

then54:                                           ; preds = %else52
  %318 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 5
  %319 = load i1, i1* %318
  %320 = xor i1 %319, true
  %321 = call i1 @"*Debug::DWARF::LineNumbers::Register#is_stmt=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %registers, i1 %320)
  %322 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %16, i32 0, i32 0
  store i32 147, i32* %322
  %323 = zext i1 %321 to i64
  %324 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %16, i32 0, i32 1
  %325 = bitcast [1 x i64]* %324 to i64*
  store i64 %323, i64* %325
  br label %exit56

else55:                                           ; preds = %else52
  %326 = load i8, i8* %standard_opcode
  %327 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 7, i8 %326)
  br i1 %327, label %then57, label %else58

exit56:                                           ; preds = %exit59, %then54
  %328 = phi %"(Bool | UInt32 | UInt64 | Nil)"* [ %16, %then54 ], [ %336, %exit59 ]
  br label %exit53

then57:                                           ; preds = %else55
  %329 = call i1 @"*Debug::DWARF::LineNumbers::Register#basic_block=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %registers, i1 true)
  %330 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %17, i32 0, i32 0
  store i32 147, i32* %330
  %331 = zext i1 %329 to i64
  %332 = getelementptr inbounds %"(Bool | UInt32 | UInt64 | Nil)", %"(Bool | UInt32 | UInt64 | Nil)"* %17, i32 0, i32 1
  %333 = bitcast [1 x i64]* %332 to i64*
  store i64 %331, i64* %333
  br label %exit59

else58:                                           ; preds = %else55
  %334 = load i8, i8* %standard_opcode
  %335 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 8, i8 %334)
  br i1 %335, label %then60, label %else61

exit59:                                           ; preds = %exit65, %then57
  %336 = phi %"(Bool | UInt32 | UInt64 | Nil)"* [ %17, %then57 ], [ %404, %exit65 ]
  br label %exit56

then60:                                           ; preds = %else58
  %337 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#opcode_base:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %338 = zext i8 %337 to i32
  %339 = sub i32 255, %338
  %340 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %adjusted_opcode, i32 0, i32 0
  store i32 138, i32* %340
  %341 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %adjusted_opcode, i32 0, i32 1
  %342 = bitcast [1 x i64]* %341 to i32*
  store i32 %339, i32* %342
  %343 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %adjusted_opcode, i32 0, i32 1
  %344 = bitcast [1 x i64]* %343 to i32*
  %345 = load i32, i32* %344
  %346 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#line_range:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %347 = call i32 @"*Int32@Int#/<UInt8>:Int32"(i32 %345, i8 %346)
  %348 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 0
  store i32 138, i32* %348
  %349 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %350 = bitcast [1 x i64]* %349 to i32*
  store i32 %347, i32* %350
  %351 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %352 = load i8, i8* %351
  %353 = zext i8 %352 to i32
  %354 = icmp eq i32 %353, 1
  br i1 %354, label %then62, label %else63

else61:                                           ; preds = %else58
  %355 = load i8, i8* %standard_opcode
  %356 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 9, i8 %355)
  br i1 %356, label %then66, label %else67

then62:                                           ; preds = %then60
  %357 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 0
  %358 = load i64, i64* %357
  %359 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %360 = bitcast [1 x i64]* %359 to i32*
  %361 = load i32, i32* %360
  %362 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %363 = zext i8 %362 to i32
  %364 = mul i32 %361, %363
  %365 = sext i32 %364 to i64
  %366 = add i64 %358, %365
  %367 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %366)
  %368 = getelementptr inbounds %"(UInt32 | UInt64)", %"(UInt32 | UInt64)"* %18, i32 0, i32 0
  store i32 141, i32* %368
  %369 = getelementptr inbounds %"(UInt32 | UInt64)", %"(UInt32 | UInt64)"* %18, i32 0, i32 1
  %370 = bitcast [1 x i64]* %369 to i64*
  store i64 %367, i64* %370
  br label %exit64

else63:                                           ; preds = %then60
  %371 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 0
  %372 = load i64, i64* %371
  %373 = call i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %sequence1)
  %374 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 1
  %375 = load i32, i32* %374
  %376 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %377 = bitcast [1 x i64]* %376 to i32*
  %378 = load i32, i32* %377
  %379 = add i32 %375, %378
  %380 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %381 = load i8, i8* %380
  %382 = call i32 @"*UInt32@Int#/<UInt8>:UInt32"(i32 %379, i8 %381)
  %383 = zext i8 %373 to i32
  %384 = mul i32 %383, %382
  %385 = trunc i32 %384 to i8
  %386 = zext i8 %385 to i64
  %387 = add i64 %372, %386
  %388 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %387)
  %389 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 1
  %390 = load i32, i32* %389
  %391 = getelementptr inbounds %"(Int32 | UInt32 | UInt8)", %"(Int32 | UInt32 | UInt8)"* %operation_advance, i32 0, i32 1
  %392 = bitcast [1 x i64]* %391 to i32*
  %393 = load i32, i32* %392
  %394 = add i32 %390, %393
  %395 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 5
  %396 = load i8, i8* %395
  %397 = call i32 @"*UInt32@Int#%<UInt8>:UInt32"(i32 %394, i8 %396)
  %398 = call i32 @"*Debug::DWARF::LineNumbers::Register#op_index=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %397)
  %399 = getelementptr inbounds %"(UInt32 | UInt64)", %"(UInt32 | UInt64)"* %19, i32 0, i32 0
  store i32 139, i32* %399
  %400 = getelementptr inbounds %"(UInt32 | UInt64)", %"(UInt32 | UInt64)"* %19, i32 0, i32 1
  %401 = bitcast [1 x i64]* %400 to i32*
  store i32 %398, i32* %401
  br label %exit64

exit64:                                           ; preds = %else63, %then62
  %402 = phi %"(UInt32 | UInt64)"* [ %18, %then62 ], [ %19, %else63 ]
  %403 = bitcast %"(UInt32 | UInt64)"* %402 to %"(Bool | UInt32 | UInt64 | Nil)"*
  br label %exit65

exit65:                                           ; preds = %exit68, %exit64
  %404 = phi %"(Bool | UInt32 | UInt64 | Nil)"* [ %403, %exit64 ], [ %420, %exit68 ]
  br label %exit59

then66:                                           ; preds = %else61
  %405 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers, i32 0, i32 0
  %406 = load i64, i64* %405
  %407 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %408 = load i32*, i32** %407
  %409 = call i16 @"*IO::FileDescriptor+@IO#read_bytes<UInt16:Class>:UInt16"(i32* %408, i32 607)
  %410 = zext i16 %409 to i64
  %411 = add i64 %406, %410
  %412 = call i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %registers, i64 %411)
  %413 = call i32 @"*Debug::DWARF::LineNumbers::Register#op_index=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 0)
  %414 = getelementptr inbounds %"(Bool | UInt32 | Nil)", %"(Bool | UInt32 | Nil)"* %20, i32 0, i32 0
  store i32 139, i32* %414
  %415 = getelementptr inbounds %"(Bool | UInt32 | Nil)", %"(Bool | UInt32 | Nil)"* %20, i32 0, i32 1
  %416 = bitcast [1 x i64]* %415 to i32*
  store i32 %413, i32* %416
  br label %exit68

else67:                                           ; preds = %else61
  %417 = load i8, i8* %standard_opcode
  %418 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 10, i8 %417)
  br i1 %418, label %then69, label %else70

exit68:                                           ; preds = %exit71, %then66
  %419 = phi %"(Bool | UInt32 | Nil)"* [ %20, %then66 ], [ %428, %exit71 ]
  %420 = bitcast %"(Bool | UInt32 | Nil)"* %419 to %"(Bool | UInt32 | UInt64 | Nil)"*
  br label %exit65

then69:                                           ; preds = %else67
  %421 = call i1 @"*Debug::DWARF::LineNumbers::Register#prologue_end=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %registers, i1 true)
  %422 = getelementptr inbounds %"(Bool | UInt32 | Nil)", %"(Bool | UInt32 | Nil)"* %21, i32 0, i32 0
  store i32 147, i32* %422
  %423 = zext i1 %421 to i64
  %424 = getelementptr inbounds %"(Bool | UInt32 | Nil)", %"(Bool | UInt32 | Nil)"* %21, i32 0, i32 1
  %425 = bitcast [1 x i64]* %424 to i64*
  store i64 %423, i64* %425
  br label %exit71

else70:                                           ; preds = %else67
  %426 = load i8, i8* %standard_opcode
  %427 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 11, i8 %426)
  br i1 %427, label %then72, label %else73

exit71:                                           ; preds = %exit74, %then69
  %428 = phi %"(Bool | UInt32 | Nil)"* [ %21, %then69 ], [ %436, %exit74 ]
  br label %exit68

then72:                                           ; preds = %else70
  %429 = call i1 @"*Debug::DWARF::LineNumbers::Register#epilogue_begin=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %registers, i1 true)
  %430 = getelementptr inbounds %"(Bool | UInt32 | Nil)", %"(Bool | UInt32 | Nil)"* %22, i32 0, i32 0
  store i32 147, i32* %430
  %431 = zext i1 %429 to i64
  %432 = getelementptr inbounds %"(Bool | UInt32 | Nil)", %"(Bool | UInt32 | Nil)"* %22, i32 0, i32 1
  %433 = bitcast [1 x i64]* %432 to i64*
  store i64 %431, i64* %433
  br label %exit74

else73:                                           ; preds = %else70
  %434 = load i8, i8* %standard_opcode
  %435 = call i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 12, i8 %434)
  br i1 %435, label %then75, label %else76

exit74:                                           ; preds = %exit77, %then72
  %436 = phi %"(Bool | UInt32 | Nil)"* [ %22, %then72 ], [ %452, %exit77 ]
  br label %exit71

then75:                                           ; preds = %else73
  %437 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %438 = load i32*, i32** %437
  %439 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %438)
  %440 = call i32 @"*Debug::DWARF::LineNumbers::Register#isa=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %registers, i32 %439)
  %441 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %23, i32 0, i32 0
  store i32 139, i32* %441
  %442 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %23, i32 0, i32 1
  %443 = bitcast [1 x i64]* %442 to i32*
  store i32 %440, i32* %443
  br label %exit77

else76:                                           ; preds = %else73
  %444 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 12
  %445 = load %"Array(UInt8)"*, %"Array(UInt8)"** %444
  %446 = load i8, i8* %opcode
  %447 = zext i8 %446 to i32
  %448 = call i8 @"*Array(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Array(UInt8)"* %445, i32 %447)
  store i8 %448, i8* %n_args
  %449 = load i8, i8* %n_args
  %450 = xor i8 %449, %449
  store i8 %450, i8* %i78
  br label %while79

exit77:                                           ; preds = %exit81, %then75
  %451 = phi %"(UInt32 | Nil).21"* [ %23, %then75 ], [ %24, %exit81 ]
  %452 = bitcast %"(UInt32 | Nil).21"* %451 to %"(Bool | UInt32 | Nil)"*
  br label %exit74

while79:                                          ; preds = %body80, %else76
  %453 = load i8, i8* %i78
  %454 = icmp ult i8 %453, %449
  br i1 %454, label %body80, label %exit81

body80:                                           ; preds = %while79
  %455 = load i8, i8* %i78
  %456 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 5
  %457 = load i32*, i32** %456
  %458 = call i32 @"*Debug::DWARF::read_unsigned_leb128<IO::FileDescriptor+>:UInt32"(i32* %457)
  %459 = load i8, i8* %i78
  %460 = zext i8 %459 to i32
  %461 = add i32 %460, 1
  %462 = trunc i32 %461 to i8
  store i8 %462, i8* %i78
  br label %while79

exit81:                                           ; preds = %while79
  %463 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %24, i32 0, i32 0
  store i32 0, i32* %463
  %464 = getelementptr inbounds %"(UInt32 | Nil).21", %"(UInt32 | Nil).21"* %24, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %464
  br label %exit77
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LineNumbers::Sequence#default_is_stmt:Bool"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 6
  %1 = getelementptr inbounds %"(Bool | Nil)", %"(Bool | Nil)"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 147, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(Bool | Nil)", %"(Bool | Nil)"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i8*
  %6 = load i8, i8* %5
  %7 = trunc i8 %6 to i1
  br label %exit

next_def:                                         ; preds = %entry
  %8 = icmp eq i32 0, %2
  br i1 %8, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %9 = phi i1 [ %7, %current_def ]
  ret i1 %9

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Register" @"*Debug::DWARF::LineNumbers::Register::new<Bool>:Debug::DWARF::LineNumbers::Register"(i1 %is_stmt) #0 {
alloca:
  %_ = alloca %"Debug::DWARF::LineNumbers::Register"
  %0 = alloca %"Debug::DWARF::LineNumbers::Register"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Debug::DWARF::LineNumbers::Register"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Debug::DWARF::LineNumbers::Register"* getelementptr (%"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %0
  store %"Debug::DWARF::LineNumbers::Register" %2, %"Debug::DWARF::LineNumbers::Register"* %_
  %3 = call i32 @"*Debug::DWARF::LineNumbers::Register#initialize<Bool>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %_, i1 %is_stmt)
  %4 = load %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %_
  ret %"Debug::DWARF::LineNumbers::Register" %4
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Register#initialize<Bool>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %self, i1 %is_stmt) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 5
  store i1 %is_stmt, i1* %0
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 0
  store i64 0, i64* %1
  %2 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 1
  store i32 0, i32* %2
  %3 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 2
  store i32 1, i32* %3
  %4 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 3
  store i32 1, i32* %4
  %5 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 4
  store i32 0, i32* %5
  %6 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 6
  store i1 false, i1* %6
  %7 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 7
  store i1 false, i1* %7
  %8 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 8
  store i1 false, i1* %8
  %9 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 9
  store i1 false, i1* %9
  %10 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 10
  store i32 0, i32* %10
  %11 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 11
  store i32 0, i32* %11
  ret i32 0
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#line_range:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 8
  %1 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 135, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i8*
  %6 = load i8, i8* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i8 [ %6, %current_def ]
  ret i8 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i8 @"*UInt8@Int#/<UInt8>:UInt8"(i8 %self, i8 %other) #0 {
alloca:
  %div = alloca i8
  %mod = alloca i8
  br label %entry

entry:                                            ; preds = %alloca
  call void @"*UInt8@Int#check_div_argument<UInt8>:Nil"(i8 %self, i8 %other)
  %0 = udiv i8 %self, %other
  store i8 %0, i8* %div
  %1 = urem i8 %self, %other
  store i8 %1, i8* %mod
  %2 = zext i8 %other to i32
  %3 = icmp sgt i32 %2, 0
  %4 = or i1 false, %3
  br i1 %4, label %then1, label %else2

then:                                             ; preds = %exit
  %5 = load i8, i8* %div
  %6 = zext i8 %5 to i32
  %7 = sub i32 %6, 1
  %8 = trunc i32 %7 to i8
  store i8 %8, i8* %div
  br label %exit3

else:                                             ; preds = %exit
  br label %exit3

then1:                                            ; preds = %entry
  %9 = load i8, i8* %mod
  %10 = zext i8 %9 to i32
  %11 = icmp slt i32 %10, 0
  %12 = and i1 true, %11
  br label %exit

else2:                                            ; preds = %entry
  %13 = load i8, i8* %mod
  %14 = zext i8 %13 to i32
  %15 = icmp sgt i32 %14, 0
  %16 = or i1 false, %15
  br label %exit

exit:                                             ; preds = %else2, %then1
  %17 = phi i1 [ %12, %then1 ], [ %16, %else2 ]
  br i1 %17, label %then, label %else

exit3:                                            ; preds = %else, %then
  %18 = load i8, i8* %div
  ret i8 %18
}

; Function Attrs: uwtable
define internal void @"*UInt8@Int#check_div_argument<UInt8>:Nil"(i8 %self, i8 %other) #0 {
alloca:
  %__temp_133 = alloca i1
  %__temp_132 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = zext i8 %other to i32
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = zext i8 %self to i32
  %4 = icmp slt i32 %3, 0
  %5 = and i1 true, %4
  store i1 %5, i1* %__temp_133
  br i1 %5, label %then5, label %else6

then1:                                            ; preds = %exit7
  %6 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [26 x i8] }* @"'overflow: UInt8::MI...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %6)
  unreachable

else2:                                            ; preds = %exit7
  ret void

then3:                                            ; preds = %exit
  %7 = zext i8 %other to i32
  %8 = icmp eq i32 %7, -1
  br label %exit7

else4:                                            ; preds = %exit
  %9 = load i1, i1* %__temp_132
  br label %exit7

then5:                                            ; preds = %else
  %10 = icmp eq i8 %self, 0
  br label %exit

else6:                                            ; preds = %else
  %11 = load i1, i1* %__temp_133
  br label %exit

exit:                                             ; preds = %else6, %then5
  %12 = phi i1 [ %10, %then5 ], [ %11, %else6 ]
  store i1 %12, i1* %__temp_132
  br i1 %12, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  %13 = phi i1 [ %8, %then3 ], [ %9, %else4 ]
  br i1 %13, label %then1, label %else2
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#minimum_instruction_length:UInt8"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 4
  %1 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 135, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i8*
  %6 = load i8, i8* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i8 [ %6, %current_def ]
  ret i8 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i64 @"*Debug::DWARF::LineNumbers::Register#address=<UInt64>:UInt64"(%"Debug::DWARF::LineNumbers::Register"* %self, i64 %address) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 0
  store i64 %address, i64* %0
  ret i64 %address
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Int#/<UInt8>:UInt32"(i32 %self, i8 %other) #0 {
alloca:
  %div = alloca i32
  %mod = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  call void @"*UInt32@Int#check_div_argument<UInt8>:Nil"(i32 %self, i8 %other)
  %0 = zext i8 %other to i32
  %1 = udiv i32 %self, %0
  store i32 %1, i32* %div
  %2 = zext i8 %other to i32
  %3 = urem i32 %self, %2
  store i32 %3, i32* %mod
  %4 = zext i8 %other to i32
  %5 = icmp sgt i32 %4, 0
  %6 = or i1 false, %5
  br i1 %6, label %then1, label %else2

then:                                             ; preds = %exit
  %7 = load i32, i32* %div
  %8 = sub i32 %7, 1
  store i32 %8, i32* %div
  br label %exit3

else:                                             ; preds = %exit
  br label %exit3

then1:                                            ; preds = %entry
  %9 = load i32, i32* %mod
  %10 = icmp ult i32 %9, 0
  %11 = and i1 true, %10
  br label %exit

else2:                                            ; preds = %entry
  %12 = load i32, i32* %mod
  %13 = icmp ugt i32 %12, 0
  %14 = or i1 false, %13
  br label %exit

exit:                                             ; preds = %else2, %then1
  %15 = phi i1 [ %11, %then1 ], [ %14, %else2 ]
  br i1 %15, label %then, label %else

exit3:                                            ; preds = %else, %then
  %16 = load i32, i32* %div
  ret i32 %16
}

; Function Attrs: uwtable
define internal void @"*UInt32@Int#check_div_argument<UInt8>:Nil"(i32 %self, i8 %other) #0 {
alloca:
  %__temp_135 = alloca i1
  %__temp_134 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = zext i8 %other to i32
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = icmp ult i32 %self, 0
  %4 = and i1 true, %3
  store i1 %4, i1* %__temp_135
  br i1 %4, label %then5, label %else6

then1:                                            ; preds = %exit7
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [27 x i8] }* @"'overflow: UInt32::M...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

else2:                                            ; preds = %exit7
  ret void

then3:                                            ; preds = %exit
  %6 = zext i8 %other to i32
  %7 = icmp eq i32 %6, -1
  br label %exit7

else4:                                            ; preds = %exit
  %8 = load i1, i1* %__temp_134
  br label %exit7

then5:                                            ; preds = %else
  %9 = icmp eq i32 %self, 0
  br label %exit

else6:                                            ; preds = %else
  %10 = load i1, i1* %__temp_135
  br label %exit

exit:                                             ; preds = %else6, %then5
  %11 = phi i1 [ %9, %then5 ], [ %10, %else6 ]
  store i1 %11, i1* %__temp_134
  br i1 %11, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  %12 = phi i1 [ %7, %then3 ], [ %8, %else4 ]
  br i1 %12, label %then1, label %else2
}

; Function Attrs: uwtable
define internal i32 @"*UInt32@Int#%<UInt8>:UInt32"(i32 %self, i8 %other) #0 {
alloca:
  %me = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = zext i8 %other to i32
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = zext i8 %other to i32
  %4 = xor i32 %self, %3
  %5 = icmp uge i32 %4, 0
  %6 = or i1 true, %5
  br i1 %6, label %then1, label %else2

then1:                                            ; preds = %else
  %7 = zext i8 %other to i32
  %8 = urem i32 %self, %7
  br label %exit

else2:                                            ; preds = %else
  %9 = zext i8 %other to i32
  %10 = urem i32 %self, %9
  store i32 %10, i32* %me
  %11 = load i32, i32* %me
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %then3, label %else4

exit:                                             ; preds = %exit5, %then1
  %13 = phi i32 [ %8, %then1 ], [ %18, %exit5 ]
  ret i32 %13

then3:                                            ; preds = %else2
  %14 = load i32, i32* %me
  br label %exit5

else4:                                            ; preds = %else2
  %15 = load i32, i32* %me
  %16 = zext i8 %other to i32
  %17 = add i32 %15, %16
  br label %exit5

exit5:                                            ; preds = %else4, %then3
  %18 = phi i32 [ %14, %then3 ], [ %17, %else4 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Register#op_index=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %self, i32 %op_index) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 1
  store i32 %op_index, i32* %0
  ret i32 %op_index
}

; Function Attrs: uwtable
define internal i8 @"*Debug::DWARF::LineNumbers::Sequence#line_base:Int8"(%"Debug::DWARF::LineNumbers::Sequence"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %self, i32 0, i32 7
  %1 = getelementptr inbounds %"(Int8 | Nil)", %"(Int8 | Nil)"* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 134, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(Int8 | Nil)", %"(Int8 | Nil)"* %0, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i8*
  %6 = load i8, i8* %5
  br label %exit

next_def:                                         ; preds = %entry
  %7 = icmp eq i32 0, %2
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def
  %8 = phi i8 [ %6, %current_def ]
  ret i8 %8

current_def1:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i8 @"*UInt8@Int#%<UInt8>:UInt8"(i8 %self, i8 %other) #0 {
alloca:
  %me = alloca i8
  br label %entry

entry:                                            ; preds = %alloca
  %0 = zext i8 %other to i32
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = xor i8 %self, %other
  %4 = zext i8 %3 to i32
  %5 = icmp sge i32 %4, 0
  %6 = or i1 true, %5
  br i1 %6, label %then1, label %else2

then1:                                            ; preds = %else
  %7 = urem i8 %self, %other
  br label %exit

else2:                                            ; preds = %else
  %8 = urem i8 %self, %other
  store i8 %8, i8* %me
  %9 = load i8, i8* %me
  %10 = zext i8 %9 to i32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %then3, label %else4

exit:                                             ; preds = %exit5, %then1
  %12 = phi i8 [ %7, %then1 ], [ %16, %exit5 ]
  ret i8 %12

then3:                                            ; preds = %else2
  %13 = load i8, i8* %me
  br label %exit5

else4:                                            ; preds = %else2
  %14 = load i8, i8* %me
  %15 = add i8 %14, %other
  br label %exit5

exit5:                                            ; preds = %else4, %then3
  %16 = phi i8 [ %13, %then3 ], [ %15, %else4 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Register#line=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %self, i32 %line) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 3
  store i32 %line, i32* %0
  ret i32 %line
}

; Function Attrs: uwtable
define internal void @"*Debug::DWARF::LineNumbers#register_to_matrix<Debug::DWARF::LineNumbers::Sequence, Debug::DWARF::LineNumbers::Register>:Nil"(%"Debug::DWARF::LineNumbers.17"* %self, %"Debug::DWARF::LineNumbers::Sequence" %sequence, %"Debug::DWARF::LineNumbers::Register" %registers) #0 {
alloca:
  %file = alloca %"Tuple(String, Int32, Int32, Int32)"
  %path = alloca %String*
  %row = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %rows = alloca %"Array(Debug::DWARF::LineNumbers::Row).19"*
  %sequence1 = alloca %"Debug::DWARF::LineNumbers::Sequence"
  %registers2 = alloca %"Debug::DWARF::LineNumbers::Register"
  %0 = alloca %"Tuple(String, Int32, Int32, Int32)"
  %1 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %__temp_140 = alloca %"Debug::DWARF::LineNumbers::Row.20"*
  %capacity = alloca i32
  %ary = alloca %"Array(Debug::DWARF::LineNumbers::Row).19"*
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::DWARF::LineNumbers::Sequence" %sequence, %"Debug::DWARF::LineNumbers::Sequence"* %sequence1
  store %"Debug::DWARF::LineNumbers::Register" %registers, %"Debug::DWARF::LineNumbers::Register"* %registers2
  %2 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 11
  %3 = load %"Array(Tuple(String, Int32, Int32, Int32))"*, %"Array(Tuple(String, Int32, Int32, Int32))"** %2
  %4 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers2, i32 0, i32 2
  %5 = load i32, i32* %4
  %6 = call %"Tuple(String, Int32, Int32, Int32)" @"*Array(Tuple(String, Int32, Int32, Int32))@Indexable(T)#[]<UInt32>:Tuple(String, Int32, Int32, Int32)"(%"Array(Tuple(String, Int32, Int32, Int32))"* %3, i32 %5)
  store %"Tuple(String, Int32, Int32, Int32)" %6, %"Tuple(String, Int32, Int32, Int32)"* %0
  %7 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0
  store %"Tuple(String, Int32, Int32, Int32)" %7, %"Tuple(String, Int32, Int32, Int32)"* %file
  %8 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Sequence", %"Debug::DWARF::LineNumbers::Sequence"* %sequence1, i32 0, i32 10
  %9 = load %"Array(String)"*, %"Array(String)"** %8
  %10 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %file, i32 0, i32 1
  %11 = load i32, i32* %10
  %12 = call %String* @"*Array(String)@Indexable(T)#[]<Int32>:String"(%"Array(String)"* %9, i32 %11)
  store %String* %12, %String** %path
  %13 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers2, i32 0, i32 0
  %14 = load i64, i64* %13
  %15 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers2, i32 0, i32 1
  %16 = load i32, i32* %15
  %17 = load %String*, %String** %path
  %18 = call i32 @"*Debug::DWARF::LineNumbers#register_directory<String>:Int32"(%"Debug::DWARF::LineNumbers.17"* %self, %String* %17)
  %19 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %file, i32 0, i32 0
  %20 = load %String*, %String** %19
  %21 = call i32 @"*Debug::DWARF::LineNumbers#register_filename<String>:Int32"(%"Debug::DWARF::LineNumbers.17"* %self, %String* %20)
  %22 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers2, i32 0, i32 3
  %23 = load i32, i32* %22
  %24 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers2, i32 0, i32 4
  %25 = load i32, i32* %24
  %26 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers2, i32 0, i32 7
  %27 = load i1, i1* %26
  %28 = call %"Debug::DWARF::LineNumbers::Row.20" @"*Debug::DWARF::LineNumbers::Row::new<UInt64, UInt32, Int32, Int32, Int32, Int32, Bool>:Debug::DWARF::LineNumbers::Row"(i64 %14, i32 %16, i32 %18, i32 %21, i32 %23, i32 %25, i1 %27)
  store %"Debug::DWARF::LineNumbers::Row.20" %28, %"Debug::DWARF::LineNumbers::Row.20"* %1
  %29 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %1
  store %"Debug::DWARF::LineNumbers::Row.20" %29, %"Debug::DWARF::LineNumbers::Row.20"* %row
  %30 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 4
  %31 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %30
  store %"Array(Debug::DWARF::LineNumbers::Row).19"* %31, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  %32 = icmp ne %"Array(Debug::DWARF::LineNumbers::Row).19"* %31, null
  br i1 %32, label %then, label %else

then:                                             ; preds = %entry
  %33 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  %34 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %row
  %35 = call %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#<<<Debug::DWARF::LineNumbers::Row>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %33, %"Debug::DWARF::LineNumbers::Row.20" %34)
  br label %exit

else:                                             ; preds = %entry
  %36 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 0
  %37 = load %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"*, %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"** %36
  store i32 1, i32* %capacity
  %38 = load i32, i32* %capacity
  %39 = call %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)::new<Int32>:Array(Debug::DWARF::LineNumbers::Row)"(i32 436, i32 %38)
  store %"Array(Debug::DWARF::LineNumbers::Row).19"* %39, %"Array(Debug::DWARF::LineNumbers::Row).19"** %ary
  %40 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %ary
  %41 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %ary
  %42 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %41, i32 0, i32 3
  %43 = load %"Debug::DWARF::LineNumbers::Row.20"*, %"Debug::DWARF::LineNumbers::Row.20"** %42
  store %"Debug::DWARF::LineNumbers::Row.20"* %43, %"Debug::DWARF::LineNumbers::Row.20"** %__temp_140
  %44 = load %"Debug::DWARF::LineNumbers::Row.20"*, %"Debug::DWARF::LineNumbers::Row.20"** %__temp_140
  %45 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %row
  %46 = call %"Debug::DWARF::LineNumbers::Row.20" @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#[]=<Int32, Debug::DWARF::LineNumbers::Row>:Debug::DWARF::LineNumbers::Row"(%"Debug::DWARF::LineNumbers::Row.20"* %44, i32 0, %"Debug::DWARF::LineNumbers::Row.20" %45)
  %47 = call i32 @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#size=<Int32>:Int32"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %40, i32 1)
  %48 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %ary
  store %"Array(Debug::DWARF::LineNumbers::Row).19"* %48, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  %49 = call %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#<<<Array(Debug::DWARF::LineNumbers::Row)>:Array(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %37, %"Array(Debug::DWARF::LineNumbers::Row).19"* %48)
  %50 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  %51 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 4
  store %"Array(Debug::DWARF::LineNumbers::Row).19"* %50, %"Array(Debug::DWARF::LineNumbers::Row).19"** %51
  br label %exit

exit:                                             ; preds = %else, %then
  %52 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %registers2, i32 0, i32 7
  %53 = load i1, i1* %52
  br i1 %53, label %then3, label %else4

then3:                                            ; preds = %exit
  %54 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 4
  store %"Array(Debug::DWARF::LineNumbers::Row).19"* null, %"Array(Debug::DWARF::LineNumbers::Row).19"** %54
  br label %exit5

else4:                                            ; preds = %exit
  br label %exit5

exit5:                                            ; preds = %else4, %then3
  ret void
}

; Function Attrs: alwaysinline uwtable
define internal %"Tuple(String, Int32, Int32, Int32)" @"*Array(Tuple(String, Int32, Int32, Int32))@Indexable(T)#[]<UInt32>:Tuple(String, Int32, Int32, Int32)"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %index) #4 {
alloca:
  %0 = alloca %"Tuple(String, Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Tuple(String, Int32, Int32, Int32)" @"*Array(Tuple(String, Int32, Int32, Int32))@Indexable(T)#at<UInt32>:Tuple(String, Int32, Int32, Int32)"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %index)
  store %"Tuple(String, Int32, Int32, Int32)" %1, %"Tuple(String, Int32, Int32, Int32)"* %0
  %2 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0
  ret %"Tuple(String, Int32, Int32, Int32)" %2
}

; Function Attrs: alwaysinline uwtable
define internal %"Tuple(String, Int32, Int32, Int32)" @"*Array(Tuple(String, Int32, Int32, Int32))@Indexable(T)#at<UInt32>:Tuple(String, Int32, Int32, Int32)"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_136 = alloca i1
  %0 = alloca %"Tuple(String, Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %1 = load i32, i32* %index1
  store i32 %1, i32* %index2
  %2 = load i32, i32* %index2
  %3 = icmp ult i32 %2, 0
  %4 = and i1 true, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = load i32, i32* %index2
  %6 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = add i32 %5, %7
  store i32 %8, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %9 = load i32, i32* %index2
  %10 = icmp ule i32 0, %9
  %11 = or i1 true, %10
  store i1 %11, i1* %__temp_136
  br i1 %11, label %then5, label %else6

then3:                                            ; preds = %exit7
  %12 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  %13 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %13)
  unreachable

then5:                                            ; preds = %exit
  %14 = load i32, i32* %index2
  %15 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 1
  %16 = load i32, i32* %15
  %17 = icmp sge i32 %16, 0
  %18 = icmp ult i32 %14, %16
  %19 = and i1 %17, %18
  br label %exit7

else6:                                            ; preds = %exit
  %20 = load i1, i1* %__temp_136
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %21 = phi i1 [ %19, %then5 ], [ %20, %else6 ]
  br i1 %21, label %then3, label %else4

exit8:                                            ; preds = %then3
  %22 = phi i32 [ %12, %then3 ]
  store i32 %22, i32* %index1
  %23 = load i32, i32* %index1
  %24 = call %"Tuple(String, Int32, Int32, Int32)" @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#unsafe_at<UInt32>:Tuple(String, Int32, Int32, Int32)"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %23)
  store %"Tuple(String, Int32, Int32, Int32)" %24, %"Tuple(String, Int32, Int32, Int32)"* %0
  %25 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0
  ret %"Tuple(String, Int32, Int32, Int32)" %25
}

; Function Attrs: alwaysinline uwtable
define internal %"Tuple(String, Int32, Int32, Int32)" @"*Array(Tuple(String, Int32, Int32, Int32))@Array(T)#unsafe_at<UInt32>:Tuple(String, Int32, Int32, Int32)"(%"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 %index) #4 {
alloca:
  %0 = alloca %"Tuple(String, Int32, Int32, Int32)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Array(Tuple(String, Int32, Int32, Int32))", %"Array(Tuple(String, Int32, Int32, Int32))"* %self, i32 0, i32 3
  %2 = load %"Tuple(String, Int32, Int32, Int32)"*, %"Tuple(String, Int32, Int32, Int32)"** %1
  %3 = call %"Tuple(String, Int32, Int32, Int32)" @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#[]<UInt32>:Tuple(String, Int32, Int32, Int32)"(%"Tuple(String, Int32, Int32, Int32)"* %2, i32 %index)
  store %"Tuple(String, Int32, Int32, Int32)" %3, %"Tuple(String, Int32, Int32, Int32)"* %0
  %4 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0
  ret %"Tuple(String, Int32, Int32, Int32)" %4
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)" @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#[]<UInt32>:Tuple(String, Int32, Int32, Int32)"(%"Tuple(String, Int32, Int32, Int32)"* %self, i32 %offset) #0 {
entry:
  %0 = call %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#+<UInt32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Tuple(String, Int32, Int32, Int32)"* %self, i32 %offset)
  %1 = load %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %0
  ret %"Tuple(String, Int32, Int32, Int32)" %1
}

; Function Attrs: uwtable
define internal %"Tuple(String, Int32, Int32, Int32)"* @"*Pointer(Tuple(String, Int32, Int32, Int32))@Pointer(T)#+<UInt32>:Pointer(Tuple(String, Int32, Int32, Int32))"(%"Tuple(String, Int32, Int32, Int32)"* %self, i32 %other) #0 {
entry:
  %0 = zext i32 %other to i64
  %1 = getelementptr inbounds %"Tuple(String, Int32, Int32, Int32)", %"Tuple(String, Int32, Int32, Int32)"* %self, i64 %0
  ret %"Tuple(String, Int32, Int32, Int32)"* %1
}

; Function Attrs: alwaysinline uwtable
define internal %String* @"*Array(String)@Indexable(T)#[]<Int32>:String"(%"Array(String)"* %self, i32 %index) #4 {
entry:
  %0 = call %String* @"*Array(String)@Indexable(T)#at<Int32>:String"(%"Array(String)"* %self, i32 %index)
  ret %String* %0
}

; Function Attrs: alwaysinline uwtable
define internal %String* @"*Array(String)@Indexable(T)#at<Int32>:String"(%"Array(String)"* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_137 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  store i32 %0, i32* %index2
  %1 = load i32, i32* %index2
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i32, i32* %index2
  %4 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %5 = load i32, i32* %4
  %6 = add i32 %3, %5
  store i32 %6, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %7 = load i32, i32* %index2
  %8 = icmp sle i32 0, %7
  store i1 %8, i1* %__temp_137
  br i1 %8, label %then5, label %else6

then3:                                            ; preds = %exit7
  %9 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  %10 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %10)
  unreachable

then5:                                            ; preds = %exit
  %11 = load i32, i32* %index2
  %12 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %13 = load i32, i32* %12
  %14 = icmp slt i32 %11, %13
  br label %exit7

else6:                                            ; preds = %exit
  %15 = load i1, i1* %__temp_137
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %16 = phi i1 [ %14, %then5 ], [ %15, %else6 ]
  br i1 %16, label %then3, label %else4

exit8:                                            ; preds = %then3
  %17 = phi i32 [ %9, %then3 ]
  store i32 %17, i32* %index1
  %18 = load i32, i32* %index1
  %19 = call %String* @"*Array(String)@Array(T)#unsafe_at<Int32>:String"(%"Array(String)"* %self, i32 %18)
  ret %String* %19
}

; Function Attrs: alwaysinline uwtable
define internal %String* @"*Array(String)@Array(T)#unsafe_at<Int32>:String"(%"Array(String)"* %self, i32 %index) #4 {
entry:
  %0 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 3
  %1 = load %String**, %String*** %0
  %2 = call %String* @"*Pointer(String)@Pointer(T)#[]<Int32>:String"(%String** %1, i32 %index)
  ret %String* %2
}

; Function Attrs: uwtable
define internal %String* @"*Pointer(String)@Pointer(T)#[]<Int32>:String"(%String** %self, i32 %offset) #0 {
entry:
  %0 = call %String** @"*Pointer(String)@Pointer(T)#+<Int32>:Pointer(String)"(%String** %self, i32 %offset)
  %1 = load %String*, %String** %0
  ret %String* %1
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers#register_directory<String>:Int32"(%"Debug::DWARF::LineNumbers.17"* %self, %String* %name) #0 {
alloca:
  %index = alloca %"(Int32 | Nil)"
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 1
  %2 = load %"Array(String)"*, %"Array(String)"** %1
  %3 = call %"(Int32 | Nil)" @"*Array(String)@Array(T)#index<String>:(Int32 | Nil)"(%"Array(String)"* %2, %String* %name)
  store %"(Int32 | Nil)" %3, %"(Int32 | Nil)"* %0
  %4 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  store %"(Int32 | Nil)" %4, %"(Int32 | Nil)"* %index
  %5 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp eq i32 %6, 0
  %8 = xor i1 %7, true
  %9 = and i1 true, %8
  br i1 %9, label %then, label %else

then:                                             ; preds = %entry
  %10 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %11 = bitcast [1 x i64]* %10 to i32*
  %12 = load i32, i32* %11
  ret i32 %12

else:                                             ; preds = %entry
  %13 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 1
  %14 = load %"Array(String)"*, %"Array(String)"** %13
  %15 = call %"Array(String)"* @"*Array(String)@Array(T)#<<<String>:Array(String)"(%"Array(String)"* %14, %String* %name)
  %16 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 1
  %17 = load %"Array(String)"*, %"Array(String)"** %16
  %18 = getelementptr inbounds %"Array(String)", %"Array(String)"* %17, i32 0, i32 1
  %19 = load i32, i32* %18
  %20 = sub i32 %19, 1
  ret i32 %20
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Array(String)@Array(T)#index<String>:(Int32 | Nil)"(%"Array(String)"* %self, %String* %object) #0 {
alloca:
  %offset = alloca i32
  %__temp_138 = alloca i1
  %__temp_139 = alloca %Nil
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %offset
  store i1 false, i1* %__temp_138
  %1 = load i1, i1* %__temp_138
  %2 = load i32, i32* %offset
  %3 = call %"(Int32 | Nil)" @"*Array(String)@Indexable(T)#index<String, Int32>:(Int32 | Nil)"(%"Array(String)"* %self, %String* %object, i32 %2)
  store %"(Int32 | Nil)" %3, %"(Int32 | Nil)"* %0
  %4 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %4
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Array(String)@Indexable(T)#index<String, Int32>:(Int32 | Nil)"(%"Array(String)"* %self, %String* %object, i32 %offset) #0 {
alloca:
  %e = alloca %String*
  %offset1 = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  %i = alloca i32
  %to = alloca i32
  %x = alloca i32
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %offset, i32* %offset1
  %3 = load i32, i32* %offset1
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = load i32, i32* %offset1
  %6 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = add i32 %5, %7
  store i32 %8, i32* %offset1
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %9 = load i32, i32* %offset1
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %then2, label %else3

then2:                                            ; preds = %exit
  %11 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %11
  %12 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %12
  br label %exit4

else3:                                            ; preds = %exit
  %13 = load i32, i32* %offset1
  %14 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %15 = load i32, i32* %14
  %16 = sub i32 %15, 1
  store i32 %16, i32* %to
  store i32 %13, i32* %x
  br label %while

exit4:                                            ; preds = %exit5, %then6, %then2
  %17 = phi %"(Int32 | Nil)"* [ %0, %then2 ], [ %1, %then6 ], [ %2, %exit5 ]
  %18 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %17
  ret %"(Int32 | Nil)" %18

while:                                            ; preds = %else7, %else3
  %19 = load i32, i32* %x
  %20 = load i32, i32* %to
  %21 = icmp sle i32 %19, %20
  br i1 %21, label %body, label %exit5

body:                                             ; preds = %while
  %22 = load i32, i32* %x
  store i32 %22, i32* %i
  %23 = load i32, i32* %i
  %24 = call %String* @"*Array(String)@Array(T)#unsafe_at<Int32>:String"(%"Array(String)"* %self, i32 %23)
  store %String* %24, %String** %e
  %25 = load %String*, %String** %e
  %26 = call i1 @"*String#==<String>:Bool"(%String* %25, %String* %object)
  br i1 %26, label %then6, label %else7

exit5:                                            ; preds = %while
  %27 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 0
  store i32 0, i32* %27
  %28 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %28
  br label %exit4

then6:                                            ; preds = %body
  %29 = load i32, i32* %i
  %30 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 138, i32* %30
  %31 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  %32 = bitcast [1 x i64]* %31 to i32*
  store i32 %29, i32* %32
  br label %exit4

else7:                                            ; preds = %body
  %33 = load i32, i32* %x
  %34 = add i32 %33, 1
  store i32 %34, i32* %x
  br label %while
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers#register_filename<String>:Int32"(%"Debug::DWARF::LineNumbers.17"* %self, %String* %name) #0 {
alloca:
  %index = alloca %"(Int32 | Nil)"
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 2
  %2 = load %"Array(String)"*, %"Array(String)"** %1
  %3 = call %"(Int32 | Nil)" @"*Array(String)@Array(T)#index<String>:(Int32 | Nil)"(%"Array(String)"* %2, %String* %name)
  store %"(Int32 | Nil)" %3, %"(Int32 | Nil)"* %0
  %4 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  store %"(Int32 | Nil)" %4, %"(Int32 | Nil)"* %index
  %5 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp eq i32 %6, 0
  %8 = xor i1 %7, true
  %9 = and i1 true, %8
  br i1 %9, label %then, label %else

then:                                             ; preds = %entry
  %10 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %11 = bitcast [1 x i64]* %10 to i32*
  %12 = load i32, i32* %11
  ret i32 %12

else:                                             ; preds = %entry
  %13 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 2
  %14 = load %"Array(String)"*, %"Array(String)"** %13
  %15 = call %"Array(String)"* @"*Array(String)@Array(T)#<<<String>:Array(String)"(%"Array(String)"* %14, %String* %name)
  %16 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 2
  %17 = load %"Array(String)"*, %"Array(String)"** %16
  %18 = getelementptr inbounds %"Array(String)", %"Array(String)"* %17, i32 0, i32 1
  %19 = load i32, i32* %18
  %20 = sub i32 %19, 1
  ret i32 %20
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20" @"*Debug::DWARF::LineNumbers::Row::new<UInt64, UInt32, Int32, Int32, Int32, Int32, Bool>:Debug::DWARF::LineNumbers::Row"(i64 %address, i32 %op_index, i32 %directory, i32 %file, i32 %line, i32 %column, i1 %end_sequence) #0 {
alloca:
  %_ = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %0 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Debug::DWARF::LineNumbers::Row.20"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Debug::DWARF::LineNumbers::Row.20"* getelementptr (%"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %0
  store %"Debug::DWARF::LineNumbers::Row.20" %2, %"Debug::DWARF::LineNumbers::Row.20"* %_
  %3 = call i1 @"*Debug::DWARF::LineNumbers::Row#initialize<UInt64, UInt32, Int32, Int32, Int32, Int32, Bool>:Bool"(%"Debug::DWARF::LineNumbers::Row.20"* %_, i64 %address, i32 %op_index, i32 %directory, i32 %file, i32 %line, i32 %column, i1 %end_sequence)
  %4 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %_
  ret %"Debug::DWARF::LineNumbers::Row.20" %4
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LineNumbers::Row#initialize<UInt64, UInt32, Int32, Int32, Int32, Int32, Bool>:Bool"(%"Debug::DWARF::LineNumbers::Row.20"* %self, i64 %address, i32 %op_index, i32 %directory, i32 %file, i32 %line, i32 %column, i1 %end_sequence) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %self, i32 0, i32 0
  store i64 %address, i64* %0
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %self, i32 0, i32 1
  store i32 %op_index, i32* %1
  %2 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %self, i32 0, i32 2
  store i32 %directory, i32* %2
  %3 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %self, i32 0, i32 3
  store i32 %file, i32* %3
  %4 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %self, i32 0, i32 4
  store i32 %line, i32* %4
  %5 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %self, i32 0, i32 5
  store i32 %column, i32* %5
  %6 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %self, i32 0, i32 6
  store i1 %end_sequence, i1* %6
  ret i1 %end_sequence
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#<<<Debug::DWARF::LineNumbers::Row>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, %"Debug::DWARF::LineNumbers::Row.20" %value) #0 {
alloca:
  %value1 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::DWARF::LineNumbers::Row.20" %value, %"Debug::DWARF::LineNumbers::Row.20"* %value1
  %0 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %value1
  %1 = call %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#push<Debug::DWARF::LineNumbers::Row>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, %"Debug::DWARF::LineNumbers::Row.20" %0)
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"* %1
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#push<Debug::DWARF::LineNumbers::Row>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, %"Debug::DWARF::LineNumbers::Row.20" %value) #0 {
alloca:
  %value1 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::DWARF::LineNumbers::Row.20" %value, %"Debug::DWARF::LineNumbers::Row.20"* %value1
  %0 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#check_needs_resize:(Pointer(Debug::DWARF::LineNumbers::Row) | Nil)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self)
  %1 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 3
  %2 = load %"Debug::DWARF::LineNumbers::Row.20"*, %"Debug::DWARF::LineNumbers::Row.20"** %1
  %3 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %value1
  %6 = call %"Debug::DWARF::LineNumbers::Row.20" @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#[]=<Int32, Debug::DWARF::LineNumbers::Row>:Debug::DWARF::LineNumbers::Row"(%"Debug::DWARF::LineNumbers::Row.20"* %2, i32 %4, %"Debug::DWARF::LineNumbers::Row.20" %5)
  %7 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = add i32 %8, 1
  %10 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  store i32 %9, i32* %10
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"* %self
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#check_needs_resize:(Pointer(Debug::DWARF::LineNumbers::Row) | Nil)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#double_capacity:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi %"Debug::DWARF::LineNumbers::Row.20"* [ %5, %then ], [ null, %else ]
  ret %"Debug::DWARF::LineNumbers::Row.20"* %6
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#double_capacity:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#resize_to_capacity<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 %6)
  ret %"Debug::DWARF::LineNumbers::Row.20"* %7
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#resize_to_capacity<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 3
  %2 = load %"Debug::DWARF::LineNumbers::Row.20"*, %"Debug::DWARF::LineNumbers::Row.20"** %1
  %3 = icmp ne %"Debug::DWARF::LineNumbers::Row.20"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 3
  %5 = load %"Debug::DWARF::LineNumbers::Row.20"*, %"Debug::DWARF::LineNumbers::Row.20"** %4
  %6 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#realloc<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Debug::DWARF::LineNumbers::Row.20"* %5, i32 %7)
  %9 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 3
  store %"Debug::DWARF::LineNumbers::Row.20"* %8, %"Debug::DWARF::LineNumbers::Row.20"** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)::malloc<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(i32 674, i32 %11)
  %13 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 3
  store %"Debug::DWARF::LineNumbers::Row.20"* %12, %"Debug::DWARF::LineNumbers::Row.20"** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi %"Debug::DWARF::LineNumbers::Row.20"* [ %8, %then ], [ %12, %else ]
  ret %"Debug::DWARF::LineNumbers::Row.20"* %14
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#realloc<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Debug::DWARF::LineNumbers::Row.20"* %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Debug::DWARF::LineNumbers::Row.20"* %self to i8*
  %2 = mul i64 %0, ptrtoint (%"Debug::DWARF::LineNumbers::Row.20"* getelementptr (%"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Debug::DWARF::LineNumbers::Row.20"*
  ret %"Debug::DWARF::LineNumbers::Row.20"* %5
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)::malloc<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (%"Debug::DWARF::LineNumbers::Row.20"* getelementptr (%"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Debug::DWARF::LineNumbers::Row.20"*
  ret %"Debug::DWARF::LineNumbers::Row.20"* %6
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20" @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#[]=<Int32, Debug::DWARF::LineNumbers::Row>:Debug::DWARF::LineNumbers::Row"(%"Debug::DWARF::LineNumbers::Row.20"* %self, i32 %offset, %"Debug::DWARF::LineNumbers::Row.20" %value) #0 {
alloca:
  %value1 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Debug::DWARF::LineNumbers::Row.20" %value, %"Debug::DWARF::LineNumbers::Row.20"* %value1
  %0 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#+<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Debug::DWARF::LineNumbers::Row.20"* %self, i32 %offset)
  %1 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %value1
  store %"Debug::DWARF::LineNumbers::Row.20" %1, %"Debug::DWARF::LineNumbers::Row.20"* %0
  %2 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %value1
  ret %"Debug::DWARF::LineNumbers::Row.20" %2
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#+<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Debug::DWARF::LineNumbers::Row.20"* %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %self, i64 %0
  ret %"Debug::DWARF::LineNumbers::Row.20"* %1
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)::new<Int32>:Array(Debug::DWARF::LineNumbers::Row)"(i32 %self, i32 %initial_capacity) #0 {
alloca:
  %_ = alloca %"Array(Debug::DWARF::LineNumbers::Row).19"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(Debug::DWARF::LineNumbers::Row).19"* getelementptr (%"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(Debug::DWARF::LineNumbers::Row).19"*
  %2 = bitcast %"Array(Debug::DWARF::LineNumbers::Row).19"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(Debug::DWARF::LineNumbers::Row).19"* getelementptr (%"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %1, i32 0, i32 0
  store i32 5, i32* %3
  store %"Array(Debug::DWARF::LineNumbers::Row).19"* %1, %"Array(Debug::DWARF::LineNumbers::Row).19"** %_
  %4 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %_
  %5 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#initialize<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %4, i32 %initial_capacity)
  %6 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %_
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"* %6
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20"* @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#initialize<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 %initial_capacity) #0 {
entry:
  %0 = icmp slt i32 %initial_capacity, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* bitcast ({ i32, i32, i32, [22 x i8] }* @"'negative array size...'" to %String*))
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %2, i32 %initial_capacity)
  %4 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %3)
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %4)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

else:                                             ; preds = %entry
  %6 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  store i32 0, i32* %6
  %7 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 2
  store i32 %initial_capacity, i32* %7
  %8 = icmp eq i32 %initial_capacity, 0
  br i1 %8, label %then1, label %else2

then1:                                            ; preds = %else
  %9 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)::null:Pointer(Debug::DWARF::LineNumbers::Row)"(i32 674)
  %10 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 3
  store %"Debug::DWARF::LineNumbers::Row.20"* %9, %"Debug::DWARF::LineNumbers::Row.20"** %10
  br label %exit

else2:                                            ; preds = %else
  %11 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)::malloc<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(i32 674, i32 %initial_capacity)
  %12 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 3
  store %"Debug::DWARF::LineNumbers::Row.20"* %11, %"Debug::DWARF::LineNumbers::Row.20"** %12
  br label %exit

exit:                                             ; preds = %else2, %then1
  %13 = phi %"Debug::DWARF::LineNumbers::Row.20"* [ %9, %then1 ], [ %11, %else2 ]
  ret %"Debug::DWARF::LineNumbers::Row.20"* %13
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)::null:Pointer(Debug::DWARF::LineNumbers::Row)"(i32 %self) #0 {
entry:
  ret %"Debug::DWARF::LineNumbers::Row.20"* null
}

; Function Attrs: uwtable
define internal i32 @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#size=<Int32>:Int32"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 %size) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  store i32 %size, i32* %0
  ret i32 %size
}

; Function Attrs: uwtable
define internal %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#<<<Array(Debug::DWARF::LineNumbers::Row)>:Array(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, %"Array(Debug::DWARF::LineNumbers::Row).19"* %value) #0 {
entry:
  %0 = call %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#push<Array(Debug::DWARF::LineNumbers::Row)>:Array(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, %"Array(Debug::DWARF::LineNumbers::Row).19"* %value)
  ret %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %0
}

; Function Attrs: uwtable
define internal %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#push<Array(Debug::DWARF::LineNumbers::Row)>:Array(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, %"Array(Debug::DWARF::LineNumbers::Row).19"* %value) #0 {
entry:
  %0 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#check_needs_resize:(Pointer(Array(Debug::DWARF::LineNumbers::Row)) | Nil)"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self)
  %1 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 3
  %2 = load %"Array(Debug::DWARF::LineNumbers::Row).19"**, %"Array(Debug::DWARF::LineNumbers::Row).19"*** %1
  %3 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = call %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#[]=<Int32, Array(Debug::DWARF::LineNumbers::Row)>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %2, i32 %4, %"Array(Debug::DWARF::LineNumbers::Row).19"* %value)
  %6 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = add i32 %7, 1
  %9 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 1
  store i32 %8, i32* %9
  ret %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#check_needs_resize:(Pointer(Array(Debug::DWARF::LineNumbers::Row)) | Nil)"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#double_capacity:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi %"Array(Debug::DWARF::LineNumbers::Row).19"** [ %5, %then ], [ null, %else ]
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"** %6
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#double_capacity:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#resize_to_capacity<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 %6)
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"** %7
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#resize_to_capacity<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 3
  %2 = load %"Array(Debug::DWARF::LineNumbers::Row).19"**, %"Array(Debug::DWARF::LineNumbers::Row).19"*** %1
  %3 = icmp ne %"Array(Debug::DWARF::LineNumbers::Row).19"** %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 3
  %5 = load %"Array(Debug::DWARF::LineNumbers::Row).19"**, %"Array(Debug::DWARF::LineNumbers::Row).19"*** %4
  %6 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#realloc<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %5, i32 %7)
  %9 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 3
  store %"Array(Debug::DWARF::LineNumbers::Row).19"** %8, %"Array(Debug::DWARF::LineNumbers::Row).19"*** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)::malloc<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(i32 675, i32 %11)
  %13 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 3
  store %"Array(Debug::DWARF::LineNumbers::Row).19"** %12, %"Array(Debug::DWARF::LineNumbers::Row).19"*** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi %"Array(Debug::DWARF::LineNumbers::Row).19"** [ %8, %then ], [ %12, %else ]
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"** %14
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#realloc<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Array(Debug::DWARF::LineNumbers::Row).19"** %self to i8*
  %2 = mul i64 %0, ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Array(Debug::DWARF::LineNumbers::Row).19"**
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"** %5
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)::malloc<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Array(Debug::DWARF::LineNumbers::Row).19"**
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"** %6
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#[]=<Int32, Array(Debug::DWARF::LineNumbers::Row)>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %self, i32 %offset, %"Array(Debug::DWARF::LineNumbers::Row).19"* %value) #0 {
entry:
  %0 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#+<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %self, i32 %offset)
  store %"Array(Debug::DWARF::LineNumbers::Row).19"* %value, %"Array(Debug::DWARF::LineNumbers::Row).19"** %0
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"* %value
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#+<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %self, i64 %0
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"** %1
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Register#reset:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 6
  store i1 false, i1* %0
  %1 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 8
  store i1 false, i1* %1
  %2 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 9
  store i1 false, i1* %2
  %3 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 11
  store i32 0, i32* %3
  ret i32 0
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LNE@Object#===<Debug::DWARF::LNE>:Bool"(i8 %self, i8 %other) #0 {
entry:
  %0 = call i1 @"*Debug::DWARF::LNE@Enum#==<Debug::DWARF::LNE>:Bool"(i8 %self, i8 %other)
  ret i1 %0
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LNE@Enum#==<Debug::DWARF::LNE>:Bool"(i8 %self, i8 %other) #0 {
entry:
  %0 = icmp eq i8 %self, %other
  ret i1 %0
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LineNumbers::Register#end_sequence=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %self, i1 %end_sequence) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 7
  store i1 %end_sequence, i1* %0
  ret i1 %end_sequence
}

; Function Attrs: uwtable
define internal i64 @"*IO::FileDescriptor+@IO#read_bytes<UInt64:Class>:UInt64"(i32* %self, i32 %type) #0 {
alloca:
  %format = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1009, i32* %format
  %0 = load i32, i32* %format
  %1 = call i64 @"*UInt64@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:UInt64"(i32* %self, i32 %0)
  ret i64 %1
}

; Function Attrs: uwtable
define internal i64 @"*UInt64@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:UInt64"(i32* %io, i32 %format) #0 {
entry:
  %0 = call i64 @"*IO::ByteFormat::LittleEndian::decode<UInt64:Class, IO::FileDescriptor+>:UInt64"(i32 611, i32* %io)
  ret i64 %0
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Register#discriminator=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %self, i32 %discriminator) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 11
  store i32 %discriminator, i32* %0
  ret i32 %discriminator
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::new<UInt32>:Slice(UInt8)"(i32 %self, i32 %size) #0 {
alloca:
  %pointer = alloca i8*
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @"*Pointer(UInt8)@Pointer(T)::malloc<UInt32>:Pointer(UInt8)"(i32 620, i32 %size)
  store i8* %1, i8** %pointer
  %2 = load i8*, i8** %pointer
  %3 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::new<Pointer(UInt8), UInt32>:Slice(UInt8)"(i32 %self, i8* %2, i32 %size)
  store %"Slice(UInt8)" %3, %"Slice(UInt8)"* %0
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i8* @"*Pointer(UInt8)@Pointer(T)::malloc<UInt32>:Pointer(UInt8)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp ult i32 %size, 0
  %1 = and i1 true, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = zext i32 %size to i64
  %4 = trunc i64 %3 to i32
  %5 = mul i32 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i32), %4
  %6 = call i8* @__crystal_malloc(i32 %5)
  call void @llvm.memset.p0i8.i32(i8* %6, i8 0, i32 %5, i32 4, i1 false)
  ret i8* %6
}

; Function Attrs: uwtable
define internal %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::new<Pointer(UInt8), UInt32>:Slice(UInt8)"(i32 %self, i8* %pointer, i32 %size) #0 {
alloca:
  %_ = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"Slice(UInt8)"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"Slice(UInt8)"* getelementptr (%"Slice(UInt8)", %"Slice(UInt8)"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %2, %"Slice(UInt8)"* %_
  %3 = call i32 @"*Slice(UInt8)@Slice(T)#initialize<Pointer(UInt8), UInt32>:Int32"(%"Slice(UInt8)"* %_, i8* %pointer, i32 %size)
  %4 = load %"Slice(UInt8)", %"Slice(UInt8)"* %_
  ret %"Slice(UInt8)" %4
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LNS@Object#===<Debug::DWARF::LNS>:Bool"(i8 %self, i8 %other) #0 {
entry:
  %0 = call i1 @"*Debug::DWARF::LNS@Enum#==<Debug::DWARF::LNS>:Bool"(i8 %self, i8 %other)
  ret i1 %0
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LNS@Enum#==<Debug::DWARF::LNS>:Bool"(i8 %self, i8 %other) #0 {
entry:
  %0 = icmp eq i8 %self, %other
  ret i1 %0
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::read_signed_leb128<IO::FileDescriptor+>:Int32"(i32* %io) #0 {
alloca:
  %result = alloca i32
  %shift = alloca i32
  %size = alloca i32
  %byte = alloca %"(Int32 | UInt8)"
  %__temp_141 = alloca i1
  %i = alloca i32
  %0 = alloca %"(UInt8 | Nil)"
  %1 = alloca %"(Int32 | UInt8)"
  %2 = alloca %"(Int32 | UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %result
  store i32 0, i32* %shift
  store i32 32, i32* %size
  %3 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 0
  store i32 135, i32* %3
  %4 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i8*
  store i8 0, i8* %5
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %else, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %6 = load i32, i32* %i
  %7 = call %"(UInt8 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#read_byte:(UInt8 | Nil)"(i32* %io)
  store %"(UInt8 | Nil)" %7, %"(UInt8 | Nil)"* %0
  %8 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 0
  %9 = load i32, i32* %8
  %10 = icmp eq i32 135, %9
  br i1 %10, label %current_def, label %next_def

exit:                                             ; preds = %while
  unreachable

current_def:                                      ; preds = %body
  %11 = getelementptr inbounds %"(UInt8 | Nil)", %"(UInt8 | Nil)"* %0, i32 0, i32 1
  %12 = bitcast [1 x i64]* %11 to i8*
  %13 = load i8, i8* %12
  br label %exit1

next_def:                                         ; preds = %body
  %14 = icmp eq i32 0, %9
  br i1 %14, label %current_def2, label %next_def3

exit1:                                            ; preds = %current_def
  %15 = phi i8 [ %13, %current_def ]
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 0
  store i32 138, i32* %17
  %18 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 1
  %19 = bitcast [1 x i64]* %18 to i32*
  store i32 %16, i32* %19
  %20 = load i32, i32* %result
  %21 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 1
  %22 = bitcast [1 x i64]* %21 to i32*
  %23 = load i32, i32* %22
  %24 = and i32 %23, 127
  %25 = load i32, i32* %shift
  %26 = call i32 @"*Int32@Int#<<<Int32>:Int32"(i32 %24, i32 %25)
  %27 = or i32 %20, %26
  store i32 %27, i32* %result
  %28 = load i32, i32* %shift
  %29 = add i32 %28, 7
  store i32 %29, i32* %shift
  %30 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 1
  %31 = bitcast [1 x i64]* %30 to i32*
  %32 = load i32, i32* %31
  %33 = call i32 @"*Int32@Int#bit<Int32>:Int32"(i32 %32, i32 7)
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %then, label %else

current_def2:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def3:                                        ; preds = %next_def
  unreachable

then:                                             ; preds = %exit1
  br label %exit4

else:                                             ; preds = %exit1
  %35 = load i32, i32* %i
  %36 = add i32 %35, 1
  store i32 %36, i32* %i
  br label %while

exit4:                                            ; preds = %then
  %37 = load i32, i32* %shift
  %38 = load i32, i32* %size
  %39 = icmp slt i32 %37, %38
  store i1 %39, i1* %__temp_141
  br i1 %39, label %then7, label %else8

then5:                                            ; preds = %exit19
  %40 = load i32, i32* %result
  %41 = load i32, i32* %shift
  %42 = call i32 @"*Int32@Int#<<<Int32>:Int32"(i32 1, i32 %41)
  %43 = call i32 @"*Int32#-:Int32"(i32 %42)
  %44 = or i32 %40, %43
  store i32 %44, i32* %result
  br label %exit20

else6:                                            ; preds = %exit19
  br label %exit20

then7:                                            ; preds = %exit4
  %45 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 0
  %46 = load i32, i32* %45
  %47 = icmp eq i32 138, %46
  br i1 %47, label %current_def9, label %next_def10

else8:                                            ; preds = %exit4
  %48 = load i1, i1* %__temp_141
  br label %exit19

current_def9:                                     ; preds = %then7
  %49 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 1
  %50 = bitcast [1 x i64]* %49 to i32*
  %51 = load i32, i32* %50
  %52 = call i32 @"*Int32@Int#bit<Int32>:Int32"(i32 %51, i32 6)
  %53 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %1, i32 0, i32 0
  store i32 138, i32* %53
  %54 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %1, i32 0, i32 1
  %55 = bitcast [1 x i64]* %54 to i32*
  store i32 %52, i32* %55
  br label %exit11

next_def10:                                       ; preds = %then7
  %56 = icmp eq i32 135, %46
  br i1 %56, label %current_def12, label %next_def13

exit11:                                           ; preds = %current_def12, %current_def9
  %57 = phi %"(Int32 | UInt8)"* [ %1, %current_def9 ], [ %2, %current_def12 ]
  %58 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %57, i32 0, i32 0
  %59 = load i32, i32* %58
  %60 = icmp eq i32 138, %59
  br i1 %60, label %current_def14, label %next_def15

current_def12:                                    ; preds = %next_def10
  %61 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %byte, i32 0, i32 1
  %62 = bitcast [1 x i64]* %61 to i8*
  %63 = load i8, i8* %62
  %64 = call i8 @"*UInt8@Int#bit<Int32>:UInt8"(i8 %63, i32 6)
  %65 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %2, i32 0, i32 0
  store i32 135, i32* %65
  %66 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %2, i32 0, i32 1
  %67 = bitcast [1 x i64]* %66 to i8*
  store i8 %64, i8* %67
  br label %exit11

next_def13:                                       ; preds = %next_def10
  unreachable

current_def14:                                    ; preds = %exit11
  %68 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %57, i32 0, i32 1
  %69 = bitcast [1 x i64]* %68 to i32*
  %70 = load i32, i32* %69
  %71 = icmp eq i32 %70, 1
  br label %exit16

next_def15:                                       ; preds = %exit11
  %72 = icmp eq i32 135, %59
  br i1 %72, label %current_def17, label %next_def18

exit16:                                           ; preds = %current_def17, %current_def14
  %73 = phi i1 [ %71, %current_def14 ], [ %78, %current_def17 ]
  br label %exit19

current_def17:                                    ; preds = %next_def15
  %74 = getelementptr inbounds %"(Int32 | UInt8)", %"(Int32 | UInt8)"* %57, i32 0, i32 1
  %75 = bitcast [1 x i64]* %74 to i8*
  %76 = load i8, i8* %75
  %77 = zext i8 %76 to i32
  %78 = icmp eq i32 %77, 1
  br label %exit16

next_def18:                                       ; preds = %next_def15
  unreachable

exit19:                                           ; preds = %else8, %exit16
  %79 = phi i1 [ %73, %exit16 ], [ %48, %else8 ]
  br i1 %79, label %then5, label %else6

exit20:                                           ; preds = %else6, %then5
  %80 = load i32, i32* %result
  ret i32 %80
}

; Function Attrs: uwtable
define internal i8 @"*UInt8@Int#bit<Int32>:UInt8"(i8 %self, i32 %bit) #0 {
entry:
  %0 = call i8 @"*UInt8@Int#>><Int32>:UInt8"(i8 %self, i32 %bit)
  %1 = zext i8 %0 to i32
  %2 = and i32 %1, 1
  %3 = trunc i32 %2 to i8
  ret i8 %3
}

; Function Attrs: uwtable
define internal i8 @"*UInt8@Int#>><Int32>:UInt8"(i8 %self, i32 %count) #0 {
entry:
  %0 = icmp slt i32 %count, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call i32 @"*Int32@Int#abs:Int32"(i32 %count)
  %2 = call i8 @"*UInt8@Int#<<<Int32>:UInt8"(i8 %self, i32 %1)
  br label %exit

else:                                             ; preds = %entry
  %3 = icmp slt i32 %count, 8
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i8 [ %2, %then ], [ %9, %exit3 ]
  ret i8 %4

then1:                                            ; preds = %else
  %5 = zext i8 %self to i32
  %6 = lshr i32 %5, %count
  %7 = trunc i32 %6 to i8
  br label %exit3

else2:                                            ; preds = %else
  %8 = call i8 @"*UInt8@Number::zero:UInt8"()
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %9 = phi i8 [ %7, %then1 ], [ %8, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i8 @"*UInt8@Int#<<<Int32>:UInt8"(i8 %self, i32 %count) #0 {
entry:
  %0 = icmp slt i32 %count, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call i32 @"*Int32@Int#abs:Int32"(i32 %count)
  %2 = call i8 @"*UInt8@Int#>><Int32>:UInt8"(i8 %self, i32 %1)
  br label %exit

else:                                             ; preds = %entry
  %3 = icmp slt i32 %count, 8
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i8 [ %2, %then ], [ %9, %exit3 ]
  ret i8 %4

then1:                                            ; preds = %else
  %5 = zext i8 %self to i32
  %6 = shl i32 %5, %count
  %7 = trunc i32 %6 to i8
  br label %exit3

else2:                                            ; preds = %else
  %8 = call i8 @"*UInt8@Number::zero:UInt8"()
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %9 = phi i8 [ %7, %then1 ], [ %8, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i8 @"*UInt8@Number::zero:UInt8"() #0 {
entry:
  %0 = call i8 @"*UInt8::new<Int32>:UInt8"(i32 0)
  ret i8 %0
}

; Function Attrs: uwtable
define internal i8 @"*UInt8::new<Int32>:UInt8"(i32 %value) #0 {
entry:
  %0 = trunc i32 %value to i8
  ret i8 %0
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Register#file=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %self, i32 %file) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 2
  store i32 %file, i32* %0
  ret i32 %file
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Register#column=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %self, i32 %column) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 4
  store i32 %column, i32* %0
  ret i32 %column
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LineNumbers::Register#is_stmt=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %self, i1 %is_stmt) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 5
  store i1 %is_stmt, i1* %0
  ret i1 %is_stmt
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LineNumbers::Register#basic_block=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %self, i1 %basic_block) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 6
  store i1 %basic_block, i1* %0
  ret i1 %basic_block
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int#/<UInt8>:Int32"(i32 %self, i8 %other) #0 {
alloca:
  %div = alloca i32
  %mod = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  call void @"*Int32@Int#check_div_argument<UInt8>:Nil"(i32 %self, i8 %other)
  %0 = zext i8 %other to i32
  %1 = sdiv i32 %self, %0
  store i32 %1, i32* %div
  %2 = zext i8 %other to i32
  %3 = srem i32 %self, %2
  store i32 %3, i32* %mod
  %4 = zext i8 %other to i32
  %5 = icmp sgt i32 %4, 0
  %6 = or i1 false, %5
  br i1 %6, label %then1, label %else2

then:                                             ; preds = %exit
  %7 = load i32, i32* %div
  %8 = sub i32 %7, 1
  store i32 %8, i32* %div
  br label %exit3

else:                                             ; preds = %exit
  br label %exit3

then1:                                            ; preds = %entry
  %9 = load i32, i32* %mod
  %10 = icmp slt i32 %9, 0
  br label %exit

else2:                                            ; preds = %entry
  %11 = load i32, i32* %mod
  %12 = icmp sgt i32 %11, 0
  br label %exit

exit:                                             ; preds = %else2, %then1
  %13 = phi i1 [ %10, %then1 ], [ %12, %else2 ]
  br i1 %13, label %then, label %else

exit3:                                            ; preds = %else, %then
  %14 = load i32, i32* %div
  ret i32 %14
}

; Function Attrs: uwtable
define internal void @"*Int32@Int#check_div_argument<UInt8>:Nil"(i32 %self, i8 %other) #0 {
alloca:
  %__temp_143 = alloca i1
  %__temp_142 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = zext i8 %other to i32
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = icmp slt i32 %self, 0
  store i1 %3, i1* %__temp_143
  br i1 %3, label %then5, label %else6

then1:                                            ; preds = %exit7
  %4 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [26 x i8] }* @"'overflow: Int32::MI...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %4)
  unreachable

else2:                                            ; preds = %exit7
  ret void

then3:                                            ; preds = %exit
  %5 = zext i8 %other to i32
  %6 = icmp eq i32 %5, -1
  br label %exit7

else4:                                            ; preds = %exit
  %7 = load i1, i1* %__temp_142
  br label %exit7

then5:                                            ; preds = %else
  %8 = icmp eq i32 %self, -2147483648
  br label %exit

else6:                                            ; preds = %else
  %9 = load i1, i1* %__temp_143
  br label %exit

exit:                                             ; preds = %else6, %then5
  %10 = phi i1 [ %8, %then5 ], [ %9, %else6 ]
  store i1 %10, i1* %__temp_142
  br i1 %10, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  %11 = phi i1 [ %6, %then3 ], [ %7, %else4 ]
  br i1 %11, label %then1, label %else2
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LineNumbers::Register#prologue_end=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %self, i1 %prologue_end) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 8
  store i1 %prologue_end, i1* %0
  ret i1 %prologue_end
}

; Function Attrs: uwtable
define internal i1 @"*Debug::DWARF::LineNumbers::Register#epilogue_begin=<Bool>:Bool"(%"Debug::DWARF::LineNumbers::Register"* %self, i1 %epilogue_begin) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 9
  store i1 %epilogue_begin, i1* %0
  ret i1 %epilogue_begin
}

; Function Attrs: uwtable
define internal i32 @"*Debug::DWARF::LineNumbers::Register#isa=<UInt32>:UInt32"(%"Debug::DWARF::LineNumbers::Register"* %self, i32 %isa) #0 {
entry:
  %0 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Register", %"Debug::DWARF::LineNumbers::Register"* %self, i32 0, i32 10
  store i32 %isa, i32* %0
  ret i32 %isa
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*Array(UInt8)@Indexable(T)#[]<Int32>:UInt8"(%"Array(UInt8)"* %self, i32 %index) #4 {
entry:
  %0 = call i8 @"*Array(UInt8)@Indexable(T)#at<Int32>:UInt8"(%"Array(UInt8)"* %self, i32 %index)
  ret i8 %0
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*Array(UInt8)@Indexable(T)#at<Int32>:UInt8"(%"Array(UInt8)"* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_144 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  store i32 %0, i32* %index2
  %1 = load i32, i32* %index2
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i32, i32* %index2
  %4 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 1
  %5 = load i32, i32* %4
  %6 = add i32 %3, %5
  store i32 %6, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %7 = load i32, i32* %index2
  %8 = icmp sle i32 0, %7
  store i1 %8, i1* %__temp_144
  br i1 %8, label %then5, label %else6

then3:                                            ; preds = %exit7
  %9 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  %10 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %10)
  unreachable

then5:                                            ; preds = %exit
  %11 = load i32, i32* %index2
  %12 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 1
  %13 = load i32, i32* %12
  %14 = icmp slt i32 %11, %13
  br label %exit7

else6:                                            ; preds = %exit
  %15 = load i1, i1* %__temp_144
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %16 = phi i1 [ %14, %then5 ], [ %15, %else6 ]
  br i1 %16, label %then3, label %else4

exit8:                                            ; preds = %then3
  %17 = phi i32 [ %9, %then3 ]
  store i32 %17, i32* %index1
  %18 = load i32, i32* %index1
  %19 = call i8 @"*Array(UInt8)@Array(T)#unsafe_at<Int32>:UInt8"(%"Array(UInt8)"* %self, i32 %18)
  ret i8 %19
}

; Function Attrs: alwaysinline uwtable
define internal i8 @"*Array(UInt8)@Array(T)#unsafe_at<Int32>:UInt8"(%"Array(UInt8)"* %self, i32 %index) #4 {
entry:
  %0 = getelementptr inbounds %"Array(UInt8)", %"Array(UInt8)"* %self, i32 0, i32 3
  %1 = load i8*, i8** %0
  %2 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %1, i32 %index)
  ret i8 %2
}

; Function Attrs: uwtable
define internal i64 @"*CallStack::decode_address<Pointer(Void)>:UInt64"(i8* %ip) #0 {
entry:
  %0 = ptrtoint i8* %ip to i64
  %1 = call i64 @"*CallStack::image_slide:Int64"()
  %2 = sub i64 %0, %1
  ret i64 %2
}

; Function Attrs: uwtable
define internal i64 @"*CallStack::image_slide:Int64"() #0 {
alloca:
  %__temp_145 = alloca %"(Int64 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = load %"(Int64 | Nil)", %"(Int64 | Nil)"* @"CallStack::image_slide"
  store %"(Int64 | Nil)" %0, %"(Int64 | Nil)"* %__temp_145
  %1 = load i32, i32* getelementptr inbounds (%"(Int64 | Nil)", %"(Int64 | Nil)"* @"CallStack::image_slide", i32 0, i32 0)
  %2 = icmp eq i32 %1, 0
  %3 = xor i1 %2, true
  %4 = and i1 true, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = getelementptr inbounds %"(Int64 | Nil)", %"(Int64 | Nil)"* %__temp_145, i32 0, i32 1
  %6 = bitcast [1 x i64]* %5 to i64*
  %7 = load i64, i64* %6
  br label %exit

else:                                             ; preds = %entry
  %8 = call i64 @"*CallStack::search_image_slide:Int64"()
  store i32 140, i32* getelementptr inbounds (%"(Int64 | Nil)", %"(Int64 | Nil)"* @"CallStack::image_slide", i32 0, i32 0)
  store i64 %8, i64* getelementptr inbounds (%"(Int64 | Nil)", %"(Int64 | Nil)"* @"CallStack::image_slide", i32 0, i32 1, i32 0)
  br label %exit

exit:                                             ; preds = %else, %then
  %9 = phi i64 [ %7, %then ], [ %8, %else ]
  ret i64 %9
}

; Function Attrs: uwtable
define internal i64 @"*CallStack::search_image_slide:Int64"() #0 {
alloca:
  %buffer = alloca i8*
  %size = alloca i32
  %program = alloca %String*
  %i = alloca i32
  %i3 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @"*GC::malloc_atomic<Int32>:Pointer(Void)"(i32 1024)
  store i8* %0, i8** %buffer
  store i32 1024, i32* %size
  %1 = load i8*, i8** %buffer
  %2 = call i32 @_NSGetExecutablePath(i8* %1, i32* %size)
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load i32, i32* %size
  %5 = call i8* @"*GC::malloc_atomic<UInt32>:Pointer(Void)"(i32 %4)
  store i8* %5, i8** %buffer
  %6 = load i8*, i8** %buffer
  %7 = call i32 @_NSGetExecutablePath(i8* %6, i32* %size)
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %then1, label %else2

else:                                             ; preds = %entry
  br label %exit

then1:                                            ; preds = %then
  %9 = call i64 @"*Int64::new<Int32>:Int64"(i32 0)
  ret i64 %9

else2:                                            ; preds = %then
  br label %exit

exit:                                             ; preds = %else, %else2
  %10 = load i8*, i8** %buffer
  %11 = call %String* @"*String::new<Pointer(UInt8)>:String"(i8* %10)
  store %String* %11, %String** %program
  %12 = call i32 @_dyld_image_count()
  %13 = xor i32 %12, %12
  store i32 %13, i32* %i3
  br label %while

while:                                            ; preds = %else6, %exit
  %14 = load i32, i32* %i3
  %15 = icmp ult i32 %14, %12
  br i1 %15, label %body, label %exit4

body:                                             ; preds = %while
  %16 = load i32, i32* %i3
  store i32 %16, i32* %i
  %17 = load %String*, %String** %program
  %18 = load i32, i32* %i
  %19 = call i8* @_dyld_get_image_name(i32 %18)
  %20 = call %String* @"*String::new<Pointer(UInt8)>:String"(i8* %19)
  %21 = call i1 @"*String#==<String>:Bool"(%String* %17, %String* %20)
  br i1 %21, label %then5, label %else6

exit4:                                            ; preds = %while
  %22 = call i64 @"*Int64::new<Int32>:Int64"(i32 0)
  ret i64 %22

then5:                                            ; preds = %body
  %23 = load i32, i32* %i
  %24 = call i64 @_dyld_get_image_vmaddr_slide(i32 %23)
  ret i64 %24

else6:                                            ; preds = %body
  %25 = load i32, i32* %i3
  %26 = add i32 %25, 1
  store i32 %26, i32* %i3
  br label %while
}

; Function Attrs: uwtable
define internal i64 @"*Int64::new<Int32>:Int64"(i32 %value) #0 {
entry:
  %0 = sext i32 %value to i64
  ret i64 %0
}

declare i32 @_dyld_image_count()

declare i8* @_dyld_get_image_name(i32)

declare i64 @_dyld_get_image_vmaddr_slide(i32)

; Function Attrs: uwtable
define internal %"(Debug::DWARF::LineNumbers::Row | Nil)" @"*Debug::DWARF::LineNumbers#find<UInt64>:(Debug::DWARF::LineNumbers::Row | Nil)"(%"Debug::DWARF::LineNumbers.17"* %self, i64 %address) #0 {
alloca:
  %rows = alloca %"Array(Debug::DWARF::LineNumbers::Row).19"*
  %row = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %i = alloca i32
  %i1 = alloca i32
  %0 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %1 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %current_row = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %index = alloca i32
  %previous_row = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %offset = alloca i32
  %i11 = alloca i32
  %elem = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %i12 = alloca i32
  %i13 = alloca i32
  %2 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %3 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %4 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %5 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %6 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %7 = getelementptr inbounds %"Debug::DWARF::LineNumbers.17", %"Debug::DWARF::LineNumbers.17"* %self, i32 0, i32 0
  %8 = load %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"*, %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"** %7
  store i32 0, i32* %i1
  br label %while

while:                                            ; preds = %exit4, %entry
  %9 = load i32, i32* %i1
  %10 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %8, i32 0, i32 1
  %11 = load i32, i32* %10
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %body, label %exit

body:                                             ; preds = %while
  %13 = load i32, i32* %i1
  store i32 %13, i32* %i
  %14 = load i32, i32* %i
  %15 = call %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#unsafe_at<Int32>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %8, i32 %14)
  store %"Array(Debug::DWARF::LineNumbers::Row).19"* %15, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  %16 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  %17 = call %"(Debug::DWARF::LineNumbers::Row | Nil)" @"*Array(Debug::DWARF::LineNumbers::Row)@Indexable(T)#first?:(Debug::DWARF::LineNumbers::Row | Nil)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %16)
  store %"(Debug::DWARF::LineNumbers::Row | Nil)" %17, %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0
  %18 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0
  store %"(Debug::DWARF::LineNumbers::Row | Nil)" %18, %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row
  %19 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0, i32 0, i32 0
  %20 = load i32, i32* %19
  %21 = icmp eq i32 %20, 0
  %22 = xor i1 %21, true
  %23 = and i1 true, %22
  br i1 %23, label %then, label %else

exit:                                             ; preds = %while
  %24 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %6, i32 0, i32 0
  store i32 0, i32* %24
  %25 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %6, i32 0, i32 1
  store [4 x i64] zeroinitializer, [4 x i64]* %25
  %26 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %6
  ret %"(Debug::DWARF::LineNumbers::Row | Nil)" %26

then:                                             ; preds = %body
  %27 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row, i32 0, i32 1
  %28 = bitcast [4 x i64]* %27 to %"Debug::DWARF::LineNumbers::Row.20"*
  %29 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %28, i32 0, i32 0
  %30 = load i64, i64* %29
  %31 = icmp ult i64 %address, %30
  br i1 %31, label %then2, label %else3

else:                                             ; preds = %body
  br label %exit5

then2:                                            ; preds = %then
  br label %exit4

else3:                                            ; preds = %then
  br label %exit5

exit4:                                            ; preds = %exit16, %then8, %then2
  %32 = load i32, i32* %i1
  %33 = add i32 %32, 1
  store i32 %33, i32* %i1
  br label %while

exit5:                                            ; preds = %else, %else3
  %34 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  %35 = call %"(Debug::DWARF::LineNumbers::Row | Nil)" @"*Array(Debug::DWARF::LineNumbers::Row)@Indexable(T)#last?:(Debug::DWARF::LineNumbers::Row | Nil)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %34)
  store %"(Debug::DWARF::LineNumbers::Row | Nil)" %35, %"(Debug::DWARF::LineNumbers::Row | Nil)"* %1
  %36 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %1
  store %"(Debug::DWARF::LineNumbers::Row | Nil)" %36, %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row
  %37 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %1, i32 0, i32 0
  %38 = load i32, i32* %37
  %39 = icmp eq i32 %38, 0
  %40 = xor i1 %39, true
  %41 = and i1 true, %40
  br i1 %41, label %then6, label %else7

then6:                                            ; preds = %exit5
  %42 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %row, i32 0, i32 1
  %43 = bitcast [4 x i64]* %42 to %"Debug::DWARF::LineNumbers::Row.20"*
  %44 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %43, i32 0, i32 0
  %45 = load i64, i64* %44
  %46 = icmp ugt i64 %address, %45
  br i1 %46, label %then8, label %else9

else7:                                            ; preds = %exit5
  br label %exit10

then8:                                            ; preds = %then6
  br label %exit4

else9:                                            ; preds = %then6
  br label %exit10

exit10:                                           ; preds = %else7, %else9
  %47 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  store i32 0, i32* %offset
  %48 = load i32, i32* %offset
  store i32 %48, i32* %i11
  store i32 0, i32* %i13
  br label %while14

while14:                                          ; preds = %exit23, %exit10
  %49 = load i32, i32* %i13
  %50 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %47, i32 0, i32 1
  %51 = load i32, i32* %50
  %52 = icmp slt i32 %49, %51
  br i1 %52, label %body15, label %exit16

body15:                                           ; preds = %while14
  %53 = load i32, i32* %i13
  store i32 %53, i32* %i12
  %54 = load i32, i32* %i12
  %55 = call %"Debug::DWARF::LineNumbers::Row.20" @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#unsafe_at<Int32>:Debug::DWARF::LineNumbers::Row"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %47, i32 %54)
  store %"Debug::DWARF::LineNumbers::Row.20" %55, %"Debug::DWARF::LineNumbers::Row.20"* %2
  %56 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %2
  store %"Debug::DWARF::LineNumbers::Row.20" %56, %"Debug::DWARF::LineNumbers::Row.20"* %elem
  %57 = load i32, i32* %i11
  %58 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %elem
  store %"Debug::DWARF::LineNumbers::Row.20" %58, %"Debug::DWARF::LineNumbers::Row.20"* %current_row
  store i32 %57, i32* %index
  %59 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %current_row, i32 0, i32 0
  %60 = load i64, i64* %59
  %61 = icmp eq i64 %60, %address
  br i1 %61, label %then17, label %else18

exit16:                                           ; preds = %while14
  br label %exit4

then17:                                           ; preds = %body15
  %62 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %current_row
  %63 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %3, i32 0, i32 0
  store i32 304, i32* %63
  %64 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %3, i32 0, i32 1
  %65 = bitcast [4 x i64]* %64 to %"Debug::DWARF::LineNumbers::Row.20"*
  store %"Debug::DWARF::LineNumbers::Row.20" %62, %"Debug::DWARF::LineNumbers::Row.20"* %65
  %66 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %3
  ret %"(Debug::DWARF::LineNumbers::Row | Nil)" %66

else18:                                           ; preds = %body15
  %67 = getelementptr inbounds %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %current_row, i32 0, i32 0
  %68 = load i64, i64* %67
  %69 = icmp ult i64 %address, %68
  br i1 %69, label %then19, label %else20

then19:                                           ; preds = %else18
  %70 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %rows
  %71 = load i32, i32* %index
  %72 = sub i32 %71, 1
  %73 = call %"(Debug::DWARF::LineNumbers::Row | Nil)" @"*Array(Debug::DWARF::LineNumbers::Row)@Indexable(T)#[]?<Int32>:(Debug::DWARF::LineNumbers::Row | Nil)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %70, i32 %72)
  store %"(Debug::DWARF::LineNumbers::Row | Nil)" %73, %"(Debug::DWARF::LineNumbers::Row | Nil)"* %4
  %74 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %4
  store %"(Debug::DWARF::LineNumbers::Row | Nil)" %74, %"(Debug::DWARF::LineNumbers::Row | Nil)"* %previous_row
  %75 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %4, i32 0, i32 0
  %76 = load i32, i32* %75
  %77 = icmp eq i32 %76, 0
  %78 = xor i1 %77, true
  %79 = and i1 true, %78
  br i1 %79, label %then21, label %else22

else20:                                           ; preds = %else18
  br label %exit23

then21:                                           ; preds = %then19
  %80 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %previous_row, i32 0, i32 1
  %81 = bitcast [4 x i64]* %80 to %"Debug::DWARF::LineNumbers::Row.20"*
  %82 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %81
  %83 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %5, i32 0, i32 0
  store i32 304, i32* %83
  %84 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %5, i32 0, i32 1
  %85 = bitcast [4 x i64]* %84 to %"Debug::DWARF::LineNumbers::Row.20"*
  store %"Debug::DWARF::LineNumbers::Row.20" %82, %"Debug::DWARF::LineNumbers::Row.20"* %85
  %86 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %5
  ret %"(Debug::DWARF::LineNumbers::Row | Nil)" %86

else22:                                           ; preds = %then19
  br label %exit23

exit23:                                           ; preds = %else20, %else22
  %87 = load i32, i32* %i11
  %88 = add i32 %87, 1
  store i32 %88, i32* %i11
  %89 = load i32, i32* %i13
  %90 = add i32 %89, 1
  store i32 %90, i32* %i13
  br label %while14
}

; Function Attrs: alwaysinline uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Array(Array(Debug::DWARF::LineNumbers::Row))@Array(T)#unsafe_at<Int32>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 %index) #4 {
entry:
  %0 = getelementptr inbounds %"Array(Array(Debug::DWARF::LineNumbers::Row)).18", %"Array(Array(Debug::DWARF::LineNumbers::Row)).18"* %self, i32 0, i32 3
  %1 = load %"Array(Debug::DWARF::LineNumbers::Row).19"**, %"Array(Debug::DWARF::LineNumbers::Row).19"*** %0
  %2 = call %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#[]<Int32>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %1, i32 %index)
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"* %2
}

; Function Attrs: uwtable
define internal %"Array(Debug::DWARF::LineNumbers::Row).19"* @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#[]<Int32>:Array(Debug::DWARF::LineNumbers::Row)"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %self, i32 %offset) #0 {
entry:
  %0 = call %"Array(Debug::DWARF::LineNumbers::Row).19"** @"*Pointer(Array(Debug::DWARF::LineNumbers::Row))@Pointer(T)#+<Int32>:Pointer(Array(Debug::DWARF::LineNumbers::Row))"(%"Array(Debug::DWARF::LineNumbers::Row).19"** %self, i32 %offset)
  %1 = load %"Array(Debug::DWARF::LineNumbers::Row).19"*, %"Array(Debug::DWARF::LineNumbers::Row).19"** %0
  ret %"Array(Debug::DWARF::LineNumbers::Row).19"* %1
}

; Function Attrs: uwtable
define internal %"(Debug::DWARF::LineNumbers::Row | Nil)" @"*Array(Debug::DWARF::LineNumbers::Row)@Indexable(T)#first?:(Debug::DWARF::LineNumbers::Row | Nil)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self) #0 {
alloca:
  %0 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %1 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %2 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %3 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %6 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %6
  %7 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0, i32 0, i32 1
  store [4 x i64] zeroinitializer, [4 x i64]* %7
  br label %exit

else:                                             ; preds = %entry
  %8 = call %"Debug::DWARF::LineNumbers::Row.20" @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#unsafe_at<Int32>:Debug::DWARF::LineNumbers::Row"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0)
  store %"Debug::DWARF::LineNumbers::Row.20" %8, %"Debug::DWARF::LineNumbers::Row.20"* %1
  %9 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %1
  %10 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %2, i32 0, i32 0
  store i32 304, i32* %10
  %11 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %2, i32 0, i32 1
  %12 = bitcast [4 x i64]* %11 to %"Debug::DWARF::LineNumbers::Row.20"*
  store %"Debug::DWARF::LineNumbers::Row.20" %9, %"Debug::DWARF::LineNumbers::Row.20"* %12
  br label %exit

exit:                                             ; preds = %else, %then
  %13 = phi %"(Debug::DWARF::LineNumbers::Row | Nil)"* [ %0, %then ], [ %2, %else ]
  %14 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %13
  ret %"(Debug::DWARF::LineNumbers::Row | Nil)" %14
}

; Function Attrs: alwaysinline uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20" @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#unsafe_at<Int32>:Debug::DWARF::LineNumbers::Row"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 %index) #4 {
alloca:
  %0 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 3
  %2 = load %"Debug::DWARF::LineNumbers::Row.20"*, %"Debug::DWARF::LineNumbers::Row.20"** %1
  %3 = call %"Debug::DWARF::LineNumbers::Row.20" @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#[]<Int32>:Debug::DWARF::LineNumbers::Row"(%"Debug::DWARF::LineNumbers::Row.20"* %2, i32 %index)
  store %"Debug::DWARF::LineNumbers::Row.20" %3, %"Debug::DWARF::LineNumbers::Row.20"* %0
  %4 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %0
  ret %"Debug::DWARF::LineNumbers::Row.20" %4
}

; Function Attrs: uwtable
define internal %"Debug::DWARF::LineNumbers::Row.20" @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#[]<Int32>:Debug::DWARF::LineNumbers::Row"(%"Debug::DWARF::LineNumbers::Row.20"* %self, i32 %offset) #0 {
entry:
  %0 = call %"Debug::DWARF::LineNumbers::Row.20"* @"*Pointer(Debug::DWARF::LineNumbers::Row)@Pointer(T)#+<Int32>:Pointer(Debug::DWARF::LineNumbers::Row)"(%"Debug::DWARF::LineNumbers::Row.20"* %self, i32 %offset)
  %1 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %0
  ret %"Debug::DWARF::LineNumbers::Row.20" %1
}

; Function Attrs: uwtable
define internal %"(Debug::DWARF::LineNumbers::Row | Nil)" @"*Array(Debug::DWARF::LineNumbers::Row)@Indexable(T)#last?:(Debug::DWARF::LineNumbers::Row | Nil)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self) #0 {
alloca:
  %0 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %1 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %2 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %3 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %6 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %6
  %7 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0, i32 0, i32 1
  store [4 x i64] zeroinitializer, [4 x i64]* %7
  br label %exit

else:                                             ; preds = %entry
  %8 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  %9 = load i32, i32* %8
  %10 = sub i32 %9, 1
  %11 = call %"Debug::DWARF::LineNumbers::Row.20" @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#unsafe_at<Int32>:Debug::DWARF::LineNumbers::Row"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 %10)
  store %"Debug::DWARF::LineNumbers::Row.20" %11, %"Debug::DWARF::LineNumbers::Row.20"* %1
  %12 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %1
  %13 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %2, i32 0, i32 0
  store i32 304, i32* %13
  %14 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %2, i32 0, i32 1
  %15 = bitcast [4 x i64]* %14 to %"Debug::DWARF::LineNumbers::Row.20"*
  store %"Debug::DWARF::LineNumbers::Row.20" %12, %"Debug::DWARF::LineNumbers::Row.20"* %15
  br label %exit

exit:                                             ; preds = %else, %then
  %16 = phi %"(Debug::DWARF::LineNumbers::Row | Nil)"* [ %0, %then ], [ %2, %else ]
  %17 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %16
  ret %"(Debug::DWARF::LineNumbers::Row | Nil)" %17
}

; Function Attrs: alwaysinline uwtable
define internal %"(Debug::DWARF::LineNumbers::Row | Nil)" @"*Array(Debug::DWARF::LineNumbers::Row)@Indexable(T)#[]?<Int32>:(Debug::DWARF::LineNumbers::Row | Nil)"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_146 = alloca i1
  %0 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  %1 = alloca %"Debug::DWARF::LineNumbers::Row.20"
  %2 = alloca %"(Debug::DWARF::LineNumbers::Row | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %3 = load i32, i32* %index1
  store i32 %3, i32* %index2
  %4 = load i32, i32* %index2
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %6 = load i32, i32* %index2
  %7 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = add i32 %6, %8
  store i32 %9, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %10 = load i32, i32* %index2
  %11 = icmp sle i32 0, %10
  store i1 %11, i1* %__temp_146
  br i1 %11, label %then5, label %else6

then3:                                            ; preds = %exit7
  %12 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  %13 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %13
  %14 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %0, i32 0, i32 1
  store [4 x i64] zeroinitializer, [4 x i64]* %14
  br label %exit9

then5:                                            ; preds = %exit
  %15 = load i32, i32* %index2
  %16 = getelementptr inbounds %"Array(Debug::DWARF::LineNumbers::Row).19", %"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 0, i32 1
  %17 = load i32, i32* %16
  %18 = icmp slt i32 %15, %17
  br label %exit7

else6:                                            ; preds = %exit
  %19 = load i1, i1* %__temp_146
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %20 = phi i1 [ %18, %then5 ], [ %19, %else6 ]
  br i1 %20, label %then3, label %else4

exit8:                                            ; preds = %then3
  %21 = phi i32 [ %12, %then3 ]
  store i32 %21, i32* %index1
  %22 = load i32, i32* %index1
  %23 = call %"Debug::DWARF::LineNumbers::Row.20" @"*Array(Debug::DWARF::LineNumbers::Row)@Array(T)#unsafe_at<Int32>:Debug::DWARF::LineNumbers::Row"(%"Array(Debug::DWARF::LineNumbers::Row).19"* %self, i32 %22)
  store %"Debug::DWARF::LineNumbers::Row.20" %23, %"Debug::DWARF::LineNumbers::Row.20"* %1
  %24 = load %"Debug::DWARF::LineNumbers::Row.20", %"Debug::DWARF::LineNumbers::Row.20"* %1
  %25 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %2, i32 0, i32 0
  store i32 304, i32* %25
  %26 = getelementptr inbounds %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %2, i32 0, i32 1
  %27 = bitcast [4 x i64]* %26 to %"Debug::DWARF::LineNumbers::Row.20"*
  store %"Debug::DWARF::LineNumbers::Row.20" %24, %"Debug::DWARF::LineNumbers::Row.20"* %27
  br label %exit9

exit9:                                            ; preds = %exit8, %else4
  %28 = phi %"(Debug::DWARF::LineNumbers::Row | Nil)"* [ %0, %else4 ], [ %2, %exit8 ]
  %29 = load %"(Debug::DWARF::LineNumbers::Row | Nil)", %"(Debug::DWARF::LineNumbers::Row | Nil)"* %28
  ret %"(Debug::DWARF::LineNumbers::Row | Nil)" %29
}

; Function Attrs: alwaysinline uwtable
define internal %String* @"*Array(String)@Indexable(T)#[]?<Int32>:(String | Nil)"(%"Array(String)"* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_147 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  store i32 %0, i32* %index2
  %1 = load i32, i32* %index2
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i32, i32* %index2
  %4 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %5 = load i32, i32* %4
  %6 = add i32 %3, %5
  store i32 %6, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %7 = load i32, i32* %index2
  %8 = icmp sle i32 0, %7
  store i1 %8, i1* %__temp_147
  br i1 %8, label %then5, label %else6

then3:                                            ; preds = %exit7
  %9 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  br label %exit9

then5:                                            ; preds = %exit
  %10 = load i32, i32* %index2
  %11 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %12 = load i32, i32* %11
  %13 = icmp slt i32 %10, %12
  br label %exit7

else6:                                            ; preds = %exit
  %14 = load i1, i1* %__temp_147
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %15 = phi i1 [ %13, %then5 ], [ %14, %else6 ]
  br i1 %15, label %then3, label %else4

exit8:                                            ; preds = %then3
  %16 = phi i32 [ %9, %then3 ]
  store i32 %16, i32* %index1
  %17 = load i32, i32* %index1
  %18 = call %String* @"*Array(String)@Array(T)#unsafe_at<Int32>:String"(%"Array(String)"* %self, i32 %17)
  br label %exit9

exit9:                                            ; preds = %exit8, %else4
  %19 = phi %String* [ null, %else4 ], [ %18, %exit8 ]
  ret %String* %19
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*String::Builder@IO#<<<(String | Nil)>:String::Builder"(%"String::Builder"* %self, %String* %obj) #0 {
entry:
  %0 = icmp eq %String* %obj, null
  %1 = select i1 %0, i32 0, i32 1
  %2 = icmp eq i32 0, %1
  br i1 %2, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  br label %exit

next_def:                                         ; preds = %entry
  %3 = icmp eq i32 1, %1
  br i1 %3, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def1, %current_def
  ret %"String::Builder"* %self

current_def1:                                     ; preds = %next_def
  call void @"*String#to_s<String::Builder>:Nil"(%String* %obj, %"String::Builder"* %self)
  br label %exit

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal i1 @"*Array(String)@Enumerable(T)#includes?<(String | Nil)>:Bool"(%"Array(String)"* %self, %String* %obj) #0 {
alloca:
  %e = alloca %String*
  %e1 = alloca %String*
  %i = alloca i32
  %i2 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %i2
  br label %while

while:                                            ; preds = %else, %entry
  %0 = load i32, i32* %i2
  %1 = getelementptr inbounds %"Array(String)", %"Array(String)"* %self, i32 0, i32 1
  %2 = load i32, i32* %1
  %3 = icmp slt i32 %0, %2
  br i1 %3, label %body, label %exit

body:                                             ; preds = %while
  %4 = load i32, i32* %i2
  store i32 %4, i32* %i
  %5 = load i32, i32* %i
  %6 = call %String* @"*Array(String)@Array(T)#unsafe_at<Int32>:String"(%"Array(String)"* %self, i32 %5)
  store %String* %6, %String** %e1
  %7 = load %String*, %String** %e1
  store %String* %7, %String** %e
  %8 = load %String*, %String** %e
  %9 = icmp eq %String* %obj, null
  %10 = select i1 %9, i32 0, i32 1
  %11 = icmp eq i32 1, %10
  %12 = and i1 true, %11
  br i1 %12, label %current_def, label %next_def

exit:                                             ; preds = %while
  br label %exit10

then:                                             ; preds = %exit3
  br label %exit10

else:                                             ; preds = %exit3
  %13 = load i32, i32* %i2
  %14 = add i32 %13, 1
  store i32 %14, i32* %i2
  br label %while

current_def:                                      ; preds = %body
  %15 = call i1 @"*String#==<String>:Bool"(%String* %8, %String* %obj)
  br label %exit3

next_def:                                         ; preds = %body
  %16 = icmp eq i32 1, %10
  %17 = and i1 true, %16
  br i1 %17, label %current_def4, label %next_def5

exit3:                                            ; preds = %current_def8, %current_def6, %current_def4, %current_def
  %18 = phi i1 [ %15, %current_def ], [ %19, %current_def4 ], [ %22, %current_def6 ], [ false, %current_def8 ]
  br i1 %18, label %then, label %else

current_def4:                                     ; preds = %next_def
  %19 = call i1 @"*String@Comparable(T)#==<String>:Bool"(%String* %8, %String* %obj)
  br label %exit3

next_def5:                                        ; preds = %next_def
  %20 = icmp eq i32 1, %10
  %21 = and i1 true, %20
  br i1 %21, label %current_def6, label %next_def7

current_def6:                                     ; preds = %next_def5
  %22 = call i1 @"*String@Reference#==<String>:Bool"(%String* %8, %String* %obj)
  br label %exit3

next_def7:                                        ; preds = %next_def5
  %23 = call i1 @"~match<(String | Nil)>"(i32 %10)
  %24 = and i1 true, %23
  br i1 %24, label %current_def8, label %next_def9

current_def8:                                     ; preds = %next_def7
  br label %exit3

next_def9:                                        ; preds = %next_def7
  unreachable

exit10:                                           ; preds = %exit, %then
  %25 = phi i1 [ true, %then ], [ false, %exit ]
  ret i1 %25
}

; Function Attrs: uwtable
define internal i1 @"*String@Comparable(T)#==<String>:Bool"(%String* %self, %String* %other) #0 {
entry:
  %0 = call i1 @"*String@Reference#same?<String>:Bool"(%String* %self, %String* %other)
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  ret i1 true

else:                                             ; preds = %entry
  %1 = call i32 @"*String#<=><String>:Int32"(%String* %self, %String* %other)
  %2 = icmp eq i32 %1, 0
  ret i1 %2
}

; Function Attrs: uwtable
define internal i32 @"*String#<=><String>:Int32"(%String* %self, %String* %other) #0 {
alloca:
  %min_bytesize = alloca i32
  %cmp = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i1 @"*String@Reference#same?<String>:Bool"(%String* %self, %String* %other)
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  ret i32 0

else:                                             ; preds = %entry
  %1 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %2 = load i32, i32* %1
  %3 = getelementptr inbounds %String, %String* %other, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = call i32 @"*Math@Math::min<Int32, Int32>:Int32"(i32 %2, i32 %4)
  store i32 %5, i32* %min_bytesize
  %6 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %self)
  %7 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %other)
  %8 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %9 = load i32, i32* %8
  %10 = call i32 @"*Pointer(UInt8)@Pointer(T)#memcmp<Pointer(UInt8), Int32>:Int32"(i8* %6, i8* %7, i32 %9)
  store i32 %10, i32* %cmp
  %11 = load i32, i32* %cmp
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %then1, label %else2

then1:                                            ; preds = %else
  %13 = getelementptr inbounds %String, %String* %self, i32 0, i32 1
  %14 = load i32, i32* %13
  %15 = getelementptr inbounds %String, %String* %other, i32 0, i32 1
  %16 = load i32, i32* %15
  %17 = call i32 @"*Int32@Number#<=><Int32>:Int32"(i32 %14, i32 %16)
  br label %exit

else2:                                            ; preds = %else
  %18 = load i32, i32* %cmp
  %19 = call i32 @"*Int32@Number#sign:Int32"(i32 %18)
  br label %exit

exit:                                             ; preds = %else2, %then1
  %20 = phi i32 [ %17, %then1 ], [ %19, %else2 ]
  ret i32 %20
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Number#<=><Int32>:Int32"(i32 %self, i32 %other) #0 {
entry:
  %0 = icmp sgt i32 %self, %other
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %1 = icmp slt i32 %self, %other
  br i1 %1, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %2 = phi i32 [ 1, %then ], [ %3, %exit3 ]
  ret i32 %2

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %3 = phi i32 [ -1, %then1 ], [ 0, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Number#sign:Int32"(i32 %self) #0 {
entry:
  %0 = icmp slt i32 %self, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %1 = icmp eq i32 %self, 0
  br i1 %1, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %2 = phi i32 [ -1, %then ], [ %3, %exit3 ]
  ret i32 %2

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %3 = phi i32 [ 0, %then1 ], [ 1, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i1 @"*String@Reference#==<String>:Bool"(%String* %self, %String* %other) #0 {
entry:
  %0 = call i1 @"*String@Reference#same?<String>:Bool"(%String* %self, %String* %other)
  ret i1 %0
}

define internal i1 @"~match<(String | Nil)>"(i32) {
entry:
  %1 = icmp eq i32 0, %0
  %2 = icmp eq i32 1, %0
  %3 = or i1 %1, %2
  ret i1 %3
}

; Function Attrs: uwtable
define internal %"(Tuple(Int64, Pointer(UInt8)) | Nil)" @"*CallStack::decode_frame<Pointer(Void)>:(Tuple(Int64, Pointer(UInt8)) | Nil)"(i8* %ip) #0 {
alloca:
  %original_ip = alloca i8*
  %0 = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i8* %ip, i8** %original_ip
  %1 = load i8*, i8** %original_ip
  %2 = call %"(Tuple(Int64, Pointer(UInt8)) | Nil)" @"*CallStack::decode_frame<Pointer(Void), Pointer(Void)>:(Tuple(Int64, Pointer(UInt8)) | Nil)"(i8* %ip, i8* %1)
  store %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %2, %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %0
  %3 = load %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %0
  ret %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %3
}

; Function Attrs: uwtable
define internal %"(Tuple(Int64, Pointer(UInt8)) | Nil)" @"*CallStack::decode_frame<Pointer(Void), Pointer(Void)>:(Tuple(Int64, Pointer(UInt8)) | Nil)"(i8* %ip, i8* %original_ip) #0 {
alloca:
  %info = alloca %"struct.LibC::DlInfo"
  %offset = alloca i64
  %0 = alloca %"struct.LibC::DlInfo"
  %1 = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  %2 = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  %3 = alloca %"Tuple(Int64, Pointer(UInt8)).16"
  %4 = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  %5 = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %6 = call i32 @dladdr(i8* %ip, %"struct.LibC::DlInfo"* %0)
  %7 = load %"struct.LibC::DlInfo", %"struct.LibC::DlInfo"* %0
  store %"struct.LibC::DlInfo" %7, %"struct.LibC::DlInfo"* %info
  %8 = icmp ne i32 %6, 0
  br i1 %8, label %then, label %else

then:                                             ; preds = %entry
  %9 = getelementptr inbounds %"struct.LibC::DlInfo", %"struct.LibC::DlInfo"* %info, i32 0, i32 3
  %10 = load i8*, i8** %9
  %11 = ptrtoint i8* %original_ip to i64
  %12 = ptrtoint i8* %10 to i64
  %13 = sub i64 %11, %12
  %14 = sdiv exact i64 %13, ptrtoint (i8* getelementptr inbounds (i8, i8* null, i32 1) to i64)
  store i64 %14, i64* %offset
  %15 = load i64, i64* %offset
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %then1, label %else2

else:                                             ; preds = %entry
  %17 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %5, i32 0, i32 0
  store i32 0, i32* %17
  %18 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %5, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %18
  br label %exit5

then1:                                            ; preds = %then
  %19 = call i8* @"*Pointer(Void)@Pointer(T)#-<Int32>:Pointer(Void)"(i8* %ip, i32 1)
  %20 = call %"(Tuple(Int64, Pointer(UInt8)) | Nil)" @"*CallStack::decode_frame<Pointer(Void), Pointer(Void)>:(Tuple(Int64, Pointer(UInt8)) | Nil)"(i8* %19, i8* %original_ip)
  store %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %20, %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %1
  %21 = load %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %1
  ret %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %21

else2:                                            ; preds = %then
  %22 = getelementptr inbounds %"struct.LibC::DlInfo", %"struct.LibC::DlInfo"* %info, i32 0, i32 2
  %23 = load i8*, i8** %22
  %24 = call i1 @"*Pointer(UInt8)@Pointer(T)#null?:Bool"(i8* %23)
  br i1 %24, label %then3, label %else4

then3:                                            ; preds = %else2
  %25 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %2, i32 0, i32 0
  store i32 0, i32* %25
  %26 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %2, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %26
  br label %exit

else4:                                            ; preds = %else2
  %27 = load i64, i64* %offset
  %28 = getelementptr inbounds %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %3, i32 0, i32 0
  store i64 %27, i64* %28
  %29 = getelementptr inbounds %"struct.LibC::DlInfo", %"struct.LibC::DlInfo"* %info, i32 0, i32 2
  %30 = load i8*, i8** %29
  %31 = getelementptr inbounds %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %3, i32 0, i32 1
  store i8* %30, i8** %31
  %32 = load %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %3
  %33 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %4, i32 0, i32 0
  store i32 257, i32* %33
  %34 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %4, i32 0, i32 1
  %35 = bitcast [2 x i64]* %34 to %"Tuple(Int64, Pointer(UInt8)).16"*
  store %"Tuple(Int64, Pointer(UInt8)).16" %32, %"Tuple(Int64, Pointer(UInt8)).16"* %35
  br label %exit

exit:                                             ; preds = %else4, %then3
  %36 = phi %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* [ %2, %then3 ], [ %4, %else4 ]
  br label %exit5

exit5:                                            ; preds = %else, %exit
  %37 = phi %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* [ %36, %exit ], [ %5, %else ]
  %38 = load %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %37
  ret %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %38
}

declare i32 @dladdr(i8*, %"struct.LibC::DlInfo"*)

; Function Attrs: uwtable
define internal i8* @"*Pointer(Void)@Pointer(T)#-<Int32>:Pointer(Void)"(i8* %self, i32 %other) #0 {
entry:
  %0 = call i32 @"*Int32#-:Int32"(i32 %other)
  %1 = call i8* @"*Pointer(Void)@Pointer(T)#+<Int32>:Pointer(Void)"(i8* %self, i32 %0)
  ret i8* %1
}

; Function Attrs: uwtable
define internal i1 @"*Pointer(UInt8)@Pointer(T)#null?:Bool"(i8* %self) #0 {
entry:
  %0 = ptrtoint i8* %self to i64
  %1 = icmp eq i64 %0, 0
  ret i1 %1
}

; Function Attrs: uwtable
define internal %String* @"*UInt64@Int#to_s<Int32>:String"(i64 %self, i32 %base) #0 {
alloca:
  %upcase = alloca i1
  %__temp_150 = alloca i1
  %__temp_149 = alloca i1
  %ptr = alloca i8*
  %count = alloca i32
  %base16 = alloca i32
  %upcase17 = alloca i1
  %chars = alloca [65 x i8]
  %ptr_end = alloca i8*
  %ptr18 = alloca i8*
  %num = alloca i64
  %neg = alloca i1
  %digits = alloca i8*
  %count19 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %upcase
  %0 = icmp sle i32 2, %base
  store i1 %0, i1* %__temp_150
  br i1 %0, label %then3, label %else4

then:                                             ; preds = %exit5
  br label %exit6

else:                                             ; preds = %exit5
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* bitcast ({ i32, i32, i32, [14 x i8] }* @"'Invalid base '" to %String*))
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %2, i32 %base)
  %4 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %3)
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %4)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

then1:                                            ; preds = %exit
  %6 = load i1, i1* %__temp_149
  br label %exit5

else2:                                            ; preds = %exit
  %7 = icmp eq i32 %base, 62
  br label %exit5

then3:                                            ; preds = %entry
  %8 = icmp sle i32 %base, 36
  br label %exit

else4:                                            ; preds = %entry
  %9 = load i1, i1* %__temp_150
  br label %exit

exit:                                             ; preds = %else4, %then3
  %10 = phi i1 [ %8, %then3 ], [ %9, %else4 ]
  store i1 %10, i1* %__temp_149
  br i1 %10, label %then1, label %else2

exit5:                                            ; preds = %else2, %then1
  %11 = phi i1 [ %6, %then1 ], [ %7, %else2 ]
  br i1 %11, label %then, label %else

exit6:                                            ; preds = %then
  %12 = load i1, i1* %upcase
  br i1 %12, label %then9, label %else10

then7:                                            ; preds = %exit11
  %13 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [33 x i8] }* @"'upcase must be fals...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %13)
  unreachable

else8:                                            ; preds = %exit11
  %14 = call i1 @"*Int32@Object#===<UInt64>:Bool"(i32 0, i64 %self)
  br i1 %14, label %then12, label %else13

then9:                                            ; preds = %exit6
  %15 = icmp eq i32 %base, 62
  br label %exit11

else10:                                           ; preds = %exit6
  %16 = load i1, i1* %upcase
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %17 = phi i1 [ %15, %then9 ], [ %16, %else10 ]
  br i1 %17, label %then7, label %else8

then12:                                           ; preds = %else8
  ret %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'0'" to %String*)

else13:                                           ; preds = %else8
  %18 = call i1 @"*Int32@Object#===<UInt64>:Bool"(i32 1, i64 %self)
  br i1 %18, label %then14, label %else15

then14:                                           ; preds = %else13
  ret %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'1'" to %String*)

else15:                                           ; preds = %else13
  %19 = load i1, i1* %upcase
  store i32 %base, i32* %base16
  store i1 %19, i1* %upcase17
  %20 = call i8* @"*StaticArray(UInt8, 65)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([65 x i8]* %chars)
  %21 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %20, i32 64)
  store i8* %21, i8** %ptr_end
  %22 = load i8*, i8** %ptr_end
  store i8* %22, i8** %ptr18
  store i64 %self, i64* %num
  %23 = load i64, i64* %num
  %24 = icmp ult i64 %23, 0
  %25 = and i1 true, %24
  store i1 %25, i1* %neg
  %26 = load i32, i32* %base16
  %27 = icmp eq i32 %26, 62
  br i1 %27, label %then20, label %else21

then20:                                           ; preds = %else15
  %28 = call %String** @"~Int::DIGITS_BASE62:read"()
  %29 = load %String*, %String** %28
  br label %exit22

else21:                                           ; preds = %else15
  %30 = load i1, i1* %upcase17
  br i1 %30, label %then23, label %else24

exit22:                                           ; preds = %exit25, %then20
  %31 = phi %String* [ %29, %then20 ], [ %37, %exit25 ]
  %32 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %31)
  store i8* %32, i8** %digits
  br label %while

then23:                                           ; preds = %else21
  %33 = call %String** @"~Int::DIGITS_UPCASE:read"()
  %34 = load %String*, %String** %33
  br label %exit25

else24:                                           ; preds = %else21
  %35 = call %String** @"~Int::DIGITS_DOWNCASE:read"()
  %36 = load %String*, %String** %35
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %37 = phi %String* [ %34, %then23 ], [ %36, %else24 ]
  br label %exit22

while:                                            ; preds = %body, %exit22
  %38 = load i64, i64* %num
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %body, label %exit26

body:                                             ; preds = %while
  %40 = load i8*, i8** %ptr18
  %41 = call i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %40, i32 1)
  store i8* %41, i8** %ptr18
  %42 = load i8*, i8** %ptr18
  %43 = load i8*, i8** %digits
  %44 = load i64, i64* %num
  %45 = load i32, i32* %base16
  %46 = call i64 @"*UInt64@Int#remainder<Int32>:UInt64"(i64 %44, i32 %45)
  %47 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<UInt64>:UInt8"(i8* %43, i64 %46)
  store i8 %47, i8* %42
  %48 = load i64, i64* %num
  %49 = load i32, i32* %base16
  %50 = call i64 @"*UInt64@Int#tdiv<Int32>:UInt64"(i64 %48, i32 %49)
  store i64 %50, i64* %num
  br label %while

exit26:                                           ; preds = %while
  %51 = load i1, i1* %neg
  br i1 %51, label %then27, label %else28

then27:                                           ; preds = %exit26
  %52 = load i8*, i8** %ptr18
  %53 = call i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %52, i32 1)
  store i8* %53, i8** %ptr18
  %54 = load i8*, i8** %ptr18
  store i8 45, i8* %54
  br label %exit29

else28:                                           ; preds = %exit26
  br label %exit29

exit29:                                           ; preds = %else28, %then27
  %55 = load i8*, i8** %ptr_end
  %56 = load i8*, i8** %ptr18
  %57 = ptrtoint i8* %55 to i64
  %58 = ptrtoint i8* %56 to i64
  %59 = sub i64 %57, %58
  %60 = sdiv exact i64 %59, ptrtoint (i8* getelementptr inbounds (i8, i8* null, i32 1) to i64)
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %count19
  %62 = load i8*, i8** %ptr18
  %63 = load i32, i32* %count19
  store i8* %62, i8** %ptr
  store i32 %63, i32* %count
  %64 = load i8*, i8** %ptr
  %65 = load i32, i32* %count
  %66 = load i32, i32* %count
  %67 = call %String* @"*String::new<Pointer(UInt8), Int32, Int32>:String"(i8* %64, i32 %65, i32 %66)
  ret %String* %67
}

; Function Attrs: uwtable
define internal i1 @"*Int32@Object#===<UInt64>:Bool"(i32 %self, i64 %other) #0 {
entry:
  %0 = sext i32 %self to i64
  %1 = icmp eq i64 %0, %other
  ret i1 %1
}

; Function Attrs: uwtable
define internal i64 @"*UInt64@Int#remainder<Int32>:UInt64"(i64 %self, i32 %other) #0 {
entry:
  %0 = icmp eq i32 %other, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %other to i64
  %3 = urem i64 %self, %2
  ret i64 %3
}

; Function Attrs: uwtable
define internal i64 @"*UInt64@Int#tdiv<Int32>:UInt64"(i64 %self, i32 %other) #0 {
entry:
  call void @"*UInt64@Int#check_div_argument<Int32>:Nil"(i64 %self, i32 %other)
  %0 = sext i32 %other to i64
  %1 = udiv i64 %self, %0
  ret i64 %1
}

; Function Attrs: uwtable
define internal void @"*UInt64@Int#check_div_argument<Int32>:Nil"(i64 %self, i32 %other) #0 {
alloca:
  %__temp_152 = alloca i1
  %__temp_151 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  %0 = icmp eq i32 %other, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %DivisionByZero* @"*DivisionByZero::new:DivisionByZero"()
  call void @"*raise<DivisionByZero>:NoReturn"(%DivisionByZero* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = icmp ult i64 %self, 0
  %3 = and i1 true, %2
  store i1 %3, i1* %__temp_152
  br i1 %3, label %then5, label %else6

then1:                                            ; preds = %exit7
  %4 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [27 x i8] }* @"'overflow: UInt64::M...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %4)
  unreachable

else2:                                            ; preds = %exit7
  ret void

then3:                                            ; preds = %exit
  %5 = icmp eq i32 %other, -1
  br label %exit7

else4:                                            ; preds = %exit
  %6 = load i1, i1* %__temp_151
  br label %exit7

then5:                                            ; preds = %else
  %7 = icmp eq i64 %self, 0
  br label %exit

else6:                                            ; preds = %else
  %8 = load i1, i1* %__temp_152
  br label %exit

exit:                                             ; preds = %else6, %then5
  %9 = phi i1 [ %7, %then5 ], [ %8, %else6 ]
  store i1 %9, i1* %__temp_151
  br i1 %9, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  %10 = phi i1 [ %5, %then3 ], [ %6, %else4 ]
  br i1 %10, label %then1, label %else2
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber#next_fiber=<(Fiber | Nil)>:(Fiber | Nil)"(%Fiber* %self, %Fiber* %next_fiber) #0 {
entry:
  %0 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 5
  store %Fiber* %next_fiber, %Fiber** %0
  ret %Fiber* %next_fiber
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber#prev_fiber=<(Fiber | Nil)>:(Fiber | Nil)"(%Fiber* %self, %Fiber* %prev_fiber) #0 {
entry:
  %0 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  store %Fiber* %prev_fiber, %Fiber** %0
  ret %Fiber* %prev_fiber
}

; Function Attrs: uwtable
define internal i64 @"*UInt64@Int#~:UInt64"(i64 %self) #0 {
entry:
  %0 = xor i64 %self, -1
  ret i64 %0
}

; Function Attrs: uwtable
define internal i8** @"*Pointer(Pointer(Void))@Pointer(T)#-<Int32>:Pointer(Pointer(Void))"(i8** %self, i32 %other) #0 {
entry:
  %0 = call i32 @"*Int32#-:Int32"(i32 %other)
  %1 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)#+<Int32>:Pointer(Pointer(Void))"(i8** %self, i32 %0)
  ret i8** %1
}

; Function Attrs: uwtable
define internal i8* @"*Proc(Fiber, (IO::FileDescriptor | Nil))@Proc(T, R)#pointer:Pointer(Void)"(%"->" %self) #0 {
alloca:
  %0 = alloca %"Tuple(Pointer(Void), Pointer(Void))"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Tuple(Pointer(Void), Pointer(Void))" @"*Proc(Fiber, (IO::FileDescriptor | Nil))@Proc(T, R)#internal_representation:Tuple(Pointer(Void), Pointer(Void))"(%"->" %self)
  store %"Tuple(Pointer(Void), Pointer(Void))" %1, %"Tuple(Pointer(Void), Pointer(Void))"* %0
  %2 = getelementptr inbounds %"Tuple(Pointer(Void), Pointer(Void))", %"Tuple(Pointer(Void), Pointer(Void))"* %0, i32 0, i32 0
  %3 = load i8*, i8** %2
  ret i8* %3
}

; Function Attrs: uwtable
define internal %"Tuple(Pointer(Void), Pointer(Void))" @"*Proc(Fiber, (IO::FileDescriptor | Nil))@Proc(T, R)#internal_representation:Tuple(Pointer(Void), Pointer(Void))"(%"->" %self) #0 {
alloca:
  %func = alloca %"->"
  %ptr = alloca %"Tuple(Pointer(Void), Pointer(Void))"*
  br label %entry

entry:                                            ; preds = %alloca
  store %"->" %self, %"->"* %func
  %0 = bitcast %"->"* %func to %"Tuple(Pointer(Void), Pointer(Void))"*
  store %"Tuple(Pointer(Void), Pointer(Void))"* %0, %"Tuple(Pointer(Void), Pointer(Void))"** %ptr
  %1 = load %"Tuple(Pointer(Void), Pointer(Void))"*, %"Tuple(Pointer(Void), Pointer(Void))"** %ptr
  %2 = load %"Tuple(Pointer(Void), Pointer(Void))", %"Tuple(Pointer(Void), Pointer(Void))"* %1
  ret %"Tuple(Pointer(Void), Pointer(Void))" %2
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber#next_fiber=<Fiber>:Fiber"(%Fiber* %self, %Fiber* %next_fiber) #0 {
entry:
  %0 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 5
  store %Fiber* %next_fiber, %Fiber** %0
  ret %Fiber* %next_fiber
}

; Function Attrs: uwtable
define internal void @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:18"() #0 {
entry:
  %0 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %1 = call i32 @"*Event::Base#run_loop:Int32"(%"Event::Base"* %0)
  ret void
}

; Function Attrs: uwtable
define internal i32 @"*Event::Base#run_loop:Int32"(%"Event::Base"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Event::Base", %"Event::Base"* %self, i32 0, i32 0
  %1 = load i8*, i8** %0
  %2 = call i32 @event_base_loop(i8* %1, i32 0)
  ret i32 %2
}

declare i32 @event_base_loop(i8*, i32)

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_close:Nil"(i32* %self) #0 {
alloca:
  %err = alloca %Errno*
  %__temp_48 = alloca i32
  %readers = alloca %"Deque(Fiber)"*
  %writers = alloca %"Deque(Fiber)"*
  %__arg2 = alloca %"Event::Event.6"
  %__arg212 = alloca %"Event::Event.6"
  %__arg3 = alloca %"Event::Event.6"
  %__arg318 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast i32* %self to %"IO::FileDescriptor"*
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %0, i32 0, i32 18
  %2 = load i1, i1* %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  store %Errno* null, %Errno** %err
  %3 = bitcast i32* %self to %"IO::FileDescriptor"*
  %4 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %3, i32 0, i32 16
  %5 = load i32, i32* %4
  %6 = call i32 @close(i32 %5)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %then1, label %else2

then1:                                            ; preds = %else
  %8 = call i32 @"*Errno::value:Int32"()
  store i32 %8, i32* %__temp_48
  %9 = load i32, i32* %__temp_48
  %10 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 4, i32 %9)
  br i1 %10, label %then5, label %else6

else2:                                            ; preds = %else
  br label %exit8

then3:                                            ; preds = %exit
  br label %exit7

else4:                                            ; preds = %exit
  %11 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Error closing file'" to %String*))
  store %Errno* %11, %Errno** %err
  br label %exit7

then5:                                            ; preds = %then1
  %12 = load i32, i32* %__temp_48
  %13 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 4, i32 %12)
  br label %exit

else6:                                            ; preds = %then1
  %14 = load i32, i32* %__temp_48
  %15 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 36, i32 %14)
  br label %exit

exit:                                             ; preds = %else6, %then5
  %16 = phi i1 [ %13, %then5 ], [ %15, %else6 ]
  br i1 %16, label %then3, label %else4

exit7:                                            ; preds = %else4, %then3
  br label %exit8

exit8:                                            ; preds = %else2, %exit7
  %17 = bitcast i32* %self to %"IO::FileDescriptor"*
  %18 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %17, i32 0, i32 18
  store i1 true, i1* %18
  %19 = bitcast i32* %self to %"IO::FileDescriptor"*
  %20 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %19, i32 0, i32 12
  %21 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %20, i32 0, i32 0
  %22 = load i32, i32* %21
  %23 = icmp eq i32 359, %22
  br i1 %23, label %current_def, label %next_def

current_def:                                      ; preds = %exit8
  %24 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %20, i32 0, i32 1
  %25 = bitcast [2 x i64]* %24 to %"Event::Event.6"*
  %26 = load %"Event::Event.6", %"Event::Event.6"* %25
  store %"Event::Event.6" %26, %"Event::Event.6"* %__arg2
  %27 = call i1 @"*Event::Event#free:Bool"(%"Event::Event.6"* %__arg2)
  br label %exit9

next_def:                                         ; preds = %exit8
  %28 = icmp eq i32 0, %22
  br i1 %28, label %current_def10, label %next_def11

exit9:                                            ; preds = %current_def10, %current_def
  %29 = bitcast i32* %self to %"IO::FileDescriptor"*
  %30 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %29, i32 0, i32 12
  %31 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %30, i32 0, i32 0
  store i32 0, i32* %31
  %32 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %30, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %32
  %33 = bitcast i32* %self to %"IO::FileDescriptor"*
  %34 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %33, i32 0, i32 13
  %35 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %34, i32 0, i32 0
  %36 = load i32, i32* %35
  %37 = icmp eq i32 359, %36
  br i1 %37, label %current_def13, label %next_def14

current_def10:                                    ; preds = %next_def
  br label %exit9

next_def11:                                       ; preds = %next_def
  unreachable

current_def13:                                    ; preds = %exit9
  %38 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %34, i32 0, i32 1
  %39 = bitcast [2 x i64]* %38 to %"Event::Event.6"*
  %40 = load %"Event::Event.6", %"Event::Event.6"* %39
  store %"Event::Event.6" %40, %"Event::Event.6"* %__arg3
  %41 = call i1 @"*Event::Event#free:Bool"(%"Event::Event.6"* %__arg3)
  br label %exit15

next_def14:                                       ; preds = %exit9
  %42 = icmp eq i32 0, %36
  br i1 %42, label %current_def16, label %next_def17

exit15:                                           ; preds = %current_def16, %current_def13
  %43 = bitcast i32* %self to %"IO::FileDescriptor"*
  %44 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %43, i32 0, i32 13
  %45 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %44, i32 0, i32 0
  store i32 0, i32* %45
  %46 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %44, i32 0, i32 1
  store [2 x i64] zeroinitializer, [2 x i64]* %46
  %47 = bitcast i32* %self to %"IO::FileDescriptor"*
  %48 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %47, i32 0, i32 19
  %49 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %48
  store %"Deque(Fiber)"* %49, %"Deque(Fiber)"** %readers
  %50 = icmp ne %"Deque(Fiber)"* %49, null
  br i1 %50, label %then19, label %else20

current_def16:                                    ; preds = %next_def14
  br label %exit15

next_def17:                                       ; preds = %next_def14
  unreachable

then19:                                           ; preds = %exit15
  %51 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %52 = call %"Deque(Fiber)"* @"*Scheduler::enqueue<Deque(Fiber)>:Deque(Fiber)"(%"Deque(Fiber)"* %51)
  %53 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %readers
  %54 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#clear:Deque(Fiber)"(%"Deque(Fiber)"* %53)
  br label %exit21

else20:                                           ; preds = %exit15
  br label %exit21

exit21:                                           ; preds = %else20, %then19
  %55 = bitcast i32* %self to %"IO::FileDescriptor"*
  %56 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %55, i32 0, i32 20
  %57 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %56
  store %"Deque(Fiber)"* %57, %"Deque(Fiber)"** %writers
  %58 = icmp ne %"Deque(Fiber)"* %57, null
  br i1 %58, label %then22, label %else23

then22:                                           ; preds = %exit21
  %59 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %60 = call %"Deque(Fiber)"* @"*Scheduler::enqueue<Deque(Fiber)>:Deque(Fiber)"(%"Deque(Fiber)"* %59)
  %61 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %writers
  %62 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#clear:Deque(Fiber)"(%"Deque(Fiber)"* %61)
  br label %exit24

else23:                                           ; preds = %exit21
  br label %exit24

exit24:                                           ; preds = %else23, %then22
  %63 = load %Errno*, %Errno** %err
  %64 = icmp ne %Errno* %63, null
  br i1 %64, label %then25, label %else26

then25:                                           ; preds = %exit24
  %65 = load %Errno*, %Errno** %err
  call void @"*raise<Errno>:NoReturn"(%Errno* %65)
  unreachable

else26:                                           ; preds = %exit24
  ret void
}

; Function Attrs: uwtable
define internal %"->" @"*Signal::setup_default_handlers:(Proc(Int32, Nil) | Nil)"() #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i1* @"~Signal::default_handlers_setup:read"()
  %2 = load i1, i1* %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %3
  %4 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %4
  %5 = load %"->", %"->"* %0
  ret %"->" %5

else:                                             ; preds = %entry
  %6 = call i1* @"~Signal::default_handlers_setup:read"()
  store i1 true, i1* %6
  %7 = call %"->" @"*Signal#ignore:Proc(Int32, Nil)"(i32 13)
  %8 = call %"->" @"*Signal#reset:Proc(Int32, Nil)"(i32 20)
  ret %"->" %8
}

define internal i1* @"~Signal::default_handlers_setup:read"() {
entry:
  %0 = load i1, i1* @"Signal::default_handlers_setup:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret i1* @"Signal::default_handlers_setup"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"Signal::default_handlers_setup:init"
  call void @"~Signal::default_handlers_setup:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal %"->" @"*Signal#ignore:Proc(Int32, Nil)"(i32 %self) #0 {
entry:
  %0 = call i8* @"*Pointer(Void)@Pointer(T)::null:Pointer(Void)"(i32 622)
  %1 = call %"->" @"*Proc(Int32, Void)@Proc(T, R)::new<Pointer(Void), Pointer(Void)>:Proc(Int32, Void)"(i32 965, i8* inttoptr (i64 1 to i8*), i8* %0)
  %2 = call %"->" @"*Signal#del_handler<Proc(Int32, Void)>:Proc(Int32, Nil)"(i32 %self, %"->" %1)
  ret %"->" %2
}

; Function Attrs: uwtable
define internal %"->" @"*Proc(Int32, Void)@Proc(T, R)::new<Pointer(Void), Pointer(Void)>:Proc(Int32, Void)"(i32 %self, i8* %pointer, i8* %closure_data) #0 {
alloca:
  %func = alloca %"Tuple(Pointer(Void), Pointer(Void))"
  %ptr = alloca %"->"*
  %0 = alloca %"Tuple(Pointer(Void), Pointer(Void))"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Tuple(Pointer(Void), Pointer(Void))", %"Tuple(Pointer(Void), Pointer(Void))"* %0, i32 0, i32 0
  store i8* %pointer, i8** %1
  %2 = getelementptr inbounds %"Tuple(Pointer(Void), Pointer(Void))", %"Tuple(Pointer(Void), Pointer(Void))"* %0, i32 0, i32 1
  store i8* %closure_data, i8** %2
  %3 = load %"Tuple(Pointer(Void), Pointer(Void))", %"Tuple(Pointer(Void), Pointer(Void))"* %0
  store %"Tuple(Pointer(Void), Pointer(Void))" %3, %"Tuple(Pointer(Void), Pointer(Void))"* %func
  %4 = bitcast %"Tuple(Pointer(Void), Pointer(Void))"* %func to %"->"*
  store %"->"* %4, %"->"** %ptr
  %5 = load %"->"*, %"->"** %ptr
  %6 = load %"->", %"->"* %5
  ret %"->" %6
}

; Function Attrs: uwtable
define internal %"->" @"*Signal#del_handler<Proc(Int32, Void)>:Proc(Int32, Nil)"(i32 %self, %"->" %block) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"->" @"*Event::SignalHandler::del_handler<Signal>:(Proc(Signal, Nil) | Nil)"(i32 %self)
  %2 = call i8* @"~check_proc_is_not_closure"(%"->" %block)
  %3 = bitcast i8* %2 to %Nil (i32)*
  %4 = call %Nil (i32)* @signal(i32 %self, %Nil (i32)* %3)
  %5 = bitcast %Nil (i32)* %4 to i8*
  %6 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* %5, i8** %6
  %7 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %7
  %8 = load %"->", %"->"* %0
  ret %"->" %8
}

; Function Attrs: uwtable
define internal %"->" @"*Event::SignalHandler::del_handler<Signal>:(Proc(Signal, Nil) | Nil)"(i32 %signal) #0 {
alloca:
  %__arg0 = alloca %"Event::SignalHandler"*
  %0 = alloca %"->"
  %__arg03 = alloca %"Event::SignalHandler"*
  br label %entry

entry:                                            ; preds = %alloca
  %1 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** @"Event::SignalHandler::instance"
  %2 = icmp eq %"Event::SignalHandler"* %1, null
  %3 = select i1 %2, i32 0, i32 92
  %4 = icmp eq i32 0, %3
  br i1 %4, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %5 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %5
  %6 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %6
  %7 = load %"->", %"->"* %0
  br label %exit

next_def:                                         ; preds = %entry
  %8 = icmp eq i32 92, %3
  br i1 %8, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def1, %current_def
  %9 = phi %"->" [ %7, %current_def ], [ %11, %current_def1 ]
  ret %"->" %9

current_def1:                                     ; preds = %next_def
  store %"Event::SignalHandler"* %1, %"Event::SignalHandler"** %__arg03
  %10 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** %__arg03
  %11 = call %"->" @"*Event::SignalHandler#del_handler<Signal>:(Proc(Signal, Nil) | Nil)"(%"Event::SignalHandler"* %10, i32 %signal)
  br label %exit

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal %"->" @"*Event::SignalHandler#del_handler<Signal>:(Proc(Signal, Nil) | Nil)"(%"Event::SignalHandler"* %self, i32 %signal) #0 {
alloca:
  %callback = alloca %"->"
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 3
  %2 = load %"Hash(Signal, Proc(Signal, Nil))"*, %"Hash(Signal, Proc(Signal, Nil))"** %1
  %3 = call %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#[]?<Signal>:(Proc(Signal, Nil) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %2, i32 %signal)
  store %"->" %3, %"->"* %callback
  %4 = extractvalue %"->" %3, 0
  %5 = icmp ne i8* %4, null
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  %6 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 3
  %7 = load %"Hash(Signal, Proc(Signal, Nil))"*, %"Hash(Signal, Proc(Signal, Nil))"** %6
  %8 = call %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#delete<Signal>:(Proc(Signal, Nil) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %7, i32 %signal)
  br label %exit

else:                                             ; preds = %entry
  %9 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %9
  %10 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %10
  %11 = load %"->", %"->"* %0
  br label %exit

exit:                                             ; preds = %else, %then
  %12 = phi %"->" [ %8, %then ], [ %11, %else ]
  ret %"->" %12
}

; Function Attrs: uwtable
define internal %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#[]?<Signal>:(Proc(Signal, Nil) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key) #0 {
entry:
  %0 = call %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#fetch<Signal, Nil>:(Proc(Signal, Nil) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key, %Nil zeroinitializer)
  ret %"->" %0
}

; Function Attrs: uwtable
define internal %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#fetch<Signal, Nil>:(Proc(Signal, Nil) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key, %Nil %default) #0 {
alloca:
  %key1 = alloca i32
  %entry2 = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %key, i32* %key1
  %1 = load i32, i32* %key1
  %2 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#find_entry<Signal>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %1)
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %2, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  %3 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  %4 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %3, null
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  %6 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %5, i32 0, i32 2
  %7 = load %"->", %"->"* %6
  br label %exit

else:                                             ; preds = %entry
  %8 = load i32, i32* %key1
  %9 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %9
  %10 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %10
  %11 = load %"->", %"->"* %0
  br label %exit

exit:                                             ; preds = %else, %then
  %12 = phi %"->" [ %7, %then ], [ %11, %else ]
  ret %"->" %12
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#find_entry<Signal>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key) #0 {
alloca:
  %index = alloca i32
  %entry1 = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#bucket_index<Signal>:Int32"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key)
  store i32 %0, i32* %index
  %1 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %2 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %1
  %3 = load i32, i32* %index
  %4 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %2, i32 %3)
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %4, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %5 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %6 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#find_entry_in_bucket<(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil), Signal>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %5, i32 %key)
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %6
}

; Function Attrs: uwtable
define internal i32 @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#bucket_index<Signal>:Int32"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key) #0 {
entry:
  %0 = call i32 @"*Signal@Enum#hash:Int32"(i32 %key)
  %1 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 2
  %2 = load i32, i32* %1
  %3 = call i32 @"*UInt32@Int#remainder<Int32>:UInt32"(i32 %0, i32 %2)
  ret i32 %3
}

; Function Attrs: uwtable
define internal i32 @"*Signal@Enum#hash:Int32"(i32 %self) #0 {
entry:
  ret i32 %self
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %offset) #0 {
entry:
  %0 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %offset)
  %1 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %1
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i64 %0
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"** %1
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#find_entry_in_bucket<(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil), Signal>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %entry, i32 %key) #0 {
alloca:
  %entry2 = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  br label %entry1

entry1:                                           ; preds = %alloca
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %entry, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  br label %while

while:                                            ; preds = %else, %entry1
  %0 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  %1 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %0, null
  br i1 %1, label %body, label %exit

body:                                             ; preds = %while
  %2 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  %3 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %2, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = call i1 @"*Signal@Enum#==<Signal>:Bool"(i32 %4, i32 %key)
  br i1 %5, label %then, label %else

exit:                                             ; preds = %while
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* null

then:                                             ; preds = %body
  %6 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %6

else:                                             ; preds = %body
  %7 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  %8 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %7, i32 0, i32 3
  %9 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %8
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %9, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry2
  br label %while
}

; Function Attrs: uwtable
define internal i1 @"*Signal@Enum#==<Signal>:Bool"(i32 %self, i32 %other) #0 {
entry:
  %0 = icmp eq i32 %self, %other
  ret i1 %0
}

; Function Attrs: uwtable
define internal %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#delete<Signal>:(Proc(Signal, Nil) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key) #0 {
alloca:
  %index = alloca i32
  %entry1 = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  %previous_entry = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  %back_entry = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  %fore_entry = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i32 @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#bucket_index<Signal>:Int32"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key)
  store i32 %1, i32* %index
  %2 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %3 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %2
  %4 = load i32, i32* %index
  %5 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %3, i32 %4)
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %5, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* null, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %previous_entry
  br label %while

while:                                            ; preds = %else, %entry
  %6 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %7 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %6, null
  br i1 %7, label %body, label %exit

body:                                             ; preds = %while
  %8 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %9 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %8, i32 0, i32 1
  %10 = load i32, i32* %9
  %11 = call i1 @"*Signal@Enum#==<Signal>:Bool"(i32 %10, i32 %key)
  br i1 %11, label %then, label %else

exit:                                             ; preds = %while
  %12 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %12
  %13 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %13
  %14 = load %"->", %"->"* %0
  ret %"->" %14

then:                                             ; preds = %body
  %15 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %16 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %15, i32 0, i32 5
  %17 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %16
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %17, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %back_entry
  %18 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %19 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %18, i32 0, i32 4
  %20 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %19
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %20, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %fore_entry
  %21 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %fore_entry
  %22 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %21, null
  br i1 %22, label %then2, label %else3

else:                                             ; preds = %body
  %23 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %23, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %previous_entry
  %24 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %25 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %24, i32 0, i32 3
  %26 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %25
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %26, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  br label %while

then2:                                            ; preds = %then
  %27 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %back_entry
  %28 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %27, null
  br i1 %28, label %then4, label %else5

else3:                                            ; preds = %then
  %29 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %back_entry
  %30 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %29, null
  br i1 %30, label %then8, label %else9

then4:                                            ; preds = %then2
  %31 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %back_entry
  %32 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %fore_entry
  %33 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#fore=<Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %31, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %32)
  %34 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %fore_entry
  %35 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %back_entry
  %36 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#back=<Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %34, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %35)
  br label %exit6

else5:                                            ; preds = %then2
  %37 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %fore_entry
  %38 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 3
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %37, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %38
  %39 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %fore_entry
  call void @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#back=<Nil>:Nil"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %39, %Nil zeroinitializer)
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  br label %exit7

exit7:                                            ; preds = %exit10, %exit6
  %40 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %previous_entry
  %41 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %40, null
  br i1 %41, label %then11, label %else12

then8:                                            ; preds = %else3
  %42 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %back_entry
  call void @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#fore=<Nil>:Nil"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %42, %Nil zeroinitializer)
  %43 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %back_entry
  %44 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %43, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %44
  br label %exit10

else9:                                            ; preds = %else3
  %45 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 3
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* null, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %45
  %46 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* null, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %46
  br label %exit10

exit10:                                           ; preds = %else9, %then8
  br label %exit7

then11:                                           ; preds = %exit7
  %47 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %previous_entry
  %48 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %49 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %48, i32 0, i32 3
  %50 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %49
  %51 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#next=<(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %47, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %50)
  br label %exit13

else12:                                           ; preds = %exit7
  %52 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %53 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %52
  %54 = load i32, i32* %index
  %55 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %56 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %55, i32 0, i32 3
  %57 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %56
  %58 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]=<Int32, (Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %53, i32 %54, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %57)
  br label %exit13

exit13:                                           ; preds = %else12, %then11
  %59 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 1
  %60 = load i32, i32* %59
  %61 = sub i32 %60, 1
  %62 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 1
  store i32 %61, i32* %62
  %63 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %64 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %63, i32 0, i32 2
  %65 = load %"->", %"->"* %64
  ret %"->" %65
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#fore=<Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %fore) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %fore, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %fore
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#back=<Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %back) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 5
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %back, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %back
}

; Function Attrs: uwtable
define internal void @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#back=<Nil>:Nil"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, %Nil %back) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 5
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* null, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret void
}

; Function Attrs: uwtable
define internal void @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#fore=<Nil>:Nil"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, %Nil %fore) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* null, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#next=<(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %next) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 3
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %next, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %next
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]=<Int32, (Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %offset, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %value) #0 {
entry:
  %0 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %offset)
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %value, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %value
}

declare %Nil (i32)* @signal(i32, %Nil (i32)*)

; Function Attrs: uwtable
define internal %"->" @"*Signal#reset:Proc(Int32, Nil)"(i32 %self) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i1 @"*Signal@Object#===<Signal>:Bool"(i32 20, i32 %self)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32)* @"~procProc(Signal, Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/signal.cr:91" to i8*), i8** %2
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %3
  %4 = load %"->", %"->"* %0
  %5 = call %"->" @"*Signal#trap<&Proc(Signal, Nil)>:Proc(Int32, Nil)"(i32 %self, %"->" %4)
  br label %exit

else:                                             ; preds = %entry
  %6 = call i8* @"*Pointer(Void)@Pointer(T)::null:Pointer(Void)"(i32 622)
  %7 = call %"->" @"*Proc(Int32, Void)@Proc(T, R)::new<Pointer(Void), Pointer(Void)>:Proc(Int32, Void)"(i32 965, i8* null, i8* %6)
  %8 = call %"->" @"*Signal#del_handler<Proc(Int32, Void)>:Proc(Int32, Nil)"(i32 %self, %"->" %7)
  br label %exit

exit:                                             ; preds = %else, %then
  %9 = phi %"->" [ %5, %then ], [ %8, %else ]
  ret %"->" %9
}

; Function Attrs: uwtable
define internal i1 @"*Signal@Object#===<Signal>:Bool"(i32 %self, i32 %other) #0 {
entry:
  %0 = call i1 @"*Signal@Enum#==<Signal>:Bool"(i32 %self, i32 %other)
  ret i1 %0
}

; Function Attrs: uwtable
define internal %"->" @"*Signal#trap<&Proc(Signal, Nil)>:Proc(Int32, Nil)"(i32 %self, %"->" %block) #0 {
entry:
  %0 = call %"->" @"*Event::SignalHandler::add_handler<Signal, Proc(Signal, Nil)>:Proc(Int32, Nil)"(i32 %self, %"->" %block)
  ret %"->" %0
}

; Function Attrs: uwtable
define internal %"->" @"*Event::SignalHandler::add_handler<Signal, Proc(Signal, Nil)>:Proc(Int32, Nil)"(i32 %__temp_153, %"->" %__temp_154) #0 {
alloca:
  %args = alloca %"Tuple(Signal, Proc(Signal, Nil))"
  %0 = alloca %"Tuple(Signal, Proc(Signal, Nil))"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Tuple(Signal, Proc(Signal, Nil))", %"Tuple(Signal, Proc(Signal, Nil))"* %0, i32 0, i32 0
  store i32 %__temp_153, i32* %1
  %2 = getelementptr inbounds %"Tuple(Signal, Proc(Signal, Nil))", %"Tuple(Signal, Proc(Signal, Nil))"* %0, i32 0, i32 1
  store %"->" %__temp_154, %"->"* %2
  %3 = load %"Tuple(Signal, Proc(Signal, Nil))", %"Tuple(Signal, Proc(Signal, Nil))"* %0
  store %"Tuple(Signal, Proc(Signal, Nil))" %3, %"Tuple(Signal, Proc(Signal, Nil))"* %args
  %4 = call %"Event::SignalHandler"* @"*Event::SignalHandler::instance:Event::SignalHandler"()
  %5 = getelementptr inbounds %"Tuple(Signal, Proc(Signal, Nil))", %"Tuple(Signal, Proc(Signal, Nil))"* %args, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = getelementptr inbounds %"Tuple(Signal, Proc(Signal, Nil))", %"Tuple(Signal, Proc(Signal, Nil))"* %args, i32 0, i32 1
  %8 = load %"->", %"->"* %7
  %9 = call %"->" @"*Event::SignalHandler#add_handler<Signal, Proc(Signal, Nil)>:Proc(Int32, Nil)"(%"Event::SignalHandler"* %4, i32 %6, %"->" %8)
  ret %"->" %9
}

; Function Attrs: uwtable
define internal %"Event::SignalHandler"* @"*Event::SignalHandler::instance:Event::SignalHandler"() #0 {
alloca:
  %__temp_155 = alloca %"Event::SignalHandler"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** @"Event::SignalHandler::instance"
  store %"Event::SignalHandler"* %0, %"Event::SignalHandler"** %__temp_155
  %1 = icmp ne %"Event::SignalHandler"* %0, null
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** %__temp_155
  br label %exit

else:                                             ; preds = %entry
  %3 = call %"Event::SignalHandler"* @"*Event::SignalHandler::new:Event::SignalHandler"()
  store %"Event::SignalHandler"* %3, %"Event::SignalHandler"** @"Event::SignalHandler::instance"
  br label %exit

exit:                                             ; preds = %else, %then
  %4 = phi %"Event::SignalHandler"* [ %2, %then ], [ %3, %else ]
  ret %"Event::SignalHandler"* %4
}

; Function Attrs: uwtable
define internal %"Event::SignalHandler"* @"*Event::SignalHandler::new:Event::SignalHandler"() #0 {
alloca:
  %_ = alloca %"Event::SignalHandler"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Event::SignalHandler"* getelementptr (%"Event::SignalHandler", %"Event::SignalHandler"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Event::SignalHandler"*
  %2 = bitcast %"Event::SignalHandler"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Event::SignalHandler"* getelementptr (%"Event::SignalHandler", %"Event::SignalHandler"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %1, i32 0, i32 0
  store i32 92, i32* %3
  store %"Event::SignalHandler"* %1, %"Event::SignalHandler"** %_
  %4 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** %_
  %5 = call %Fiber* @"*Event::SignalHandler#initialize:Fiber"(%"Event::SignalHandler"* %4)
  %6 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** %_
  ret %"Event::SignalHandler"* %6
}

; Function Attrs: uwtable
define internal %Fiber* @"*Event::SignalHandler#initialize:Fiber"(%"Event::SignalHandler"* %self) #0 {
alloca:
  %__temp_156 = alloca %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"
  %0 = alloca %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"Hash(Signal, Proc(Signal, Nil))"* @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)::new:Hash(Signal, Proc(Signal, Nil))"(i32 475)
  %2 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 3
  store %"Hash(Signal, Proc(Signal, Nil))"* %1, %"Hash(Signal, Proc(Signal, Nil))"** %2
  %3 = call %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" @"*IO::pipe:Tuple(IO::FileDescriptor, IO::FileDescriptor)"()
  store %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" %3, %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %0
  %4 = load %"Tuple(IO::FileDescriptor, IO::FileDescriptor)", %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %0
  store %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" %4, %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %__temp_156
  %5 = getelementptr inbounds %"Tuple(IO::FileDescriptor, IO::FileDescriptor)", %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %__temp_156, i32 0, i32 0
  %6 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %5
  %7 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 1
  %8 = bitcast %"IO::FileDescriptor"* %6 to i32*
  store i32* %8, i32** %7
  %9 = getelementptr inbounds %"Tuple(IO::FileDescriptor, IO::FileDescriptor)", %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %__temp_156, i32 0, i32 1
  %10 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %9
  %11 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 2
  %12 = bitcast %"IO::FileDescriptor"* %10 to i32*
  store i32* %12, i32** %11
  %13 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 2
  %14 = load i32*, i32** %13
  store i32* %14, i32** @"Event::SignalHandler::write_pipe"
  %15 = call %Fiber* @"*Event::SignalHandler#spawn_reader:Fiber"(%"Event::SignalHandler"* %self)
  ret %Fiber* %15
}

; Function Attrs: uwtable
define internal %"Hash(Signal, Proc(Signal, Nil))"* @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)::new:Hash(Signal, Proc(Signal, Nil))"(i32 %self) #0 {
alloca:
  %_ = alloca %"Hash(Signal, Proc(Signal, Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Hash(Signal, Proc(Signal, Nil))"* getelementptr (%"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Hash(Signal, Proc(Signal, Nil))"*
  %2 = bitcast %"Hash(Signal, Proc(Signal, Nil))"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Hash(Signal, Proc(Signal, Nil))"* getelementptr (%"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %1, i32 0, i32 0
  store i32 28, i32* %3
  store %"Hash(Signal, Proc(Signal, Nil))"* %1, %"Hash(Signal, Proc(Signal, Nil))"** %_
  %4 = load %"Hash(Signal, Proc(Signal, Nil))"*, %"Hash(Signal, Proc(Signal, Nil))"** %_
  call void @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#initialize:Nil"(%"Hash(Signal, Proc(Signal, Nil))"* %4)
  %5 = load %"Hash(Signal, Proc(Signal, Nil))"*, %"Hash(Signal, Proc(Signal, Nil))"** %_
  ret %"Hash(Signal, Proc(Signal, Nil))"* %5
}

; Function Attrs: uwtable
define internal void @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#initialize:Nil"(%"Hash(Signal, Proc(Signal, Nil))"* %self) #0 {
alloca:
  %block = alloca %Nil
  %initial_capacity = alloca %"(Int32 | Nil)"
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 0, i32* %1
  %2 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %2
  %3 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %3
  %4 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i32*
  store i32 11, i32* %5
  %6 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to i32*
  %8 = load i32, i32* %7
  %9 = icmp slt i32 %8, 11
  br i1 %9, label %then, label %else

then:                                             ; preds = %entry
  %10 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %10
  %11 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %12 = bitcast [1 x i64]* %11 to i32*
  store i32 11, i32* %12
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %13 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %14 = bitcast [1 x i64]* %13 to i32*
  %15 = load i32, i32* %14
  %16 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %16
  %17 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %18 = bitcast [1 x i64]* %17 to i32*
  store i32 %15, i32* %18
  %19 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %20 = bitcast [1 x i64]* %19 to i32*
  %21 = load i32, i32* %20
  %22 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)::malloc<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(i32 708, i32 %21)
  %23 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"** %22, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %23
  %24 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %25 = bitcast [1 x i64]* %24 to i32*
  %26 = load i32, i32* %25
  %27 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 2
  store i32 %26, i32* %27
  %28 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 1
  store i32 0, i32* %28
  %29 = load %Nil, %Nil* %block
  %30 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 5
  %31 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %31
  %32 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %32
  %33 = load %"->", %"->"* %0
  store %"->" %33, %"->"* %30
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)::malloc<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Hash::Entry(Signal, Proc(Signal, Nil))"**
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"** %6
}

; Function Attrs: uwtable
define internal %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" @"*IO::pipe:Tuple(IO::FileDescriptor, IO::FileDescriptor)"() #0 {
alloca:
  %read_blocking = alloca i1
  %write_blocking = alloca i1
  %0 = alloca %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %read_blocking
  store i1 false, i1* %write_blocking
  %1 = load i1, i1* %read_blocking
  %2 = load i1, i1* %write_blocking
  %3 = call %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" @"*IO::pipe<Bool, Bool>:Tuple(IO::FileDescriptor, IO::FileDescriptor)"(i1 %1, i1 %2)
  store %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" %3, %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %0
  %4 = load %"Tuple(IO::FileDescriptor, IO::FileDescriptor)", %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %0
  ret %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" %4
}

; Function Attrs: uwtable
define internal %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" @"*IO::pipe<Bool, Bool>:Tuple(IO::FileDescriptor, IO::FileDescriptor)"(i1 %read_blocking, i1 %write_blocking) #0 {
alloca:
  %pipe_fds = alloca [2 x i32]
  %r = alloca %"IO::FileDescriptor"*
  %w = alloca %"IO::FileDescriptor"*
  %0 = alloca %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i32 @pipe([2 x i32]* %pipe_fds)
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [22 x i8] }* @"'Could not create pi...'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %3)
  unreachable

else:                                             ; preds = %entry
  %4 = call i32 @"*StaticArray(Int32, 2)@Indexable(T)#[]<Int32>:Int32"([2 x i32]* %pipe_fds, i32 0)
  %5 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor::new<Int32, Bool>:IO::FileDescriptor"(i32 %4, i1 %read_blocking)
  store %"IO::FileDescriptor"* %5, %"IO::FileDescriptor"** %r
  %6 = call i32 @"*StaticArray(Int32, 2)@Indexable(T)#[]<Int32>:Int32"([2 x i32]* %pipe_fds, i32 1)
  %7 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor::new<Int32, Bool>:IO::FileDescriptor"(i32 %6, i1 %write_blocking)
  store %"IO::FileDescriptor"* %7, %"IO::FileDescriptor"** %w
  %8 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %r
  %9 = call i1 @"*IO::FileDescriptor#close_on_exec=<Bool>:Bool"(%"IO::FileDescriptor"* %8, i1 true)
  %10 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %w
  %11 = call i1 @"*IO::FileDescriptor#close_on_exec=<Bool>:Bool"(%"IO::FileDescriptor"* %10, i1 true)
  %12 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %w
  %13 = call i1 @"*IO::FileDescriptor@IO::Buffered#sync=<Bool>:Bool"(%"IO::FileDescriptor"* %12, i1 true)
  %14 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %r
  %15 = getelementptr inbounds %"Tuple(IO::FileDescriptor, IO::FileDescriptor)", %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %0, i32 0, i32 0
  store %"IO::FileDescriptor"* %14, %"IO::FileDescriptor"** %15
  %16 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %w
  %17 = getelementptr inbounds %"Tuple(IO::FileDescriptor, IO::FileDescriptor)", %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %0, i32 0, i32 1
  store %"IO::FileDescriptor"* %16, %"IO::FileDescriptor"** %17
  %18 = load %"Tuple(IO::FileDescriptor, IO::FileDescriptor)", %"Tuple(IO::FileDescriptor, IO::FileDescriptor)"* %0
  ret %"Tuple(IO::FileDescriptor, IO::FileDescriptor)" %18
}

declare i32 @pipe([2 x i32]*)

; Function Attrs: alwaysinline uwtable
define internal i32 @"*StaticArray(Int32, 2)@Indexable(T)#[]<Int32>:Int32"([2 x i32]* %self, i32 %index) #4 {
entry:
  %0 = call i32 @"*StaticArray(Int32, 2)@Indexable(T)#at<Int32>:Int32"([2 x i32]* %self, i32 %index)
  ret i32 %0
}

; Function Attrs: alwaysinline uwtable
define internal i32 @"*StaticArray(Int32, 2)@Indexable(T)#at<Int32>:Int32"([2 x i32]* %self, i32 %index) #4 {
alloca:
  %index1 = alloca i32
  %index2 = alloca i32
  %__temp_157 = alloca i1
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %index, i32* %index1
  %0 = load i32, i32* %index1
  store i32 %0, i32* %index2
  %1 = load i32, i32* %index2
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = load i32, i32* %index2
  %4 = call i32 @"*StaticArray(Int32, 2)@StaticArray(T, N)#size:Int32"([2 x i32]* %self)
  %5 = add i32 %3, %4
  store i32 %5, i32* %index2
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = load i32, i32* %index2
  %7 = icmp sle i32 0, %6
  store i1 %7, i1* %__temp_157
  br i1 %7, label %then5, label %else6

then3:                                            ; preds = %exit7
  %8 = load i32, i32* %index2
  br label %exit8

else4:                                            ; preds = %exit7
  %9 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %9)
  unreachable

then5:                                            ; preds = %exit
  %10 = load i32, i32* %index2
  %11 = call i32 @"*StaticArray(Int32, 2)@StaticArray(T, N)#size:Int32"([2 x i32]* %self)
  %12 = icmp slt i32 %10, %11
  br label %exit7

else6:                                            ; preds = %exit
  %13 = load i1, i1* %__temp_157
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %14 = phi i1 [ %12, %then5 ], [ %13, %else6 ]
  br i1 %14, label %then3, label %else4

exit8:                                            ; preds = %then3
  %15 = phi i32 [ %8, %then3 ]
  store i32 %15, i32* %index1
  %16 = load i32, i32* %index1
  %17 = call i32 @"*StaticArray(Int32, 2)@StaticArray(T, N)#unsafe_at<Int32>:Int32"([2 x i32]* %self, i32 %16)
  ret i32 %17
}

; Function Attrs: uwtable
define internal i32 @"*StaticArray(Int32, 2)@StaticArray(T, N)#size:Int32"([2 x i32]* %self) #0 {
entry:
  ret i32 2
}

; Function Attrs: alwaysinline uwtable
define internal i32 @"*StaticArray(Int32, 2)@StaticArray(T, N)#unsafe_at<Int32>:Int32"([2 x i32]* %self, i32 %index) #4 {
entry:
  %0 = call i32* @"*StaticArray(Int32, 2)@StaticArray(T, N)#to_unsafe:Pointer(Int32)"([2 x i32]* %self)
  %1 = call i32 @"*Pointer(Int32)@Pointer(T)#[]<Int32>:Int32"(i32* %0, i32 %index)
  ret i32 %1
}

; Function Attrs: uwtable
define internal i32* @"*StaticArray(Int32, 2)@StaticArray(T, N)#to_unsafe:Pointer(Int32)"([2 x i32]* %self) #0 {
entry:
  %0 = getelementptr inbounds [2 x i32], [2 x i32]* %self, i32 0, i32 0
  ret i32* %0
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*IO::FileDescriptor::new<Int32, Bool>:IO::FileDescriptor"(i32 %__arg0, i1 %__arg1) #0 {
alloca:
  %_ = alloca %"IO::FileDescriptor"*
  %0 = alloca %"Slice(UInt8)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @__crystal_malloc(i32 ptrtoint (%"IO::FileDescriptor"* getelementptr (%"IO::FileDescriptor", %"IO::FileDescriptor"* null, i32 1) to i32))
  %2 = bitcast i8* %1 to %"IO::FileDescriptor"*
  %3 = bitcast %"IO::FileDescriptor"* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* %3, i8 0, i32 ptrtoint (%"IO::FileDescriptor"* getelementptr (%"IO::FileDescriptor", %"IO::FileDescriptor"* null, i32 1) to i32), i32 4, i1 false)
  %4 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)::empty:Slice(UInt8)"(i32 935)
  store %"Slice(UInt8)" %4, %"Slice(UInt8)"* %0
  %5 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 4
  %6 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %5
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 5
  store i32 0, i32* %7
  %8 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 6
  store i1 false, i1* %8
  %9 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 7
  store i1 false, i1* %9
  %10 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %2, i32 0, i32 0
  store i32 66, i32* %10
  store %"IO::FileDescriptor"* %2, %"IO::FileDescriptor"** %_
  %11 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %_
  %12 = call %"(Event::Event | Nil)" @"*IO::FileDescriptor#initialize<Int32, Bool>:(Event::Event | Nil)"(%"IO::FileDescriptor"* %11, i32 %__arg0, i1 %__arg1)
  %13 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %_
  call void @"*GC::add_finalizer<IO::FileDescriptor>:Nil"(%"IO::FileDescriptor"* %13)
  %14 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %_
  ret %"IO::FileDescriptor"* %14
}

; Function Attrs: uwtable
define internal %"(Event::Event | Nil)" @"*IO::FileDescriptor#initialize<Int32, Bool>:(Event::Event | Nil)"(%"IO::FileDescriptor"* %self, i32 %fd, i1 %blocking) #0 {
alloca:
  %edge_triggerable = alloca i1
  %0 = alloca %"(Event::Event | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %edge_triggerable
  %1 = load i1, i1* %edge_triggerable
  %2 = call %"(Event::Event | Nil)" @"*IO::FileDescriptor#initialize<Int32, Bool, Bool>:(Event::Event | Nil)"(%"IO::FileDescriptor"* %self, i32 %fd, i1 %blocking, i1 %1)
  store %"(Event::Event | Nil)" %2, %"(Event::Event | Nil)"* %0
  %3 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %0
  ret %"(Event::Event | Nil)" %3
}

; Function Attrs: uwtable
define internal i1 @"*IO::FileDescriptor#close_on_exec=<Bool>:Bool"(%"IO::FileDescriptor"* %self, i1 %arg) #0 {
entry:
  br i1 %arg, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %0 = phi i32 [ 1, %then ], [ 0, %else ]
  %1 = call i32 @"*IO::FileDescriptor#fcntl<Int32, Int32>:Int32"(%"IO::FileDescriptor"* %self, i32 2, i32 %0)
  ret i1 %arg
}

; Function Attrs: uwtable
define internal i1 @"*IO::FileDescriptor@IO::Buffered#sync=<Bool>:Bool"(%"IO::FileDescriptor"* %self, i1 %sync) #0 {
entry:
  br i1 %sync, label %then1, label %else2

then:                                             ; preds = %exit
  %0 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %self)
  br label %exit3

else:                                             ; preds = %exit
  br label %exit3

then1:                                            ; preds = %entry
  %1 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 6
  %2 = load i1, i1* %1
  %3 = xor i1 %2, true
  br label %exit

else2:                                            ; preds = %entry
  br label %exit

exit:                                             ; preds = %else2, %then1
  %4 = phi i1 [ %3, %then1 ], [ %sync, %else2 ]
  br i1 %4, label %then, label %else

exit3:                                            ; preds = %else, %then
  %5 = xor i1 %sync, true
  %6 = xor i1 %5, true
  %7 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %self, i32 0, i32 6
  store i1 %6, i1* %7
  ret i1 %6
}

; Function Attrs: uwtable
define internal %Fiber* @"*Event::SignalHandler#spawn_reader:Fiber"(%"Event::SignalHandler"* %self) #0 {
alloca:
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call i8* @__crystal_malloc(i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32))
  %2 = bitcast i8* %1 to %closure*
  %self1 = getelementptr inbounds %closure, %closure* %2, i32 0, i32 0
  store %"Event::SignalHandler"* %self, %"Event::SignalHandler"** %self1
  %3 = bitcast %closure* %2 to i8*
  %4 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i8*)* @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/event/signal_handler.cr:93" to i8*), i8** %4
  %5 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* %3, i8** %5
  %6 = load %"->", %"->"* %0
  %7 = call %Fiber* @"*spawn<&Proc(Nil)>:Fiber"(%"->" %6)
  ret %Fiber* %7
}

; Function Attrs: uwtable
define internal %Fiber* @"*spawn<&Proc(Nil)>:Fiber"(%"->" %block) #0 {
alloca:
  %name = alloca %Nil
  %fiber = alloca %Fiber*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = load %Nil, %Nil* %name
  %1 = call %Fiber* @"*Fiber::new<Nil, &Proc(Nil)>:Fiber"(%Nil zeroinitializer, %"->" %block)
  store %Fiber* %1, %Fiber** %fiber
  %2 = load %Fiber*, %Fiber** %fiber
  %3 = call %"Deque(Fiber)"* @"*Scheduler::enqueue<Fiber>:Deque(Fiber)"(%Fiber* %2)
  %4 = load %Fiber*, %Fiber** %fiber
  ret %Fiber* %4
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber::new<Nil, &Proc(Nil)>:Fiber"(%Nil %name, %"->" %proc) #0 {
alloca:
  %_ = alloca %Fiber*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%Fiber* getelementptr (%Fiber, %Fiber* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %Fiber*
  %2 = bitcast %Fiber* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%Fiber* getelementptr (%Fiber, %Fiber* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %Fiber, %Fiber* %1, i32 0, i32 0
  store i32 79, i32* %3
  store %Fiber* %1, %Fiber** %_
  %4 = load %Fiber*, %Fiber** %_
  %5 = call %Fiber* @"*Fiber#initialize<Nil, &Proc(Nil)>:Fiber"(%Fiber* %4, %Nil zeroinitializer, %"->" %proc)
  %6 = load %Fiber*, %Fiber** %_
  ret %Fiber* %6
}

; Function Attrs: uwtable
define internal %Fiber* @"*Fiber#initialize<Nil, &Proc(Nil)>:Fiber"(%Fiber* %self, %Nil %name, %"->" %proc) #0 {
alloca:
  %fiber_main = alloca %"->"
  %stack_ptr = alloca %"(Pointer(Pointer(Void)) | Pointer(Void))"
  %last_fiber = alloca %Fiber*
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 7
  store %String* null, %String** %1
  %2 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 8
  %3 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %2, i32 0, i32 0
  store i32 392, i32* %3
  %4 = getelementptr inbounds %"(Proc(Nil) | Proc(Void))", %"(Proc(Nil) | Proc(Void))"* %2, i32 0, i32 1
  %5 = bitcast [2 x i64]* %4 to %"->"*
  store %"->" %proc, %"->"* %5
  %6 = call i8* @"*Fiber::allocate_stack:Pointer(Void)"()
  %7 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  store i8* %6, i8** %7
  %8 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  %9 = load i8*, i8** %8
  %10 = call i8* @"*Pointer(Void)@Pointer(T)#+<Int32>:Pointer(Void)"(i8* %9, i32 8388608)
  %11 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 4
  store i8* %10, i8** %11
  %12 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (%"IO::FileDescriptor"* (%Fiber*)* @"~proc2Proc(Fiber, (IO::FileDescriptor | Nil))@/usr/local/Cellar/crystal-lang/0.20.4/src/fiber.cr:29" to i8*), i8** %12
  %13 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %13
  %14 = load %"->", %"->"* %0
  store %"->" %14, %"->"* %fiber_main
  %15 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 1
  %16 = load i8*, i8** %15
  %17 = call i8* @"*Pointer(Void)@Pointer(T)#+<Int32>:Pointer(Void)"(i8* %16, i32 8388608)
  %18 = call i8* @"*Pointer(Void)@Pointer(T)#-<Int32>:Pointer(Void)"(i8* %17, i32 8)
  %19 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 0
  store i32 152, i32* %19
  %20 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %21 = bitcast [1 x i64]* %20 to i8**
  store i8* %18, i8** %21
  %22 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %23 = bitcast [1 x i64]* %22 to i8**
  %24 = load i8*, i8** %23
  %25 = ptrtoint i8* %24 to i64
  %26 = call i64 @"*UInt64@Int#~:UInt64"(i64 15)
  %27 = and i64 %25, %26
  %28 = inttoptr i64 %27 to i8**
  %29 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 0
  store i32 168, i32* %29
  %30 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %31 = bitcast [1 x i64]* %30 to i8***
  store i8** %28, i8*** %31
  %32 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %33 = bitcast [1 x i64]* %32 to i8***
  %34 = load i8**, i8*** %33
  %35 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)#-<Int32>:Pointer(Pointer(Void))"(i8** %34, i32 7)
  %36 = bitcast i8** %35 to i8*
  %37 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 3
  store i8* %36, i8** %37
  %38 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %39 = bitcast [1 x i64]* %38 to i8***
  %40 = load i8**, i8*** %39
  %41 = load %"->", %"->"* %fiber_main
  %42 = call i8* @"*Proc(Fiber, (IO::FileDescriptor | Nil))@Proc(T, R)#pointer:Pointer(Void)"(%"->" %41)
  %43 = call i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]=<Int32, Pointer(Void)>:Pointer(Void)"(i8** %40, i32 0, i8* %42)
  %44 = getelementptr inbounds %"(Pointer(Pointer(Void)) | Pointer(Void))", %"(Pointer(Pointer(Void)) | Pointer(Void))"* %stack_ptr, i32 0, i32 1
  %45 = bitcast [1 x i64]* %44 to i8***
  %46 = load i8**, i8*** %45
  %47 = bitcast %Fiber* %self to i8*
  %48 = call i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]=<Int32, Pointer(Void)>:Pointer(Void)"(i8** %46, i32 -1, i8* %47)
  %49 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  store %Fiber* null, %Fiber** %49
  %50 = load %Fiber*, %Fiber** @"Fiber::last_fiber"
  store %Fiber* %50, %Fiber** %last_fiber
  %51 = icmp ne %Fiber* %50, null
  br i1 %51, label %then, label %else

then:                                             ; preds = %entry
  %52 = load %Fiber*, %Fiber** %last_fiber
  %53 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 6
  store %Fiber* %52, %Fiber** %53
  %54 = load %Fiber*, %Fiber** %last_fiber
  store %Fiber* %self, %Fiber** @"Fiber::last_fiber"
  %55 = call %Fiber* @"*Fiber#next_fiber=<Fiber>:Fiber"(%Fiber* %54, %Fiber* %self)
  br label %exit

else:                                             ; preds = %entry
  store %Fiber* %self, %Fiber** @"Fiber::last_fiber"
  store %Fiber* %self, %Fiber** @"Fiber::first_fiber"
  br label %exit

exit:                                             ; preds = %else, %then
  %56 = phi %Fiber* [ %55, %then ], [ %self, %else ]
  ret %Fiber* %56
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"~proc2Proc(Fiber, (IO::FileDescriptor | Nil))@/usr/local/Cellar/crystal-lang/0.20.4/src/fiber.cr:29"(%Fiber* %f) #0 {
entry:
  %0 = call %"IO::FileDescriptor"* @"*Fiber#run:(IO::FileDescriptor | Nil)"(%Fiber* %f)
  ret %"IO::FileDescriptor"* %0
}

; Function Attrs: uwtable
define internal %"Deque(Fiber)"* @"*Scheduler::enqueue<Fiber>:Deque(Fiber)"(%Fiber* %fiber) #0 {
entry:
  %0 = call %"Deque(Fiber)"** @"~Scheduler::runnables:read"()
  %1 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %0
  %2 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#<<<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %1, %Fiber* %fiber)
  ret %"Deque(Fiber)"* %2
}

; Function Attrs: uwtable
define internal void @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/event/signal_handler.cr:93"(i8*) #0 {
entry:
  %1 = bitcast i8* %0 to %closure*
  %self = getelementptr inbounds %closure, %closure* %1, i32 0, i32 0
  %2 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** %self
  %3 = bitcast i8* %0 to %closure*
  call void @"*Event::SignalHandler#run:NoReturn"(%"Event::SignalHandler"* %2)
  unreachable
}

; Function Attrs: noreturn uwtable
define internal void @"*Event::SignalHandler#run:NoReturn"(%"Event::SignalHandler"* %self) #1 {
alloca:
  %read_pipe = alloca i32*
  %sig = alloca i32
  %i = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 1
  %1 = load i32*, i32** %0
  store i32* %1, i32** %read_pipe
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %body, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %2 = load i32, i32* %i
  %3 = load i32*, i32** %read_pipe
  %4 = call i32 @"*IO::FileDescriptor+@IO#read_bytes<Int32:Class>:Int32"(i32* %3, i32 608)
  store i32 %4, i32* %sig
  %5 = load i32, i32* %sig
  call void @"*Event::SignalHandler#handle_signal<Signal>:Nil"(%"Event::SignalHandler"* %self, i32 %5)
  %6 = load i32, i32* %i
  %7 = add i32 %6, 1
  store i32 %7, i32* %i
  br label %while

exit:                                             ; preds = %while
  unreachable
}

; Function Attrs: uwtable
define internal i32 @"*IO::FileDescriptor+@IO#read_bytes<Int32:Class>:Int32"(i32* %self, i32 %type) #0 {
alloca:
  %format = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1009, i32* %format
  %0 = load i32, i32* %format
  %1 = call i32 @"*Int32@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:Int32"(i32* %self, i32 %0)
  ret i32 %1
}

; Function Attrs: uwtable
define internal i32 @"*Int32@Int::from_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:Int32"(i32* %io, i32 %format) #0 {
entry:
  %0 = call i32 @"*IO::ByteFormat::LittleEndian::decode<Int32:Class, IO::FileDescriptor+>:Int32"(i32 608, i32* %io)
  ret i32 %0
}

; Function Attrs: uwtable
define internal void @"*Event::SignalHandler#handle_signal<Signal>:Nil"(%"Event::SignalHandler"* %self, i32 %sig) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %callback = alloca %"->"
  %ex = alloca i32*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 3
  %1 = load %"Hash(Signal, Proc(Signal, Nil))"*, %"Hash(Signal, Proc(Signal, Nil))"** %0
  %2 = invoke %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#[]?<Signal>:(Proc(Signal, Nil) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %1, i32 %sig)
          to label %invoke_out unwind label %rescue

rescue:                                           ; preds = %invoke_out8, %invoke_out7, %invoke_out6, %invoke_out5, %invoke_out4, %else, %ctx_is_not_null, %ctx_is_null, %entry
  %3 = landingpad %landing_pad
          cleanup
  %4 = extractvalue %landing_pad %3, 0
  %5 = extractvalue %landing_pad %3, 1
  br label %this_rescue

then:                                             ; preds = %invoke_out
  %6 = load %"->", %"->"* %callback
  %7 = extractvalue %"->" %6, 0
  %8 = extractvalue %"->" %6, 1
  %9 = icmp eq i8* %8, null
  br i1 %9, label %ctx_is_null, label %ctx_is_not_null

else:                                             ; preds = %invoke_out
  %10 = invoke %"String::Builder"* @"*String::Builder::new:String::Builder"()
          to label %invoke_out4 unwind label %rescue

invoke_out:                                       ; preds = %entry
  store %"->" %2, %"->"* %callback
  %11 = extractvalue %"->" %2, 0
  %12 = icmp ne i8* %11, null
  br i1 %12, label %then, label %else

ctx_is_null:                                      ; preds = %then
  %13 = bitcast i8* %7 to %Nil (i32)*
  %14 = invoke %Nil %13(i32 %sig)
          to label %invoke_out1 unwind label %rescue

ctx_is_not_null:                                  ; preds = %then
  %15 = bitcast i8* %7 to %Nil (i8*, i32)*
  %16 = invoke %Nil %15(i8* %8, i32 %sig)
          to label %invoke_out2 unwind label %rescue

invoke_out1:                                      ; preds = %ctx_is_null
  br label %exit

exit:                                             ; preds = %invoke_out2, %invoke_out1
  br label %exit3

invoke_out2:                                      ; preds = %ctx_is_not_null
  br label %exit

exit3:                                            ; preds = %exit
  br label %exit10

invoke_out4:                                      ; preds = %else
  %17 = invoke %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %10, %String* bitcast ({ i32, i32, i32, [9 x i8] }* @"'missing '" to %String*))
          to label %invoke_out5 unwind label %rescue

invoke_out5:                                      ; preds = %invoke_out4
  %18 = invoke %"String::Builder"* @"*String::Builder@IO#<<<Signal>:String::Builder"(%"String::Builder"* %17, i32 %sig)
          to label %invoke_out6 unwind label %rescue

invoke_out6:                                      ; preds = %invoke_out5
  %19 = invoke %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %18, %String* bitcast ({ i32, i32, i32, [10 x i8] }* @"' callback'" to %String*))
          to label %invoke_out7 unwind label %rescue

invoke_out7:                                      ; preds = %invoke_out6
  %20 = invoke %String* @"*String::Builder#to_s:String"(%"String::Builder"* %19)
          to label %invoke_out8 unwind label %rescue

invoke_out8:                                      ; preds = %invoke_out7
  invoke void @"*raise<String>:NoReturn"(%String* %20)
          to label %invoke_out9 unwind label %rescue

invoke_out9:                                      ; preds = %invoke_out8
  unreachable

exit10:                                           ; preds = %exit3
  ret void

this_rescue:                                      ; preds = %rescue
  %21 = bitcast i8* %4 to %"struct.LibUnwind::Exception"*
  %22 = call i64 @__crystal_get_exception(%"struct.LibUnwind::Exception"* %21)
  %23 = inttoptr i64 %22 to i32*
  store i32* %23, i32** %ex
  %24 = load i32*, i32** %ex
  %25 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %26 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %25
  %27 = call %"IO::FileDescriptor"* @"*Exception+@Exception#inspect_with_backtrace<IO::FileDescriptor>:IO::FileDescriptor"(i32* %24, %"IO::FileDescriptor"* %26)
  %28 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %29 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %28
  %30 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %31 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %30, %String* bitcast ({ i32, i32, i32, [30 x i8] }* @"'FATAL ERROR: uncaug...'" to %String*))
  %32 = call %"String::Builder"* @"*String::Builder@IO#<<<Signal>:String::Builder"(%"String::Builder"* %31, i32 %sig)
  %33 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %32, %String* bitcast ({ i32, i32, i32, [20 x i8] }* @"' exception, exiting...'" to %String*))
  %34 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %33)
  call void @"*IO::FileDescriptor@IO#puts<String>:Nil"(%"IO::FileDescriptor"* %29, %String* %34)
  %35 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %36 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %35
  %37 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %36)
  call void @_exit(i32 1)
  unreachable
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*String::Builder@IO#<<<Signal>:String::Builder"(%"String::Builder"* %self, i32 %obj) #0 {
entry:
  call void @"*Signal@Enum#to_s<String::Builder>:Nil"(i32 %obj, %"String::Builder"* %self)
  ret %"String::Builder"* %self
}

; Function Attrs: uwtable
define internal void @"*Signal@Enum#to_s<String::Builder>:Nil"(i32 %self, %"String::Builder"* %io) #0 {
entry:
  %0 = call %String* @"*Signal@Enum#to_s:String"(i32 %self)
  %1 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %io, %String* %0)
  ret void
}

; Function Attrs: uwtable
define internal %String* @"*Signal@Enum#to_s:String"(i32 %self) #0 {
alloca:
  %__temp_159 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %self, i32* %__temp_159
  %0 = load i32, i32* %__temp_159
  %1 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 1, i32 %0)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %2 = load i32, i32* %__temp_159
  %3 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 2, i32 %2)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi %String* [ bitcast ({ i32, i32, i32, [4 x i8] }* @"'HUP'" to %String*), %then ], [ %7, %exit3 ]
  ret %String* %4

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  %5 = load i32, i32* %__temp_159
  %6 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 3, i32 %5)
  br i1 %6, label %then4, label %else5

exit3:                                            ; preds = %exit6, %then1
  %7 = phi %String* [ bitcast ({ i32, i32, i32, [4 x i8] }* @"'INT'" to %String*), %then1 ], [ %10, %exit6 ]
  br label %exit

then4:                                            ; preds = %else2
  br label %exit6

else5:                                            ; preds = %else2
  %8 = load i32, i32* %__temp_159
  %9 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 4, i32 %8)
  br i1 %9, label %then7, label %else8

exit6:                                            ; preds = %exit9, %then4
  %10 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'QUIT'" to %String*), %then4 ], [ %13, %exit9 ]
  br label %exit3

then7:                                            ; preds = %else5
  br label %exit9

else8:                                            ; preds = %else5
  %11 = load i32, i32* %__temp_159
  %12 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 5, i32 %11)
  br i1 %12, label %then10, label %else11

exit9:                                            ; preds = %exit12, %then7
  %13 = phi %String* [ bitcast ({ i32, i32, i32, [4 x i8] }* @"'ILL'" to %String*), %then7 ], [ %16, %exit12 ]
  br label %exit6

then10:                                           ; preds = %else8
  br label %exit12

else11:                                           ; preds = %else8
  %14 = load i32, i32* %__temp_159
  %15 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 6, i32 %14)
  br i1 %15, label %then13, label %else14

exit12:                                           ; preds = %exit15, %then10
  %16 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'TRAP'" to %String*), %then10 ], [ %19, %exit15 ]
  br label %exit9

then13:                                           ; preds = %else11
  br label %exit15

else14:                                           ; preds = %else11
  %17 = load i32, i32* %__temp_159
  %18 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 6, i32 %17)
  br i1 %18, label %then16, label %else17

exit15:                                           ; preds = %exit18, %then13
  %19 = phi %String* [ bitcast ({ i32, i32, i32, [4 x i8] }* @"'IOT'" to %String*), %then13 ], [ %22, %exit18 ]
  br label %exit12

then16:                                           ; preds = %else14
  br label %exit18

else17:                                           ; preds = %else14
  %20 = load i32, i32* %__temp_159
  %21 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 8, i32 %20)
  br i1 %21, label %then19, label %else20

exit18:                                           ; preds = %exit21, %then16
  %22 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'ABRT'" to %String*), %then16 ], [ %25, %exit21 ]
  br label %exit15

then19:                                           ; preds = %else17
  br label %exit21

else20:                                           ; preds = %else17
  %23 = load i32, i32* %__temp_159
  %24 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 9, i32 %23)
  br i1 %24, label %then22, label %else23

exit21:                                           ; preds = %exit24, %then19
  %25 = phi %String* [ bitcast ({ i32, i32, i32, [4 x i8] }* @"'FPE'" to %String*), %then19 ], [ %28, %exit24 ]
  br label %exit18

then22:                                           ; preds = %else20
  br label %exit24

else23:                                           ; preds = %else20
  %26 = load i32, i32* %__temp_159
  %27 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 10, i32 %26)
  br i1 %27, label %then25, label %else26

exit24:                                           ; preds = %exit27, %then22
  %28 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'KILL'" to %String*), %then22 ], [ %31, %exit27 ]
  br label %exit21

then25:                                           ; preds = %else23
  br label %exit27

else26:                                           ; preds = %else23
  %29 = load i32, i32* %__temp_159
  %30 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 11, i32 %29)
  br i1 %30, label %then28, label %else29

exit27:                                           ; preds = %exit30, %then25
  %31 = phi %String* [ bitcast ({ i32, i32, i32, [4 x i8] }* @"'BUS'" to %String*), %then25 ], [ %34, %exit30 ]
  br label %exit24

then28:                                           ; preds = %else26
  br label %exit30

else29:                                           ; preds = %else26
  %32 = load i32, i32* %__temp_159
  %33 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 12, i32 %32)
  br i1 %33, label %then31, label %else32

exit30:                                           ; preds = %exit33, %then28
  %34 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'SEGV'" to %String*), %then28 ], [ %37, %exit33 ]
  br label %exit27

then31:                                           ; preds = %else29
  br label %exit33

else32:                                           ; preds = %else29
  %35 = load i32, i32* %__temp_159
  %36 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 13, i32 %35)
  br i1 %36, label %then34, label %else35

exit33:                                           ; preds = %exit36, %then31
  %37 = phi %String* [ bitcast ({ i32, i32, i32, [4 x i8] }* @"'SYS'" to %String*), %then31 ], [ %40, %exit36 ]
  br label %exit30

then34:                                           ; preds = %else32
  br label %exit36

else35:                                           ; preds = %else32
  %38 = load i32, i32* %__temp_159
  %39 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 14, i32 %38)
  br i1 %39, label %then37, label %else38

exit36:                                           ; preds = %exit39, %then34
  %40 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'PIPE'" to %String*), %then34 ], [ %43, %exit39 ]
  br label %exit33

then37:                                           ; preds = %else35
  br label %exit39

else38:                                           ; preds = %else35
  %41 = load i32, i32* %__temp_159
  %42 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 15, i32 %41)
  br i1 %42, label %then40, label %else41

exit39:                                           ; preds = %exit42, %then37
  %43 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'ALRM'" to %String*), %then37 ], [ %46, %exit42 ]
  br label %exit36

then40:                                           ; preds = %else38
  br label %exit42

else41:                                           ; preds = %else38
  %44 = load i32, i32* %__temp_159
  %45 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 16, i32 %44)
  br i1 %45, label %then43, label %else44

exit42:                                           ; preds = %exit45, %then40
  %46 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'TERM'" to %String*), %then40 ], [ %49, %exit45 ]
  br label %exit39

then43:                                           ; preds = %else41
  br label %exit45

else44:                                           ; preds = %else41
  %47 = load i32, i32* %__temp_159
  %48 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 17, i32 %47)
  br i1 %48, label %then46, label %else47

exit45:                                           ; preds = %exit48, %then43
  %49 = phi %String* [ bitcast ({ i32, i32, i32, [4 x i8] }* @"'URG'" to %String*), %then43 ], [ %52, %exit48 ]
  br label %exit42

then46:                                           ; preds = %else44
  br label %exit48

else47:                                           ; preds = %else44
  %50 = load i32, i32* %__temp_159
  %51 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 18, i32 %50)
  br i1 %51, label %then49, label %else50

exit48:                                           ; preds = %exit51, %then46
  %52 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'STOP'" to %String*), %then46 ], [ %55, %exit51 ]
  br label %exit45

then49:                                           ; preds = %else47
  br label %exit51

else50:                                           ; preds = %else47
  %53 = load i32, i32* %__temp_159
  %54 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 19, i32 %53)
  br i1 %54, label %then52, label %else53

exit51:                                           ; preds = %exit54, %then49
  %55 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'TSTP'" to %String*), %then49 ], [ %58, %exit54 ]
  br label %exit48

then52:                                           ; preds = %else50
  br label %exit54

else53:                                           ; preds = %else50
  %56 = load i32, i32* %__temp_159
  %57 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 20, i32 %56)
  br i1 %57, label %then55, label %else56

exit54:                                           ; preds = %exit57, %then52
  %58 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'CONT'" to %String*), %then52 ], [ %61, %exit57 ]
  br label %exit51

then55:                                           ; preds = %else53
  br label %exit57

else56:                                           ; preds = %else53
  %59 = load i32, i32* %__temp_159
  %60 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 21, i32 %59)
  br i1 %60, label %then58, label %else59

exit57:                                           ; preds = %exit60, %then55
  %61 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'CHLD'" to %String*), %then55 ], [ %64, %exit60 ]
  br label %exit54

then58:                                           ; preds = %else56
  br label %exit60

else59:                                           ; preds = %else56
  %62 = load i32, i32* %__temp_159
  %63 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 22, i32 %62)
  br i1 %63, label %then61, label %else62

exit60:                                           ; preds = %exit63, %then58
  %64 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'TTIN'" to %String*), %then58 ], [ %67, %exit63 ]
  br label %exit57

then61:                                           ; preds = %else59
  br label %exit63

else62:                                           ; preds = %else59
  %65 = load i32, i32* %__temp_159
  %66 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 23, i32 %65)
  br i1 %66, label %then64, label %else65

exit63:                                           ; preds = %exit66, %then61
  %67 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'TTOU'" to %String*), %then61 ], [ %70, %exit66 ]
  br label %exit60

then64:                                           ; preds = %else62
  br label %exit66

else65:                                           ; preds = %else62
  %68 = load i32, i32* %__temp_159
  %69 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 24, i32 %68)
  br i1 %69, label %then67, label %else68

exit66:                                           ; preds = %exit69, %then64
  %70 = phi %String* [ bitcast ({ i32, i32, i32, [3 x i8] }* @"'IO'" to %String*), %then64 ], [ %73, %exit69 ]
  br label %exit63

then67:                                           ; preds = %else65
  br label %exit69

else68:                                           ; preds = %else65
  %71 = load i32, i32* %__temp_159
  %72 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 25, i32 %71)
  br i1 %72, label %then70, label %else71

exit69:                                           ; preds = %exit72, %then67
  %73 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'XCPU'" to %String*), %then67 ], [ %76, %exit72 ]
  br label %exit66

then70:                                           ; preds = %else68
  br label %exit72

else71:                                           ; preds = %else68
  %74 = load i32, i32* %__temp_159
  %75 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 26, i32 %74)
  br i1 %75, label %then73, label %else74

exit72:                                           ; preds = %exit75, %then70
  %76 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'XFSZ'" to %String*), %then70 ], [ %79, %exit75 ]
  br label %exit69

then73:                                           ; preds = %else71
  br label %exit75

else74:                                           ; preds = %else71
  %77 = load i32, i32* %__temp_159
  %78 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 30, i32 %77)
  br i1 %78, label %then76, label %else77

exit75:                                           ; preds = %exit78, %then73
  %79 = phi %String* [ bitcast ({ i32, i32, i32, [7 x i8] }* @"'VTALRM'" to %String*), %then73 ], [ %82, %exit78 ]
  br label %exit72

then76:                                           ; preds = %else74
  br label %exit78

else77:                                           ; preds = %else74
  %80 = load i32, i32* %__temp_159
  %81 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 31, i32 %80)
  br i1 %81, label %then79, label %else80

exit78:                                           ; preds = %exit81, %then76
  %82 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'USR1'" to %String*), %then76 ], [ %85, %exit81 ]
  br label %exit75

then79:                                           ; preds = %else77
  br label %exit81

else80:                                           ; preds = %else77
  %83 = load i32, i32* %__temp_159
  %84 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 28, i32 %83)
  br i1 %84, label %then82, label %else83

exit81:                                           ; preds = %exit84, %then79
  %85 = phi %String* [ bitcast ({ i32, i32, i32, [5 x i8] }* @"'USR2'" to %String*), %then79 ], [ %87, %exit84 ]
  br label %exit78

then82:                                           ; preds = %else80
  br label %exit84

else83:                                           ; preds = %else80
  %86 = call %String* @"*Int32@Int#to_s:String"(i32 %self)
  br label %exit84

exit84:                                           ; preds = %else83, %then82
  %87 = phi %String* [ bitcast ({ i32, i32, i32, [6 x i8] }* @"'WINCH'" to %String*), %then82 ], [ %86, %else83 ]
  br label %exit81
}

; Function Attrs: uwtable
define internal %String* @"*Int32@Int#to_s:String"(i32 %self) #0 {
entry:
  %0 = call %String* @"*Int32@Int#to_s<Int32>:String"(i32 %self, i32 10)
  ret %String* %0
}

; Function Attrs: uwtable
define internal %String* @"*Int32@Int#to_s<Int32>:String"(i32 %self, i32 %base) #0 {
alloca:
  %upcase = alloca i1
  %__temp_161 = alloca i1
  %__temp_160 = alloca i1
  %ptr = alloca i8*
  %count = alloca i32
  %base16 = alloca i32
  %upcase17 = alloca i1
  %chars = alloca [65 x i8]
  %ptr_end = alloca i8*
  %ptr18 = alloca i8*
  %num = alloca i32
  %neg = alloca i1
  %digits = alloca i8*
  %count19 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i1 false, i1* %upcase
  %0 = icmp sle i32 2, %base
  store i1 %0, i1* %__temp_161
  br i1 %0, label %then3, label %else4

then:                                             ; preds = %exit5
  br label %exit6

else:                                             ; preds = %exit5
  %1 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %2 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %1, %String* bitcast ({ i32, i32, i32, [14 x i8] }* @"'Invalid base '" to %String*))
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<Int32>:String::Builder"(%"String::Builder"* %2, i32 %base)
  %4 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %3)
  %5 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* %4)
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %5)
  unreachable

then1:                                            ; preds = %exit
  %6 = load i1, i1* %__temp_160
  br label %exit5

else2:                                            ; preds = %exit
  %7 = icmp eq i32 %base, 62
  br label %exit5

then3:                                            ; preds = %entry
  %8 = icmp sle i32 %base, 36
  br label %exit

else4:                                            ; preds = %entry
  %9 = load i1, i1* %__temp_161
  br label %exit

exit:                                             ; preds = %else4, %then3
  %10 = phi i1 [ %8, %then3 ], [ %9, %else4 ]
  store i1 %10, i1* %__temp_160
  br i1 %10, label %then1, label %else2

exit5:                                            ; preds = %else2, %then1
  %11 = phi i1 [ %6, %then1 ], [ %7, %else2 ]
  br i1 %11, label %then, label %else

exit6:                                            ; preds = %then
  %12 = load i1, i1* %upcase
  br i1 %12, label %then9, label %else10

then7:                                            ; preds = %exit11
  %13 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [33 x i8] }* @"'upcase must be fals...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %13)
  unreachable

else8:                                            ; preds = %exit11
  %14 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 0, i32 %self)
  br i1 %14, label %then12, label %else13

then9:                                            ; preds = %exit6
  %15 = icmp eq i32 %base, 62
  br label %exit11

else10:                                           ; preds = %exit6
  %16 = load i1, i1* %upcase
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %17 = phi i1 [ %15, %then9 ], [ %16, %else10 ]
  br i1 %17, label %then7, label %else8

then12:                                           ; preds = %else8
  ret %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'0'" to %String*)

else13:                                           ; preds = %else8
  %18 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 1, i32 %self)
  br i1 %18, label %then14, label %else15

then14:                                           ; preds = %else13
  ret %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"'1'" to %String*)

else15:                                           ; preds = %else13
  %19 = load i1, i1* %upcase
  store i32 %base, i32* %base16
  store i1 %19, i1* %upcase17
  %20 = call i8* @"*StaticArray(UInt8, 65)@StaticArray(T, N)#to_unsafe:Pointer(UInt8)"([65 x i8]* %chars)
  %21 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %20, i32 64)
  store i8* %21, i8** %ptr_end
  %22 = load i8*, i8** %ptr_end
  store i8* %22, i8** %ptr18
  store i32 %self, i32* %num
  %23 = load i32, i32* %num
  %24 = icmp slt i32 %23, 0
  store i1 %24, i1* %neg
  %25 = load i32, i32* %base16
  %26 = icmp eq i32 %25, 62
  br i1 %26, label %then20, label %else21

then20:                                           ; preds = %else15
  %27 = call %String** @"~Int::DIGITS_BASE62:read"()
  %28 = load %String*, %String** %27
  br label %exit22

else21:                                           ; preds = %else15
  %29 = load i1, i1* %upcase17
  br i1 %29, label %then23, label %else24

exit22:                                           ; preds = %exit25, %then20
  %30 = phi %String* [ %28, %then20 ], [ %36, %exit25 ]
  %31 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* %30)
  store i8* %31, i8** %digits
  br label %while

then23:                                           ; preds = %else21
  %32 = call %String** @"~Int::DIGITS_UPCASE:read"()
  %33 = load %String*, %String** %32
  br label %exit25

else24:                                           ; preds = %else21
  %34 = call %String** @"~Int::DIGITS_DOWNCASE:read"()
  %35 = load %String*, %String** %34
  br label %exit25

exit25:                                           ; preds = %else24, %then23
  %36 = phi %String* [ %33, %then23 ], [ %35, %else24 ]
  br label %exit22

while:                                            ; preds = %body, %exit22
  %37 = load i32, i32* %num
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %body, label %exit26

body:                                             ; preds = %while
  %39 = load i8*, i8** %ptr18
  %40 = call i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %39, i32 1)
  store i8* %40, i8** %ptr18
  %41 = load i8*, i8** %ptr18
  %42 = load i8*, i8** %digits
  %43 = load i32, i32* %num
  %44 = load i32, i32* %base16
  %45 = call i32 @"*Int32@Int#remainder<Int32>:Int32"(i32 %43, i32 %44)
  %46 = call i32 @"*Int32@Int#abs:Int32"(i32 %45)
  %47 = call i8 @"*Pointer(UInt8)@Pointer(T)#[]<Int32>:UInt8"(i8* %42, i32 %46)
  store i8 %47, i8* %41
  %48 = load i32, i32* %num
  %49 = load i32, i32* %base16
  %50 = call i32 @"*Int32@Int#tdiv<Int32>:Int32"(i32 %48, i32 %49)
  store i32 %50, i32* %num
  br label %while

exit26:                                           ; preds = %while
  %51 = load i1, i1* %neg
  br i1 %51, label %then27, label %else28

then27:                                           ; preds = %exit26
  %52 = load i8*, i8** %ptr18
  %53 = call i8* @"*Pointer(UInt8)@Pointer(T)#-<Int32>:Pointer(UInt8)"(i8* %52, i32 1)
  store i8* %53, i8** %ptr18
  %54 = load i8*, i8** %ptr18
  store i8 45, i8* %54
  br label %exit29

else28:                                           ; preds = %exit26
  br label %exit29

exit29:                                           ; preds = %else28, %then27
  %55 = load i8*, i8** %ptr_end
  %56 = load i8*, i8** %ptr18
  %57 = ptrtoint i8* %55 to i64
  %58 = ptrtoint i8* %56 to i64
  %59 = sub i64 %57, %58
  %60 = sdiv exact i64 %59, ptrtoint (i8* getelementptr inbounds (i8, i8* null, i32 1) to i64)
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %count19
  %62 = load i8*, i8** %ptr18
  %63 = load i32, i32* %count19
  store i8* %62, i8** %ptr
  store i32 %63, i32* %count
  %64 = load i8*, i8** %ptr
  %65 = load i32, i32* %count
  %66 = load i32, i32* %count
  %67 = call %String* @"*String::new<Pointer(UInt8), Int32, Int32>:String"(i8* %64, i32 %65, i32 %66)
  ret %String* %67
}

; Function Attrs: noreturn
declare void @_exit(i32) #6

; Function Attrs: uwtable
define internal %"->" @"*Event::SignalHandler#add_handler<Signal, Proc(Signal, Nil)>:Proc(Int32, Nil)"(%"Event::SignalHandler"* %self, i32 %signal, %"->" %callback) #0 {
alloca:
  %0 = alloca %"->"
  %1 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 3
  %3 = load %"Hash(Signal, Proc(Signal, Nil))"*, %"Hash(Signal, Proc(Signal, Nil))"** %2
  %4 = call %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#[]=<Signal, Proc(Signal, Nil)>:Proc(Signal, Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %3, i32 %signal, %"->" %callback)
  %5 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32)* @"~procProc(Int32, Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/event/signal_handler.cr:67" to i8*), i8** %5
  %6 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %6
  %7 = load %"->", %"->"* %0
  %8 = call i8* @"~check_proc_is_not_closure"(%"->" %7)
  %9 = bitcast i8* %8 to %Nil (i32)*
  %10 = call %Nil (i32)* @signal(i32 %signal, %Nil (i32)* %9)
  %11 = bitcast %Nil (i32)* %10 to i8*
  %12 = getelementptr inbounds %"->", %"->"* %1, i32 0, i32 0
  store i8* %11, i8** %12
  %13 = getelementptr inbounds %"->", %"->"* %1, i32 0, i32 1
  store i8* null, i8** %13
  %14 = load %"->", %"->"* %1
  ret %"->" %14
}

; Function Attrs: uwtable
define internal %"->" @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#[]=<Signal, Proc(Signal, Nil)>:Proc(Signal, Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key, %"->" %value) #0 {
alloca:
  %index = alloca i32
  %entry1 = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  %last = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = mul i32 5, %3
  %5 = icmp sgt i32 %1, %4
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  call void @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#rehash:Nil"(%"Hash(Signal, Proc(Signal, Nil))"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i32 @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#bucket_index<Signal>:Int32"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %key)
  store i32 %6, i32* %index
  %7 = load i32, i32* %index
  %8 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#insert_in_bucket<Int32, Signal, Proc(Signal, Nil)>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %7, i32 %key, %"->" %value)
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %8, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %9 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %10 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %9, null
  br i1 %10, label %then2, label %else3

then2:                                            ; preds = %exit
  br label %exit4

else3:                                            ; preds = %exit
  ret %"->" %value

exit4:                                            ; preds = %then2
  %11 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 1
  %12 = load i32, i32* %11
  %13 = add i32 %12, 1
  %14 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 1
  store i32 %13, i32* %14
  %15 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 4
  %16 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %15
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %16, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %last
  %17 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %16, null
  br i1 %17, label %then5, label %else6

then5:                                            ; preds = %exit4
  %18 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %last
  %19 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %20 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#fore=<Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %18, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %19)
  %21 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %22 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %last
  %23 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#back=<Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %21, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %22)
  br label %exit7

else6:                                            ; preds = %exit4
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %24 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %25 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %24, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %25
  %26 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 3
  %27 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %26
  %28 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %27, null
  br i1 %28, label %then8, label %else9

then8:                                            ; preds = %exit7
  br label %exit10

else9:                                            ; preds = %exit7
  %29 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %30 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 3
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %29, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %30
  br label %exit10

exit10:                                           ; preds = %else9, %then8
  ret %"->" %value
}

; Function Attrs: uwtable
define internal void @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#rehash:Nil"(%"Hash(Signal, Proc(Signal, Nil))"* %self) #0 {
alloca:
  %new_size = alloca i32
  %entry1 = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  %index = alloca i32
  %i = alloca i32
  %i2 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = call i32 @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#calculate_new_size<Int32>:Int32"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %1)
  store i32 %2, i32* %new_size
  %3 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %4 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %3
  %5 = load i32, i32* %new_size
  %6 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#realloc<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %4, i32 %5)
  %7 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"** %6, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %7
  %8 = load i32, i32* %new_size
  %9 = xor i32 %8, %8
  store i32 %9, i32* %i2
  br label %while

while:                                            ; preds = %body, %entry
  %10 = load i32, i32* %i2
  %11 = icmp slt i32 %10, %8
  br i1 %11, label %body, label %exit

body:                                             ; preds = %while
  %12 = load i32, i32* %i2
  store i32 %12, i32* %i
  %13 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %14 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %13
  %15 = load i32, i32* %i
  call void @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]=<Int32, Nil>:Nil"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %14, i32 %15, %Nil zeroinitializer)
  %16 = load i32, i32* %i2
  %17 = add i32 %16, 1
  store i32 %17, i32* %i2
  br label %while

exit:                                             ; preds = %while
  %18 = load i32, i32* %new_size
  %19 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 2
  store i32 %18, i32* %19
  %20 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 4
  %21 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %20
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %21, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  br label %while3

while3:                                           ; preds = %body4, %exit
  %22 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %23 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %22, null
  br i1 %23, label %body4, label %exit5

body4:                                            ; preds = %while3
  %24 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %25 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %24, i32 0, i32 1
  %26 = load i32, i32* %25
  %27 = call i32 @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#bucket_index<Signal>:Int32"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %26)
  store i32 %27, i32* %index
  %28 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %29 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %30 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %29
  %31 = load i32, i32* %index
  %32 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %30, i32 %31)
  %33 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#next=<(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %28, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %32)
  %34 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %35 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %34
  %36 = load i32, i32* %index
  %37 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %38 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %35, i32 %36, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %37)
  %39 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %40 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %39, i32 0, i32 5
  %41 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %40
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %41, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  br label %while3

exit5:                                            ; preds = %while3
  ret void
}

; Function Attrs: uwtable
define internal i32 @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#calculate_new_size<Int32>:Int32"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %size) #0 {
alloca:
  %new_size = alloca i32
  %hash_size = alloca i32
  %i = alloca i32
  %i1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 8, i32* %new_size
  %0 = call %"Array(Int32)"** @"~Hash::HASH_PRIMES:read"()
  %1 = load %"Array(Int32)"*, %"Array(Int32)"** %0
  store i32 0, i32* %i1
  br label %while

while:                                            ; preds = %else, %entry
  %2 = load i32, i32* %i1
  %3 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %1, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %body, label %exit

body:                                             ; preds = %while
  %6 = load i32, i32* %i1
  store i32 %6, i32* %i
  %7 = load i32, i32* %i
  %8 = call i32 @"*Array(Int32)@Array(T)#unsafe_at<Int32>:Int32"(%"Array(Int32)"* %1, i32 %7)
  store i32 %8, i32* %hash_size
  %9 = load i32, i32* %new_size
  %10 = icmp sgt i32 %9, %size
  br i1 %10, label %then, label %else

exit:                                             ; preds = %while
  call void @"*raise<String>:NoReturn"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Hash table too big'" to %String*))
  unreachable

then:                                             ; preds = %body
  %11 = load i32, i32* %hash_size
  ret i32 %11

else:                                             ; preds = %body
  %12 = load i32, i32* %new_size
  %13 = call i32 @"*Int32@Int#<<<Int32>:Int32"(i32 %12, i32 1)
  store i32 %13, i32* %new_size
  %14 = load i32, i32* %i1
  %15 = add i32 %14, 1
  store i32 %15, i32* %i1
  br label %while
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#realloc<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Hash::Entry(Signal, Proc(Signal, Nil))"** %self to i8*
  %2 = mul i64 %0, ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Hash::Entry(Signal, Proc(Signal, Nil))"**
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"** %5
}

; Function Attrs: uwtable
define internal void @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]=<Int32, Nil>:Nil"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %offset, %Nil %value) #0 {
entry:
  %0 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %offset)
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* null, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %offset, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %value) #0 {
entry:
  %0 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"** @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %self, i32 %offset)
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %value, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %value
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash(Signal, Proc(Signal, Nil))@Hash(K, V)#insert_in_bucket<Int32, Signal, Proc(Signal, Nil)>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash(Signal, Proc(Signal, Nil))"* %self, i32 %index, i32 %key, %"->" %value) #0 {
alloca:
  %entry1 = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %1 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %0
  %2 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %1, i32 %index)
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %2, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %3 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %4 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %3, null
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %while

else:                                             ; preds = %entry
  %5 = getelementptr inbounds %"Hash(Signal, Proc(Signal, Nil))", %"Hash(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 6
  %6 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"**, %"Hash::Entry(Signal, Proc(Signal, Nil))"*** %5
  %7 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)::new<Signal, Proc(Signal, Nil)>:Hash::Entry(Signal, Proc(Signal, Nil))"(i32 573, i32 %key, %"->" %value)
  %8 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Pointer(Hash::Entry(Signal, Proc(Signal, Nil)) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"** %6, i32 %index, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %7)
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %8

while:                                            ; preds = %exit6, %then
  %9 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %10 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %9, null
  br i1 %10, label %body, label %exit

body:                                             ; preds = %while
  %11 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %12 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %11, i32 0, i32 1
  %13 = load i32, i32* %12
  %14 = call i1 @"*Signal@Enum#==<Signal>:Bool"(i32 %13, i32 %key)
  br i1 %14, label %then2, label %else3

exit:                                             ; preds = %while
  br label %exit7

then2:                                            ; preds = %body
  %15 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %16 = call %"->" @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#value=<Proc(Signal, Nil)>:Proc(Signal, Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %15, %"->" %value)
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* null

else3:                                            ; preds = %body
  %17 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %18 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %17, i32 0, i32 3
  %19 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %18
  %20 = icmp ne %"Hash::Entry(Signal, Proc(Signal, Nil))"* %19, null
  br i1 %20, label %then4, label %else5

then4:                                            ; preds = %else3
  %21 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %22 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %21, i32 0, i32 3
  %23 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %22
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %23, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  br label %exit6

else5:                                            ; preds = %else3
  %24 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %entry1
  %25 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)::new<Signal, Proc(Signal, Nil)>:Hash::Entry(Signal, Proc(Signal, Nil))"(i32 573, i32 %key, %"->" %value)
  %26 = call %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#next=<Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %24, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %25)
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %26

exit6:                                            ; preds = %then4
  br label %while

exit7:                                            ; preds = %exit
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* null
}

; Function Attrs: uwtable
define internal %"->" @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#value=<Proc(Signal, Nil)>:Proc(Signal, Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, %"->" %value) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 2
  store %"->" %value, %"->"* %0
  ret %"->" %value
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)::new<Signal, Proc(Signal, Nil)>:Hash::Entry(Signal, Proc(Signal, Nil))"(i32 %self, i32 %key, %"->" %value) #0 {
alloca:
  %_ = alloca %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Hash::Entry(Signal, Proc(Signal, Nil))"* getelementptr (%"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Hash::Entry(Signal, Proc(Signal, Nil))"*
  %2 = bitcast %"Hash::Entry(Signal, Proc(Signal, Nil))"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Hash::Entry(Signal, Proc(Signal, Nil))"* getelementptr (%"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %1, i32 0, i32 0
  store i32 106, i32* %3
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %1, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %_
  %4 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %_
  %5 = call %"->" @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#initialize<Signal, Proc(Signal, Nil)>:Proc(Signal, Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %4, i32 %key, %"->" %value)
  %6 = load %"Hash::Entry(Signal, Proc(Signal, Nil))"*, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %_
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %6
}

; Function Attrs: uwtable
define internal %"->" @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#initialize<Signal, Proc(Signal, Nil)>:Proc(Signal, Nil)"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 %key, %"->" %value) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 1
  store i32 %key, i32* %0
  %1 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 2
  store %"->" %value, %"->"* %1
  ret %"->" %value
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Signal, Proc(Signal, Nil))"* @"*Hash::Entry(Signal, Proc(Signal, Nil))@Hash::Entry(K, V)#next=<Hash::Entry(Signal, Proc(Signal, Nil))>:Hash::Entry(Signal, Proc(Signal, Nil))"(%"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, %"Hash::Entry(Signal, Proc(Signal, Nil))"* %next) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Signal, Proc(Signal, Nil))", %"Hash::Entry(Signal, Proc(Signal, Nil))"* %self, i32 0, i32 3
  store %"Hash::Entry(Signal, Proc(Signal, Nil))"* %next, %"Hash::Entry(Signal, Proc(Signal, Nil))"** %0
  ret %"Hash::Entry(Signal, Proc(Signal, Nil))"* %next
}

; Function Attrs: uwtable
define internal void @"~procProc(Int32, Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/event/signal_handler.cr:67"(i32 %sig) #0 {
entry:
  %0 = load i32*, i32** @"Event::SignalHandler::write_pipe"
  %1 = icmp eq i32* %0, null
  br i1 %1, label %nil, label %not_nil

nil:                                              ; preds = %entry
  br label %exit

not_nil:                                          ; preds = %entry
  %2 = load i32, i32* %0
  br label %exit

exit:                                             ; preds = %not_nil, %nil
  %3 = phi i32 [ 0, %nil ], [ %2, %not_nil ]
  %4 = call i1 @"~match<IO::FileDescriptor+>"(i32 %3)
  br i1 %4, label %current_def, label %next_def

current_def:                                      ; preds = %exit
  br label %exit1

next_def:                                         ; preds = %exit
  %5 = icmp eq i32 0, %3
  br i1 %5, label %current_def2, label %next_def3

exit1:                                            ; preds = %current_def
  %6 = phi i32* [ %0, %current_def ]
  %7 = call %"(Int32 | Nil)" @"*IO::FileDescriptor+@IO#write_bytes<Int32>:(Int32 | Nil)"(i32* %6, i32 %sig)
  ret void

current_def2:                                     ; preds = %next_def
  call void @"*Nil#not_nil!:NoReturn"(%Nil zeroinitializer)
  unreachable

next_def3:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*IO::FileDescriptor+@IO#write_bytes<Int32>:(Int32 | Nil)"(i32* %self, i32 %object) #0 {
alloca:
  %format = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 1009, i32* %format
  %1 = load i32, i32* %format
  %2 = call %"(Int32 | Nil)" @"*Int32@Int#to_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:(Int32 | Nil)"(i32 %object, i32* %self, i32 %1)
  store %"(Int32 | Nil)" %2, %"(Int32 | Nil)"* %0
  %3 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %3
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Int32@Int#to_io<IO::FileDescriptor+, IO::ByteFormat::LittleEndian:Module>:(Int32 | Nil)"(i32 %self, i32* %io, i32 %format) #0 {
alloca:
  %0 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %"(Int32 | Nil)" @"*IO::ByteFormat::LittleEndian::encode<Int32, IO::FileDescriptor+>:(Int32 | Nil)"(i32 %self, i32* %io)
  store %"(Int32 | Nil)" %1, %"(Int32 | Nil)"* %0
  %2 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %2
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*IO::ByteFormat::LittleEndian::encode<Int32, IO::FileDescriptor+>:(Int32 | Nil)"(i32 %int, i32* %io) #0 {
alloca:
  %buffer = alloca [4 x i8]
  %int1 = alloca i32
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %int, i32* %int1
  %2 = bitcast i32* %int1 to [4 x i8]*
  %3 = load [4 x i8], [4 x i8]* %2
  store [4 x i8] %3, [4 x i8]* %buffer
  %4 = call i1 @"*IO::ByteFormat::LittleEndian@Object::==<IO::ByteFormat::LittleEndian:Module>:Bool"(i32 1009)
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %5 = call [4 x i8] @"*StaticArray(UInt8, 4)@StaticArray(T, N)#reverse!:StaticArray(UInt8, 4)"([4 x i8]* %buffer)
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call %"Slice(UInt8)" @"*StaticArray(UInt8, 4)@StaticArray(T, N)#to_slice:Slice(UInt8)"([4 x i8]* %buffer)
  store %"Slice(UInt8)" %6, %"Slice(UInt8)"* %0
  %7 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  %8 = call %"(Int32 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#write<Slice(UInt8)>:(Int32 | Nil)"(i32* %io, %"Slice(UInt8)" %7)
  store %"(Int32 | Nil)" %8, %"(Int32 | Nil)"* %1
  %9 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  ret %"(Int32 | Nil)" %9
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*IO::FileDescriptor+@IO::Buffered#write<Slice(UInt8)>:(Int32 | Nil)"(i32* %self, %"Slice(UInt8)" %slice) #0 {
alloca:
  %count = alloca i32
  %index = alloca %"(Int32 | Nil)"
  %slice1 = alloca %"Slice(UInt8)"
  %0 = alloca %"Slice(UInt8)"
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"Slice(UInt8)"
  %3 = alloca %"(Int32 | Nil)"
  %4 = alloca %"Slice(UInt8)"
  %5 = alloca %"Slice(UInt8)"
  %6 = alloca %"Slice(UInt8)"
  %7 = alloca %"(Int32 | Nil)"
  %8 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"Slice(UInt8)" %slice, %"Slice(UInt8)"* %0
  %9 = load %"Slice(UInt8)", %"Slice(UInt8)"* %0
  store %"Slice(UInt8)" %9, %"Slice(UInt8)"* %slice1
  call void @"*IO::FileDescriptor+@IO#check_open:Nil"(i32* %self)
  %10 = getelementptr inbounds %"Slice(UInt8)", %"Slice(UInt8)"* %slice1, i32 0, i32 0
  %11 = load i32, i32* %10
  store i32 %11, i32* %count
  %12 = bitcast i32* %self to %"IO::FileDescriptor"*
  %13 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %12, i32 0, i32 6
  %14 = load i1, i1* %13
  br i1 %14, label %then, label %else

then:                                             ; preds = %entry
  %15 = load %"Slice(UInt8)", %"Slice(UInt8)"* %slice1
  %16 = call i32 @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %15)
  %17 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 138, i32* %17
  %18 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  %19 = bitcast [1 x i64]* %18 to i32*
  store i32 %16, i32* %19
  %20 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %1
  ret %"(Int32 | Nil)" %20

else:                                             ; preds = %entry
  %21 = bitcast i32* %self to %"IO::FileDescriptor"*
  %22 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %21, i32 0, i32 7
  %23 = load i1, i1* %22
  br i1 %23, label %then2, label %else3

then2:                                            ; preds = %else
  %24 = load i32, i32* %count
  %25 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 0, i32 %24)
  store %"Slice(UInt8)" %25, %"Slice(UInt8)"* %2
  %26 = call %"(Int32 | Nil)" @"*Slice(UInt8)@Indexable(T)#rindex<UInt8>:(Int32 | Nil)"(%"Slice(UInt8)"* %2, i8 10)
  store %"(Int32 | Nil)" %26, %"(Int32 | Nil)"* %3
  %27 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %3
  store %"(Int32 | Nil)" %27, %"(Int32 | Nil)"* %index
  %28 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  %29 = load i32, i32* %28
  %30 = icmp eq i32 %29, 0
  %31 = xor i1 %30, true
  %32 = and i1 true, %31
  br i1 %32, label %then4, label %else5

else3:                                            ; preds = %else
  br label %exit6

then4:                                            ; preds = %then2
  %33 = call i32* @"*IO::FileDescriptor+@IO::Buffered#flush:IO::FileDescriptor+"(i32* %self)
  %34 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %35 = bitcast [1 x i64]* %34 to i32*
  %36 = load i32, i32* %35
  %37 = add i32 %36, 1
  %38 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 0
  store i32 138, i32* %38
  %39 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %40 = bitcast [1 x i64]* %39 to i32*
  store i32 %37, i32* %40
  %41 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %42 = bitcast [1 x i64]* %41 to i32*
  %43 = load i32, i32* %42
  %44 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 0, i32 %43)
  store %"Slice(UInt8)" %44, %"Slice(UInt8)"* %4
  %45 = load %"Slice(UInt8)", %"Slice(UInt8)"* %4
  %46 = call i32 @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %45)
  %47 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %48 = bitcast [1 x i64]* %47 to i32*
  %49 = load i32, i32* %48
  %50 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#+<Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 %49)
  store %"Slice(UInt8)" %50, %"Slice(UInt8)"* %5
  %51 = load %"Slice(UInt8)", %"Slice(UInt8)"* %5
  store %"Slice(UInt8)" %51, %"Slice(UInt8)"* %slice1
  %52 = load i32, i32* %count
  %53 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %index, i32 0, i32 1
  %54 = bitcast [1 x i64]* %53 to i32*
  %55 = load i32, i32* %54
  %56 = sub i32 %52, %55
  store i32 %56, i32* %count
  br label %exit

else5:                                            ; preds = %then2
  br label %exit

exit:                                             ; preds = %else5, %then4
  br label %exit6

exit6:                                            ; preds = %else3, %exit
  %57 = load i32, i32* %count
  %58 = icmp sge i32 %57, 8192
  br i1 %58, label %then7, label %else8

then7:                                            ; preds = %exit6
  %59 = call i32* @"*IO::FileDescriptor+@IO::Buffered#flush:IO::FileDescriptor+"(i32* %self)
  %60 = load i32, i32* %count
  %61 = call %"Slice(UInt8)" @"*Slice(UInt8)@Slice(T)#[]<Int32, Int32>:Slice(UInt8)"(%"Slice(UInt8)"* %slice1, i32 0, i32 %60)
  store %"Slice(UInt8)" %61, %"Slice(UInt8)"* %6
  %62 = load %"Slice(UInt8)", %"Slice(UInt8)"* %6
  %63 = call i32 @"*IO::FileDescriptor+@IO::FileDescriptor#unbuffered_write<Slice(UInt8)>:Int32"(i32* %self, %"Slice(UInt8)" %62)
  %64 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %7, i32 0, i32 0
  store i32 138, i32* %64
  %65 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %7, i32 0, i32 1
  %66 = bitcast [1 x i64]* %65 to i32*
  store i32 %63, i32* %66
  %67 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %7
  ret %"(Int32 | Nil)" %67

else8:                                            ; preds = %exit6
  %68 = load i32, i32* %count
  %69 = bitcast i32* %self to %"IO::FileDescriptor"*
  %70 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %69, i32 0, i32 5
  %71 = load i32, i32* %70
  %72 = sub i32 8192, %71
  %73 = icmp sgt i32 %68, %72
  br i1 %73, label %then9, label %else10

then9:                                            ; preds = %else8
  %74 = call i32* @"*IO::FileDescriptor+@IO::Buffered#flush:IO::FileDescriptor+"(i32* %self)
  br label %exit11

else10:                                           ; preds = %else8
  br label %exit11

exit11:                                           ; preds = %else10, %then9
  %75 = call i8* @"*IO::FileDescriptor+@IO::Buffered#out_buffer:Pointer(UInt8)"(i32* %self)
  %76 = bitcast i32* %self to %"IO::FileDescriptor"*
  %77 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %76, i32 0, i32 5
  %78 = load i32, i32* %77
  %79 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %75, i32 %78)
  %80 = load i32, i32* %count
  %81 = call i8* @"*Slice(UInt8)@Slice(T)#copy_to<Pointer(UInt8), Int32>:Pointer(UInt8)"(%"Slice(UInt8)"* %slice1, i8* %79, i32 %80)
  %82 = bitcast i32* %self to %"IO::FileDescriptor"*
  %83 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %82, i32 0, i32 5
  %84 = load i32, i32* %83
  %85 = load i32, i32* %count
  %86 = add i32 %84, %85
  %87 = bitcast i32* %self to %"IO::FileDescriptor"*
  %88 = getelementptr inbounds %"IO::FileDescriptor", %"IO::FileDescriptor"* %87, i32 0, i32 5
  store i32 %86, i32* %88
  %89 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %8, i32 0, i32 0
  store i32 0, i32* %89
  %90 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %8, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %90
  %91 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %8
  ret %"(Int32 | Nil)" %91
}

; Function Attrs: uwtable
define internal void @"~procProc(Signal, Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/signal.cr:91"(i32 %__temp_38) #0 {
entry:
  %0 = call %"Event::SignalChildHandler"* @"*Event::SignalChildHandler::instance:Event::SignalChildHandler"()
  call void @"*Event::SignalChildHandler#trigger:Nil"(%"Event::SignalChildHandler"* %0)
  ret void
}

; Function Attrs: uwtable
define internal %"Event::SignalChildHandler"* @"*Event::SignalChildHandler::instance:Event::SignalChildHandler"() #0 {
alloca:
  %__temp_39 = alloca %"Event::SignalChildHandler"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = load %"Event::SignalChildHandler"*, %"Event::SignalChildHandler"** @"Event::SignalChildHandler::instance"
  store %"Event::SignalChildHandler"* %0, %"Event::SignalChildHandler"** %__temp_39
  %1 = icmp ne %"Event::SignalChildHandler"* %0, null
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load %"Event::SignalChildHandler"*, %"Event::SignalChildHandler"** %__temp_39
  br label %exit

else:                                             ; preds = %entry
  %3 = call %"->" @"*Signal::setup_default_handlers:(Proc(Int32, Nil) | Nil)"()
  %4 = call %"Event::SignalChildHandler"* @"*Event::SignalChildHandler::new:Event::SignalChildHandler"()
  store %"Event::SignalChildHandler"* %4, %"Event::SignalChildHandler"** @"Event::SignalChildHandler::instance"
  br label %exit

exit:                                             ; preds = %else, %then
  %5 = phi %"Event::SignalChildHandler"* [ %2, %then ], [ %4, %else ]
  ret %"Event::SignalChildHandler"* %5
}

; Function Attrs: uwtable
define internal %"Event::SignalChildHandler"* @"*Event::SignalChildHandler::new:Event::SignalChildHandler"() #0 {
alloca:
  %_ = alloca %"Event::SignalChildHandler"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Event::SignalChildHandler"* getelementptr (%"Event::SignalChildHandler", %"Event::SignalChildHandler"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Event::SignalChildHandler"*
  %2 = bitcast %"Event::SignalChildHandler"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Event::SignalChildHandler"* getelementptr (%"Event::SignalChildHandler", %"Event::SignalChildHandler"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Event::SignalChildHandler", %"Event::SignalChildHandler"* %1, i32 0, i32 0
  store i32 91, i32* %3
  store %"Event::SignalChildHandler"* %1, %"Event::SignalChildHandler"** %_
  %4 = load %"Event::SignalChildHandler"*, %"Event::SignalChildHandler"** %_
  %5 = call %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Event::SignalChildHandler#initialize:Hash(Int32, Channel::Buffered(Process::Status | Nil))"(%"Event::SignalChildHandler"* %4)
  %6 = load %"Event::SignalChildHandler"*, %"Event::SignalChildHandler"** %_
  ret %"Event::SignalChildHandler"* %6
}

; Function Attrs: uwtable
define internal %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Event::SignalChildHandler#initialize:Hash(Int32, Channel::Buffered(Process::Status | Nil))"(%"Event::SignalChildHandler"* %self) #0 {
entry:
  %0 = call %"Hash(Int32, Process::Status)"* @"*Hash(Int32, Process::Status)@Hash(K, V)::new:Hash(Int32, Process::Status)"(i32 473)
  %1 = getelementptr inbounds %"Event::SignalChildHandler", %"Event::SignalChildHandler"* %self, i32 0, i32 1
  store %"Hash(Int32, Process::Status)"* %0, %"Hash(Int32, Process::Status)"** %1
  %2 = call %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)::new:Hash(Int32, Channel::Buffered(Process::Status | Nil))"(i32 474)
  %3 = getelementptr inbounds %"Event::SignalChildHandler", %"Event::SignalChildHandler"* %self, i32 0, i32 2
  store %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %2, %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"** %3
  ret %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %2
}

; Function Attrs: uwtable
define internal %"Hash(Int32, Process::Status)"* @"*Hash(Int32, Process::Status)@Hash(K, V)::new:Hash(Int32, Process::Status)"(i32 %self) #0 {
alloca:
  %_ = alloca %"Hash(Int32, Process::Status)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Hash(Int32, Process::Status)"* getelementptr (%"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Hash(Int32, Process::Status)"*
  %2 = bitcast %"Hash(Int32, Process::Status)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Hash(Int32, Process::Status)"* getelementptr (%"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %1, i32 0, i32 0
  store i32 26, i32* %3
  store %"Hash(Int32, Process::Status)"* %1, %"Hash(Int32, Process::Status)"** %_
  %4 = load %"Hash(Int32, Process::Status)"*, %"Hash(Int32, Process::Status)"** %_
  call void @"*Hash(Int32, Process::Status)@Hash(K, V)#initialize:Nil"(%"Hash(Int32, Process::Status)"* %4)
  %5 = load %"Hash(Int32, Process::Status)"*, %"Hash(Int32, Process::Status)"** %_
  ret %"Hash(Int32, Process::Status)"* %5
}

; Function Attrs: uwtable
define internal void @"*Hash(Int32, Process::Status)@Hash(K, V)#initialize:Nil"(%"Hash(Int32, Process::Status)"* %self) #0 {
alloca:
  %block = alloca %Nil
  %initial_capacity = alloca %"(Int32 | Nil)"
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 0, i32* %1
  %2 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %2
  %3 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %3
  %4 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i32*
  store i32 11, i32* %5
  %6 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to i32*
  %8 = load i32, i32* %7
  %9 = icmp slt i32 %8, 11
  br i1 %9, label %then, label %else

then:                                             ; preds = %entry
  %10 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %10
  %11 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %12 = bitcast [1 x i64]* %11 to i32*
  store i32 11, i32* %12
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %13 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %14 = bitcast [1 x i64]* %13 to i32*
  %15 = load i32, i32* %14
  %16 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %16
  %17 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %18 = bitcast [1 x i64]* %17 to i32*
  store i32 %15, i32* %18
  %19 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %20 = bitcast [1 x i64]* %19 to i32*
  %21 = load i32, i32* %20
  %22 = call %"Hash::Entry(Int32, Process::Status)"** @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)::malloc<Int32>:Pointer(Hash::Entry(Int32, Process::Status) | Nil)"(i32 706, i32 %21)
  %23 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 6
  store %"Hash::Entry(Int32, Process::Status)"** %22, %"Hash::Entry(Int32, Process::Status)"*** %23
  %24 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %25 = bitcast [1 x i64]* %24 to i32*
  %26 = load i32, i32* %25
  %27 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 2
  store i32 %26, i32* %27
  %28 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 1
  store i32 0, i32* %28
  %29 = load %Nil, %Nil* %block
  %30 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 5
  %31 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %31
  %32 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %32
  %33 = load %"->", %"->"* %0
  store %"->" %33, %"->"* %30
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"** @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)::malloc<Int32>:Pointer(Hash::Entry(Int32, Process::Status) | Nil)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Hash::Entry(Int32, Process::Status)"**
  ret %"Hash::Entry(Int32, Process::Status)"** %6
}

; Function Attrs: uwtable
define internal %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)::new:Hash(Int32, Channel::Buffered(Process::Status | Nil))"(i32 %self) #0 {
alloca:
  %_ = alloca %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* getelementptr (%"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"*
  %2 = bitcast %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* getelementptr (%"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %1, i32 0, i32 0
  store i32 27, i32* %3
  store %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %1, %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"** %_
  %4 = load %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"** %_
  call void @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#initialize:Nil"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %4)
  %5 = load %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"** %_
  ret %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %5
}

; Function Attrs: uwtable
define internal void @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#initialize:Nil"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self) #0 {
alloca:
  %block = alloca %Nil
  %initial_capacity = alloca %"(Int32 | Nil)"
  %0 = alloca %"->"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 0, i32* %1
  %2 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %2
  %3 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %3
  %4 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i32*
  store i32 11, i32* %5
  %6 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %7 = bitcast [1 x i64]* %6 to i32*
  %8 = load i32, i32* %7
  %9 = icmp slt i32 %8, 11
  br i1 %9, label %then, label %else

then:                                             ; preds = %entry
  %10 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %10
  %11 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %12 = bitcast [1 x i64]* %11 to i32*
  store i32 11, i32* %12
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %13 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %14 = bitcast [1 x i64]* %13 to i32*
  %15 = load i32, i32* %14
  %16 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 0
  store i32 138, i32* %16
  %17 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %18 = bitcast [1 x i64]* %17 to i32*
  store i32 %15, i32* %18
  %19 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %20 = bitcast [1 x i64]* %19 to i32*
  %21 = load i32, i32* %20
  %22 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)::malloc<Int32>:Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(i32 707, i32 %21)
  %23 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 6
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %22, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*** %23
  %24 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %initial_capacity, i32 0, i32 1
  %25 = bitcast [1 x i64]* %24 to i32*
  %26 = load i32, i32* %25
  %27 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 2
  store i32 %26, i32* %27
  %28 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 1
  store i32 0, i32* %28
  %29 = load %Nil, %Nil* %block
  %30 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 5
  %31 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* null, i8** %31
  %32 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %32
  %33 = load %"->", %"->"* %0
  store %"->" %33, %"->"* %30
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)::malloc<Int32>:Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"**
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %6
}

; Function Attrs: uwtable
define internal void @"*Event::SignalChildHandler#trigger:Nil"(%"Event::SignalChildHandler"* %self) #0 {
alloca:
  %exit_code = alloca i32
  %pid = alloca i32
  %status = alloca %"Process::Status"*
  %i = alloca i32
  %0 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %else2, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %1 = load i32, i32* %i
  %2 = call i32 @waitpid(i32 -1, i32* %0, i32 1)
  %3 = load i32, i32* %0
  store i32 %3, i32* %exit_code
  store i32 %2, i32* %pid
  %4 = load i32, i32* %pid
  %5 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 0, i32 %4)
  br i1 %5, label %then, label %else

exit:                                             ; preds = %while
  unreachable

then:                                             ; preds = %body
  ret void

else:                                             ; preds = %body
  %6 = load i32, i32* %pid
  %7 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 -1, i32 %6)
  br i1 %7, label %then1, label %else2

then1:                                            ; preds = %else
  %8 = call i32 @"*Errno::value:Int32"()
  %9 = icmp eq i32 %8, 10
  br i1 %9, label %then3, label %else4

else2:                                            ; preds = %else
  %10 = load i32, i32* %exit_code
  %11 = call %"Process::Status"* @"*Process::Status::new<Int32>:Process::Status"(i32 %10)
  store %"Process::Status"* %11, %"Process::Status"** %status
  %12 = load i32, i32* %pid
  %13 = load %"Process::Status"*, %"Process::Status"** %status
  %14 = call i32* @"*Event::SignalChildHandler#send_pending<Int32, Process::Status>:(Channel::Buffered(Process::Status | Nil) | Process::Status | Nil)"(%"Event::SignalChildHandler"* %self, i32 %12, %"Process::Status"* %13)
  %15 = load i32, i32* %i
  %16 = add i32 %15, 1
  store i32 %16, i32* %i
  br label %while

then3:                                            ; preds = %then1
  br label %exit5

else4:                                            ; preds = %then1
  %17 = call %Errno* @"*Errno::new<String>:Errno"(%String* bitcast ({ i32, i32, i32, [8 x i8] }* @"'waitpid'" to %String*))
  call void @"*raise<Errno>:NoReturn"(%Errno* %17)
  unreachable

exit5:                                            ; preds = %then3
  ret void
}

declare i32 @waitpid(i32, i32*, i32)

; Function Attrs: uwtable
define internal %"Process::Status"* @"*Process::Status::new<Int32>:Process::Status"(i32 %exit_status) #0 {
alloca:
  %_ = alloca %"Process::Status"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 trunc (i64 mul nuw (i64 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i64), i64 2) to i32))
  %1 = bitcast i8* %0 to %"Process::Status"*
  %2 = bitcast %"Process::Status"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 trunc (i64 mul nuw (i64 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i64), i64 2) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Process::Status", %"Process::Status"* %1, i32 0, i32 0
  store i32 124, i32* %3
  store %"Process::Status"* %1, %"Process::Status"** %_
  %4 = load %"Process::Status"*, %"Process::Status"** %_
  %5 = call i32 @"*Process::Status#initialize<Int32>:Int32"(%"Process::Status"* %4, i32 %exit_status)
  %6 = load %"Process::Status"*, %"Process::Status"** %_
  ret %"Process::Status"* %6
}

; Function Attrs: uwtable
define internal i32 @"*Process::Status#initialize<Int32>:Int32"(%"Process::Status"* %self, i32 %exit_status) #0 {
entry:
  %0 = getelementptr inbounds %"Process::Status", %"Process::Status"* %self, i32 0, i32 1
  store i32 %exit_status, i32* %0
  ret i32 %exit_status
}

; Function Attrs: uwtable
define internal i32* @"*Event::SignalChildHandler#send_pending<Int32, Process::Status>:(Channel::Buffered(Process::Status | Nil) | Process::Status | Nil)"(%"Event::SignalChildHandler"* %self, i32 %pid, %"Process::Status"* %status) #0 {
alloca:
  %chan = alloca %"Channel::Buffered(Process::Status | Nil)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Event::SignalChildHandler", %"Event::SignalChildHandler"* %self, i32 0, i32 2
  %1 = load %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"** %0
  %2 = call %"Channel::Buffered(Process::Status | Nil)"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#[]?<Int32>:(Channel::Buffered(Process::Status | Nil) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %1, i32 %pid)
  store %"Channel::Buffered(Process::Status | Nil)"* %2, %"Channel::Buffered(Process::Status | Nil)"** %chan
  %3 = icmp ne %"Channel::Buffered(Process::Status | Nil)"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load %"Channel::Buffered(Process::Status | Nil)"*, %"Channel::Buffered(Process::Status | Nil)"** %chan
  %5 = call %"Channel::Buffered(Process::Status | Nil)"* @"*Channel::Buffered(Process::Status | Nil)@Channel::Buffered(T)#send<Process::Status>:Channel::Buffered(Process::Status | Nil)"(%"Channel::Buffered(Process::Status | Nil)"* %4, %"Process::Status"* %status)
  %6 = getelementptr inbounds %"Event::SignalChildHandler", %"Event::SignalChildHandler"* %self, i32 0, i32 2
  %7 = load %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"** %6
  %8 = call %"Channel::Buffered(Process::Status | Nil)"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#delete<Int32>:(Channel::Buffered(Process::Status | Nil) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %7, i32 %pid)
  %9 = bitcast %"Channel::Buffered(Process::Status | Nil)"* %8 to i32*
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Event::SignalChildHandler", %"Event::SignalChildHandler"* %self, i32 0, i32 1
  %11 = load %"Hash(Int32, Process::Status)"*, %"Hash(Int32, Process::Status)"** %10
  %12 = call %"Process::Status"* @"*Hash(Int32, Process::Status)@Hash(K, V)#[]=<Int32, Process::Status>:Process::Status"(%"Hash(Int32, Process::Status)"* %11, i32 %pid, %"Process::Status"* %status)
  %13 = bitcast %"Process::Status"* %12 to i32*
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi i32* [ %9, %then ], [ %13, %else ]
  ret i32* %14
}

; Function Attrs: uwtable
define internal %"Channel::Buffered(Process::Status | Nil)"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#[]?<Int32>:(Channel::Buffered(Process::Status | Nil) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %key) #0 {
entry:
  %0 = call %"Channel::Buffered(Process::Status | Nil)"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#fetch<Int32, Nil>:(Channel::Buffered(Process::Status | Nil) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %key, %Nil zeroinitializer)
  ret %"Channel::Buffered(Process::Status | Nil)"* %0
}

; Function Attrs: uwtable
define internal %"Channel::Buffered(Process::Status | Nil)"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#fetch<Int32, Nil>:(Channel::Buffered(Process::Status | Nil) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %key, %Nil %default) #0 {
alloca:
  %key1 = alloca i32
  %entry2 = alloca %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %key, i32* %key1
  %0 = load i32, i32* %key1
  %1 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#find_entry<Int32>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %0)
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %1, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  %2 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  %3 = icmp ne %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  %5 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %4, i32 0, i32 2
  %6 = load %"Channel::Buffered(Process::Status | Nil)"*, %"Channel::Buffered(Process::Status | Nil)"** %5
  br label %exit

else:                                             ; preds = %entry
  %7 = load i32, i32* %key1
  br label %exit

exit:                                             ; preds = %else, %then
  %8 = phi %"Channel::Buffered(Process::Status | Nil)"* [ %6, %then ], [ null, %else ]
  ret %"Channel::Buffered(Process::Status | Nil)"* %8
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#find_entry<Int32>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %key) #0 {
alloca:
  %index = alloca i32
  %entry1 = alloca %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#bucket_index<Int32>:Int32"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %key)
  store i32 %0, i32* %index
  %1 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 6
  %2 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"**, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*** %1
  %3 = load i32, i32* %index
  %4 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %2, i32 %3)
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %4, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %5 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %6 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#find_entry_in_bucket<(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil), Int32>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %5, i32 %key)
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %6
}

; Function Attrs: uwtable
define internal i32 @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#bucket_index<Int32>:Int32"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %key) #0 {
entry:
  %0 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = call i32 @"*UInt32@Int#remainder<Int32>:UInt32"(i32 %key, i32 %1)
  ret i32 %2
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %self, i32 %offset) #0 {
entry:
  %0 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %self, i32 %offset)
  %1 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %0
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %1
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %self, i64 %0
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %1
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#find_entry_in_bucket<(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil), Int32>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %entry, i32 %key) #0 {
alloca:
  %entry2 = alloca %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*
  br label %entry1

entry1:                                           ; preds = %alloca
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %entry, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  br label %while

while:                                            ; preds = %else, %entry1
  %0 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  %1 = icmp ne %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %0, null
  br i1 %1, label %body, label %exit

body:                                             ; preds = %while
  %2 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  %3 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %2, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = icmp eq i32 %4, %key
  br i1 %5, label %then, label %else

exit:                                             ; preds = %while
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* null

then:                                             ; preds = %body
  %6 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %6

else:                                             ; preds = %body
  %7 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  %8 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %7, i32 0, i32 3
  %9 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %8
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %9, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry2
  br label %while
}

; Function Attrs: uwtable
define internal %"Channel::Buffered(Process::Status | Nil)"* @"*Channel::Buffered(Process::Status | Nil)@Channel::Buffered(T)#send<Process::Status>:Channel::Buffered(Process::Status | Nil)"(%"Channel::Buffered(Process::Status | Nil)"* %self, %"Process::Status"* %value) #0 {
entry:
  br label %while

while:                                            ; preds = %body, %entry
  %0 = call i1 @"*Channel::Buffered(Process::Status | Nil)@Channel::Buffered(T)#full?:Bool"(%"Channel::Buffered(Process::Status | Nil)"* %self)
  br i1 %0, label %body, label %exit

body:                                             ; preds = %while
  call void @"*Channel::Buffered(Process::Status | Nil)@Channel(T)#raise_if_closed:Nil"(%"Channel::Buffered(Process::Status | Nil)"* %self)
  %1 = getelementptr inbounds %"Channel::Buffered(Process::Status | Nil)", %"Channel::Buffered(Process::Status | Nil)"* %self, i32 0, i32 2
  %2 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %1
  %3 = call %Fiber* @"*Fiber::current:Fiber"()
  %4 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#<<<Fiber>:Deque(Fiber)"(%"Deque(Fiber)"* %2, %Fiber* %3)
  call void @"*Scheduler::reschedule:Nil"()
  br label %while

exit:                                             ; preds = %while
  call void @"*Channel::Buffered(Process::Status | Nil)@Channel(T)#raise_if_closed:Nil"(%"Channel::Buffered(Process::Status | Nil)"* %self)
  %5 = getelementptr inbounds %"Channel::Buffered(Process::Status | Nil)", %"Channel::Buffered(Process::Status | Nil)"* %self, i32 0, i32 5
  %6 = load %"Deque(Process::Status | Nil)"*, %"Deque(Process::Status | Nil)"** %5
  %7 = call %"Deque(Process::Status | Nil)"* @"*Deque(Process::Status | Nil)@Deque(T)#<<<Process::Status>:Deque(Process::Status | Nil)"(%"Deque(Process::Status | Nil)"* %6, %"Process::Status"* %value)
  %8 = getelementptr inbounds %"Channel::Buffered(Process::Status | Nil)", %"Channel::Buffered(Process::Status | Nil)"* %self, i32 0, i32 3
  %9 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %8
  %10 = call %"Deque(Fiber)"* @"*Scheduler::enqueue<Deque(Fiber)>:Deque(Fiber)"(%"Deque(Fiber)"* %9)
  %11 = getelementptr inbounds %"Channel::Buffered(Process::Status | Nil)", %"Channel::Buffered(Process::Status | Nil)"* %self, i32 0, i32 3
  %12 = load %"Deque(Fiber)"*, %"Deque(Fiber)"** %11
  %13 = call %"Deque(Fiber)"* @"*Deque(Fiber)@Deque(T)#clear:Deque(Fiber)"(%"Deque(Fiber)"* %12)
  ret %"Channel::Buffered(Process::Status | Nil)"* %self
}

; Function Attrs: uwtable
define internal i1 @"*Channel::Buffered(Process::Status | Nil)@Channel::Buffered(T)#full?:Bool"(%"Channel::Buffered(Process::Status | Nil)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Channel::Buffered(Process::Status | Nil)", %"Channel::Buffered(Process::Status | Nil)"* %self, i32 0, i32 5
  %1 = load %"Deque(Process::Status | Nil)"*, %"Deque(Process::Status | Nil)"** %0
  %2 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %1, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = getelementptr inbounds %"Channel::Buffered(Process::Status | Nil)", %"Channel::Buffered(Process::Status | Nil)"* %self, i32 0, i32 4
  %5 = load i32, i32* %4
  %6 = icmp sge i32 %3, %5
  ret i1 %6
}

; Function Attrs: uwtable
define internal void @"*Channel::Buffered(Process::Status | Nil)@Channel(T)#raise_if_closed:Nil"(%"Channel::Buffered(Process::Status | Nil)"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Channel::Buffered(Process::Status | Nil)", %"Channel::Buffered(Process::Status | Nil)"* %self, i32 0, i32 1
  %1 = load i1, i1* %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %"Channel::ClosedError"* @"*Channel::ClosedError::new:Channel::ClosedError"()
  call void @"*raise<Channel::ClosedError>:NoReturn"(%"Channel::ClosedError"* %2)
  unreachable

else:                                             ; preds = %entry
  ret void
}

; Function Attrs: uwtable
define internal %"Channel::ClosedError"* @"*Channel::ClosedError::new:Channel::ClosedError"() #0 {
alloca:
  %_ = alloca %"Channel::ClosedError"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Channel::ClosedError"* getelementptr (%"Channel::ClosedError", %"Channel::ClosedError"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Channel::ClosedError"*
  %2 = bitcast %"Channel::ClosedError"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Channel::ClosedError"* getelementptr (%"Channel::ClosedError", %"Channel::ClosedError"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Channel::ClosedError", %"Channel::ClosedError"* %1, i32 0, i32 0
  store i32 44, i32* %3
  store %"Channel::ClosedError"* %1, %"Channel::ClosedError"** %_
  %4 = load %"Channel::ClosedError"*, %"Channel::ClosedError"** %_
  call void @"*Channel::ClosedError#initialize:Nil"(%"Channel::ClosedError"* %4)
  %5 = load %"Channel::ClosedError"*, %"Channel::ClosedError"** %_
  ret %"Channel::ClosedError"* %5
}

; Function Attrs: uwtable
define internal void @"*Channel::ClosedError#initialize:Nil"(%"Channel::ClosedError"* %self) #0 {
alloca:
  %msg = alloca %String*
  br label %entry

entry:                                            ; preds = %alloca
  store %String* bitcast ({ i32, i32, i32, [18 x i8] }* @"'Channel is closed'" to %String*), %String** %msg
  %0 = load %String*, %String** %msg
  call void @"*Channel::ClosedError#initialize<String>:Nil"(%"Channel::ClosedError"* %self, %String* %0)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Channel::ClosedError#initialize<String>:Nil"(%"Channel::ClosedError"* %self, %String* %msg) #0 {
entry:
  call void @"*Channel::ClosedError@Exception#initialize<String>:Nil"(%"Channel::ClosedError"* %self, %String* %msg)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Channel::ClosedError@Exception#initialize<String>:Nil"(%"Channel::ClosedError"* %self, %String* %message) #0 {
alloca:
  %cause = alloca %Nil
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Channel::ClosedError", %"Channel::ClosedError"* %self, i32 0, i32 1
  store %String* %message, %String** %0
  %1 = load %Nil, %Nil* %cause
  %2 = getelementptr inbounds %"Channel::ClosedError", %"Channel::ClosedError"* %self, i32 0, i32 2
  store i32* null, i32** %2
  ret void
}

; Function Attrs: noreturn uwtable
define internal void @"*raise<Channel::ClosedError>:NoReturn"(%"Channel::ClosedError"* %ex) #1 {
alloca:
  %unwind_ex = alloca %"struct.LibUnwind::Exception"*
  %0 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  %1 = call %CallStack.1 @"*CallStack::new:CallStack"()
  store %CallStack.1 %1, %CallStack.1* %0
  %2 = load %CallStack.1, %CallStack.1* %0
  %3 = call %CallStack.1 @"*Channel::ClosedError@Exception#callstack=<CallStack>:CallStack"(%"Channel::ClosedError"* %ex, %CallStack.1 %2)
  %4 = call %"struct.LibUnwind::Exception"* @"*Pointer(LibUnwind::Exception)@Pointer(T)::malloc:Pointer(LibUnwind::Exception)"(i32 626)
  store %"struct.LibUnwind::Exception"* %4, %"struct.LibUnwind::Exception"** %unwind_ex
  %5 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %6 = call i64 @"*UInt64@Number::zero:UInt64"()
  %7 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %5, i32 0, i32 0
  store i64 %6, i64* %7
  %8 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %9 = call i64 @"*UInt64@Number::zero:UInt64"()
  %10 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %8, i32 0, i32 1
  store i64 %9, i64* %10
  %11 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %12 = ptrtoint %"Channel::ClosedError"* %ex to i64
  %13 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %11, i32 0, i32 4
  store i64 %12, i64* %13
  %14 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  %15 = getelementptr inbounds %"struct.LibUnwind::Exception", %"struct.LibUnwind::Exception"* %14, i32 0, i32 5
  store i32 44, i32* %15
  %16 = load %"struct.LibUnwind::Exception"*, %"struct.LibUnwind::Exception"** %unwind_ex
  call void @__crystal_raise(%"struct.LibUnwind::Exception"* %16)
  unreachable
}

; Function Attrs: uwtable
define internal %CallStack.1 @"*Channel::ClosedError@Exception#callstack=<CallStack>:CallStack"(%"Channel::ClosedError"* %self, %CallStack.1 %callstack) #0 {
alloca:
  %callstack1 = alloca %CallStack.1
  br label %entry

entry:                                            ; preds = %alloca
  store %CallStack.1 %callstack, %CallStack.1* %callstack1
  %0 = getelementptr inbounds %"Channel::ClosedError", %"Channel::ClosedError"* %self, i32 0, i32 3
  %1 = load %CallStack.1, %CallStack.1* %callstack1
  %2 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 0
  store i32 308, i32* %2
  %3 = getelementptr inbounds %"(CallStack | Nil)", %"(CallStack | Nil)"* %0, i32 0, i32 1
  %4 = bitcast [2 x i64]* %3 to %CallStack.1*
  store %CallStack.1 %1, %CallStack.1* %4
  %5 = load %CallStack.1, %CallStack.1* %callstack1
  ret %CallStack.1 %5
}

; Function Attrs: uwtable
define internal %"Deque(Process::Status | Nil)"* @"*Deque(Process::Status | Nil)@Deque(T)#<<<Process::Status>:Deque(Process::Status | Nil)"(%"Deque(Process::Status | Nil)"* %self, %"Process::Status"* %value) #0 {
entry:
  %0 = call %"Deque(Process::Status | Nil)"* @"*Deque(Process::Status | Nil)@Deque(T)#push<Process::Status>:Deque(Process::Status | Nil)"(%"Deque(Process::Status | Nil)"* %self, %"Process::Status"* %value)
  ret %"Deque(Process::Status | Nil)"* %0
}

; Function Attrs: uwtable
define internal %"Deque(Process::Status | Nil)"* @"*Deque(Process::Status | Nil)@Deque(T)#push<Process::Status>:Deque(Process::Status | Nil)"(%"Deque(Process::Status | Nil)"* %self, %"Process::Status"* %value) #0 {
alloca:
  %index = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  %3 = load i32, i32* %2
  %4 = icmp sge i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %"(Int32 | Nil)" @"*Deque(Process::Status | Nil)@Deque(T)#increase_capacity:(Int32 | Nil)"(%"Deque(Process::Status | Nil)"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 2
  %9 = load i32, i32* %8
  %10 = add i32 %7, %9
  store i32 %10, i32* %index
  %11 = load i32, i32* %index
  %12 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  %13 = load i32, i32* %12
  %14 = icmp sge i32 %11, %13
  br i1 %14, label %then1, label %else2

then1:                                            ; preds = %exit
  %15 = load i32, i32* %index
  %16 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  %17 = load i32, i32* %16
  %18 = sub i32 %15, %17
  store i32 %18, i32* %index
  br label %exit3

else2:                                            ; preds = %exit
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %19 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %20 = load %"Process::Status"**, %"Process::Status"*** %19
  %21 = load i32, i32* %index
  %22 = call %"Process::Status"* @"*Pointer(Process::Status | Nil)@Pointer(T)#[]=<Int32, Process::Status>:Process::Status"(%"Process::Status"** %20, i32 %21, %"Process::Status"* %value)
  %23 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 2
  %24 = load i32, i32* %23
  %25 = add i32 %24, 1
  %26 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 2
  store i32 %25, i32* %26
  ret %"Deque(Process::Status | Nil)"* %self
}

; Function Attrs: uwtable
define internal %"(Int32 | Nil)" @"*Deque(Process::Status | Nil)@Deque(T)#increase_capacity:(Int32 | Nil)"(%"Deque(Process::Status | Nil)"* %self) #0 {
alloca:
  %old_capacity = alloca i32
  %finish = alloca i32
  %to_move = alloca i32
  %new_start = alloca i32
  %0 = alloca %"(Int32 | Nil)"
  %1 = alloca %"(Int32 | Nil)"
  %2 = alloca %"(Int32 | Nil)"
  %3 = alloca %"(Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  %4 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %5 = load %"Process::Status"**, %"Process::Status"*** %4
  %6 = icmp ne %"Process::Status"** %5, null
  br i1 %6, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %7 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  store i32 4, i32* %7
  %8 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  %9 = load i32, i32* %8
  %10 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)::malloc<Int32>:Pointer(Process::Status | Nil)"(i32 711, i32 %9)
  %11 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  store %"Process::Status"** %10, %"Process::Status"*** %11
  %12 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 0
  store i32 0, i32* %12
  %13 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %0, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %13
  %14 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %0
  ret %"(Int32 | Nil)" %14

exit:                                             ; preds = %then
  %15 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  %16 = load i32, i32* %15
  store i32 %16, i32* %old_capacity
  %17 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  %18 = load i32, i32* %17
  %19 = mul i32 %18, 2
  %20 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  store i32 %19, i32* %20
  %21 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %22 = load %"Process::Status"**, %"Process::Status"*** %21
  %23 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  %24 = load i32, i32* %23
  %25 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#realloc<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %22, i32 %24)
  %26 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  store %"Process::Status"** %25, %"Process::Status"*** %26
  %27 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 1
  %28 = load i32, i32* %27
  %29 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 2
  %30 = load i32, i32* %29
  %31 = add i32 %28, %30
  store i32 %31, i32* %finish
  %32 = load i32, i32* %finish
  %33 = load i32, i32* %old_capacity
  %34 = icmp sgt i32 %32, %33
  br i1 %34, label %then1, label %else2

then1:                                            ; preds = %exit
  %35 = load i32, i32* %finish
  %36 = load i32, i32* %old_capacity
  %37 = sub i32 %35, %36
  store i32 %37, i32* %finish
  %38 = load i32, i32* %old_capacity
  %39 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 1
  %40 = load i32, i32* %39
  %41 = sub i32 %38, %40
  %42 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 1
  %43 = load i32, i32* %42
  %44 = icmp sge i32 %41, %43
  br i1 %44, label %then3, label %else4

else2:                                            ; preds = %exit
  %45 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %3, i32 0, i32 0
  store i32 0, i32* %45
  %46 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %3, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %46
  br label %exit6

then3:                                            ; preds = %then1
  %47 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %48 = load %"Process::Status"**, %"Process::Status"*** %47
  %49 = load i32, i32* %old_capacity
  %50 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#+<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %48, i32 %49)
  %51 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %52 = load %"Process::Status"**, %"Process::Status"*** %51
  %53 = load i32, i32* %finish
  %54 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#copy_from<Pointer(Process::Status | Nil), Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %50, %"Process::Status"** %52, i32 %53)
  %55 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %56 = load %"Process::Status"**, %"Process::Status"*** %55
  %57 = load i32, i32* %finish
  call void @"*Pointer(Process::Status | Nil)@Pointer(T)#clear<Int32>:Nil"(%"Process::Status"** %56, i32 %57)
  %58 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 0
  store i32 0, i32* %58
  %59 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %1, i32 0, i32 1
  store [1 x i64] zeroinitializer, [1 x i64]* %59
  br label %exit5

else4:                                            ; preds = %then1
  %60 = load i32, i32* %old_capacity
  %61 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 1
  %62 = load i32, i32* %61
  %63 = sub i32 %60, %62
  store i32 %63, i32* %to_move
  %64 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 3
  %65 = load i32, i32* %64
  %66 = load i32, i32* %to_move
  %67 = sub i32 %65, %66
  store i32 %67, i32* %new_start
  %68 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %69 = load %"Process::Status"**, %"Process::Status"*** %68
  %70 = load i32, i32* %new_start
  %71 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#+<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %69, i32 %70)
  %72 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %73 = load %"Process::Status"**, %"Process::Status"*** %72
  %74 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 1
  %75 = load i32, i32* %74
  %76 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#+<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %73, i32 %75)
  %77 = load i32, i32* %to_move
  %78 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#copy_from<Pointer(Process::Status | Nil), Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %71, %"Process::Status"** %76, i32 %77)
  %79 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 4
  %80 = load %"Process::Status"**, %"Process::Status"*** %79
  %81 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 1
  %82 = load i32, i32* %81
  %83 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#+<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %80, i32 %82)
  %84 = load i32, i32* %to_move
  call void @"*Pointer(Process::Status | Nil)@Pointer(T)#clear<Int32>:Nil"(%"Process::Status"** %83, i32 %84)
  %85 = load i32, i32* %new_start
  %86 = getelementptr inbounds %"Deque(Process::Status | Nil)", %"Deque(Process::Status | Nil)"* %self, i32 0, i32 1
  store i32 %85, i32* %86
  %87 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 0
  store i32 138, i32* %87
  %88 = getelementptr inbounds %"(Int32 | Nil)", %"(Int32 | Nil)"* %2, i32 0, i32 1
  %89 = bitcast [1 x i64]* %88 to i32*
  store i32 %85, i32* %89
  br label %exit5

exit5:                                            ; preds = %else4, %then3
  %90 = phi %"(Int32 | Nil)"* [ %1, %then3 ], [ %2, %else4 ]
  br label %exit6

exit6:                                            ; preds = %else2, %exit5
  %91 = phi %"(Int32 | Nil)"* [ %90, %exit5 ], [ %3, %else2 ]
  %92 = load %"(Int32 | Nil)", %"(Int32 | Nil)"* %91
  ret %"(Int32 | Nil)" %92
}

; Function Attrs: uwtable
define internal %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)::malloc<Int32>:Pointer(Process::Status | Nil)"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"Process::Status"**
  ret %"Process::Status"** %6
}

; Function Attrs: uwtable
define internal %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#realloc<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Process::Status"** %self to i8*
  %2 = mul i64 %0, ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Process::Status"**
  ret %"Process::Status"** %5
}

; Function Attrs: uwtable
define internal %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#+<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Process::Status"*, %"Process::Status"** %self, i64 %0
  ret %"Process::Status"** %1
}

; Function Attrs: uwtable
define internal %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#copy_from<Pointer(Process::Status | Nil), Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %self, %"Process::Status"** %source, i32 %count) #0 {
entry:
  %0 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#copy_to<Pointer(Process::Status | Nil), Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %source, %"Process::Status"** %self, i32 %count)
  ret %"Process::Status"** %0
}

; Function Attrs: uwtable
define internal %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#copy_to<Pointer(Process::Status | Nil), Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %self, %"Process::Status"** %target, i32 %count) #0 {
entry:
  %0 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#copy_from_impl<Pointer(Process::Status | Nil), Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %target, %"Process::Status"** %self, i32 %count)
  ret %"Process::Status"** %0
}

; Function Attrs: uwtable
define internal %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#copy_from_impl<Pointer(Process::Status | Nil), Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %self, %"Process::Status"** %source, i32 %count) #0 {
alloca:
  %count1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %count, i32* %count1
  %0 = load i32, i32* %count1
  %1 = icmp slt i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'negative count'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %2)
  unreachable

else:                                             ; preds = %entry
  %3 = call i1 @"*Pointer(Process::Status | Nil)@Object::==<Pointer(Process::Status | Nil):Class>:Bool"(i32 711, i32 711)
  br i1 %3, label %then2, label %else3

then2:                                            ; preds = %else
  %4 = bitcast %"Process::Status"** %self to i8*
  %5 = bitcast %"Process::Status"** %source to i8*
  %6 = load i32, i32* %count1
  %7 = mul i32 %6, 8
  %8 = zext i32 %7 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 %8, i32 0, i1 false)
  br label %exit

else3:                                            ; preds = %else
  br label %while

exit:                                             ; preds = %exit4, %then2
  ret %"Process::Status"** %self

while:                                            ; preds = %body, %else3
  %9 = load i32, i32* %count1
  %10 = sub i32 %9, 1
  store i32 %10, i32* %count1
  %11 = icmp sge i32 %10, 0
  br i1 %11, label %body, label %exit4

body:                                             ; preds = %while
  %12 = load i32, i32* %count1
  %13 = load i32, i32* %count1
  %14 = call %"Process::Status"* @"*Pointer(Process::Status | Nil)@Pointer(T)#[]<Int32>:(Process::Status | Nil)"(%"Process::Status"** %source, i32 %13)
  %15 = call %"Process::Status"* @"*Pointer(Process::Status | Nil)@Pointer(T)#[]=<Int32, (Process::Status | Nil)>:(Process::Status | Nil)"(%"Process::Status"** %self, i32 %12, %"Process::Status"* %14)
  br label %while

exit4:                                            ; preds = %while
  br label %exit
}

; Function Attrs: uwtable
define internal i1 @"*Pointer(Process::Status | Nil)@Object::==<Pointer(Process::Status | Nil):Class>:Bool"(i32 %self, i32 %other) #0 {
entry:
  ret i1 true
}

; Function Attrs: uwtable
define internal %"Process::Status"* @"*Pointer(Process::Status | Nil)@Pointer(T)#[]<Int32>:(Process::Status | Nil)"(%"Process::Status"** %self, i32 %offset) #0 {
entry:
  %0 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#+<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %self, i32 %offset)
  %1 = load %"Process::Status"*, %"Process::Status"** %0
  ret %"Process::Status"* %1
}

; Function Attrs: uwtable
define internal %"Process::Status"* @"*Pointer(Process::Status | Nil)@Pointer(T)#[]=<Int32, (Process::Status | Nil)>:(Process::Status | Nil)"(%"Process::Status"** %self, i32 %offset, %"Process::Status"* %value) #0 {
entry:
  %0 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#+<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %self, i32 %offset)
  store %"Process::Status"* %value, %"Process::Status"** %0
  ret %"Process::Status"* %value
}

; Function Attrs: uwtable
define internal void @"*Pointer(Process::Status | Nil)@Pointer(T)#clear<Int32>:Nil"(%"Process::Status"** %self, i32 %count) #0 {
alloca:
  %ptr = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = bitcast %"Process::Status"** %self to i8*
  store i8* %0, i8** %ptr
  %1 = bitcast %"Process::Status"** %self to i8*
  %2 = mul i32 %count, 8
  %3 = zext i32 %2 to i64
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 %3, i32 0, i1 false)
  ret void
}

; Function Attrs: uwtable
define internal %"Process::Status"* @"*Pointer(Process::Status | Nil)@Pointer(T)#[]=<Int32, Process::Status>:Process::Status"(%"Process::Status"** %self, i32 %offset, %"Process::Status"* %value) #0 {
entry:
  %0 = call %"Process::Status"** @"*Pointer(Process::Status | Nil)@Pointer(T)#+<Int32>:Pointer(Process::Status | Nil)"(%"Process::Status"** %self, i32 %offset)
  store %"Process::Status"* %value, %"Process::Status"** %0
  ret %"Process::Status"* %value
}

; Function Attrs: uwtable
define internal %"Channel::Buffered(Process::Status | Nil)"* @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#delete<Int32>:(Channel::Buffered(Process::Status | Nil) | Nil)"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %key) #0 {
alloca:
  %index = alloca i32
  %entry1 = alloca %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*
  %previous_entry = alloca %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*
  %back_entry = alloca %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*
  %fore_entry = alloca %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i32 @"*Hash(Int32, Channel::Buffered(Process::Status | Nil))@Hash(K, V)#bucket_index<Int32>:Int32"(%"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 %key)
  store i32 %0, i32* %index
  %1 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 6
  %2 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"**, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*** %1
  %3 = load i32, i32* %index
  %4 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %2, i32 %3)
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %4, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* null, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %previous_entry
  br label %while

while:                                            ; preds = %else, %entry
  %5 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %6 = icmp ne %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %5, null
  br i1 %6, label %body, label %exit

body:                                             ; preds = %while
  %7 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %8 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %7, i32 0, i32 1
  %9 = load i32, i32* %8
  %10 = icmp eq i32 %9, %key
  br i1 %10, label %then, label %else

exit:                                             ; preds = %while
  ret %"Channel::Buffered(Process::Status | Nil)"* null

then:                                             ; preds = %body
  %11 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %12 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %11, i32 0, i32 5
  %13 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %12
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %13, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %back_entry
  %14 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %15 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %14, i32 0, i32 4
  %16 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %15
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %16, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %fore_entry
  %17 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %fore_entry
  %18 = icmp ne %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %17, null
  br i1 %18, label %then2, label %else3

else:                                             ; preds = %body
  %19 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %19, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %previous_entry
  %20 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %21 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %20, i32 0, i32 3
  %22 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %21
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %22, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  br label %while

then2:                                            ; preds = %then
  %23 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %back_entry
  %24 = icmp ne %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %23, null
  br i1 %24, label %then4, label %else5

else3:                                            ; preds = %then
  %25 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %back_entry
  %26 = icmp ne %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %25, null
  br i1 %26, label %then8, label %else9

then4:                                            ; preds = %then2
  %27 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %back_entry
  %28 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %fore_entry
  %29 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#fore=<Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))>:Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %27, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %28)
  %30 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %fore_entry
  %31 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %back_entry
  %32 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#back=<Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))>:Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %30, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %31)
  br label %exit6

else5:                                            ; preds = %then2
  %33 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %fore_entry
  %34 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 3
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %33, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %34
  %35 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %fore_entry
  call void @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#back=<Nil>:Nil"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %35, %Nil zeroinitializer)
  br label %exit6

exit6:                                            ; preds = %else5, %then4
  br label %exit7

exit7:                                            ; preds = %exit10, %exit6
  %36 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %previous_entry
  %37 = icmp ne %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %36, null
  br i1 %37, label %then11, label %else12

then8:                                            ; preds = %else3
  %38 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %back_entry
  call void @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#fore=<Nil>:Nil"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %38, %Nil zeroinitializer)
  %39 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %back_entry
  %40 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %39, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %40
  br label %exit10

else9:                                            ; preds = %else3
  %41 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 3
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* null, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %41
  %42 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* null, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %42
  br label %exit10

exit10:                                           ; preds = %else9, %then8
  br label %exit7

then11:                                           ; preds = %exit7
  %43 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %previous_entry
  %44 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %45 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %44, i32 0, i32 3
  %46 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %45
  %47 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#next=<(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %43, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %46)
  br label %exit13

else12:                                           ; preds = %exit7
  %48 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 6
  %49 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"**, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*** %48
  %50 = load i32, i32* %index
  %51 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %52 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %51, i32 0, i32 3
  %53 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %52
  %54 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)#[]=<Int32, (Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %49, i32 %50, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %53)
  br label %exit13

exit13:                                           ; preds = %else12, %then11
  %55 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 1
  %56 = load i32, i32* %55
  %57 = sub i32 %56, 1
  %58 = getelementptr inbounds %"Hash(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 1
  store i32 %57, i32* %58
  %59 = load %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"*, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %entry1
  %60 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %59, i32 0, i32 2
  %61 = load %"Channel::Buffered(Process::Status | Nil)"*, %"Channel::Buffered(Process::Status | Nil)"** %60
  ret %"Channel::Buffered(Process::Status | Nil)"* %61
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#fore=<Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))>:Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %fore) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %fore, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %0
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %fore
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#back=<Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))>:Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %back) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 5
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %back, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %0
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %back
}

; Function Attrs: uwtable
define internal void @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#back=<Nil>:Nil"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, %Nil %back) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 5
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* null, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %0
  ret void
}

; Function Attrs: uwtable
define internal void @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#fore=<Nil>:Nil"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, %Nil %fore) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 4
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* null, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %0
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))@Hash::Entry(K, V)#next=<(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %next) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))", %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %self, i32 0, i32 3
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %next, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %0
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %next
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)#[]=<Int32, (Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)>:(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %self, i32 %offset, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %value) #0 {
entry:
  %0 = call %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** @"*Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil)) | Nil)"(%"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %self, i32 %offset)
  store %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %value, %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"** %0
  ret %"Hash::Entry(Int32, Channel::Buffered(Process::Status | Nil))"* %value
}

; Function Attrs: uwtable
define internal %"Process::Status"* @"*Hash(Int32, Process::Status)@Hash(K, V)#[]=<Int32, Process::Status>:Process::Status"(%"Hash(Int32, Process::Status)"* %self, i32 %key, %"Process::Status"* %value) #0 {
alloca:
  %index = alloca i32
  %entry1 = alloca %"Hash::Entry(Int32, Process::Status)"*
  %last = alloca %"Hash::Entry(Int32, Process::Status)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = mul i32 5, %3
  %5 = icmp sgt i32 %1, %4
  br i1 %5, label %then, label %else

then:                                             ; preds = %entry
  call void @"*Hash(Int32, Process::Status)@Hash(K, V)#rehash:Nil"(%"Hash(Int32, Process::Status)"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = call i32 @"*Hash(Int32, Process::Status)@Hash(K, V)#bucket_index<Int32>:Int32"(%"Hash(Int32, Process::Status)"* %self, i32 %key)
  store i32 %6, i32* %index
  %7 = load i32, i32* %index
  %8 = call %"Hash::Entry(Int32, Process::Status)"* @"*Hash(Int32, Process::Status)@Hash(K, V)#insert_in_bucket<Int32, Int32, Process::Status>:(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash(Int32, Process::Status)"* %self, i32 %7, i32 %key, %"Process::Status"* %value)
  store %"Hash::Entry(Int32, Process::Status)"* %8, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %9 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %10 = icmp ne %"Hash::Entry(Int32, Process::Status)"* %9, null
  br i1 %10, label %then2, label %else3

then2:                                            ; preds = %exit
  br label %exit4

else3:                                            ; preds = %exit
  ret %"Process::Status"* %value

exit4:                                            ; preds = %then2
  %11 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 1
  %12 = load i32, i32* %11
  %13 = add i32 %12, 1
  %14 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 1
  store i32 %13, i32* %14
  %15 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 4
  %16 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %15
  store %"Hash::Entry(Int32, Process::Status)"* %16, %"Hash::Entry(Int32, Process::Status)"** %last
  %17 = icmp ne %"Hash::Entry(Int32, Process::Status)"* %16, null
  br i1 %17, label %then5, label %else6

then5:                                            ; preds = %exit4
  %18 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %last
  %19 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %20 = call %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#fore=<Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"* %18, %"Hash::Entry(Int32, Process::Status)"* %19)
  %21 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %22 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %last
  %23 = call %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#back=<Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"* %21, %"Hash::Entry(Int32, Process::Status)"* %22)
  br label %exit7

else6:                                            ; preds = %exit4
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %24 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %25 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 4
  store %"Hash::Entry(Int32, Process::Status)"* %24, %"Hash::Entry(Int32, Process::Status)"** %25
  %26 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 3
  %27 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %26
  %28 = icmp ne %"Hash::Entry(Int32, Process::Status)"* %27, null
  br i1 %28, label %then8, label %else9

then8:                                            ; preds = %exit7
  br label %exit10

else9:                                            ; preds = %exit7
  %29 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %30 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 3
  store %"Hash::Entry(Int32, Process::Status)"* %29, %"Hash::Entry(Int32, Process::Status)"** %30
  br label %exit10

exit10:                                           ; preds = %else9, %then8
  ret %"Process::Status"* %value
}

; Function Attrs: uwtable
define internal void @"*Hash(Int32, Process::Status)@Hash(K, V)#rehash:Nil"(%"Hash(Int32, Process::Status)"* %self) #0 {
alloca:
  %new_size = alloca i32
  %entry1 = alloca %"Hash::Entry(Int32, Process::Status)"*
  %index = alloca i32
  %i = alloca i32
  %i2 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = call i32 @"*Hash(Int32, Process::Status)@Hash(K, V)#calculate_new_size<Int32>:Int32"(%"Hash(Int32, Process::Status)"* %self, i32 %1)
  store i32 %2, i32* %new_size
  %3 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 6
  %4 = load %"Hash::Entry(Int32, Process::Status)"**, %"Hash::Entry(Int32, Process::Status)"*** %3
  %5 = load i32, i32* %new_size
  %6 = call %"Hash::Entry(Int32, Process::Status)"** @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#realloc<Int32>:Pointer(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %4, i32 %5)
  %7 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 6
  store %"Hash::Entry(Int32, Process::Status)"** %6, %"Hash::Entry(Int32, Process::Status)"*** %7
  %8 = load i32, i32* %new_size
  %9 = xor i32 %8, %8
  store i32 %9, i32* %i2
  br label %while

while:                                            ; preds = %body, %entry
  %10 = load i32, i32* %i2
  %11 = icmp slt i32 %10, %8
  br i1 %11, label %body, label %exit

body:                                             ; preds = %while
  %12 = load i32, i32* %i2
  store i32 %12, i32* %i
  %13 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 6
  %14 = load %"Hash::Entry(Int32, Process::Status)"**, %"Hash::Entry(Int32, Process::Status)"*** %13
  %15 = load i32, i32* %i
  call void @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#[]=<Int32, Nil>:Nil"(%"Hash::Entry(Int32, Process::Status)"** %14, i32 %15, %Nil zeroinitializer)
  %16 = load i32, i32* %i2
  %17 = add i32 %16, 1
  store i32 %17, i32* %i2
  br label %while

exit:                                             ; preds = %while
  %18 = load i32, i32* %new_size
  %19 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 2
  store i32 %18, i32* %19
  %20 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 4
  %21 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %20
  store %"Hash::Entry(Int32, Process::Status)"* %21, %"Hash::Entry(Int32, Process::Status)"** %entry1
  br label %while3

while3:                                           ; preds = %body4, %exit
  %22 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %23 = icmp ne %"Hash::Entry(Int32, Process::Status)"* %22, null
  br i1 %23, label %body4, label %exit5

body4:                                            ; preds = %while3
  %24 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %25 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %24, i32 0, i32 1
  %26 = load i32, i32* %25
  %27 = call i32 @"*Hash(Int32, Process::Status)@Hash(K, V)#bucket_index<Int32>:Int32"(%"Hash(Int32, Process::Status)"* %self, i32 %26)
  store i32 %27, i32* %index
  %28 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %29 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 6
  %30 = load %"Hash::Entry(Int32, Process::Status)"**, %"Hash::Entry(Int32, Process::Status)"*** %29
  %31 = load i32, i32* %index
  %32 = call %"Hash::Entry(Int32, Process::Status)"* @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %30, i32 %31)
  %33 = call %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#next=<(Hash::Entry(Int32, Process::Status) | Nil)>:(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"* %28, %"Hash::Entry(Int32, Process::Status)"* %32)
  %34 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 6
  %35 = load %"Hash::Entry(Int32, Process::Status)"**, %"Hash::Entry(Int32, Process::Status)"*** %34
  %36 = load i32, i32* %index
  %37 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %38 = call %"Hash::Entry(Int32, Process::Status)"* @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"** %35, i32 %36, %"Hash::Entry(Int32, Process::Status)"* %37)
  %39 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %40 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %39, i32 0, i32 5
  %41 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %40
  store %"Hash::Entry(Int32, Process::Status)"* %41, %"Hash::Entry(Int32, Process::Status)"** %entry1
  br label %while3

exit5:                                            ; preds = %while3
  ret void
}

; Function Attrs: uwtable
define internal i32 @"*Hash(Int32, Process::Status)@Hash(K, V)#calculate_new_size<Int32>:Int32"(%"Hash(Int32, Process::Status)"* %self, i32 %size) #0 {
alloca:
  %new_size = alloca i32
  %hash_size = alloca i32
  %i = alloca i32
  %i1 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 8, i32* %new_size
  %0 = call %"Array(Int32)"** @"~Hash::HASH_PRIMES:read"()
  %1 = load %"Array(Int32)"*, %"Array(Int32)"** %0
  store i32 0, i32* %i1
  br label %while

while:                                            ; preds = %else, %entry
  %2 = load i32, i32* %i1
  %3 = getelementptr inbounds %"Array(Int32)", %"Array(Int32)"* %1, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = icmp slt i32 %2, %4
  br i1 %5, label %body, label %exit

body:                                             ; preds = %while
  %6 = load i32, i32* %i1
  store i32 %6, i32* %i
  %7 = load i32, i32* %i
  %8 = call i32 @"*Array(Int32)@Array(T)#unsafe_at<Int32>:Int32"(%"Array(Int32)"* %1, i32 %7)
  store i32 %8, i32* %hash_size
  %9 = load i32, i32* %new_size
  %10 = icmp sgt i32 %9, %size
  br i1 %10, label %then, label %else

exit:                                             ; preds = %while
  call void @"*raise<String>:NoReturn"(%String* bitcast ({ i32, i32, i32, [19 x i8] }* @"'Hash table too big'" to %String*))
  unreachable

then:                                             ; preds = %body
  %11 = load i32, i32* %hash_size
  ret i32 %11

else:                                             ; preds = %body
  %12 = load i32, i32* %new_size
  %13 = call i32 @"*Int32@Int#<<<Int32>:Int32"(i32 %12, i32 1)
  store i32 %13, i32* %new_size
  %14 = load i32, i32* %i1
  %15 = add i32 %14, 1
  store i32 %15, i32* %i1
  br label %while
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"** @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#realloc<Int32>:Pointer(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"Hash::Entry(Int32, Process::Status)"** %self to i8*
  %2 = mul i64 %0, ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"Hash::Entry(Int32, Process::Status)"**
  ret %"Hash::Entry(Int32, Process::Status)"** %5
}

; Function Attrs: uwtable
define internal void @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#[]=<Int32, Nil>:Nil"(%"Hash::Entry(Int32, Process::Status)"** %self, i32 %offset, %Nil %value) #0 {
entry:
  %0 = call %"Hash::Entry(Int32, Process::Status)"** @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %self, i32 %offset)
  store %"Hash::Entry(Int32, Process::Status)"* null, %"Hash::Entry(Int32, Process::Status)"** %0
  ret void
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"** @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %self, i64 %0
  ret %"Hash::Entry(Int32, Process::Status)"** %1
}

; Function Attrs: uwtable
define internal i32 @"*Hash(Int32, Process::Status)@Hash(K, V)#bucket_index<Int32>:Int32"(%"Hash(Int32, Process::Status)"* %self, i32 %key) #0 {
entry:
  %0 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = call i32 @"*UInt32@Int#remainder<Int32>:UInt32"(i32 %key, i32 %1)
  ret i32 %2
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"* @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %self, i32 %offset) #0 {
entry:
  %0 = call %"Hash::Entry(Int32, Process::Status)"** @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %self, i32 %offset)
  %1 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %0
  ret %"Hash::Entry(Int32, Process::Status)"* %1
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#next=<(Hash::Entry(Int32, Process::Status) | Nil)>:(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"* %self, %"Hash::Entry(Int32, Process::Status)"* %next) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %self, i32 0, i32 3
  store %"Hash::Entry(Int32, Process::Status)"* %next, %"Hash::Entry(Int32, Process::Status)"** %0
  ret %"Hash::Entry(Int32, Process::Status)"* %next
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"* @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"** %self, i32 %offset, %"Hash::Entry(Int32, Process::Status)"* %value) #0 {
entry:
  %0 = call %"Hash::Entry(Int32, Process::Status)"** @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#+<Int32>:Pointer(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %self, i32 %offset)
  store %"Hash::Entry(Int32, Process::Status)"* %value, %"Hash::Entry(Int32, Process::Status)"** %0
  ret %"Hash::Entry(Int32, Process::Status)"* %value
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"* @"*Hash(Int32, Process::Status)@Hash(K, V)#insert_in_bucket<Int32, Int32, Process::Status>:(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash(Int32, Process::Status)"* %self, i32 %index, i32 %key, %"Process::Status"* %value) #0 {
alloca:
  %entry1 = alloca %"Hash::Entry(Int32, Process::Status)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 6
  %1 = load %"Hash::Entry(Int32, Process::Status)"**, %"Hash::Entry(Int32, Process::Status)"*** %0
  %2 = call %"Hash::Entry(Int32, Process::Status)"* @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#[]<Int32>:(Hash::Entry(Int32, Process::Status) | Nil)"(%"Hash::Entry(Int32, Process::Status)"** %1, i32 %index)
  store %"Hash::Entry(Int32, Process::Status)"* %2, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %3 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %4 = icmp ne %"Hash::Entry(Int32, Process::Status)"* %3, null
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  br label %while

else:                                             ; preds = %entry
  %5 = getelementptr inbounds %"Hash(Int32, Process::Status)", %"Hash(Int32, Process::Status)"* %self, i32 0, i32 6
  %6 = load %"Hash::Entry(Int32, Process::Status)"**, %"Hash::Entry(Int32, Process::Status)"*** %5
  %7 = call %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)::new<Int32, Process::Status>:Hash::Entry(Int32, Process::Status)"(i32 571, i32 %key, %"Process::Status"* %value)
  %8 = call %"Hash::Entry(Int32, Process::Status)"* @"*Pointer(Hash::Entry(Int32, Process::Status) | Nil)@Pointer(T)#[]=<Int32, Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"** %6, i32 %index, %"Hash::Entry(Int32, Process::Status)"* %7)
  ret %"Hash::Entry(Int32, Process::Status)"* %8

while:                                            ; preds = %exit6, %then
  %9 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %10 = icmp ne %"Hash::Entry(Int32, Process::Status)"* %9, null
  br i1 %10, label %body, label %exit

body:                                             ; preds = %while
  %11 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %12 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %11, i32 0, i32 1
  %13 = load i32, i32* %12
  %14 = icmp eq i32 %13, %key
  br i1 %14, label %then2, label %else3

exit:                                             ; preds = %while
  br label %exit7

then2:                                            ; preds = %body
  %15 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %16 = call %"Process::Status"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#value=<Process::Status>:Process::Status"(%"Hash::Entry(Int32, Process::Status)"* %15, %"Process::Status"* %value)
  ret %"Hash::Entry(Int32, Process::Status)"* null

else3:                                            ; preds = %body
  %17 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %18 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %17, i32 0, i32 3
  %19 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %18
  %20 = icmp ne %"Hash::Entry(Int32, Process::Status)"* %19, null
  br i1 %20, label %then4, label %else5

then4:                                            ; preds = %else3
  %21 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %22 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %21, i32 0, i32 3
  %23 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %22
  store %"Hash::Entry(Int32, Process::Status)"* %23, %"Hash::Entry(Int32, Process::Status)"** %entry1
  br label %exit6

else5:                                            ; preds = %else3
  %24 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %entry1
  %25 = call %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)::new<Int32, Process::Status>:Hash::Entry(Int32, Process::Status)"(i32 571, i32 %key, %"Process::Status"* %value)
  %26 = call %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#next=<Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"* %24, %"Hash::Entry(Int32, Process::Status)"* %25)
  ret %"Hash::Entry(Int32, Process::Status)"* %26

exit6:                                            ; preds = %then4
  br label %while

exit7:                                            ; preds = %exit
  ret %"Hash::Entry(Int32, Process::Status)"* null
}

; Function Attrs: uwtable
define internal %"Process::Status"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#value=<Process::Status>:Process::Status"(%"Hash::Entry(Int32, Process::Status)"* %self, %"Process::Status"* %value) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %self, i32 0, i32 2
  store %"Process::Status"* %value, %"Process::Status"** %0
  ret %"Process::Status"* %value
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)::new<Int32, Process::Status>:Hash::Entry(Int32, Process::Status)"(i32 %self, i32 %key, %"Process::Status"* %value) #0 {
alloca:
  %_ = alloca %"Hash::Entry(Int32, Process::Status)"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Hash::Entry(Int32, Process::Status)"* getelementptr (%"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Hash::Entry(Int32, Process::Status)"*
  %2 = bitcast %"Hash::Entry(Int32, Process::Status)"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Hash::Entry(Int32, Process::Status)"* getelementptr (%"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %1, i32 0, i32 0
  store i32 104, i32* %3
  store %"Hash::Entry(Int32, Process::Status)"* %1, %"Hash::Entry(Int32, Process::Status)"** %_
  %4 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %_
  %5 = call %"Process::Status"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#initialize<Int32, Process::Status>:Process::Status"(%"Hash::Entry(Int32, Process::Status)"* %4, i32 %key, %"Process::Status"* %value)
  %6 = load %"Hash::Entry(Int32, Process::Status)"*, %"Hash::Entry(Int32, Process::Status)"** %_
  ret %"Hash::Entry(Int32, Process::Status)"* %6
}

; Function Attrs: uwtable
define internal %"Process::Status"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#initialize<Int32, Process::Status>:Process::Status"(%"Hash::Entry(Int32, Process::Status)"* %self, i32 %key, %"Process::Status"* %value) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %self, i32 0, i32 1
  store i32 %key, i32* %0
  %1 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %self, i32 0, i32 2
  store %"Process::Status"* %value, %"Process::Status"** %1
  ret %"Process::Status"* %value
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#next=<Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"* %self, %"Hash::Entry(Int32, Process::Status)"* %next) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %self, i32 0, i32 3
  store %"Hash::Entry(Int32, Process::Status)"* %next, %"Hash::Entry(Int32, Process::Status)"** %0
  ret %"Hash::Entry(Int32, Process::Status)"* %next
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#fore=<Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"* %self, %"Hash::Entry(Int32, Process::Status)"* %fore) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %self, i32 0, i32 4
  store %"Hash::Entry(Int32, Process::Status)"* %fore, %"Hash::Entry(Int32, Process::Status)"** %0
  ret %"Hash::Entry(Int32, Process::Status)"* %fore
}

; Function Attrs: uwtable
define internal %"Hash::Entry(Int32, Process::Status)"* @"*Hash::Entry(Int32, Process::Status)@Hash::Entry(K, V)#back=<Hash::Entry(Int32, Process::Status)>:Hash::Entry(Int32, Process::Status)"(%"Hash::Entry(Int32, Process::Status)"* %self, %"Hash::Entry(Int32, Process::Status)"* %back) #0 {
entry:
  %0 = getelementptr inbounds %"Hash::Entry(Int32, Process::Status)", %"Hash::Entry(Int32, Process::Status)"* %self, i32 0, i32 5
  store %"Hash::Entry(Int32, Process::Status)"* %back, %"Hash::Entry(Int32, Process::Status)"** %0
  ret %"Hash::Entry(Int32, Process::Status)"* %back
}

; Function Attrs: uwtable
define internal void @"*at_exit<&Proc(Int32, Nil)>:Nil"(%"->" %handler) #0 {
entry:
  %0 = call %"Array(Proc(Int32, Nil))"* @"*AtExitHandlers::add<Proc(Int32, Nil)>:Array(Proc(Int32, Nil))"(%"->" %handler)
  ret void
}

; Function Attrs: uwtable
define internal %"Array(Proc(Int32, Nil))"* @"*AtExitHandlers::add<Proc(Int32, Nil)>:Array(Proc(Int32, Nil))"(%"->" %handler) #0 {
alloca:
  %__temp_163 = alloca %"Array(Proc(Int32, Nil))"*
  %handlers = alloca %"Array(Proc(Int32, Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = load %"Array(Proc(Int32, Nil))"*, %"Array(Proc(Int32, Nil))"** @"AtExitHandlers::handlers"
  store %"Array(Proc(Int32, Nil))"* %0, %"Array(Proc(Int32, Nil))"** %__temp_163
  %1 = icmp ne %"Array(Proc(Int32, Nil))"* %0, null
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  %2 = load %"Array(Proc(Int32, Nil))"*, %"Array(Proc(Int32, Nil))"** %__temp_163
  br label %exit

else:                                             ; preds = %entry
  %3 = call %"Array(Proc(Int32, Nil))"* @"*Array(Proc(Int32, Nil))@Array(T)::new:Array(Proc(Int32, Nil))"(i32 454)
  store %"Array(Proc(Int32, Nil))"* %3, %"Array(Proc(Int32, Nil))"** @"AtExitHandlers::handlers"
  br label %exit

exit:                                             ; preds = %else, %then
  %4 = phi %"Array(Proc(Int32, Nil))"* [ %2, %then ], [ %3, %else ]
  store %"Array(Proc(Int32, Nil))"* %4, %"Array(Proc(Int32, Nil))"** %handlers
  %5 = load %"Array(Proc(Int32, Nil))"*, %"Array(Proc(Int32, Nil))"** %handlers
  %6 = call %"Array(Proc(Int32, Nil))"* @"*Array(Proc(Int32, Nil))@Array(T)#<<<Proc(Int32, Nil)>:Array(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %5, %"->" %handler)
  ret %"Array(Proc(Int32, Nil))"* %6
}

; Function Attrs: uwtable
define internal %"Array(Proc(Int32, Nil))"* @"*Array(Proc(Int32, Nil))@Array(T)::new:Array(Proc(Int32, Nil))"(i32 %self) #0 {
alloca:
  %_ = alloca %"Array(Proc(Int32, Nil))"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i8* @__crystal_malloc(i32 ptrtoint (%"Array(Proc(Int32, Nil))"* getelementptr (%"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* null, i32 1) to i32))
  %1 = bitcast i8* %0 to %"Array(Proc(Int32, Nil))"*
  %2 = bitcast %"Array(Proc(Int32, Nil))"* %1 to i8*
  call void @llvm.memset.p0i8.i32(i8* %2, i8 0, i32 ptrtoint (%"Array(Proc(Int32, Nil))"* getelementptr (%"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* null, i32 1) to i32), i32 4, i1 false)
  %3 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %1, i32 0, i32 0
  store i32 17, i32* %3
  store %"Array(Proc(Int32, Nil))"* %1, %"Array(Proc(Int32, Nil))"** %_
  %4 = load %"Array(Proc(Int32, Nil))"*, %"Array(Proc(Int32, Nil))"** %_
  %5 = call %"->"* @"*Array(Proc(Int32, Nil))@Array(T)#initialize:Pointer(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %4)
  %6 = load %"Array(Proc(Int32, Nil))"*, %"Array(Proc(Int32, Nil))"** %_
  ret %"Array(Proc(Int32, Nil))"* %6
}

; Function Attrs: uwtable
define internal %"->"* @"*Array(Proc(Int32, Nil))@Array(T)#initialize:Pointer(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 1
  store i32 0, i32* %0
  %1 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 2
  store i32 0, i32* %1
  %2 = call %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)::null:Pointer(Proc(Int32, Nil))"(i32 689)
  %3 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 3
  store %"->"* %2, %"->"** %3
  ret %"->"* %2
}

; Function Attrs: uwtable
define internal %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)::null:Pointer(Proc(Int32, Nil))"(i32 %self) #0 {
entry:
  ret %"->"* null
}

; Function Attrs: uwtable
define internal %"Array(Proc(Int32, Nil))"* @"*Array(Proc(Int32, Nil))@Array(T)#<<<Proc(Int32, Nil)>:Array(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %self, %"->" %value) #0 {
entry:
  %0 = call %"Array(Proc(Int32, Nil))"* @"*Array(Proc(Int32, Nil))@Array(T)#push<Proc(Int32, Nil)>:Array(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %self, %"->" %value)
  ret %"Array(Proc(Int32, Nil))"* %0
}

; Function Attrs: uwtable
define internal %"Array(Proc(Int32, Nil))"* @"*Array(Proc(Int32, Nil))@Array(T)#push<Proc(Int32, Nil)>:Array(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %self, %"->" %value) #0 {
entry:
  %0 = call %"->"* @"*Array(Proc(Int32, Nil))@Array(T)#check_needs_resize:(Pointer(Proc(Int32, Nil)) | Nil)"(%"Array(Proc(Int32, Nil))"* %self)
  %1 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 3
  %2 = load %"->"*, %"->"** %1
  %3 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = call %"->" @"*Pointer(Proc(Int32, Nil))@Pointer(T)#[]=<Int32, Proc(Int32, Nil)>:Proc(Int32, Nil)"(%"->"* %2, i32 %4, %"->" %value)
  %6 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 1
  %7 = load i32, i32* %6
  %8 = add i32 %7, 1
  %9 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 1
  store i32 %8, i32* %9
  ret %"Array(Proc(Int32, Nil))"* %self
}

; Function Attrs: uwtable
define internal %"->"* @"*Array(Proc(Int32, Nil))@Array(T)#check_needs_resize:(Pointer(Proc(Int32, Nil)) | Nil)"(%"Array(Proc(Int32, Nil))"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 2
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %1, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  %5 = call %"->"* @"*Array(Proc(Int32, Nil))@Array(T)#double_capacity:Pointer(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %self)
  br label %exit

else:                                             ; preds = %entry
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi %"->"* [ %5, %then ], [ null, %else ]
  ret %"->"* %6
}

; Function Attrs: uwtable
define internal %"->"* @"*Array(Proc(Int32, Nil))@Array(T)#double_capacity:Pointer(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 2
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %3 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 2
  %4 = load i32, i32* %3
  %5 = mul i32 %4, 2
  br label %exit

exit:                                             ; preds = %else, %then
  %6 = phi i32 [ 3, %then ], [ %5, %else ]
  %7 = call %"->"* @"*Array(Proc(Int32, Nil))@Array(T)#resize_to_capacity<Int32>:Pointer(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %self, i32 %6)
  ret %"->"* %7
}

; Function Attrs: uwtable
define internal %"->"* @"*Array(Proc(Int32, Nil))@Array(T)#resize_to_capacity<Int32>:Pointer(Proc(Int32, Nil))"(%"Array(Proc(Int32, Nil))"* %self, i32 %capacity) #0 {
entry:
  %0 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 2
  store i32 %capacity, i32* %0
  %1 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 3
  %2 = load %"->"*, %"->"** %1
  %3 = icmp ne %"->"* %2, null
  br i1 %3, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 3
  %5 = load %"->"*, %"->"** %4
  %6 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 2
  %7 = load i32, i32* %6
  %8 = call %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)#realloc<Int32>:Pointer(Proc(Int32, Nil))"(%"->"* %5, i32 %7)
  %9 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 3
  store %"->"* %8, %"->"** %9
  br label %exit

else:                                             ; preds = %entry
  %10 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 2
  %11 = load i32, i32* %10
  %12 = call %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)::malloc<Int32>:Pointer(Proc(Int32, Nil))"(i32 689, i32 %11)
  %13 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 3
  store %"->"* %12, %"->"** %13
  br label %exit

exit:                                             ; preds = %else, %then
  %14 = phi %"->"* [ %8, %then ], [ %12, %else ]
  ret %"->"* %14
}

; Function Attrs: uwtable
define internal %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)#realloc<Int32>:Pointer(Proc(Int32, Nil))"(%"->"* %self, i32 %size) #0 {
entry:
  %0 = sext i32 %size to i64
  %1 = bitcast %"->"* %self to i8*
  %2 = mul i64 %0, mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2)
  %3 = trunc i64 %2 to i32
  %4 = call i8* @__crystal_realloc(i8* %1, i32 %3)
  %5 = bitcast i8* %4 to %"->"*
  ret %"->"* %5
}

; Function Attrs: uwtable
define internal %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)::malloc<Int32>:Pointer(Proc(Int32, Nil))"(i32 %self, i32 %size) #0 {
entry:
  %0 = icmp slt i32 %size, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [29 x i8] }* @"'negative Pointer#ma...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  %2 = sext i32 %size to i64
  %3 = trunc i64 %2 to i32
  %4 = mul i32 trunc (i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2) to i32), %3
  %5 = call i8* @__crystal_malloc(i32 %4)
  call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %4, i32 4, i1 false)
  %6 = bitcast i8* %5 to %"->"*
  ret %"->"* %6
}

; Function Attrs: uwtable
define internal %"->" @"*Pointer(Proc(Int32, Nil))@Pointer(T)#[]=<Int32, Proc(Int32, Nil)>:Proc(Int32, Nil)"(%"->"* %self, i32 %offset, %"->" %value) #0 {
entry:
  %0 = call %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)#+<Int32>:Pointer(Proc(Int32, Nil))"(%"->"* %self, i32 %offset)
  store %"->" %value, %"->"* %0
  ret %"->" %value
}

; Function Attrs: uwtable
define internal %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)#+<Int32>:Pointer(Proc(Int32, Nil))"(%"->"* %self, i32 %other) #0 {
entry:
  %0 = sext i32 %other to i64
  %1 = getelementptr inbounds %"->", %"->"* %self, i64 %0
  ret %"->"* %1
}

; Function Attrs: uwtable
define internal void @"~procProc(Int32, Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/kernel.cr:195"(i32 %__temp_162) #0 {
entry:
  call void @"*Event::SignalHandler::close:Nil"()
  ret void
}

; Function Attrs: uwtable
define internal void @"*Event::SignalHandler::close:Nil"() #0 {
alloca:
  %__arg2 = alloca %"Event::SignalHandler"*
  %__arg23 = alloca %"Event::SignalHandler"*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** @"Event::SignalHandler::instance"
  %1 = icmp eq %"Event::SignalHandler"* %0, null
  %2 = select i1 %1, i32 0, i32 92
  %3 = icmp eq i32 0, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  br label %exit

next_def:                                         ; preds = %entry
  %4 = icmp eq i32 92, %2
  br i1 %4, label %current_def1, label %next_def2

exit:                                             ; preds = %current_def1, %current_def
  store %"Event::SignalHandler"* null, %"Event::SignalHandler"** @"Event::SignalHandler::instance"
  ret void

current_def1:                                     ; preds = %next_def
  store %"Event::SignalHandler"* %0, %"Event::SignalHandler"** %__arg23
  %5 = load %"Event::SignalHandler"*, %"Event::SignalHandler"** %__arg23
  call void @"*Event::SignalHandler#close:Nil"(%"Event::SignalHandler"* %5)
  br label %exit

next_def2:                                        ; preds = %next_def
  unreachable
}

; Function Attrs: uwtable
define internal void @"*Event::SignalHandler#close:Nil"(%"Event::SignalHandler"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"Event::SignalHandler", %"Event::SignalHandler"* %self, i32 0, i32 2
  %1 = load i32*, i32** %0
  call void @"*IO::FileDescriptor+@IO::Buffered#close:Nil"(i32* %1)
  ret void
}

; Function Attrs: uwtable
define internal void @"~procProc(Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/kernel.cr:198"() #0 {
alloca:
  %i = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %body, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %0 = load i32, i32* %i
  call void @"*sleep<Int32>:Nil"(i32 5)
  call void @"*Fiber::stack_pool_collect:Nil"()
  %1 = load i32, i32* %i
  %2 = add i32 %1, 1
  store i32 %2, i32* %i
  br label %while

exit:                                             ; preds = %while
  unreachable
}

; Function Attrs: uwtable
define internal void @"*sleep<Int32>:Nil"(i32 %seconds) #0 {
entry:
  %0 = icmp slt i32 %seconds, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %ArgumentError* @"*ArgumentError::new<String>:ArgumentError"(%String* bitcast ({ i32, i32, i32, [31 x i8] }* @"'sleep seconds must ...'" to %String*))
  call void @"*raise<ArgumentError>:NoReturn"(%ArgumentError* %1)
  unreachable

else:                                             ; preds = %entry
  call void @"*Fiber::sleep<Int32>:Nil"(i32 %seconds)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Fiber::sleep<Int32>:Nil"(i32 %time) #0 {
entry:
  %0 = call %Fiber* @"*Fiber::current:Fiber"()
  call void @"*Fiber#sleep<Int32>:Nil"(%Fiber* %0, i32 %time)
  ret void
}

; Function Attrs: uwtable
define internal void @"*Fiber#sleep<Int32>:Nil"(%Fiber* %self, i32 %time) #0 {
alloca:
  %__temp_164 = alloca %"(Event::Event | Nil)"
  %event = alloca %"Event::Event.6"
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 2
  %2 = load %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %1
  store %"(Event::Event | Nil)" %2, %"(Event::Event | Nil)"* %__temp_164
  %3 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %1, i32 0, i32 0
  %4 = load i32, i32* %3
  %5 = icmp eq i32 %4, 0
  %6 = xor i1 %5, true
  %7 = and i1 true, %6
  br i1 %7, label %then, label %else

then:                                             ; preds = %entry
  %8 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %__temp_164, i32 0, i32 1
  %9 = bitcast [2 x i64]* %8 to %"Event::Event.6"*
  br label %exit

else:                                             ; preds = %entry
  %10 = call %"Event::Event.6" @"*Scheduler::create_resume_event<Fiber>:Event::Event"(%Fiber* %self)
  store %"Event::Event.6" %10, %"Event::Event.6"* %0
  %11 = getelementptr inbounds %Fiber, %Fiber* %self, i32 0, i32 2
  %12 = load %"Event::Event.6", %"Event::Event.6"* %0
  %13 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %11, i32 0, i32 0
  store i32 359, i32* %13
  %14 = getelementptr inbounds %"(Event::Event | Nil)", %"(Event::Event | Nil)"* %11, i32 0, i32 1
  %15 = bitcast [2 x i64]* %14 to %"Event::Event.6"*
  store %"Event::Event.6" %12, %"Event::Event.6"* %15
  br label %exit

exit:                                             ; preds = %else, %then
  %16 = phi %"Event::Event.6"* [ %9, %then ], [ %0, %else ]
  %17 = load %"Event::Event.6", %"Event::Event.6"* %16
  store %"Event::Event.6" %17, %"Event::Event.6"* %event
  %18 = call i32 @"*Event::Event#add<Int32>:Int32"(%"Event::Event.6"* %event, i32 %time)
  call void @"*Scheduler::reschedule:Nil"()
  ret void
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Scheduler::create_resume_event<Fiber>:Event::Event"(%Fiber* %fiber) #0 {
alloca:
  %0 = alloca %"->"
  %1 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = call %"Event::Base"* @"~Scheduler::eb:read"()
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (void (i32, i16, i8*)* @"~procProc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:26" to i8*), i8** %3
  %4 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %4
  %5 = load %"->", %"->"* %0
  %6 = call %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, Fiber, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %2, i32 -1, i16 0, %Fiber* %fiber, %"->" %5)
  store %"Event::Event.6" %6, %"Event::Event.6"* %1
  %7 = load %"Event::Event.6", %"Event::Event.6"* %1
  ret %"Event::Event.6" %7
}

; Function Attrs: uwtable
define internal %"Event::Event.6" @"*Event::Base#new_event<Int32, LibEvent2::EventFlags, Fiber, &Proc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)>:Event::Event"(%"Event::Base"* %self, i32 %s, i16 %flags, %Fiber* %data, %"->" %callback) #0 {
alloca:
  %event = alloca i8*
  %0 = alloca %"Event::Event.6"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Event::Base", %"Event::Base"* %self, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = call i8* @"~check_proc_is_not_closure"(%"->" %callback)
  %4 = bitcast i8* %3 to %Nil (i32, i16, i8*)*
  %5 = bitcast %Fiber* %data to i8*
  %6 = call i8* @event_new(i8* %2, i32 %s, i16 %flags, %Nil (i32, i16, i8*)* %4, i8* %5)
  store i8* %6, i8** %event
  %7 = load i8*, i8** %event
  %8 = call %"Event::Event.6" @"*Event::Event::new<Pointer(Void)>:Event::Event"(i8* %7)
  store %"Event::Event.6" %8, %"Event::Event.6"* %0
  %9 = load %"Event::Event.6", %"Event::Event.6"* %0
  ret %"Event::Event.6" %9
}

; Function Attrs: uwtable
define internal void @"~procProc(Int32, LibEvent2::EventFlags, Pointer(Void), Nil)@/usr/local/Cellar/crystal-lang/0.20.4/src/concurrent/scheduler.cr:26"(i32 %s, i16 %flags, i8* %data) #0 {
entry:
  %0 = bitcast i8* %data to %Fiber*
  call void @"*Fiber#resume:Nil"(%Fiber* %0)
  ret void
}

; Function Attrs: uwtable
define internal i32 @"*Event::Event#add<Int32>:Int32"(%"Event::Event.6"* %self, i32 %timeout) #0 {
alloca:
  %t = alloca %"struct.LibC::Timeval"
  %0 = alloca %"struct.LibC::Timeval"
  br label %entry

entry:                                            ; preds = %alloca
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  %1 = call %"struct.LibC::Timeval" @"*Event::Event#to_timeval<Int32>:struct.LibC::Timeval"(%"Event::Event.6"* %self, i32 %timeout)
  store %"struct.LibC::Timeval" %1, %"struct.LibC::Timeval"* %0
  %2 = load %"struct.LibC::Timeval", %"struct.LibC::Timeval"* %0
  store %"struct.LibC::Timeval" %2, %"struct.LibC::Timeval"* %t
  %3 = getelementptr inbounds %"Event::Event.6", %"Event::Event.6"* %self, i32 0, i32 0
  %4 = load i8*, i8** %3
  %5 = call i32 @event_add(i8* %4, %"struct.LibC::Timeval"* %t)
  br label %exit

else:                                             ; preds = %entry
  %6 = call i32 @"*Event::Event#add:Int32"(%"Event::Event.6"* %self)
  br label %exit

exit:                                             ; preds = %else, %then
  %7 = phi i32 [ %5, %then ], [ %6, %else ]
  ret i32 %7
}

; Function Attrs: uwtable
define internal %"struct.LibC::Timeval" @"*Event::Event#to_timeval<Int32>:struct.LibC::Timeval"(%"Event::Event.6"* %self, i32 %time) #0 {
alloca:
  %t = alloca %"struct.LibC::Timeval"
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i64 @"*Int64::new<Int32>:Int64"(i32 %time)
  %1 = getelementptr inbounds %"struct.LibC::Timeval", %"struct.LibC::Timeval"* %t, i32 0, i32 0
  store i64 %0, i64* %1
  %2 = call i32 @"*Int32::new<Int32>:Int32"(i32 0)
  %3 = getelementptr inbounds %"struct.LibC::Timeval", %"struct.LibC::Timeval"* %t, i32 0, i32 1
  store i32 %2, i32* %3
  %4 = load %"struct.LibC::Timeval", %"struct.LibC::Timeval"* %t
  ret %"struct.LibC::Timeval" %4
}

; Function Attrs: uwtable
define internal void @"*Fiber::stack_pool_collect:Nil"() #0 {
alloca:
  %free_count = alloca i32
  %stack = alloca i8*
  %i = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call %"Array(Pointer(Void)).2"** @"~Fiber::stack_pool:read"()
  %1 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %0
  %2 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %1, i32 0, i32 1
  %3 = load i32, i32* %2
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  %5 = call %"Array(Pointer(Void)).2"** @"~Fiber::stack_pool:read"()
  %6 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %5
  %7 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %6, i32 0, i32 1
  %8 = load i32, i32* %7
  %9 = icmp sgt i32 %8, 1
  br i1 %9, label %then1, label %else2

then1:                                            ; preds = %else
  %10 = call %"Array(Pointer(Void)).2"** @"~Fiber::stack_pool:read"()
  %11 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %10
  %12 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %11, i32 0, i32 1
  %13 = load i32, i32* %12
  %14 = call i32 @"*Int32@Int#/<Int32>:Int32"(i32 %13, i32 2)
  br label %exit

else2:                                            ; preds = %else
  br label %exit

exit:                                             ; preds = %else2, %then1
  %15 = phi i32 [ %14, %then1 ], [ 1, %else2 ]
  store i32 %15, i32* %free_count
  %16 = load i32, i32* %free_count
  %17 = xor i32 %16, %16
  store i32 %17, i32* %i
  br label %while

while:                                            ; preds = %body, %exit
  %18 = load i32, i32* %i
  %19 = icmp slt i32 %18, %16
  br i1 %19, label %body, label %exit3

body:                                             ; preds = %while
  %20 = load i32, i32* %i
  %21 = call %"Array(Pointer(Void)).2"** @"~Fiber::stack_pool:read"()
  %22 = load %"Array(Pointer(Void)).2"*, %"Array(Pointer(Void)).2"** %21
  %23 = call i8* @"*Array(Pointer(Void))@Array(T)#pop:Pointer(Void)"(%"Array(Pointer(Void)).2"* %22)
  store i8* %23, i8** %stack
  %24 = load i8*, i8** %stack
  %25 = call i32 @munmap(i8* %24, i64 8388608)
  %26 = load i32, i32* %i
  %27 = add i32 %26, 1
  store i32 %27, i32* %i
  br label %while

exit3:                                            ; preds = %while
  ret void
}

; Function Attrs: uwtable
define internal i8* @"*Array(Pointer(Void))@Array(T)#pop:Pointer(Void)"(%"Array(Pointer(Void)).2"* %self) #0 {
alloca:
  %value = alloca i8*
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  %3 = call %IndexError* @"*IndexError::new:IndexError"()
  call void @"*raise<IndexError>:NoReturn"(%IndexError* %3)
  unreachable

else:                                             ; preds = %entry
  %4 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %5 = load i32, i32* %4
  %6 = sub i32 %5, 1
  %7 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  store i32 %6, i32* %7
  %8 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  %9 = load i8**, i8*** %8
  %10 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %11 = load i32, i32* %10
  %12 = call i8* @"*Pointer(Pointer(Void))@Pointer(T)#[]<Int32>:Pointer(Void)"(i8** %9, i32 %11)
  store i8* %12, i8** %value
  %13 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 3
  %14 = load i8**, i8*** %13
  %15 = getelementptr inbounds %"Array(Pointer(Void)).2", %"Array(Pointer(Void)).2"* %self, i32 0, i32 1
  %16 = load i32, i32* %15
  %17 = call i8** @"*Pointer(Pointer(Void))@Pointer(T)#+<Int32>:Pointer(Pointer(Void))"(i8** %14, i32 %16)
  call void @"*Pointer(Pointer(Void))@Pointer(T)#clear:Nil"(i8** %17)
  %18 = load i8*, i8** %value
  ret i8* %18
}

declare i32 @munmap(i8*, i64)

; Function Attrs: uwtable
define i32 @main(i32 %argc, i8** %argv) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %__temp_18 = alloca i32*
  %ex = alloca i32*
  %__temp_19 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32* null, i32** %__temp_18
  call void @"*GC::init:Nil"()
  invoke void @__crystal_main(i32 %argc, i8** %argv)
          to label %invoke_out unwind label %rescue

rescue:                                           ; preds = %entry
  %0 = landingpad %landing_pad
          cleanup
  %1 = extractvalue %landing_pad %0, 0
  %2 = extractvalue %landing_pad %0, 1
  br label %this_rescue

invoke_out:                                       ; preds = %entry
  br label %exit

exit:                                             ; preds = %this_rescue, %invoke_out
  %3 = phi i32 [ 0, %invoke_out ], [ 1, %this_rescue ]
  store i32 %3, i32* %__temp_19
  %4 = load i32, i32* %__temp_19
  call void @"*AtExitHandlers::run<Int32>:Nil"(i32 %4)
  %5 = load i32*, i32** %__temp_18
  %6 = icmp ne i32* %5, null
  br i1 %6, label %then, label %else

this_rescue:                                      ; preds = %rescue
  %7 = bitcast i8* %1 to %"struct.LibUnwind::Exception"*
  %8 = call i64 @__crystal_get_exception(%"struct.LibUnwind::Exception"* %7)
  %9 = inttoptr i64 %8 to i32*
  store i32* %9, i32** %ex
  %10 = load i32*, i32** %ex
  store i32* %10, i32** %__temp_18
  br label %exit

then:                                             ; preds = %exit
  %11 = load i32*, i32** %__temp_18
  %12 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %13 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %12
  %14 = call %"IO::FileDescriptor"* @"*Exception+@Exception#inspect_with_backtrace<IO::FileDescriptor>:IO::FileDescriptor"(i32* %11, %"IO::FileDescriptor"* %13)
  br label %exit1

else:                                             ; preds = %exit
  br label %exit1

exit1:                                            ; preds = %else, %then
  %15 = call %"IO::FileDescriptor"** @"~STDOUT:read"()
  %16 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %15
  %17 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %16)
  %18 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %19 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %18
  %20 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %19)
  %21 = load i32, i32* %__temp_19
  ret i32 %21
}

; Function Attrs: uwtable
define void @__crystal_raise_string(i8* %message) #0 {
entry:
  %0 = call %String* @"*String::new<Pointer(UInt8)>:String"(i8* %message)
  call void @"*raise<String>:NoReturn"(%String* %0)
  unreachable
}

; Function Attrs: uwtable
define internal i8* @"*GC::malloc<UInt64>:Pointer(Void)"(i64 %size) #0 {
entry:
  %0 = trunc i64 %size to i32
  %1 = call i8* @__crystal_malloc(i32 %0)
  ret i8* %1
}

; Function Attrs: uwtable
define internal void @"*GC::free<Pointer(Void)>:Nil"(i8* %pointer) #0 {
entry:
  call void @GC_free(i8* %pointer)
  ret void
}

declare void @GC_free(i8*)

; Function Attrs: uwtable
define void @__crystal_sigfault_handler(i32 %sig, i8* %addr) #0 {
entry:
  %0 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* bitcast ({ i32, i32, i32, [52 x i8] }* @"'Invalid memory acce...'" to %String*))
  %1 = call i32 (i8*, ...) @printf(i8* %0, i32 %sig, i8* %addr)
  %2 = call i32 @"*CallStack::print_backtrace:Int32"()
  call void @_exit(i32 %sig)
  unreachable
}

declare void @setup_sigfault_handler()

; Function Attrs: uwtable
define internal void @"*bar<Char, Char>:Nil"(i32 %_arg0, i32 %_arg1) #0 {
entry:
  call void @"*print<String, String>:Nil"(%String* bitcast ({ i32, i32, i32, [4 x i8] }* @"'bar'" to %String*), %String* bitcast ({ i32, i32, i32, [15 x i8] }* @"' called with: '" to %String*))
  call void @"*print<Char, String>:Nil"(i32 %_arg0, %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"' '" to %String*))
  call void @"*print<Char, String>:Nil"(i32 %_arg1, %String* bitcast ({ i32, i32, i32, [2 x i8] }* @"' '" to %String*))
  ret void
}

; Function Attrs: uwtable
define internal void @"*print<String, String>:Nil"(%String* %__temp_169, %String* %__temp_170) #0 {
alloca:
  %objects = alloca %"Tuple(String, String)"
  %0 = alloca %"Tuple(String, String)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %0, i32 0, i32 0
  store %String* %__temp_169, %String** %1
  %2 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %0, i32 0, i32 1
  store %String* %__temp_170, %String** %2
  %3 = load %"Tuple(String, String)", %"Tuple(String, String)"* %0
  store %"Tuple(String, String)" %3, %"Tuple(String, String)"* %objects
  %4 = call %"IO::FileDescriptor"** @"~STDOUT:read"()
  %5 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %4
  %6 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %objects, i32 0, i32 0
  %7 = load %String*, %String** %6
  %8 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %objects, i32 0, i32 1
  %9 = load %String*, %String** %8
  call void @"*IO::FileDescriptor@IO#print<String, String>:Nil"(%"IO::FileDescriptor"* %5, %String* %7, %String* %9)
  %10 = call %"IO::FileDescriptor"** @"~STDOUT:read"()
  %11 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %10
  %12 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %11)
  ret void
}

define internal %"IO::FileDescriptor"** @"~STDOUT:read"() {
entry:
  %0 = load i1, i1* @"STDOUT:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret %"IO::FileDescriptor"** @STDOUT

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"STDOUT:init"
  call void @"~STDOUT:init"()
  br label %initialized
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#print<String, String>:Nil"(%"IO::FileDescriptor"* %self, %String* %__temp_171, %String* %__temp_172) #0 {
alloca:
  %objects = alloca %"Tuple(String, String)"
  %0 = alloca %"Tuple(String, String)"
  %obj = alloca %String*
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %0, i32 0, i32 0
  store %String* %__temp_171, %String** %1
  %2 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %0, i32 0, i32 1
  store %String* %__temp_172, %String** %2
  %3 = load %"Tuple(String, String)", %"Tuple(String, String)"* %0
  store %"Tuple(String, String)" %3, %"Tuple(String, String)"* %objects
  %4 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %objects, i32 0, i32 0
  %5 = load %String*, %String** %4
  store %String* %5, %String** %obj
  %6 = load %String*, %String** %obj
  call void @"*IO::FileDescriptor@IO#print<String>:Nil"(%"IO::FileDescriptor"* %self, %String* %6)
  %7 = getelementptr inbounds %"Tuple(String, String)", %"Tuple(String, String)"* %objects, i32 0, i32 1
  %8 = load %String*, %String** %7
  store %String* %8, %String** %obj
  %9 = load %String*, %String** %obj
  call void @"*IO::FileDescriptor@IO#print<String>:Nil"(%"IO::FileDescriptor"* %self, %String* %9)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#print<String>:Nil"(%"IO::FileDescriptor"* %self, %String* %obj) #0 {
entry:
  %0 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<String>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, %String* %obj)
  ret void
}

; Function Attrs: uwtable
define internal void @"*print<Char, String>:Nil"(i32 %__temp_173, %String* %__temp_174) #0 {
alloca:
  %objects = alloca %"Tuple(Char, String)"
  %0 = alloca %"Tuple(Char, String)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Tuple(Char, String)", %"Tuple(Char, String)"* %0, i32 0, i32 0
  store i32 %__temp_173, i32* %1
  %2 = getelementptr inbounds %"Tuple(Char, String)", %"Tuple(Char, String)"* %0, i32 0, i32 1
  store %String* %__temp_174, %String** %2
  %3 = load %"Tuple(Char, String)", %"Tuple(Char, String)"* %0
  store %"Tuple(Char, String)" %3, %"Tuple(Char, String)"* %objects
  %4 = call %"IO::FileDescriptor"** @"~STDOUT:read"()
  %5 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %4
  %6 = getelementptr inbounds %"Tuple(Char, String)", %"Tuple(Char, String)"* %objects, i32 0, i32 0
  %7 = load i32, i32* %6
  %8 = getelementptr inbounds %"Tuple(Char, String)", %"Tuple(Char, String)"* %objects, i32 0, i32 1
  %9 = load %String*, %String** %8
  call void @"*IO::FileDescriptor@IO#print<Char, String>:Nil"(%"IO::FileDescriptor"* %5, i32 %7, %String* %9)
  %10 = call %"IO::FileDescriptor"** @"~STDOUT:read"()
  %11 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %10
  %12 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO::Buffered#flush:IO::FileDescriptor"(%"IO::FileDescriptor"* %11)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#print<Char, String>:Nil"(%"IO::FileDescriptor"* %self, i32 %__temp_175, %String* %__temp_176) #0 {
alloca:
  %objects = alloca %"Tuple(Char, String)"
  %0 = alloca %"Tuple(Char, String)"
  %obj = alloca %"(Char | String)"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = getelementptr inbounds %"Tuple(Char, String)", %"Tuple(Char, String)"* %0, i32 0, i32 0
  store i32 %__temp_175, i32* %1
  %2 = getelementptr inbounds %"Tuple(Char, String)", %"Tuple(Char, String)"* %0, i32 0, i32 1
  store %String* %__temp_176, %String** %2
  %3 = load %"Tuple(Char, String)", %"Tuple(Char, String)"* %0
  store %"Tuple(Char, String)" %3, %"Tuple(Char, String)"* %objects
  %4 = getelementptr inbounds %"Tuple(Char, String)", %"Tuple(Char, String)"* %objects, i32 0, i32 0
  %5 = load i32, i32* %4
  %6 = getelementptr inbounds %"(Char | String)", %"(Char | String)"* %obj, i32 0, i32 0
  store i32 148, i32* %6
  %7 = getelementptr inbounds %"(Char | String)", %"(Char | String)"* %obj, i32 0, i32 1
  %8 = bitcast [1 x i64]* %7 to i32*
  store i32 %5, i32* %8
  %9 = load %"(Char | String)", %"(Char | String)"* %obj
  call void @"*IO::FileDescriptor@IO#print<(Char | String)>:Nil"(%"IO::FileDescriptor"* %self, %"(Char | String)" %9)
  %10 = getelementptr inbounds %"Tuple(Char, String)", %"Tuple(Char, String)"* %objects, i32 0, i32 1
  %11 = load %String*, %String** %10
  %12 = getelementptr inbounds %"(Char | String)", %"(Char | String)"* %obj, i32 0, i32 0
  store i32 1, i32* %12
  %13 = getelementptr inbounds %"(Char | String)", %"(Char | String)"* %obj, i32 0, i32 1
  %14 = bitcast [1 x i64]* %13 to %String**
  store %String* %11, %String** %14
  %15 = load %"(Char | String)", %"(Char | String)"* %obj
  call void @"*IO::FileDescriptor@IO#print<(Char | String)>:Nil"(%"IO::FileDescriptor"* %self, %"(Char | String)" %15)
  ret void
}

; Function Attrs: uwtable
define internal void @"*IO::FileDescriptor@IO#print<(Char | String)>:Nil"(%"IO::FileDescriptor"* %self, %"(Char | String)" %obj) #0 {
alloca:
  %obj1 = alloca %"(Char | String)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Char | String)" %obj, %"(Char | String)"* %obj1
  %0 = load %"(Char | String)", %"(Char | String)"* %obj1
  %1 = call %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<(Char | String)>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, %"(Char | String)" %0)
  ret void
}

; Function Attrs: uwtable
define internal %"IO::FileDescriptor"* @"*IO::FileDescriptor@IO#<<<(Char | String)>:IO::FileDescriptor"(%"IO::FileDescriptor"* %self, %"(Char | String)" %obj) #0 {
alloca:
  %obj1 = alloca %"(Char | String)"
  %0 = alloca %"(IO::FileDescriptor | Int32 | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"(Char | String)" %obj, %"(Char | String)"* %obj1
  %1 = getelementptr inbounds %"(Char | String)", %"(Char | String)"* %obj1, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = icmp eq i32 148, %2
  br i1 %3, label %current_def, label %next_def

current_def:                                      ; preds = %entry
  %4 = getelementptr inbounds %"(Char | String)", %"(Char | String)"* %obj1, i32 0, i32 1
  %5 = bitcast [1 x i64]* %4 to i32*
  %6 = load i32, i32* %5
  %7 = call %"(IO::FileDescriptor | Int32 | Nil)" @"*Char#to_s<IO::FileDescriptor>:(IO::FileDescriptor | Int32 | Nil)"(i32 %6, %"IO::FileDescriptor"* %self)
  store %"(IO::FileDescriptor | Int32 | Nil)" %7, %"(IO::FileDescriptor | Int32 | Nil)"* %0
  br label %exit

next_def:                                         ; preds = %entry
  %8 = icmp eq i32 1, %2
  br i1 %8, label %current_def2, label %next_def3

exit:                                             ; preds = %current_def2, %current_def
  ret %"IO::FileDescriptor"* %self

current_def2:                                     ; preds = %next_def
  %9 = getelementptr inbounds %"(Char | String)", %"(Char | String)"* %obj1, i32 0, i32 1
  %10 = bitcast [1 x i64]* %9 to %String**
  %11 = load %String*, %String** %10
  call void @"*String#to_s<IO::FileDescriptor>:Nil"(%String* %11, %"IO::FileDescriptor"* %self)
  br label %exit

next_def3:                                        ; preds = %next_def
  unreachable
}

declare i8* @GC_malloc(i64)

declare i8* @GC_realloc(i8*, i64)

declare i64 @_Unwind_GetRegionStart(i8*)

declare i8* @_Unwind_GetLanguageSpecificData(i8*)

; Function Attrs: uwtable
define internal %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader" @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader::new<Pointer(UInt8)>:/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"(i8* %data) #0 {
alloca:
  %_ = alloca %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"
  %0 = alloca %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %0
  store %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader" %2, %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %_
  %3 = call i8* @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#initialize<Pointer(UInt8)>:Pointer(UInt8)"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %_, i8* %data)
  %4 = load %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %_
  ret %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader" %4
}

; Function Attrs: uwtable
define internal i8* @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#initialize<Pointer(UInt8)>:Pointer(UInt8)"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self, i8* %data) #0 {
entry:
  %0 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self, i32 0, i32 0
  store i8* %data, i8** %0
  ret i8* %data
}

; Function Attrs: uwtable
define internal i8 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint8:UInt8"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self) #0 {
alloca:
  %value = alloca i8
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self, i32 0, i32 0
  %1 = load i8*, i8** %0
  %2 = load i8, i8* %1
  store i8 %2, i8* %value
  %3 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self, i32 0, i32 0
  %4 = load i8*, i8** %3
  %5 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %4, i32 1)
  %6 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self, i32 0, i32 0
  store i8* %5, i8** %6
  %7 = load i8, i8* %value
  ret i8 %7
}

; Function Attrs: uwtable
define internal i64 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uleb128:UInt64"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self) #0 {
alloca:
  %result = alloca i64
  %shift = alloca i32
  %byte = alloca i8
  br label %entry

entry:                                            ; preds = %alloca
  store i64 0, i64* %result
  store i32 0, i32* %shift
  br label %while

while:                                            ; preds = %else, %entry
  br i1 true, label %body, label %exit

body:                                             ; preds = %while
  %0 = call i8 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint8:UInt8"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self)
  store i8 %0, i8* %byte
  %1 = load i64, i64* %result
  %2 = load i8, i8* %byte
  %3 = zext i8 %2 to i64
  %4 = and i64 127, %3
  %5 = load i32, i32* %shift
  %6 = call i64 @"*UInt64@Int#<<<Int32>:UInt64"(i64 %4, i32 %5)
  %7 = or i64 %1, %6
  store i64 %7, i64* %result
  %8 = load i8, i8* %byte
  %9 = and i8 %8, -128
  %10 = zext i8 %9 to i32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %then, label %else

exit:                                             ; preds = %then, %while
  %12 = load i64, i64* %result
  ret i64 %12

then:                                             ; preds = %body
  br label %exit

else:                                             ; preds = %body
  %13 = load i32, i32* %shift
  %14 = add i32 %13, 7
  store i32 %14, i32* %shift
  br label %while
}

; Function Attrs: uwtable
define internal i64 @"*UInt64@Int#<<<Int32>:UInt64"(i64 %self, i32 %count) #0 {
entry:
  %0 = icmp slt i32 %count, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call i32 @"*Int32@Int#abs:Int32"(i32 %count)
  %2 = call i64 @"*UInt64@Int#>><Int32>:UInt64"(i64 %self, i32 %1)
  br label %exit

else:                                             ; preds = %entry
  %3 = icmp slt i32 %count, 64
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i64 [ %2, %then ], [ %8, %exit3 ]
  ret i64 %4

then1:                                            ; preds = %else
  %5 = sext i32 %count to i64
  %6 = shl i64 %self, %5
  br label %exit3

else2:                                            ; preds = %else
  %7 = call i64 @"*UInt64@Number::zero:UInt64"()
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %8 = phi i64 [ %6, %then1 ], [ %7, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i64 @"*UInt64@Int#>><Int32>:UInt64"(i64 %self, i32 %count) #0 {
entry:
  %0 = icmp slt i32 %count, 0
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %1 = call i32 @"*Int32@Int#abs:Int32"(i32 %count)
  %2 = call i64 @"*UInt64@Int#<<<Int32>:UInt64"(i64 %self, i32 %1)
  br label %exit

else:                                             ; preds = %entry
  %3 = icmp slt i32 %count, 64
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi i64 [ %2, %then ], [ %8, %exit3 ]
  ret i64 %4

then1:                                            ; preds = %else
  %5 = sext i32 %count to i64
  %6 = lshr i64 %self, %5
  br label %exit3

else2:                                            ; preds = %else
  %7 = call i64 @"*UInt64@Number::zero:UInt64"()
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %8 = phi i64 [ %6, %then1 ], [ %7, %else2 ]
  br label %exit
}

; Function Attrs: uwtable
define internal i1 @"*Pointer(UInt8)@Comparable(T)#<<Pointer(UInt8)>:Bool"(i8* %self, i8* %other) #0 {
entry:
  %0 = call i32 @"*Pointer(UInt8)@Pointer(T)#<=><Pointer(UInt8)>:Int32"(i8* %self, i8* %other)
  %1 = icmp slt i32 %0, 0
  ret i1 %1
}

; Function Attrs: uwtable
define internal i32 @"*Pointer(UInt8)@Pointer(T)#<=><Pointer(UInt8)>:Int32"(i8* %self, i8* %other) #0 {
entry:
  %0 = ptrtoint i8* %self to i64
  %1 = ptrtoint i8* %other to i64
  %2 = call i32 @"*UInt64@Number#<=><UInt64>:Int32"(i64 %0, i64 %1)
  ret i32 %2
}

; Function Attrs: uwtable
define internal i32 @"*/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader#read_uint32:UInt32"(%"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self) #0 {
alloca:
  %value = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self, i32 0, i32 0
  %1 = load i8*, i8** %0
  %2 = bitcast i8* %1 to i32*
  %3 = load i32, i32* %2
  store i32 %3, i32* %value
  %4 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self, i32 0, i32 0
  %5 = load i8*, i8** %4
  %6 = call i8* @"*Pointer(UInt8)@Pointer(T)#+<Int32>:Pointer(UInt8)"(i8* %5, i32 4)
  %7 = getelementptr inbounds %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader", %"/usr/local/Cellar/crystal-lang/0.20.4/src/raise.cr::LEBReader"* %self, i32 0, i32 0
  store i8* %6, i8** %7
  %8 = load i32, i32* %value
  ret i32 %8
}

; Function Attrs: uwtable
define internal i1 @"*LibUnwind::Action@Enum#includes?<LibUnwind::Action>:Bool"(i32 %self, i32 %other) #0 {
entry:
  %0 = and i32 %self, %other
  %1 = icmp ne i32 %0, 0
  ret i1 %1
}

declare void @_Unwind_SetGR(i8*, i32, i64)

declare i64 @_Unwind_SetIP(i8*, i64)

declare i32 @_Unwind_RaiseException(%"struct.LibUnwind::Exception"*)

; Function Attrs: uwtable
define internal %String* @"*LibUnwind::ReasonCode@Enum#to_s:String"(i32 %self) #0 {
alloca:
  %__temp_167 = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  store i32 %self, i32* %__temp_167
  %0 = load i32, i32* %__temp_167
  %1 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 0, i32 %0)
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  br label %exit

else:                                             ; preds = %entry
  %2 = load i32, i32* %__temp_167
  %3 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 1, i32 %2)
  br i1 %3, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  %4 = phi %String* [ bitcast ({ i32, i32, i32, [10 x i8] }* @"'NO_REASON'" to %String*), %then ], [ %7, %exit3 ]
  ret %String* %4

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  %5 = load i32, i32* %__temp_167
  %6 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 2, i32 %5)
  br i1 %6, label %then4, label %else5

exit3:                                            ; preds = %exit6, %then1
  %7 = phi %String* [ bitcast ({ i32, i32, i32, [25 x i8] }* @"'FOREIGN_EXCEPTION_C...'" to %String*), %then1 ], [ %10, %exit6 ]
  br label %exit

then4:                                            ; preds = %else2
  br label %exit6

else5:                                            ; preds = %else2
  %8 = load i32, i32* %__temp_167
  %9 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 3, i32 %8)
  br i1 %9, label %then7, label %else8

exit6:                                            ; preds = %exit9, %then4
  %10 = phi %String* [ bitcast ({ i32, i32, i32, [19 x i8] }* @"'FATAL_PHASE2_ERROR'" to %String*), %then4 ], [ %13, %exit9 ]
  br label %exit3

then7:                                            ; preds = %else5
  br label %exit9

else8:                                            ; preds = %else5
  %11 = load i32, i32* %__temp_167
  %12 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 4, i32 %11)
  br i1 %12, label %then10, label %else11

exit9:                                            ; preds = %exit12, %then7
  %13 = phi %String* [ bitcast ({ i32, i32, i32, [19 x i8] }* @"'FATAL_PHASE1_ERROR'" to %String*), %then7 ], [ %16, %exit12 ]
  br label %exit6

then10:                                           ; preds = %else8
  br label %exit12

else11:                                           ; preds = %else8
  %14 = load i32, i32* %__temp_167
  %15 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 5, i32 %14)
  br i1 %15, label %then13, label %else14

exit12:                                           ; preds = %exit15, %then10
  %16 = phi %String* [ bitcast ({ i32, i32, i32, [12 x i8] }* @"'NORMAL_STOP'" to %String*), %then10 ], [ %19, %exit15 ]
  br label %exit9

then13:                                           ; preds = %else11
  br label %exit15

else14:                                           ; preds = %else11
  %17 = load i32, i32* %__temp_167
  %18 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 6, i32 %17)
  br i1 %18, label %then16, label %else17

exit15:                                           ; preds = %exit18, %then13
  %19 = phi %String* [ bitcast ({ i32, i32, i32, [13 x i8] }* @"'END_OF_STACK'" to %String*), %then13 ], [ %22, %exit18 ]
  br label %exit12

then16:                                           ; preds = %else14
  br label %exit18

else17:                                           ; preds = %else14
  %20 = load i32, i32* %__temp_167
  %21 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 7, i32 %20)
  br i1 %21, label %then19, label %else20

exit18:                                           ; preds = %exit21, %then16
  %22 = phi %String* [ bitcast ({ i32, i32, i32, [14 x i8] }* @"'HANDLER_FOUND'" to %String*), %then16 ], [ %25, %exit21 ]
  br label %exit15

then19:                                           ; preds = %else17
  br label %exit21

else20:                                           ; preds = %else17
  %23 = load i32, i32* %__temp_167
  %24 = call i1 @"*Int32@Object#===<Int32>:Bool"(i32 8, i32 %23)
  br i1 %24, label %then22, label %else23

exit21:                                           ; preds = %exit24, %then19
  %25 = phi %String* [ bitcast ({ i32, i32, i32, [16 x i8] }* @"'INSTALL_CONTEXT'" to %String*), %then19 ], [ %27, %exit24 ]
  br label %exit18

then22:                                           ; preds = %else20
  br label %exit24

else23:                                           ; preds = %else20
  %26 = call %String* @"*Int32@Int#to_s:String"(i32 %self)
  br label %exit24

exit24:                                           ; preds = %else23, %then22
  %27 = phi %String* [ bitcast ({ i32, i32, i32, [16 x i8] }* @"'CONTINUE_UNWIND'" to %String*), %then22 ], [ %26, %else23 ]
  br label %exit21
}

; Function Attrs: uwtable
define internal i32 @"*CallStack::print_backtrace:Int32"() #0 {
alloca:
  %backtrace_fn = alloca %"->"
  %rf = alloca %"CallStack::RepeatedFrame"
  %0 = alloca %"->"
  %1 = alloca %"CallStack::RepeatedFrame"
  br label %entry

entry:                                            ; preds = %alloca
  %2 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 0
  store i8* bitcast (i32 (i8*, i8*)* @"~procProc(Pointer(Void), Pointer(Void), LibUnwind::ReasonCode)@/usr/local/Cellar/crystal-lang/0.20.4/src/callstack.cr:106" to i8*), i8** %2
  %3 = getelementptr inbounds %"->", %"->"* %0, i32 0, i32 1
  store i8* null, i8** %3
  %4 = load %"->", %"->"* %0
  store %"->" %4, %"->"* %backtrace_fn
  %5 = call i8* @"*Pointer(Void)@Pointer(T)::null:Pointer(Void)"(i32 622)
  %6 = call %"CallStack::RepeatedFrame" @"*CallStack::RepeatedFrame::new<Pointer(Void)>:CallStack::RepeatedFrame"(i8* %5)
  store %"CallStack::RepeatedFrame" %6, %"CallStack::RepeatedFrame"* %1
  %7 = load %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %1
  store %"CallStack::RepeatedFrame" %7, %"CallStack::RepeatedFrame"* %rf
  %8 = load %"->", %"->"* %backtrace_fn
  %9 = call i8* @"~check_proc_is_not_closure"(%"->" %8)
  %10 = bitcast i8* %9 to i32 (i8*, i8*)*
  %11 = bitcast %"CallStack::RepeatedFrame"* %rf to i8*
  %12 = call i32 @_Unwind_Backtrace(i32 (i8*, i8*)* %10, i8* %11)
  %13 = load %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %rf
  %14 = call i32 @"*CallStack::print_frame<CallStack::RepeatedFrame>:Int32"(%"CallStack::RepeatedFrame" %13)
  ret i32 %14
}

; Function Attrs: uwtable
define internal i32 @"~procProc(Pointer(Void), Pointer(Void), LibUnwind::ReasonCode)@/usr/local/Cellar/crystal-lang/0.20.4/src/callstack.cr:106"(i8* %context, i8* %data) #0 {
alloca:
  %last_frame = alloca %"CallStack::RepeatedFrame"*
  %ip = alloca i8*
  %0 = alloca %"CallStack::RepeatedFrame"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast i8* %data to %"CallStack::RepeatedFrame"*
  store %"CallStack::RepeatedFrame"* %1, %"CallStack::RepeatedFrame"** %last_frame
  %2 = call i64 @_Unwind_GetIP(i8* %context)
  %3 = inttoptr i64 %2 to i8*
  store i8* %3, i8** %ip
  %4 = load %"CallStack::RepeatedFrame"*, %"CallStack::RepeatedFrame"** %last_frame
  %5 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %4, i32 0, i32 0
  %6 = load i8*, i8** %5
  %7 = load i8*, i8** %ip
  %8 = call i1 @"*Pointer(Void)@Comparable(T)#==<Pointer(Void)>:Bool"(i8* %6, i8* %7)
  br i1 %8, label %then, label %else

then:                                             ; preds = %entry
  %9 = load %"CallStack::RepeatedFrame"*, %"CallStack::RepeatedFrame"** %last_frame
  %10 = call i32 @"*CallStack::RepeatedFrame#incr:Int32"(%"CallStack::RepeatedFrame"* %9)
  br label %exit

else:                                             ; preds = %entry
  %11 = load %"CallStack::RepeatedFrame"*, %"CallStack::RepeatedFrame"** %last_frame
  %12 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %11, i32 0, i32 0
  %13 = load i8*, i8** %12
  %14 = ptrtoint i8* %13 to i64
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %then1, label %else2

exit:                                             ; preds = %exit3, %then
  ret i32 0

then1:                                            ; preds = %else
  br label %exit3

else2:                                            ; preds = %else
  %16 = load %"CallStack::RepeatedFrame"*, %"CallStack::RepeatedFrame"** %last_frame
  %17 = load %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %16
  %18 = call i32 @"*CallStack::print_frame<CallStack::RepeatedFrame>:Int32"(%"CallStack::RepeatedFrame" %17)
  br label %exit3

exit3:                                            ; preds = %else2, %then1
  %19 = load %"CallStack::RepeatedFrame"*, %"CallStack::RepeatedFrame"** %last_frame
  %20 = load i8*, i8** %ip
  %21 = call %"CallStack::RepeatedFrame" @"*CallStack::RepeatedFrame::new<Pointer(Void)>:CallStack::RepeatedFrame"(i8* %20)
  store %"CallStack::RepeatedFrame" %21, %"CallStack::RepeatedFrame"* %0
  %22 = load %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %0
  store %"CallStack::RepeatedFrame" %22, %"CallStack::RepeatedFrame"* %19
  br label %exit
}

; Function Attrs: uwtable
define internal i32 @"*CallStack::RepeatedFrame#incr:Int32"(%"CallStack::RepeatedFrame"* %self) #0 {
entry:
  %0 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %self, i32 0, i32 1
  %1 = load i32, i32* %0
  %2 = add i32 %1, 1
  %3 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %self, i32 0, i32 1
  store i32 %2, i32* %3
  ret i32 %2
}

; Function Attrs: uwtable
define internal i32 @"*CallStack::print_frame<CallStack::RepeatedFrame>:Int32"(%"CallStack::RepeatedFrame" %repeated_frame) #0 {
alloca:
  %frame = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  %__temp_168 = alloca %"Tuple(Int64, Pointer(UInt8)).16"
  %offset = alloca i64
  %sname = alloca i8*
  %repeated_frame1 = alloca %"CallStack::RepeatedFrame"
  %0 = alloca %"(Tuple(Int64, Pointer(UInt8)) | Nil)"
  br label %entry

entry:                                            ; preds = %alloca
  store %"CallStack::RepeatedFrame" %repeated_frame, %"CallStack::RepeatedFrame"* %repeated_frame1
  %1 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 0
  %2 = load i8*, i8** %1
  %3 = call %"(Tuple(Int64, Pointer(UInt8)) | Nil)" @"*CallStack::decode_frame<Pointer(Void)>:(Tuple(Int64, Pointer(UInt8)) | Nil)"(i8* %2)
  store %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %3, %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %0
  %4 = load %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %0
  store %"(Tuple(Int64, Pointer(UInt8)) | Nil)" %4, %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %frame
  %5 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %frame, i32 0, i32 0
  %6 = load i32, i32* %5
  %7 = icmp eq i32 %6, 0
  %8 = xor i1 %7, true
  %9 = and i1 true, %8
  br i1 %9, label %then, label %else

then:                                             ; preds = %entry
  %10 = getelementptr inbounds %"(Tuple(Int64, Pointer(UInt8)) | Nil)", %"(Tuple(Int64, Pointer(UInt8)) | Nil)"* %frame, i32 0, i32 1
  %11 = bitcast [2 x i64]* %10 to %"Tuple(Int64, Pointer(UInt8)).16"*
  %12 = load %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %11
  store %"Tuple(Int64, Pointer(UInt8)).16" %12, %"Tuple(Int64, Pointer(UInt8)).16"* %__temp_168
  %13 = getelementptr inbounds %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %__temp_168, i32 0, i32 0
  %14 = load i64, i64* %13
  store i64 %14, i64* %offset
  %15 = getelementptr inbounds %"Tuple(Int64, Pointer(UInt8)).16", %"Tuple(Int64, Pointer(UInt8)).16"* %__temp_168, i32 0, i32 1
  %16 = load i8*, i8** %15
  store i8* %16, i8** %sname
  %17 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 1
  %18 = load i32, i32* %17
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %then2, label %else3

else:                                             ; preds = %entry
  %20 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 1
  %21 = load i32, i32* %20
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %then5, label %else6

then2:                                            ; preds = %then
  %23 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* bitcast ({ i32, i32, i32, [15 x i8] }* @"'[%ld] %s +%ld\0A'" to %String*))
  %24 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 0
  %25 = load i8*, i8** %24
  %26 = load i8*, i8** %sname
  %27 = load i64, i64* %offset
  %28 = call i32 (i8*, ...) @printf(i8* %23, i8* %25, i8* %26, i64 %27)
  br label %exit

else3:                                            ; preds = %then
  %29 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* bitcast ({ i32, i32, i32, [27 x i8] }* @"'[%ld] %s +%ld (%ld ...'" to %String*))
  %30 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 0
  %31 = load i8*, i8** %30
  %32 = load i8*, i8** %sname
  %33 = load i64, i64* %offset
  %34 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 1
  %35 = load i32, i32* %34
  %36 = add i32 %35, 1
  %37 = call i32 (i8*, ...) @printf(i8* %29, i8* %31, i8* %32, i64 %33, i32 %36)
  br label %exit

exit:                                             ; preds = %else3, %then2
  %38 = phi i32 [ %28, %then2 ], [ %37, %else3 ]
  br label %exit4

exit4:                                            ; preds = %exit7, %exit
  %39 = phi i32 [ %38, %exit ], [ %51, %exit7 ]
  ret i32 %39

then5:                                            ; preds = %else
  %40 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* bitcast ({ i32, i32, i32, [11 x i8] }* @"'[%ld] ???\0A'" to %String*))
  %41 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 0
  %42 = load i8*, i8** %41
  %43 = call i32 (i8*, ...) @printf(i8* %40, i8* %42)
  br label %exit7

else6:                                            ; preds = %else
  %44 = call i8* @"*String#to_unsafe:Pointer(UInt8)"(%String* bitcast ({ i32, i32, i32, [23 x i8] }* @"'[%ld] ??? (%ld time...'" to %String*))
  %45 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 0
  %46 = load i8*, i8** %45
  %47 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %repeated_frame1, i32 0, i32 1
  %48 = load i32, i32* %47
  %49 = add i32 %48, 1
  %50 = call i32 (i8*, ...) @printf(i8* %44, i8* %46, i32 %49)
  br label %exit7

exit7:                                            ; preds = %else6, %then5
  %51 = phi i32 [ %43, %then5 ], [ %50, %else6 ]
  br label %exit4
}

; Function Attrs: uwtable
define internal %"CallStack::RepeatedFrame" @"*CallStack::RepeatedFrame::new<Pointer(Void)>:CallStack::RepeatedFrame"(i8* %ip) #0 {
alloca:
  %_ = alloca %"CallStack::RepeatedFrame"
  %0 = alloca %"CallStack::RepeatedFrame"
  br label %entry

entry:                                            ; preds = %alloca
  %1 = bitcast %"CallStack::RepeatedFrame"* %0 to i8*
  call void @llvm.memset.p0i8.i32(i8* %1, i8 0, i32 ptrtoint (%"CallStack::RepeatedFrame"* getelementptr (%"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* null, i32 1) to i32), i32 4, i1 false)
  %2 = load %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %0
  store %"CallStack::RepeatedFrame" %2, %"CallStack::RepeatedFrame"* %_
  %3 = call i32 @"*CallStack::RepeatedFrame#initialize<Pointer(Void)>:Int32"(%"CallStack::RepeatedFrame"* %_, i8* %ip)
  %4 = load %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %_
  ret %"CallStack::RepeatedFrame" %4
}

; Function Attrs: uwtable
define internal i32 @"*CallStack::RepeatedFrame#initialize<Pointer(Void)>:Int32"(%"CallStack::RepeatedFrame"* %self, i8* %ip) #0 {
entry:
  %0 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %self, i32 0, i32 0
  store i8* %ip, i8** %0
  %1 = getelementptr inbounds %"CallStack::RepeatedFrame", %"CallStack::RepeatedFrame"* %self, i32 0, i32 1
  store i32 0, i32* %1
  ret i32 0
}

; Function Attrs: uwtable
define internal i32 @"*LibUnwind::ReasonCode@Enum#to_i32:Int32"(i32 %self) #0 {
entry:
  ret i32 %self
}

; Function Attrs: noreturn
declare void @exit(i32) #6

declare i8* @GC_malloc_atomic(i64)

; Function Attrs: uwtable
define internal void @"*GC::init:Nil"() #0 {
entry:
  call void @GC_set_handle_fork(i32 1)
  call void @GC_init()
  ret void
}

declare void @GC_set_handle_fork(i32)

declare void @GC_init()

; Function Attrs: uwtable
define internal void @"*AtExitHandlers::run<Int32>:Nil"(i32 %status) #0 personality i32 (i32, i32, i64, %"struct.LibUnwind::Exception"*, i8*)* @__crystal_personality {
alloca:
  %__arg0 = alloca %"Array(Proc(Int32, Nil))"*
  %__arg03 = alloca %"Array(Proc(Int32, Nil))"*
  %handler = alloca %"->"
  %handler_ex = alloca i32*
  %i = alloca i32
  %to = alloca i32
  %x = alloca i32
  br label %entry

entry:                                            ; preds = %alloca
  %0 = call i1* @"~AtExitHandlers::running:read"()
  %1 = load i1, i1* %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %entry
  ret void

else:                                             ; preds = %entry
  %2 = call i1* @"~AtExitHandlers::running:read"()
  store i1 true, i1* %2
  %3 = load %"Array(Proc(Int32, Nil))"*, %"Array(Proc(Int32, Nil))"** @"AtExitHandlers::handlers"
  %4 = icmp eq %"Array(Proc(Int32, Nil))"* %3, null
  %5 = select i1 %4, i32 0, i32 17
  %6 = icmp eq i32 0, %5
  br i1 %6, label %current_def, label %next_def

current_def:                                      ; preds = %else
  br label %exit

next_def:                                         ; preds = %else
  %7 = icmp eq i32 17, %5
  br i1 %7, label %current_def1, label %next_def2

exit:                                             ; preds = %exit4, %current_def
  ret void

current_def1:                                     ; preds = %next_def
  store %"Array(Proc(Int32, Nil))"* %3, %"Array(Proc(Int32, Nil))"** %__arg03
  %8 = load %"Array(Proc(Int32, Nil))"*, %"Array(Proc(Int32, Nil))"** %__arg03
  %9 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %8, i32 0, i32 1
  %10 = load i32, i32* %9
  %11 = sub i32 %10, 1
  store i32 0, i32* %to
  store i32 %11, i32* %x
  br label %while

next_def2:                                        ; preds = %next_def
  unreachable

while:                                            ; preds = %exit7, %current_def1
  %12 = load i32, i32* %x
  %13 = load i32, i32* %to
  %14 = icmp sge i32 %12, %13
  br i1 %14, label %body, label %exit4

body:                                             ; preds = %while
  %15 = load i32, i32* %x
  store i32 %15, i32* %i
  %16 = load i32, i32* %i
  %17 = call %"->" @"*Array(Proc(Int32, Nil))@Array(T)#unsafe_at<Int32>:Proc(Int32, Nil)"(%"Array(Proc(Int32, Nil))"* %8, i32 %16)
  store %"->" %17, %"->"* %handler
  %18 = load %"->", %"->"* %handler
  %19 = extractvalue %"->" %18, 0
  %20 = extractvalue %"->" %18, 1
  %21 = icmp eq i8* %20, null
  br i1 %21, label %ctx_is_null, label %ctx_is_not_null

exit4:                                            ; preds = %while
  br label %exit

rescue:                                           ; preds = %ctx_is_not_null, %ctx_is_null
  %22 = landingpad %landing_pad
          cleanup
  %23 = extractvalue %landing_pad %22, 0
  %24 = extractvalue %landing_pad %22, 1
  br label %this_rescue

ctx_is_null:                                      ; preds = %body
  %25 = bitcast i8* %19 to %Nil (i32)*
  %26 = invoke %Nil %25(i32 %status)
          to label %invoke_out unwind label %rescue

ctx_is_not_null:                                  ; preds = %body
  %27 = bitcast i8* %19 to %Nil (i8*, i32)*
  %28 = invoke %Nil %27(i8* %20, i32 %status)
          to label %invoke_out6 unwind label %rescue

invoke_out:                                       ; preds = %ctx_is_null
  br label %exit5

exit5:                                            ; preds = %invoke_out6, %invoke_out
  br label %exit7

invoke_out6:                                      ; preds = %ctx_is_not_null
  br label %exit5

exit7:                                            ; preds = %this_rescue, %exit5
  %29 = load i32, i32* %x
  %30 = sub i32 %29, 1
  store i32 %30, i32* %x
  br label %while

this_rescue:                                      ; preds = %rescue
  %31 = bitcast i8* %23 to %"struct.LibUnwind::Exception"*
  %32 = call i64 @__crystal_get_exception(%"struct.LibUnwind::Exception"* %31)
  %33 = inttoptr i64 %32 to i32*
  store i32* %33, i32** %handler_ex
  %34 = call %"IO::FileDescriptor"** @"~STDERR:read"()
  %35 = load %"IO::FileDescriptor"*, %"IO::FileDescriptor"** %34
  %36 = call %"String::Builder"* @"*String::Builder::new:String::Builder"()
  %37 = call %"String::Builder"* @"*String::Builder@IO#<<<String>:String::Builder"(%"String::Builder"* %36, %String* bitcast ({ i32, i32, i32, [32 x i8] }* @"'Error running at_ex...'" to %String*))
  %38 = load i32*, i32** %handler_ex
  %39 = call %"String::Builder"* @"*String::Builder@IO#<<<Exception+>:String::Builder"(%"String::Builder"* %37, i32* %38)
  %40 = call %String* @"*String::Builder#to_s:String"(%"String::Builder"* %39)
  call void @"*IO::FileDescriptor@IO#puts<String>:Nil"(%"IO::FileDescriptor"* %35, %String* %40)
  br label %exit7
}

define internal i1* @"~AtExitHandlers::running:read"() {
entry:
  %0 = load i1, i1* @"AtExitHandlers::running:init"
  br i1 %0, label %initialized, label %not_initialized

initialized:                                      ; preds = %not_initialized, %entry
  ret i1* @"AtExitHandlers::running"

not_initialized:                                  ; preds = %entry
  store i1 true, i1* @"AtExitHandlers::running:init"
  call void @"~AtExitHandlers::running:init"()
  br label %initialized
}

; Function Attrs: alwaysinline uwtable
define internal %"->" @"*Array(Proc(Int32, Nil))@Array(T)#unsafe_at<Int32>:Proc(Int32, Nil)"(%"Array(Proc(Int32, Nil))"* %self, i32 %index) #4 {
entry:
  %0 = getelementptr inbounds %"Array(Proc(Int32, Nil))", %"Array(Proc(Int32, Nil))"* %self, i32 0, i32 3
  %1 = load %"->"*, %"->"** %0
  %2 = call %"->" @"*Pointer(Proc(Int32, Nil))@Pointer(T)#[]<Int32>:Proc(Int32, Nil)"(%"->"* %1, i32 %index)
  ret %"->" %2
}

; Function Attrs: uwtable
define internal %"->" @"*Pointer(Proc(Int32, Nil))@Pointer(T)#[]<Int32>:Proc(Int32, Nil)"(%"->"* %self, i32 %offset) #0 {
entry:
  %0 = call %"->"* @"*Pointer(Proc(Int32, Nil))@Pointer(T)#+<Int32>:Pointer(Proc(Int32, Nil))"(%"->"* %self, i32 %offset)
  %1 = load %"->", %"->"* %0
  ret %"->" %1
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*String::Builder@IO#<<<Exception+>:String::Builder"(%"String::Builder"* %self, i32* %obj) #0 {
entry:
  %0 = call %"String::Builder"* @"*Exception+@Exception#to_s<String::Builder>:String::Builder"(i32* %obj, %"String::Builder"* %self)
  ret %"String::Builder"* %self
}

; Function Attrs: uwtable
define internal %"String::Builder"* @"*Exception+@Exception#to_s<String::Builder>:String::Builder"(i32* %self, %"String::Builder"* %io) #0 {
entry:
  %0 = bitcast i32* %self to %Exception*
  %1 = getelementptr inbounds %Exception, %Exception* %0, i32 0, i32 1
  %2 = load %String*, %String** %1
  %3 = call %"String::Builder"* @"*String::Builder@IO#<<<(String | Nil)>:String::Builder"(%"String::Builder"* %io, %String* %2)
  ret %"String::Builder"* %3
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #7

attributes #0 = { uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" }
attributes #1 = { noreturn uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noinline uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" }
attributes #4 = { alwaysinline uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" }
attributes #5 = { naked noinline uwtable "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" }
attributes #6 = { noreturn }
attributes #7 = { nounwind }
